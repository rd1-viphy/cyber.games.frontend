System.register("chunks:///_virtual/account.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06821TsxIxP96M4Yxg/0KcE", "account", undefined); // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: account.proto
      /* eslint-disable */
      var protobufPackage = exports('protobufPackage', "protos");
      var Vendor = exports('Vendor', /*#__PURE__*/function (Vendor) {
        Vendor[Vendor["Dev"] = 0] = "Dev";
        Vendor[Vendor["Prod"] = 1] = "Prod";
        Vendor[Vendor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return Vendor;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetMgr.ts", ['cc', './GameConfig.ts'], function (exports) {
  var cclegacy, Prefab, assetManager, SpriteFrame, JsonAsset, sp, resources, GameConfig;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      JsonAsset = module.JsonAsset;
      sp = module.sp;
      resources = module.resources;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4235cnaUQhBd5qagzSoM0IP", "AssetMgr", undefined);
      var AssetsMgr = exports('AssetsMgr', /*#__PURE__*/function () {
        function AssetsMgr() {}
        /**
         * 同步加载预制体
         * @param loadPath 预制体加载路径
         * @param bundle 预制体加载路径的Bundle模块
         * @returns Promise<Prefab>
         */
        AssetsMgr.loadPrefab = function loadPrefab(loadPath, bundle) {
          var _this = this;
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            var _bundle;
            (_bundle = bundle) == null || _bundle.load(loadPath, Prefab, function (err, prefab) {
              if (err) {
                console.log(err);
                return;
              }
              _this.prefabList.push(prefab);
              resolve(prefab);
            });
          });
        }

        /**
         * 加载bundle包
         * @param bundleName bundle包名
         * @returns Promise<AssetManager.Bundle>
         */;
        AssetsMgr.loadBundle = function loadBundle(bundleName) {
          var _this2 = this;
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(bundleName, function (completedCount, totalCount) {}, function (err, bundle) {
              if (err) {
                console.log(err);
                resolve(null);
                return;
              }
              _this2.bundleList.push({
                key: bundleName,
                bundle: bundle
              });
              resolve(bundle);
            });
          });
        }

        /**
         * 通过bundleName获取bundle包
         * @param bundleName bundle名
         * @returns bundle包
         */;
        AssetsMgr.getBundleByName = function getBundleByName(bundleName) {
          var info = this.bundleList.find(function (item) {
            return item.key === bundleName;
          });
          return info ? info.bundle : null;
        }

        /**
         * 加载bundle包下的文件夹一般用来加载一个文件下所有的预制体
         * @param bundle 加载的bundle包名
         * @param finderName 包下的文件夹名
         * @returns Promise<Asset[]>
         */;
        AssetsMgr.loadDir = function loadDir(bundle, finderName) {
          return new Promise(function (resolve, reject) {
            bundle.loadDir(finderName, function (completedCount, totalCount, item) {}, function (err, assts) {
              if (err) {
                console.log(err);
              }
              resolve(assts);
            });
          });
        }

        /**
         * 
         * @param bundle bundle包
         * @param sceneName 场景名
         * @returns Promise<SceneAsset>
         */;
        AssetsMgr.loadScene = function loadScene(bundle, sceneName) {
          return new Promise(function (resolve, reject) {
            bundle.loadScene("scene/" + sceneName, function (completedCount, totalCount, item) {}, function (err, assts) {
              if (err) {
                console.log(err);
              }
              resolve(assts);
            });
          });
        }

        /**
         * 同步加载图资源
         * @param loadPath 预制体加载路径
         * @param bundle 预制体加载路径的Bundle模块
         * @returns Promise<SpriteFrame>
         */;
        AssetsMgr.loadSpriteFrame = function loadSpriteFrame(loadPath, bundle) {
          var _this3 = this;
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            var _bundle2;
            (_bundle2 = bundle) == null || _bundle2.load(loadPath, SpriteFrame, function (err, spriteFrame) {
              if (err) {
                console.log(err);
                return;
              }
              _this3.sptiteFrameList.push(spriteFrame);
              resolve(spriteFrame);
            });
          });
        }

        /**
         * 加载Json
         * @param path 加载路径
         * @param bundle 加载的资源包 默认为 resources
         * @returns 返回加载的json
         */;
        AssetsMgr.loadWithJson = function loadWithJson(path, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            bundle.load(path, JsonAsset, function (err, jsonAset) {
              if (err) {
                console.log(err);
                return;
              }
              resolve(jsonAset == null ? void 0 : jsonAset.json);
            });
          });
        }

        /**
         * 加载Json
         * @param path 加载路径
         * @param bundle 加载的资源包 默认为 resources
         * @returns 返回加载的json
         */;
        AssetsMgr.loadSkeletonData = function loadSkeletonData(path, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            bundle.load(path, sp.SkeletonData, function (err, data) {
              if (err) {
                console.log(err);
                return;
              }
              resolve(data);
            });
          });
        }

        /**
         * 通过uuid加载资源
         * @param uuid uuid
         * @returns 
         */;
        AssetsMgr.loadAnyByUuid = function loadAnyByUuid(uuid) {
          return new Promise(function (resolve, reject) {
            assetManager.loadAny(uuid, function (err, data) {
              if (err) {
                console.log(err);
                return;
              }
              resolve(data);
            });
          });
        }

        /**
         * 释放引用的prefab       
         * @param prefabName 
         */;
        AssetsMgr.releasePrefab = function releasePrefab(prefabName) {
          var prefab = this.prefabList.find(function (element) {
            return element.name == prefabName;
          });
          prefab == null || prefab.decRef();
          this.prefabList.filter(function (element) {
            return element.name != prefabName;
          });
        }
        /**
         * 加载远程的json文件
         * @param jsonName 
         */;
        AssetsMgr.loadRemoteJson = function loadRemoteJson(jsonName, cb) {
          assetManager.loadRemote(GameConfig.HTTP_URL + jsonName, function (err, jsonAset) {
            if (err) {
              console.error("load romate json err", jsonName);
              return;
            }
            cb(jsonAset == null ? void 0 : jsonAset.json);
          });
        };
        AssetsMgr.releaseAssetForPath = function releaseAssetForPath(path, bundleName) {
          var bundle = assetManager.getBundle(bundleName);
          if (bundle) {
            var asset = bundle.get(path);
            this.releaseAsset(asset);
          }
        };
        AssetsMgr.preloadRes = function preloadRes(path, bundleName) {
          var bundle = assetManager.getBundle(bundleName);
          bundle.preload(path);
        };
        AssetsMgr.releaseAsset = function releaseAsset(asset) {
          if (asset) {
            var assetRes = assetManager.assets.get(asset._uuid);
            assetManager.releaseAsset(assetRes);
          }
        };
        return AssetsMgr;
      }());
      /**预制体列表 */
      AssetsMgr.prefabList = [];
      /**精灵体列表 */
      AssetsMgr.sptiteFrameList = [];
      /** bundleList加载包的资源列表 */
      AssetsMgr.bundleList = [];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ClientEnum.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, assetManager, AudioClip, sys, Component, AudioConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      assetManager = module.assetManager;
      AudioClip = module.AudioClip;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      AudioConst = module.AudioConst;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "869d4haqJNNVKA5TRaD4HMt", "AudioManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AudioManager = exports('AudioManager', (_dec = ccclass('AudioManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioManager, _Component);
        function AudioManager() {
          return _Component.apply(this, arguments) || this;
        }
        // init AudioManager in GameRoot component.
        AudioManager.init = function init(musicAudioSource, soundAudioSource) {
          log('Init AudioManager !');
          AudioManager._musicAudioSource = musicAudioSource;
          AudioManager._soundAudioSource = soundAudioSource;
          var musicVolume = this.getMusicVolume();
          var soundVolume = this.getSoundVolume();
          if (!Number.isNaN(musicVolume)) {
            log("current music vlume===", musicVolume);
            this.setMusicVolume(musicVolume);
          }
          if (!Number.isNaN(soundVolume)) {
            log("current sound vlume===", soundVolume);
            this.setSoundVolume(soundVolume);
          }
        };
        AudioManager.playMusic = function playMusic(name, bundleName) {
          if (bundleName === void 0) {
            bundleName = "resources";
          }
          if (this.getMusicVolume() > 0) {
            var bundle = assetManager.getBundle(bundleName);
            var audioSource = AudioManager._musicAudioSource;
            audioSource.stop();
            var path = "sound/" + name;
            var cachedAudioClip = AudioManager._cachedAudioClipMap[path];
            if (cachedAudioClip) {
              audioSource.clip = cachedAudioClip;
              audioSource.play();
            } else {
              bundle == null || bundle.load(path, AudioClip, function (err, clip) {
                if (err) {
                  console.warn(err);
                  return;
                }
                AudioManager._cachedAudioClipMap[path] = clip;
                audioSource.clip = clip;
                audioSource.play();
              });
            }
          }
        };
        AudioManager.playSound = function playSound(name, bundleName, isLoop) {
          if (bundleName === void 0) {
            bundleName = "resources";
          }
          if (isLoop === void 0) {
            isLoop = false;
          }
          if (this.getSoundVolume()) {
            var bundle = assetManager.getBundle(bundleName);
            var audioSource = AudioManager._soundAudioSource;
            var path = "sound/" + name;
            var cachedAudioClip = AudioManager._cachedAudioClipMap[path];
            if (cachedAudioClip) {
              if (isLoop) {
                audioSource.loop = isLoop;
                audioSource.clip = cachedAudioClip;
                audioSource.play();
              } else {
                audioSource.playOneShot(cachedAudioClip, 1);
              }
            } else {
              bundle == null || bundle.load(path, AudioClip, function (err, clip) {
                if (err) {
                  console.warn(err);
                  return;
                }
                AudioManager._cachedAudioClipMap[path] = clip;
                audioSource.loop = isLoop;
                if (isLoop) {
                  audioSource.clip = clip;
                  audioSource.play();
                } else {
                  audioSource.playOneShot(clip, 1);
                }
              });
            }
          }
        };
        AudioManager.setMusicVolume = function setMusicVolume(volume) {
          this._musicVolume = volume;
          sys.localStorage.setItem(AudioConst.MusicStorage, volume.toString());
          //刷新当前背景音乐音量
          var audioSource = AudioManager._musicAudioSource;
          audioSource.volume = volume;
        };
        AudioManager.setSoundVolume = function setSoundVolume(volume) {
          this._soundVolume = volume;
          sys.localStorage.setItem(AudioConst.SoundStorage, volume.toString());
          var audioSource = AudioManager._soundAudioSource;
          audioSource.volume = volume;
        };
        AudioManager.getMusicVolume = function getMusicVolume() {
          var volume = parseFloat(sys.localStorage.getItem(AudioConst.MusicStorage));
          if (!Number.isNaN(volume)) {
            return volume;
          } else {
            return 1;
          }
        };
        AudioManager.getSoundVolume = function getSoundVolume() {
          var volume = parseFloat(sys.localStorage.getItem(AudioConst.SoundStorage));
          if (!Number.isNaN(volume)) {
            return volume;
          } else {
            return 1;
          }
        };
        AudioManager.getMusicAudioClipName = function getMusicAudioClipName() {
          var _audioSource$clip;
          var audioSource = AudioManager._musicAudioSource;
          return (_audioSource$clip = audioSource.clip) == null ? void 0 : _audioSource$clip.name;
        };
        AudioManager.stopSoundPlay = function stopSoundPlay(SoundName) {
          var audioSource = AudioManager._soundAudioSource;
          if (audioSource.clip && audioSource.clip.name == SoundName) {
            log("stop audio==", audioSource.clip.name);
            audioSource.stop();
          }
        };
        AudioManager.stopAllSound = function stopAllSound() {
          var audioSoundSource = AudioManager._soundAudioSource;
          audioSoundSource.stop();
        };
        return AudioManager;
      }(Component), _class2._musicAudioSource = void 0, _class2._soundAudioSource = void 0, _class2._cachedAudioClipMap = {}, _class2._musicVolume = 1, _class2._soundVolume = 1, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioRoot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioSource, director, Component, AudioManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "87654OMBdFOlaLfzbRVEAgH", "AudioRoot", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AudioRoot = exports('AudioRoot', (_dec = ccclass('AudioRoot'), _dec2 = property(AudioSource), _dec3 = property(AudioSource), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioRoot, _Component);
        function AudioRoot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "musicAudioSource", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "soundAudioSource", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AudioRoot.prototype;
        _proto.start = function start() {
          // 声明常驻根节点，该节点不会在场景切换中被销毁。目标节点必须是根节点，否则无效。
          director.addPersistRootNode(this.node);

          // 将节点封装到管理器中
          AudioManager.init(this.musicAudioSource, this.soundAudioSource);
        };
        return AudioRoot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicAudioSource", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "soundAudioSource", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseAllCardVerifyInfoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './VerifyCardItem.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _asyncToGenerator, cclegacy, _decorator, Node, Prefab, v3, Layout, instantiate, BaseTableView, VerifyCardItem, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      v3 = module.v3;
      Layout = module.Layout;
      instantiate = module.instantiate;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      VerifyCardItem = module.VerifyCardItem;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "c3dc5GFdoRBKJd8OjVKnW4N", "BaseAllCardVerifyInfoView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseAllCardVerifyInfoView = exports('BaseAllCardVerifyInfoView', (_dec = ccclass('BaseAllCardVerifyInfoView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseAllCardVerifyInfoView, _BaseTableView);
        function BaseAllCardVerifyInfoView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "descriptionNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cardShowLayout", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "arrowNode", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cardPrafab", _descriptor4, _assertThisInitialized(_this));
          _this.gameTable = void 0;
          return _this;
        }
        var _proto = BaseAllCardVerifyInfoView.prototype;
        _proto.initView = function initView() {};
        _proto.updateView = function updateView() {};
        _proto.showAllCardVerifyInfo = function showAllCardVerifyInfo() {
          this.show();
          //this.refreshCardShowLayout();
          this.cardsLoad();
        };
        _proto.showDescriptionBtnClicked = function showDescriptionBtnClicked() {
          this.descriptionNode.active = !this.descriptionNode.active;
          var scaleY = this.descriptionNode.active ? 1 : -1;
          this.arrowNode.scale = v3(1, scaleY, 1);
          this.descriptionNode.parent.getComponent(Layout).updateLayout();
        };
        _proto.refreshCardShowLayout = function refreshCardShowLayout() {
          var _this2 = this;
          var openedCards = this.gameTable.tableModel.openedCards;
          var unOpenedCards = this.gameTable.tableModel.unOpenedCards;
          this.cardShowLayout.removeAllChildren();
          openedCards.forEach(function (card) {
            var cardNode = instantiate(_this2.cardPrafab);
            cardNode.getComponent(VerifyCardItem).disCard(card);
            cardNode.getComponent(VerifyCardItem).setCard(card);
            _this2.cardShowLayout.addChild(cardNode);
          });
          unOpenedCards.forEach(function (card) {
            var cardNode = instantiate(_this2.cardPrafab);
            cardNode.getComponent(VerifyCardItem).disCard(card);
            _this2.cardShowLayout.addChild(cardNode);
          });
        };
        _proto.cardsLoad = /*#__PURE__*/function () {
          var _cardsLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var openedCards, unOpenedCards;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.cardShowLayout.removeAllChildren();
                  openedCards = this.gameTable.tableModel.openedCards;
                  unOpenedCards = this.gameTable.tableModel.unOpenedCards;
                  _context.next = 5;
                  return Utils.executePreFrame(this._getItemGenerator(openedCards, false), 1, this);
                case 5:
                  _context.next = 7;
                  return Utils.executePreFrame(this._getItemGenerator(unOpenedCards, true), 1, this);
                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function cardsLoad() {
            return _cardsLoad.apply(this, arguments);
          }
          return cardsLoad;
        }();
        _proto._getItemGenerator = /*#__PURE__*/_regeneratorRuntime().mark(function _getItemGenerator(cards, isShowBack) {
          var i, cardInfo;
          return _regeneratorRuntime().wrap(function _getItemGenerator$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                i = 0;
              case 1:
                if (!(i < cards.length)) {
                  _context2.next = 8;
                  break;
                }
                cardInfo = cards[i];
                _context2.next = 5;
                return this._initItem(cardInfo, isShowBack);
              case 5:
                i++;
                _context2.next = 1;
                break;
              case 8:
              case "end":
                return _context2.stop();
            }
          }, _getItemGenerator, this);
        });
        _proto._initItem = function _initItem(cardInfo, isShowBack) {
          var cardNode = instantiate(this.cardPrafab);
          cardNode.getComponent(VerifyCardItem).disCard(cardInfo);
          if (!isShowBack) {
            cardNode.getComponent(VerifyCardItem).setCard(cardInfo);
          }
          this.cardShowLayout.addChild(cardNode);
        };
        return BaseAllCardVerifyInfoView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "descriptionNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cardShowLayout", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "arrowNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cardPrafab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseAutoSettingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseTableView;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0e83cVdtpJD+otYlzjR1TR2", "BaseAutoSettingView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseAutoSettingView = exports('BaseAutoSettingView', (_dec = ccclass('BaseAutoSettingView'), _dec(_class = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseAutoSettingView, _BaseTableView);
        function BaseAutoSettingView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          return _this;
        }
        var _proto = BaseAutoSettingView.prototype;
        _proto.initView = function initView() {
          throw new Error('Method not implemented.');
        };
        _proto.updateView = function updateView() {
          throw new Error('Method not implemented.');
        };
        return BaseAutoSettingView;
      }(BaseTableView)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseCardVerifyView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './CardItem.ts', './Utils.ts', './BaseAllCardVerifyInfoView.ts', './GlobalData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Button, BaseTableView, CardItem, Utils, BaseAllCardVerifyInfoView, GlobalEvent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      CardItem = module.CardItem;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      BaseAllCardVerifyInfoView = module.BaseAllCardVerifyInfoView;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "23b7d7+yHBD4bxUJkhpHtvt", "BaseCardVerifyView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseCardVerifyView = exports('BaseCardVerifyView', (_dec = ccclass('BaseCardVerifyView'), _dec2 = property([CardItem]), _dec3 = property([Label]), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseCardVerifyView, _BaseTableView);
        function BaseCardVerifyView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          _initializerDefineProperty(_this, "verfyCards", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "orderLabels", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cardPointCardLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "advanceCardPointCodeLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "varifypointAndPasswordLabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "verifyButton", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "verifySucNode", _descriptor7, _assertThisInitialized(_this));
          _this.regeistEvents = [{
            eventName: GlobalEvent.EVENT_GAME_SHOW_VERIFY_INFO,
            method: _this.showCardVerifyInfo,
            caller: _assertThisInitialized(_this)
          }];
          return _this;
        }
        var _proto = BaseCardVerifyView.prototype;
        _proto.initView = function initView() {};
        _proto.updateView = function updateView() {
          this.hide();
        };
        // protected onLoad(): void {
        //     Emitter.on(GlobalEvent.EVENT_GAME_SHOW_VERIFY_INFO, this.showCardVerifyInfo, this);
        // }
        _proto.showCardVerifyInfo = function showCardVerifyInfo(cardInfo) {
          var _this2 = this;
          this.show();
          this.gameTable.getView(BaseAllCardVerifyInfoView).hide();
          this.verfyCards.forEach(function (card, index) {
            card.setCard(cardInfo, !Boolean(cardInfo.value));
            _this2.orderLabels[index].string = "" + cardInfo.index;
          });
          this.verifyButton.getComponent(Button).interactable = Boolean(cardInfo.value);
          this.cardPointCardLabel.string = cardInfo.name ? cardInfo.name.toString() : '開牌後顯示點數代碼';
          this.advanceCardPointCodeLabel.string = cardInfo.hash;
          this.varifypointAndPasswordLabel.string = cardInfo.hash;
        };
        _proto.btnClicked = function btnClicked(_, btnName) {
          switch (btnName) {
            case 'verify':
              this.verifyButton.active = false;
              this.verifySucNode.active = true;
              break;
            case 'reset':
              this.verifyButton.active = true;
              this.verifySucNode.active = false;
              break;
            case 'lookAll':
              this.hide();
              this.gameTable.getView(BaseAllCardVerifyInfoView).showAllCardVerifyInfo();
              break;
            case 'copy1':
              Utils.copyToClipboard(this.cardPointCardLabel.string);
              break;
            case 'copy2':
              Utils.copyToClipboard(this.advanceCardPointCodeLabel.string);
              break;
            case 'copy3':
              Utils.copyToClipboard(this.varifypointAndPasswordLabel.string);
              break;
          }
        }

        // public onDestroy(): void {
        //     Emitter.off(GlobalEvent.EVENT_GAME_SHOW_VERIFY_INFO, this.showCardVerifyInfo);
        // }
        ;

        return BaseCardVerifyView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "verfyCards", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "orderLabels", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cardPointCardLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "advanceCardPointCodeLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "varifypointAndPasswordLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "verifyButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "verifySucNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseChipSettingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './SetChipItem.ts', './NumberFormatUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BaseTableView, SetChipItem, NumberFormatUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      SetChipItem = module.SetChipItem;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "9f6e69Sc6tCNonuCRRJwujt", "BaseChipSettingView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseChipSettingView = exports('BaseChipSettingView', (_dec = ccclass('BaseChipSettingView'), _dec2 = property([SetChipItem]), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseChipSettingView, _BaseTableView);
        function BaseChipSettingView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          _initializerDefineProperty(_this, "setChipItems", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BaseChipSettingView.prototype;
        _proto.initView = function initView() {};
        _proto.updateView = function updateView() {};
        _proto.onEnable = function onEnable() {
          this.setChipsInfo(this.gameTable.tableModel.selectBetChipGroup);
        };
        _proto.setChipsInfo = function setChipsInfo(selectBetChipGroup) {
          this.setChipItems.forEach(function (item, index) {
            item.setChipInfo(selectBetChipGroup[index]);
          });
        };
        _proto.sureBet = function sureBet() {
          var chipVlues = [];
          var newChip = [];
          this.setChipItems.forEach(function (item, index) {
            chipVlues.push(item.getChipNum());
          });
          chipVlues.sort(function (a, b) {
            return a - b;
          });
          chipVlues.forEach(function (item, index) {
            newChip.push(NumberFormatUtil.formatMoneyToString(item));
          });
          this.gameTable.tableModel.selectBetChipGroup = newChip;
          this.hide();
        };
        return BaseChipSettingView;
      }(BaseTableView), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "setChipItems", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseGameTale.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, BaseGameTale;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      BaseGameTale = module.BaseGameTale;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "63348zzW/ZEkoA+ksC6t0sH", "BaseGame", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseGame = exports('BaseGame', (_dec = ccclass('BaseGame'), _dec2 = property({
        type: BaseGameTale
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseGame, _Component);
        function BaseGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tables", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        return BaseGame;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tables", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseGameTale.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableController.ts', './BaseTableModel.ts', './StateMachineManager.ts', './BaseTableProxy.ts', './BaseTableView.ts', './GameChatView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, StateMachineManager, BaseTableView, GameChatView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null, null, function (module) {
      StateMachineManager = module.StateMachineManager;
    }, null, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      GameChatView = module.GameChatView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "0d874l+Dc5MT4CXyKe+RAQK", "BaseGameTale", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseGameTale = exports('BaseGameTale', (_dec = ccclass('BaseGameTale'), _dec2 = property({
        type: GameChatView
      }), _dec3 = property({
        type: [BaseTableView]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseGameTale, _Component);
        function BaseGameTale() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "gameChatView", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tableViews", _descriptor2, _assertThisInitialized(_this));
          _this.stateMachineManager = null;
          return _this;
        }
        var _proto = BaseGameTale.prototype;
        _proto.onLoad = function onLoad() {
          this.tableController.init(this);
          this.tableModel.init(this);
          this.tableProxy.init(this);
          this.gameChatView.init(this);
          this.stateMachineManager = new StateMachineManager(this);
          this.initializationGameView();
          this.regeistStatus();
          this.tableController.startGame();
        };
        _proto.regeistStatus = function regeistStatus() {
          for (var index = 0; index < this.states.length; index++) {
            var stateInfo = this.states[index];
            this.stateMachineManager.registerState(stateInfo.stateCode, stateInfo.state);
          }
        };
        _proto.initializationGameView = function initializationGameView() {
          var _this2 = this;
          this.tableViews.forEach(function (view) {
            view.init(_this2);
          });
        };
        _proto.initView = function initView() {
          this.tableViews.forEach(function (view) {
            view.initView();
          });
        };
        _proto.updateView = function updateView() {
          this.tableViews.forEach(function (view) {
            view.updateView();
          });
        };
        _proto.getView = function getView(ctor) {
          return this.tableViews.find(function (view) {
            return view instanceof ctor;
          });
        };
        return BaseGameTale;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameChatView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tableViews", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseMainGameView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './Logger.ts', './BaseMenuView.ts', './BaseChipSettingView.ts', './BaseAutoSettingView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Label, BaseTableView, Logger, BaseMenuView, BaseChipSettingView, BaseAutoSettingView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      BaseMenuView = module.BaseMenuView;
    }, function (module) {
      BaseChipSettingView = module.BaseChipSettingView;
    }, function (module) {
      BaseAutoSettingView = module.BaseAutoSettingView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "9fd79cIvF5Mjpl9jxMOEoxS", "BaseMainGameView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseMainGameView = exports('BaseMainGameView', (_dec = ccclass('BaseMainGameView'), _dec2 = property(Node), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseMainGameView, _BaseTableView);
        function BaseMainGameView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "betOpreateBtnsNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "betOpreateBtns", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "coinLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "betLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadNode", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BaseMainGameView.prototype;
        _proto.onLoad = function onLoad() {
          _BaseTableView.prototype.onLoad.call(this);
          this.loadNode.active = true;
        };
        _proto.opreateBtnsClicked = function opreateBtnsClicked(_, data) {
          Logger.logNet(data + " btn is clicked");
          switch (data) {
            case 'bet':
              {
                if (this.gameTable.tableModel.isCanBet) {
                  this.sendBetData();
                }
                break;
              }
            case 'cancle':
              {
                this.cancleBetData();
                break;
              }
            case 'again':
              {
                this.againBetData();
                break;
              }
            case 'menu':
              this.gameTable.getView(BaseMenuView).show();
              break;
            case 'chipSetting':
              this.gameTable.getView(BaseChipSettingView).show();
              break;
            case 'autoSetting':
              this.gameTable.getView(BaseAutoSettingView).show();
              break;
          }
        };
        _proto.showOpreateNode = function showOpreateNode(isShow) {
          this.betOpreateBtnsNode.active = isShow;
        };
        _proto.refreshBtnState = function refreshBtnState(btnIndex, isTouch) {
          var btn = this.betOpreateBtns[btnIndex];
          btn.interactable = isTouch;
        };
        _proto.hideLoadNode = function hideLoadNode() {
          this.loadNode.active = false;
        };
        return BaseMainGameView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "betOpreateBtnsNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "betOpreateBtns", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "coinLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loadNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseMenuView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './PlayerMgr.ts', './BaseSoundSettingView.ts', './BaseRecordView.ts', './BaseAutoSettingView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, BaseTableView, PlayerMgr, BaseSoundSettingView, BaseRecordView, BaseAutoSettingView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      PlayerMgr = module.default;
    }, function (module) {
      BaseSoundSettingView = module.BaseSoundSettingView;
    }, function (module) {
      BaseRecordView = module.BaseRecordView;
    }, function (module) {
      BaseAutoSettingView = module.BaseAutoSettingView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "252fcqB+mRNA5H/LgIln2hy", "BaseMenuView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseMenuView = exports('BaseMenuView', (_dec = ccclass('BaseMenuView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseMenuView, _BaseTableView);
        function BaseMenuView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          _initializerDefineProperty(_this, "userNameLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tableNameLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roundNumLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "limitLabel", _descriptor4, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BaseMenuView.prototype;
        _proto.initView = function initView() {
          //this.hide();
        };
        _proto.updateView = function updateView() {};
        _proto.showTableInfo = function showTableInfo(tableName, roundId, limit) {
          this.userNameLabel.string = PlayerMgr.instance.nickname;
          this.tableNameLabel.string = tableName;
          this.roundNumLabel.string = roundId.toString();
          this.limitLabel.string = limit.toString();
        };
        _proto.optionBtnClick = function optionBtnClick(_, touchName) {
          switch (touchName) {
            case 'home':
              break;
            case 'leave':
              break;
            case 'record':
              this.gameTable.getView(BaseRecordView).show();
              break;
            case 'autoSetting':
              this.gameTable.getView(BaseAutoSettingView).show();
              break;
            case 'soundSetting':
              this.gameTable.getView(BaseSoundSettingView).show();
              break;
          }
          this.hide();
        };
        return BaseMenuView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "userNameLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tableNameLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roundNumLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "limitLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseRecordView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseTableView;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "44622h8ZLpH+YtYDzLF23GG", "BaseRecordView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseRecordView = exports('BaseRecordView', (_dec = ccclass('BaseRecordView'), _dec(_class = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseRecordView, _BaseTableView);
        function BaseRecordView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          return _this;
        }
        var _proto = BaseRecordView.prototype;
        _proto.initView = function initView() {};
        _proto.updateView = function updateView() {};
        return BaseRecordView;
      }(BaseTableView)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseRoadMapView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseTableView;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "33859j68MxNmYcqYAZJyHC5", "BaseRoadMapView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseRoadMapView = exports('BaseRoadMapView', (_dec = ccclass('BaseRoadMapView'), _dec(_class = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseRoadMapView, _BaseTableView);
        function BaseRoadMapView() {
          return _BaseTableView.apply(this, arguments) || this;
        }
        return BaseRoadMapView;
      }(BaseTableView)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseSoundSettingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseTableView;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f2329dT2X5KH610Jtr8/BnR", "BaseSoundSettingView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseSoundSettingView = exports('BaseSoundSettingView', (_dec = ccclass('BaseSoundSettingView'), _dec(_class = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseSoundSettingView, _BaseTableView);
        function BaseSoundSettingView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _this.gameTable = void 0;
          return _this;
        }
        var _proto = BaseSoundSettingView.prototype;
        _proto.initView = function initView() {};
        _proto.updateView = function updateView() {};
        return BaseSoundSettingView;
      }(BaseTableView)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseState.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07b11G3/fNJzJbu2ccO/rWz", "BaseState", undefined);
      /**
       * 状态机基类
       */
      var BaseState = exports('BaseState', /*#__PURE__*/function () {
        function BaseState() {
          this.manager = null;
          this.gameTable = null;
          this.statCode = void 0;
        }
        var _proto = BaseState.prototype;
        /**
         * 设置状态机管理器
         * @param manager 状态机管理器实例
         */
        _proto.setManager = function setManager(manager, statCode, gameTable) {
          this.manager = manager;
          this.statCode = statCode;
          this.gameTable = gameTable;
        }

        /**
         * 状态进入
         */;
        return BaseState;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableBetView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './BetChipItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, BaseTableView, BetChipItem;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      BetChipItem = module.BetChipItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "af6d3M7qdVDhLxorqn+VzbR", "BaseTableBetView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableBetView = exports('BaseTableBetView', (_dec = ccclass('BaseTableBetView'), _dec2 = property([BetChipItem]), _dec3 = property([Node]), _dec4 = property([Button]), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseTableBetView, _BaseTableView);
        function BaseTableBetView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "betChipList", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "areaLightList", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "betAreaButton", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        return BaseTableBetView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "betChipList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "areaLightList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "betAreaButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableCardView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './CardItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BaseTableView, CardItem;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      CardItem = module.CardItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "adb65O6GZNEyZLvrWoAy1HK", "BaseTableCardView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableCardView = exports('BaseTableCardView', (_dec = ccclass('BaseTableCardView'), _dec2 = property({
        type: CardItem
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseTableCardView, _BaseTableView);
        function BaseTableCardView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cards", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        return BaseTableCardView;
      }(BaseTableView), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "cards", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableChipView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts', './ChipItem.ts', './NumberFormatUtil.ts', './GlobalData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BaseTableView, ChipItem, NumberFormatUtil, GlobalEvent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }, function (module) {
      ChipItem = module.ChipItem;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "f7ecflqGu1AMZZs+JcwJcIu", "BaseTableChipView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableChipView = exports('BaseTableChipView', (_dec = ccclass('BaseTableChipView'), _dec2 = property([ChipItem]), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseTableChipView, _BaseTableView);
        function BaseTableChipView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "betChips", _descriptor, _assertThisInitialized(_this));
          _this.regeistEvents = [{
            eventName: GlobalEvent.EVENT_GAME_UPDATE_CHIPS,
            method: _this.refreshCoinValue,
            caller: _assertThisInitialized(_this)
          }];
          return _this;
        }
        var _proto = BaseTableChipView.prototype;
        _proto.refreshCoinValue = function refreshCoinValue() {
          var _this2 = this;
          this.betChips.forEach(function (chip, index) {
            chip.showChipNum(NumberFormatUtil.formatMoneyToNumber(_this2.gameTable.tableModel.selectBetChipGroup[index]));
          });
        };
        _proto.chipToggleClicked = function chipToggleClicked(_, data) {
          var index = ~~data;
          if (index >= 0) {
            this.gameTable.tableModel.selectBetChipIndex = index;
          }
        };
        return BaseTableChipView;
      }(BaseTableView), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "betChips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "8a6457D0/xIlbEn1OGEZV2b", "BaseTableController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableController = exports('BaseTableController', (_dec = ccclass('BaseTableController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseTableController, _Component);
        function BaseTableController() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = BaseTableController.prototype;
        _proto.init = function init(gameTable) {
          this.gameTable = gameTable;
        };
        return BaseTableController;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableModel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Emitter.ts', './GlobalData.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, Emitter, GlobalEvent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Emitter = module.Emitter;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "65d88vIU11NnKQCLPKeZJUK", "BaseTableModel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableModel = exports('BaseTableModel', (_dec = ccclass('BaseTableModel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseTableModel, _Component);
        function BaseTableModel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._tableId = 0;
          /**選擇籌碼組 */
          _this._selectBetChipGroup = [];
          /**選擇籌碼下標 */
          _this._selectBetChipIndex = 0;
          /**已開的牌 */
          _this._openedCards = [];
          /**未開的牌 */
          _this._unOpenedCards = [];
          return _this;
        }
        var _proto = BaseTableModel.prototype;
        _proto.init = function init(gameTable) {
          this.gameTable = gameTable;
        };
        _proto.refreshAllCardsOpenStatus = function refreshAllCardsOpenStatus(roundOpenedCards) {
          var _this2 = this;
          this.openedCards = this.gameTable.tableModel.openedCards;
          this.unOpenedCards = this.gameTable.tableModel.unOpenedCards;
          var roundOpenedCardsList = roundOpenedCards.bankerCards.concat(roundOpenedCards.playerCards);
          roundOpenedCardsList.forEach(function (card) {
            var index = _this2.unOpenedCards.findIndex(function (item) {
              return item.hash === card.hash;
            });
            if (index !== -1) {
              _this2.unOpenedCards.splice(index, 1);
              _this2.openedCards.push(card);
            }
          });
        };
        _createClass(BaseTableModel, [{
          key: "tableId",
          get: function get() {
            return this._tableId;
          },
          set: function set(value) {
            this._tableId = value;
          }
        }, {
          key: "selectBetChipGroup",
          get: function get() {
            return this._selectBetChipGroup;
          },
          set: function set(value) {
            this._selectBetChipGroup = value;
            Emitter.emit(GlobalEvent.EVENT_GAME_UPDATE_CHIPS);
          }
        }, {
          key: "selectBetChipIndex",
          get: function get() {
            return this._selectBetChipIndex;
          },
          set: function set(value) {
            this._selectBetChipIndex = value;
          }
        }, {
          key: "openedCards",
          get: function get() {
            return this._openedCards;
          },
          set: function set(value) {
            this._openedCards = value;
          }
        }, {
          key: "unOpenedCards",
          get: function get() {
            return this._unOpenedCards;
          },
          set: function set(value) {
            this._unOpenedCards = value;
          }
        }]);
        return BaseTableModel;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Emitter.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, Emitter;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Emitter = module.Emitter;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5ce37Xf3TZE5YiM75q+7rXN", "BaseTableProxy", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableProxy = exports('BaseTableProxy', (_dec = ccclass('BaseTableProxy'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseTableProxy, _Component);
        function BaseTableProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listenerFunMap = new Map();
          return _this;
        }
        var _proto = BaseTableProxy.prototype;
        _proto.init = function init(gameTable) {
          this.gameTable = gameTable;
          this.listenerGameEvents();
        };
        _proto.listenerGameEvents = function listenerGameEvents() {
          var _this2 = this;
          //@ts-ignore 
          Object.values(this.serverInterfaces).forEach(function (value) {
            _this2.listenerFunMap.set(value, _this2.processServerMsg.bind(_this2, value));
            Emitter.on(value, _this2.listenerFunMap.get(value), _this2);
          });
        };
        _proto.onDestroy = function onDestroy() {
          this.listenerFunMap.forEach(function (value, key) {
            Emitter.off(key, value);
          });
        };
        return BaseTableProxy;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableSettleView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, BaseTableView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "1a84dCunkNPu7yp+tiU5/KZ", "BaseTableSettleView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableSettleView = exports('BaseTableSettleView', (_dec = ccclass('BaseTableSettleView'), _dec2 = property(Node), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseTableSettleView, _BaseTableView);
        function BaseTableSettleView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "selfResultNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roundResultLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "selfResultLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "selfGradeLabel", _descriptor4, _assertThisInitialized(_this));
          return _this;
        }
        return BaseTableSettleView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "selfResultNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "roundResultLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "selfResultLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "selfGradeLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableTipView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, BaseTableView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      BaseTableView = module.BaseTableView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "be6d9fsnwlBi4W6x1zPjUAj", "BaseTableTipView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableTipView = exports('BaseTableTipView', (_dec = ccclass('BaseTableTipView'), _dec2 = property(Node), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableView) {
        _inheritsLoose(BaseTableTipView, _BaseTableView);
        function BaseTableTipView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseTableView.call.apply(_BaseTableView, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tipNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tipLabel", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BaseTableTipView.prototype;
        _proto.hideTip = function hideTip() {
          this.tipNode.active = false;
        };
        _proto.showTipInfo = function showTipInfo(tipString) {
          return;
        };
        _proto.showTip = function showTip() {
          this.tipNode.active = true;
        };
        return BaseTableTipView;
      }(BaseTableView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tipNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tipLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Emitter.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, Emitter;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Emitter = module.Emitter;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "899b0qRVrpKAKa2/Ck/5iv2", "BaseTableView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseTableView = exports('BaseTableView', (_dec = ccclass('BaseTableView'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseTableView, _Component);
        function BaseTableView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.regeistEvents = [];
          return _this;
        }
        var _proto = BaseTableView.prototype;
        _proto.init = function init(gameTable) {
          this.gameTable = gameTable;
        };
        _proto.onLoad = function onLoad() {
          for (var index = 0; index < this.regeistEvents.length; index++) {
            var event = this.regeistEvents[index];
            Emitter.on(event.eventName, event.method, this);
            console.log('regeist event', event.eventName);
          }
        };
        _proto.onDestroy = function onDestroy() {
          for (var index = 0; index < this.regeistEvents.length; index++) {
            var event = this.regeistEvents[index];
            Emitter.off(event.eventName, event.method);
          }
        };
        _proto.show = function show() {
          this.node.active = true;
        };
        _proto.hide = function hide() {
          this.node.active = false;
        };
        return BaseTableView;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bc_baccarat.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82e03bqh2dIK5SFM6uvJ02S", "bc_baccarat", undefined); // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: bc_baccarat/bc_baccarat.proto
      /* eslint-disable */
      var protobufPackage = exports('protobufPackage', "protos.bc_baccarat");

      /** 区块链百家乐的游戏阶段 */
      var Phase = exports('Phase', /*#__PURE__*/function (Phase) {
        Phase[Phase["Prepare"] = 0] = "Prepare";
        Phase[Phase["DealCards"] = 1] = "DealCards";
        Phase[Phase["Betting"] = 2] = "Betting";
        Phase[Phase["StopBet"] = 3] = "StopBet";
        Phase[Phase["OpenCards"] = 4] = "OpenCards";
        Phase[Phase["Settle"] = 5] = "Settle";
        Phase[Phase["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return Phase;
      }({}));

      /** 下注分类 */
      var BetType = exports('BetType', /*#__PURE__*/function (BetType) {
        BetType[BetType["Draw"] = 0] = "Draw";
        BetType[BetType["BankerNoFee"] = 1] = "BankerNoFee";
        BetType[BetType["Banker"] = 2] = "Banker";
        BetType[BetType["Player"] = 3] = "Player";
        BetType[BetType["BankerPair"] = 4] = "BankerPair";
        BetType[BetType["PlayerPair"] = 5] = "PlayerPair";
        BetType[BetType["Big"] = 6] = "Big";
        BetType[BetType["Small"] = 7] = "Small";
        BetType[BetType["BankerOdd"] = 8] = "BankerOdd";
        BetType[BetType["BankerEven"] = 9] = "BankerEven";
        BetType[BetType["PlayerOdd"] = 10] = "PlayerOdd";
        BetType[BetType["PlayerEven"] = 11] = "PlayerEven";
        BetType[BetType["Super6"] = 12] = "Super6";
        BetType[BetType["BankerDragon"] = 13] = "BankerDragon";
        BetType[BetType["PlayerDragon"] = 14] = "PlayerDragon";
        BetType[BetType["BankerNatural"] = 15] = "BankerNatural";
        BetType[BetType["PlayerNatural"] = 16] = "PlayerNatural";
        BetType[BetType["Pair"] = 17] = "Pair";
        BetType[BetType["PerfectPair"] = 18] = "PerfectPair";
        BetType[BetType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return BetType;
      }({}));
      var WinnerType = exports('WinnerType', /*#__PURE__*/function (WinnerType) {
        WinnerType[WinnerType["WinnerDraw"] = 0] = "WinnerDraw";
        WinnerType[WinnerType["WinnerBanker"] = 1] = "WinnerBanker";
        WinnerType[WinnerType["WinnerPlayer"] = 2] = "WinnerPlayer";
        WinnerType[WinnerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return WinnerType;
      }({}));

      /** 庄免佣获胜扩展类型 */
      var BankerNoFeeWinnerType = exports('BankerNoFeeWinnerType', /*#__PURE__*/function (BankerNoFeeWinnerType) {
        BankerNoFeeWinnerType[BankerNoFeeWinnerType["Normal"] = 0] = "Normal";
        BankerNoFeeWinnerType[BankerNoFeeWinnerType["BankerNoFeeWin6"] = 1] = "BankerNoFeeWin6";
        BankerNoFeeWinnerType[BankerNoFeeWinnerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return BankerNoFeeWinnerType;
      }({}));

      /** 超 6 获胜扩展类型 */
      var Super6WinnerType = exports('Super6WinnerType', /*#__PURE__*/function (Super6WinnerType) {
        Super6WinnerType[Super6WinnerType["Win2"] = 0] = "Win2";
        Super6WinnerType[Super6WinnerType["Win3"] = 1] = "Win3";
        Super6WinnerType[Super6WinnerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return Super6WinnerType;
      }({}));

      /** 庄/闲龙宝获胜扩展类型 */
      var DragonWinnerType = exports('DragonWinnerType', /*#__PURE__*/function (DragonWinnerType) {
        DragonWinnerType[DragonWinnerType["DragonNaturalDraw"] = 0] = "DragonNaturalDraw";
        DragonWinnerType[DragonWinnerType["DragonNatural"] = 1] = "DragonNatural";
        DragonWinnerType[DragonWinnerType["DragonWin4"] = 2] = "DragonWin4";
        DragonWinnerType[DragonWinnerType["DragonWin5"] = 3] = "DragonWin5";
        DragonWinnerType[DragonWinnerType["DragonWin6"] = 4] = "DragonWin6";
        DragonWinnerType[DragonWinnerType["DragonWin7"] = 5] = "DragonWin7";
        DragonWinnerType[DragonWinnerType["DragonWin8"] = 6] = "DragonWin8";
        DragonWinnerType[DragonWinnerType["DragonWin9"] = 7] = "DragonWin9";
        DragonWinnerType[DragonWinnerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return DragonWinnerType;
      }({}));

      /** 庄闲下注统计 */

      /** 桌子状态 */

      /** 桌子列表请求 */

      /** 桌子列表响应 */

      /** 入桌请求 */

      /** 入桌响应 */

      /** 离桌请求 */

      /** 离桌响应 */

      /** 下注请求 */

      /** 下注结果 */

      /** 下注响应 */

      /** 他人有下注行为的推送 */

      /** 桌子进入整备状态 */

      /** 发牌信息 */

      /** 桌子进入发牌状态 */

      /** 桌子进入押注状态 */

      /** 桌子停止押注状态 */

      /** 押注检查结果 */

      /** 开牌信息 */

      /** 桌子进入开牌状态 */

      /** 桌子进入结算状态 */

      /** 玩家的一条下注及结算信息 */

      /** 玩家个人的结算信息 */

      /** 玩家个人的结算推送消息 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bc_niuniu.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3eb08Gazt9PPK8KxeH0k9Ah", "bc_niuniu", undefined);
      // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: bc_niuniu/bc_niuniu.proto

      /* eslint-disable */

      var protobufPackage = exports('protobufPackage', "protos.bc_niuniu");

      /** 区块链牛牛的游戏阶段 */
      var Phase = exports('Phase', /*#__PURE__*/function (Phase) {
        Phase[Phase["Prepare"] = 0] = "Prepare";
        Phase[Phase["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return Phase;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetChipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NumberFormatUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, SpriteFrame, Sprite, Component, NumberFormatUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "192317PpetJZanXmE6lMmD/", "BetChipItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BetChipItem = exports('BetChipItem', (_dec = ccclass('BetChipItem'), _dec2 = property(Label), _dec3 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BetChipItem, _Component);
        function BetChipItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "betLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spriteFrames", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BetChipItem.prototype;
        _proto.showBetNum = function showBetNum(betNum, chipIndex) {
          this.betLabel.string = NumberFormatUtil.formatChipNum(betNum);
          if (this.node && this.spriteFrames[chipIndex]) {
            this.node.getComponent(Sprite).spriteFrame = this.spriteFrames[chipIndex];
          }
        };
        return BetChipItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bigRoad.ts", ['cc', './roadFragment.ts', './dragonIncubatePool.ts', './roadInfo.ts', './bc_baccarat.ts'], function (exports) {
  var cclegacy, RoadFragment, DragonIncubatePool, ColorType, WinnerType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      RoadFragment = module.RoadFragment;
    }, function (module) {
      DragonIncubatePool = module.DragonIncubatePool;
    }, function (module) {
      ColorType = module.ColorType;
    }, function (module) {
      WinnerType = module.WinnerType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "466671WEbhKWbPhomEeyrZV", "bigRoad", undefined);
      /** 大路盘处理状态 */
      var BigRoadState = exports('BigRoadState', /*#__PURE__*/function () {
        function BigRoadState(rowCount) {
          this.fragments = void 0;
          this.rowCount = void 0;
          this.accumulateDrawCount = void 0;
          this.currentCells = void 0;
          this.prevWinnerType = void 0;
          this.dragonIncubatePool = void 0;
          this.fragments = [];
          this.rowCount = rowCount;
          this.accumulateDrawCount = 0;
          this.currentCells = [];
          this.prevWinnerType = undefined;
          this.dragonIncubatePool = new DragonIncubatePool();
        }
        var _proto = BigRoadState.prototype;
        _proto.process = function process(roadInfo) {
          if (this.prevWinnerType !== undefined) {
            // 非首次开盘
            if (roadInfo.winnerType != WinnerType.WinnerDraw) {
              // 记录此前平局数至上次最后插入的单元格，并重置平局数计数
              if (this.accumulateDrawCount > 0) {
                var pos = this.currentCells.length - 1;
                this.currentCells[pos].drawCount = this.accumulateDrawCount;
                this.accumulateDrawCount = 0;
              }

              // 类型判断
              if (roadInfo.winnerType === this.prevWinnerType) {
                return this.appendCell(roadInfo, roadInfo.winnerType, true);
              } else {
                // 开始新路时，化龙池下沉
                this.dragonIncubatePool.sink();

                // 结束前一路，并开始新的一路
                var fragment = new RoadFragment(this.rowCount - this.dragonIncubatePool.len(), this.currentCells.slice());

                // 如果刚刚结束的这一路是条长龙，则检查是否降低下一片段的行拐点
                var dragonLength = fragment.dragonLength();
                if (dragonLength > 0) {
                  this.dragonIncubatePool.spawn(dragonLength);
                }
                this.fragments.push(fragment);
                this.currentCells.length = 0;

                // 只在非平局时记录前次获胜类型
                this.prevWinnerType = roadInfo.winnerType;

                // 新路增加一格
                return this.appendCell(roadInfo, roadInfo.winnerType, true);
              }
            } else {
              // 平局时只累计平局计数
              this.accumulateDrawCount++;

              // 平局不影响下三路
              return {
                bigEye: undefined,
                smallRoad: undefined,
                cockroach: undefined
              };
            }
          } else {
            // 首次开盘
            if (roadInfo.winnerType !== WinnerType.WinnerDraw) {
              // 只为非平局记录 winnerType
              this.prevWinnerType = roadInfo.winnerType;

              // 为首条路添加单元格
              this.appendCell(roadInfo, roadInfo.winnerType, false);
            } else {
              // 累计
              this.accumulateDrawCount++;
            }

            // 最开始下三路都尚未启用
            return {
              bigEye: undefined,
              smallRoad: undefined,
              cockroach: undefined
            };
          }
        };
        _proto.appendCell = function appendCell(roadInfo, winnerType, lazy) {
          var drawCount = lazy ? 0 : this.accumulateDrawCount;

          // 当前路增加一格
          var cell = {
            winnerType: winnerType,
            point: roadInfo.point,
            naturalWin: roadInfo.naturalWin,
            pairWin: roadInfo.pairWin,
            drawCount: drawCount,
            checkResults: roadInfo.checkResults
          };
          this.currentCells.push(cell);
          if (!lazy) {
            this.accumulateDrawCount = 0;
          }
          return {
            bigEye: this.bottomRoadColor(1),
            smallRoad: this.bottomRoadColor(2),
            cockroach: this.bottomRoadColor(3)
          };
        };
        _proto.bottomRoadAvailable = function bottomRoadAvailable(offset) {
          // fragment 总数由已经完成的 fragments 片段数 + 当前正在记录中的 current_cells 组成
          var fragmentCount = this.fragments.length + 1;
          if (fragmentCount > offset + 1) {
            return true;
          } else if (fragmentCount === offset + 1) {
            return this.currentCells.length > 1;
          } else {
            return false;
          }
        };
        _proto.bottomRoadColor = function bottomRoadColor(offset) {
          if (this.bottomRoadAvailable(offset)) {
            // 数格子
            var col = this.fragments.length - 1;
            if (this.currentCells.length > 1) {
              // 路中牌
              var targetCells = this.fragments[col - (offset - 1)].cells;
              return targetCells.length === this.currentCells.length - 1 ? ColorType.Blue : ColorType.Red;
            } else {
              // 路头牌（此时新路刚开，仅使用 fragments 内完成的片段进行比较）
              var lastCells = this.fragments[col].cells;
              var _targetCells = this.fragments[col - offset].cells;
              return _targetCells.length === lastCells.length ? ColorType.Red : ColorType.Blue;
            }
          }
        }

        /** 是否允许庄问路的判定 */;
        _proto.bottomRoadAvailablePretend = function bottomRoadAvailablePretend(offset) {
          switch (this.prevWinnerType) {
            case WinnerType.WinnerBanker:
              {
                // 庄新增路中牌
                return this.fragments.length + 1 >= offset + 1;
              }
            case WinnerType.WinnerPlayer:
              {
                // 闲新增路头牌
                return this.fragments.length + 2 > offset + 1;
              }
            default:
              return false;
          }
        }

        /** 庄问路 */;
        _proto.bottomRoadColorPretend = function bottomRoadColorPretend(offset) {
          if (this.bottomRoadAvailablePretend(offset)) {
            var col = this.fragments.length - 1;
            switch (this.prevWinnerType) {
              case WinnerType.WinnerBanker:
                {
                  // 路中牌
                  var targetCells = this.fragments[col - (offset - 1)].cells;
                  return targetCells.length === this.currentCells.length ? ColorType.Blue : ColorType.Red;
                }
              case WinnerType.WinnerPlayer:
                {
                  // 路头牌
                  var _targetCells2 = this.fragments[col - (offset - 1)].cells;
                  return _targetCells2.length === this.currentCells.length ? ColorType.Red : ColorType.Blue;
                }
            }
          }
        };
        _proto.finish = function finish() {
          // 最后一次下沉
          this.dragonIncubatePool.sink();
          var fragment = new RoadFragment(this.rowCount - this.dragonIncubatePool.len(), this.currentCells.slice());
          this.fragments.push(fragment);
          this.currentCells.length = 0;
          return this.fragments.slice();
        };
        BigRoadState.swapColor = function swapColor(original) {
          if (original === ColorType.Red) {
            return ColorType.Blue;
          } else if (original === ColorType.Blue) {
            return ColorType.Red;
          }
        };
        return BigRoadState;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bottomRoad.ts", ['cc', './dragonIncubatePool.ts', './roadFragment.ts'], function (exports) {
  var cclegacy, DragonIncubatePool, RoadFragment;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DragonIncubatePool = module.DragonIncubatePool;
    }, function (module) {
      RoadFragment = module.RoadFragment;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9e8bbDLXfxPELIscf6pV+Ri", "bottomRoad", undefined);

      /** 下三路问路的颜色 */

      /** 下三路问路结果 */

      /** 下三路盘处理状态 */
      var BottomRoadState = exports('BottomRoadState', /*#__PURE__*/function () {
        function BottomRoadState(rowCount) {
          this.fragments = void 0;
          this.rowCount = void 0;
          this.currentCells = void 0;
          this.prevColorType = void 0;
          this.dragonIncubatePool = void 0;
          this.fragments = [];
          this.rowCount = rowCount;
          this.currentCells = [];
          this.prevColorType = undefined;
          this.dragonIncubatePool = new DragonIncubatePool();
        }
        var _proto = BottomRoadState.prototype;
        _proto.process = function process(colorType) {
          if (colorType !== undefined) {
            if (this.prevColorType === undefined || this.prevColorType !== colorType) {
              // 记录色值
              this.prevColorType = colorType;

              // 开始新路
              if (this.currentCells.length > 0) {
                // 化龙池下沉
                this.dragonIncubatePool.sink();

                // 结束前一路
                var fragment = new RoadFragment(this.rowCount - this.dragonIncubatePool.len(), this.currentCells.slice());

                // 长龙检查
                var dragonLength = fragment.dragonLength();
                if (dragonLength > 0) {
                  this.dragonIncubatePool.spawn(dragonLength);
                }
                this.fragments.push(fragment);
                this.currentCells.length = 0;
              }
            }

            // 新增一格
            this.appendCell(colorType);
          }
        };
        _proto.appendCell = function appendCell(colorType) {
          this.currentCells.push({
            colorType: colorType
          });
        };
        _proto.finish = function finish() {
          // 最后一次下沉
          this.dragonIncubatePool.sink();
          var fragment = new RoadFragment(this.rowCount - this.dragonIncubatePool.len(), this.currentCells.slice());
          this.fragments.push(fragment);
          this.currentCells.length = 0;
          return this.fragments.slice();
        };
        return BottomRoadState;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BundleMgr.ts", ['cc'], function (exports) {
  var cclegacy, Prefab, error, assetManager, SpriteFrame, JsonAsset, sp, resources;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      error = module.error;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      JsonAsset = module.JsonAsset;
      sp = module.sp;
      resources = module.resources;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e9d0CFjzpL1qvbe4xFRZqM", "BundleMgr", undefined);
      /**
       * 包管理类
       */
      var BundleMgr = exports('BundleMgr', /*#__PURE__*/function () {
        function BundleMgr() {}
        /**
         * 同步加载预制体
         * @param loadPath 预制体加载路径
         * @param bundle 预制体加载路径的Bundle模块
         * @returns Promise<Prefab>
         */
        BundleMgr.loadPrefab = function loadPrefab(loadPath, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            var _bundle;
            (_bundle = bundle) == null || _bundle.load(loadPath, Prefab, function (err, prefab) {
              if (err) {
                error(err);
                return;
              }
              resolve(prefab);
            });
          });
        }

        /**
         * 加载bundle包
         * @param bundleName bundle包名
         * @returns Promise<AssetManager.Bundle>
         */;
        BundleMgr.loadBundle = function loadBundle(bundleName) {
          var _this = this;
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(bundleName, function (completedCount, totalCount) {}, function (err, bundle) {
              if (err) {
                error(err);
                resolve(null);
                return;
              }
              _this.bundleList.push({
                key: bundleName,
                bundle: bundle
              });
              resolve(bundle);
            });
          });
        }

        /**
         * 通过bundleName获取bundle包
         * @param bundleName bundle名
         * @returns bundle包
         */;
        BundleMgr.getBundleByName = function getBundleByName(bundleName) {
          var info = this.bundleList.find(function (item) {
            return item.key === bundleName;
          });
          return info ? info.bundle : null;
        }

        /**
         * 加载bundle包下的文件夹一般用来加载一个文件下所有的预制体
         * @param bundle 加载的bundle包名
         * @param finderName 包下的文件夹名
         * @returns Promise<Asset[]>
         */;
        BundleMgr.loadDir = function loadDir(bundle, finderName) {
          return new Promise(function (resolve, reject) {
            bundle.loadDir(finderName, function (completedCount, totalCount, item) {}, function (err, assts) {
              if (err) {
                error(err);
              }
              resolve(assts);
            });
          });
        }

        /**
         * @param bundle bundle包
         * @param sceneName 场景名
         * @returns Promise<SceneAsset>
         */;
        BundleMgr.loadScene = function loadScene(bundle, sceneName) {
          return new Promise(function (resolve, reject) {
            bundle.loadScene("scene/" + sceneName, function (completedCount, totalCount, item) {}, function (err, assts) {
              if (err) {
                error(err);
              }
              resolve(assts);
            });
          });
        }

        /**
         * 同步加载图资源
         * @param loadPath 预制体加载路径
         * @param bundle 预制体加载路径的Bundle模块
         * @returns Promise<SpriteFrame>
         */;
        BundleMgr.loadSpriteFrame = function loadSpriteFrame(loadPath, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            var _bundle2;
            (_bundle2 = bundle) == null || _bundle2.load(loadPath, SpriteFrame, function (err, spriteFrame) {
              if (err) {
                error(err);
                return;
              }
              resolve(spriteFrame);
            });
          });
        }

        /**
         * 加载Json
         * @param path 加载路径
         * @param bundle 加载的资源包 默认为 resources
         * @returns 返回加载的json
         */;
        BundleMgr.loadWithJson = function loadWithJson(path, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            bundle.load(path, JsonAsset, function (err, jsonAset) {
              if (err) {
                error(err);
                return;
              }
              resolve(jsonAset == null ? void 0 : jsonAset.json);
            });
          });
        }

        /**
         * 加载Json
         * @param path 加载路径
         * @param bundle 加载的资源包 默认为 resources
         * @returns 返回加载的json
         */;
        BundleMgr.loadSkeletonData = function loadSkeletonData(path, bundle) {
          if (bundle === void 0) {
            bundle = resources;
          }
          return new Promise(function (resolve, reject) {
            bundle.load(path, sp.SkeletonData, function (err, data) {
              if (err) {
                error(err);
                return;
              }
              resolve(data);
            });
          });
        }

        /**
         * 通过uuid加载资源
         * @param uuid uuid
         * @returns 
         */;
        BundleMgr.loadAnyByUuid = function loadAnyByUuid(uuid) {
          return new Promise(function (resolve, reject) {
            assetManager.loadAny(uuid, function (err, data) {
              if (err) {
                error(err);
                return;
              }
              resolve(data);
            });
          });
        };
        return BundleMgr;
      }());
      /** bundleList加载包的资源列表 */
      BundleMgr.bundleList = [];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, Sprite, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b03a8vH9P5AaYr0Rl1A+GE9", "CardItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var CardItem = exports('CardItem', (_dec = ccclass('CardItem'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CardItem, _Component);
        function CardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cardSpriteFrame", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cardBackNode", _descriptor2, _assertThisInitialized(_this));
          _this._cardInfo = null;
          _this._flopTween = null;
          return _this;
        }
        var _proto = CardItem.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.setCard = function setCard(cardInfo, isShowBack) {
          if (isShowBack === void 0) {
            isShowBack = false;
          }
          this._cardInfo = cardInfo;
          this.node.active = true;
          if (cardInfo && cardInfo.value) {
            this.node.getComponent(Sprite).spriteFrame = this.cardSpriteFrame[cardInfo.color * 13 + (cardInfo.value - 1)];
          }
          this.cardBackNode.active = isShowBack;
        };
        _proto.flopCard = function flopCard() {
          var _this2 = this;
          if (this._flopTween) {
            this._flopTween.stop();
          }
          var startScale = this.node.scale.x;
          this._flopTween = tween(this.node).to(0.2, {
            scale: new Vec3(0, startScale, startScale)
          }).call(function () {
            _this2.cardBackNode.active = !_this2.cardBackNode.active;
          }).to(0.2, {
            scale: new Vec3(startScale, startScale, startScale)
          }).start();
        };
        return CardItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cardSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cardBackNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/chat.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "26fae7uR/lN168IaMUBlbxp", "chat", undefined); // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: chat.proto
      /* eslint-disable */
      var protobufPackage = exports('protobufPackage', "protos");

      /** 聊天消息类型 */
      var ChatMessageType = exports('ChatMessageType', /*#__PURE__*/function (ChatMessageType) {
        ChatMessageType[ChatMessageType["TextMessage"] = 0] = "TextMessage";
        ChatMessageType[ChatMessageType["EmotionMessage"] = 1] = "EmotionMessage";
        ChatMessageType[ChatMessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return ChatMessageType;
      }({}));

      /** 聊天参与者 */

      /** 聊天消息 */

      /** 发送文本聊天消息请求 */

      /** 发送文本聊天消息响应 */

      /** 文本聊天消息推送 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NumberFormatUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, SpriteFrame, Sprite, Component, NumberFormatUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "a274dGUC7tE1qI46POFhPwR", "ChipItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ChipItem = exports('ChipItem', (_dec = ccclass('ChipItem'), _dec2 = property(Label), _dec3 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ChipItem, _Component);
        function ChipItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "chipNumLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spriteFrames", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ChipItem.prototype;
        _proto.refreshChipSpriteFrame = function refreshChipSpriteFrame(spriteFrameIndex) {
          if (this.spriteFrames[spriteFrameIndex]) {
            this.node.getComponent(Sprite).spriteFrame = this.spriteFrames[spriteFrameIndex];
          }
        };
        _proto.showChipNum = function showChipNum(num) {
          if (this.chipNumLabel) {
            this.chipNumLabel.string = NumberFormatUtil.formatChipNum(num);
          }
        };
        return ChipItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chipNumLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClientEnum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4fe23kiKvFFTqdMmUrSTukt", "ClientEnum", undefined);
      var Scenes = exports('Scenes', /*#__PURE__*/function (Scenes) {
        Scenes["LAUNCHER_SCENE"] = "launcherScene";
        Scenes["BACCARAT_GAME_SCENE"] = "baccaratGameScene";
        return Scenes;
      }({}));
      var PopupName = exports('PopupName', /*#__PURE__*/function (PopupName) {
        PopupName["LOAD_RES_NODE"] = "loadResNode";
        PopupName["GAME_TIP_POPUP"] = "tipPopup";
        return PopupName;
      }({}));

      /**
       * 弹窗关闭类型
       */
      var PopupCloseType = exports('PopupCloseType', /*#__PURE__*/function (PopupCloseType) {
        PopupCloseType[PopupCloseType["hide"] = 0] = "hide";
        PopupCloseType[PopupCloseType["remove"] = 1] = "remove";
        PopupCloseType[PopupCloseType["destroy"] = 2] = "destroy";
        return PopupCloseType;
      }({}));

      /**游戏id */
      var GameId = exports('GameId', /*#__PURE__*/function (GameId) {
        GameId[GameId["catchFish"] = 1] = "catchFish";
        return GameId;
      }({}));

      /**bundle名称 */
      var BundleName = exports('BundleName', /*#__PURE__*/function (BundleName) {
        BundleName["resources"] = "resources";
        BundleName["BaccaratBundle"] = "baccaratBundle";
        return BundleName;
      }({}));

      /**多语言名称 */
      var LanguageName = exports('LanguageName', /*#__PURE__*/function (LanguageName) {
        LanguageName["ZH_CN"] = "zh-cn";
        LanguageName["ZH_TW"] = "zh-tw";
        LanguageName["EN_US"] = "en-us";
        return LanguageName;
      }({}));

      /**音频字段 */
      var AudioConst = exports('AudioConst', /*#__PURE__*/function (AudioConst) {
        AudioConst["MusicStorage"] = "music_volume_cache";
        AudioConst["SoundStorage"] = "sound_volume_cache";
        return AudioConst;
      }({}));

      /** 最大金币 */
      var MAXCOIN = exports('MAXCOIN', 9999999999.99);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/code.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "aa5f2SEjpBDIoZCviBfpqhG", "code", undefined);
      // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: code.proto

      /* eslint-disable */

      var protobufPackage = exports('protobufPackage', "protos");
      var Code = exports('Code', /*#__PURE__*/function (Code) {
        Code[Code["Unknown"] = 0] = "Unknown";
        Code[Code["Ok"] = 200] = "Ok";
        Code[Code["Unauthorized"] = 401] = "Unauthorized";
        Code[Code["Forbidden"] = 403] = "Forbidden";
        Code[Code["NotFound"] = 404] = "NotFound";
        Code[Code["InternalServerError"] = 500] = "InternalServerError";
        Code[Code["InsufficientCoins"] = 1001] = "InsufficientCoins";
        Code[Code["TableNotFound"] = 1011] = "TableNotFound";
        Code[Code["BetNotAllowed"] = 1021] = "BetNotAllowed";
        Code[Code["BetTooLow"] = 1022] = "BetTooLow";
        Code[Code["BetTooHigh"] = 1023] = "BetTooHigh";
        Code[Code["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return Code;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/cubeRoad.ts", ['cc', './roadFragment.ts'], function (exports) {
  var cclegacy, RoadFragment;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      RoadFragment = module.RoadFragment;
    }],
    execute: function () {
      cclegacy._RF.push({}, "14294i+1NVLbZex/AHksCez", "cubeRoad", undefined);

      /** 珠路盘单元格 */

      /** 珠路盘处理状态 */
      var CubeRoadState = exports('CubeRoadState', /*#__PURE__*/function () {
        function CubeRoadState(rowCount) {
          this.fragments = void 0;
          this.rowCount = void 0;
          this.currentCells = void 0;
          this.fragments = [];
          this.rowCount = rowCount;
          this.currentCells = [];
        }
        var _proto = CubeRoadState.prototype;
        _proto.process = function process(roadInfo) {
          // 段落已满时，完成当前段落，准备开启新的段落
          if (this.currentCells.length === this.rowCount) {
            var fragment = new RoadFragment(this.rowCount, this.currentCells.slice());
            this.fragments.push(fragment);
            this.currentCells.length = 0;
          }

          // 添加一个珠路盘结点
          this.currentCells.push({
            winnerType: roadInfo.winnerType,
            checkResults: roadInfo.checkResults
          });
        };
        _proto.finish = function finish() {
          var fragment = new RoadFragment(this.rowCount, this.currentCells.slice());
          this.fragments.push(fragment);
          this.currentCells.length = 0;
          return this.fragments.slice();
        };
        return CubeRoadState;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dragonIncubatePool.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1bd19pm5itOeJpKyflheLpe", "dragonIncubatePool", undefined);
      var DragonIncubatePool = exports('DragonIncubatePool', /*#__PURE__*/function () {
        function DragonIncubatePool() {
          this.nests = void 0;
          this.nests = [];
        }

        /** 每列一次的水位下沉操作，在新列可以产生时执行。 */
        var _proto = DragonIncubatePool.prototype;
        _proto.sink = function sink() {
          for (var i = 0; i < this.nests.length; i++) {
            if (this.nests[i] > 0) {
              this.nests[i] -= 1;
            }
          }
          if (this.nests.length > 0) {
            for (var _i = this.nests.length - 1; _i >= 0; _i--) {
              if (this.nests[_i] > 0) {
                this.nests.length = _i + 1;
                break;
              } else if (_i === 0) {
                this.nests.length = 0;
              }
            }
          }
        }

        /** 孵化新的长龙 */;
        _proto.spawn = function spawn(length) {
          this.nests.push(length + 1);
        };
        _proto.len = function len() {
          return this.nests.length;
        };
        return DragonIncubatePool;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Emitter.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5ef458rr9VBBahhglxuy6Cc", "Emitter", undefined);
      var EventListener = /*#__PURE__*/function () {
        function EventListener() {
          /** 事件表 */
          this.regsiter = {};
        }
        var _proto = EventListener.prototype;
        /**
         * 事件监听
         * @param eventName 监听的事件名
         * @param method 监听的需要执行的事件
         * @param caller 可选参数  执行事件回调的this指向
         */
        _proto.on = function on(eventName, method, caller) {
          if (caller === void 0) {
            caller = null;
          }
          if (!this.regsiter.hasOwnProperty(eventName)) {
            this.regsiter[eventName] = [];
          }
          this.regsiter[eventName].push({
            eventName: eventName,
            method: method,
            caller: caller
          });
        }

        /**
         * 事件派发
         * @param eventName 派发的事件名
         * @param args 派发的所有参数 可传递多个参数
         */;
        _proto.emit = function emit(eventName) {
          if (this.regsiter.hasOwnProperty(eventName)) {
            var handlerList = this.regsiter[eventName];
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            for (var i = 0; i < handlerList.length; i++) {
              var handler = handlerList[i].method;
              handler.apply(handlerList[i].caller, args);
            }
          }
        }

        /**
         * 注销监听事件
         * @param eventName 监听事件注销的名称
         * @param method 监听事件注销的回调函数
         */;
        _proto.off = function off(eventName, method) {
          if (this.regsiter.hasOwnProperty(eventName)) {
            var handlerList = this.regsiter[eventName];
            for (var i = 0; i < handlerList.length; ++i) {
              if (handlerList[i].method === method) {
                handlerList.splice(i, 1);
                break;
              }
            }
          }
        };
        return EventListener;
      }();
      var Emitter = exports('Emitter', new EventListener());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/finance.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "326f8md3RxP+JyfuNfwnRKH", "finance", undefined); // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: finance.proto
      /* eslint-disable */
      var protobufPackage = exports('protobufPackage', "protos");
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/game.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "afd22NdG0xGfZTT7WMQUwc9", "game", undefined);
      // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
      // versions:
      //   protoc-gen-ts_proto  v2.7.0
      //   protoc               v5.29.3
      // source: game.proto

      /* eslint-disable */

      var protobufPackage = exports('protobufPackage', "protos");

      /** 扑克牌的花色 */
      var PokerColor = exports('PokerColor', /*#__PURE__*/function (PokerColor) {
        PokerColor[PokerColor["Diamond"] = 0] = "Diamond";
        PokerColor[PokerColor["Club"] = 1] = "Club";
        PokerColor[PokerColor["Heart"] = 2] = "Heart";
        PokerColor[PokerColor["Spade"] = 3] = "Spade";
        PokerColor[PokerColor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
        return PokerColor;
      }({}));

      /** 时间段信息 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameChatView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, ScrollView, Prefab, Node, instantiate, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "b82c4KEtO1IHKj0jCigsmjx", "GameChatView", undefined);
      //import { TCLiveChat } from './TCLiveChat';

      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameChatView = exports('GameChatView', (_dec = ccclass('GameChatView'), _dec2 = property(EditBox), _dec3 = property(ScrollView), _dec4 = property(Prefab), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameChatView, _Component);
        function GameChatView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "msgEditBox", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "chatFrameScrollView", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "chatMsgNodePrefab", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "chatBtn", _descriptor4, _assertThisInitialized(_this));
          //private tcLiveChat: TCLiveChat = null;
          //private isAccessTcLiveChat: boolean = false;
          _this.gameTable = null;
          return _this;
        }
        var _proto = GameChatView.prototype;
        _proto.init = function init(gameTable) {
          this.gameTable = gameTable;
        };
        _proto.onLoad = function onLoad() {
          // if (this.isAccessTcLiveChat) {
          //     this.tcLiveChat = new TCLiveChat();
          // } else {
          //     //監聽新的聊天訊息
          // }
        };
        _proto.createGroup = function createGroup() {
          //this.tcLiveChat.createGroup();
        };
        _proto.joinGroup = function joinGroup() {
          //this.tcLiveChat.joinGroup();
        };
        _proto.sendMsg = function sendMsg() {
          var _this2 = this;
          var msg = this.msgEditBox.string;
          if (msg) {
            // if (this.isAccessTcLiveChat) {
            //     this.tcLiveChat.sendMsg(msg);
            // } else {

            // }
            this.gameTable.tableController.sendChatMeaasge(encodeURIComponent(msg)).then(function () {
              _this2.msgEditBox.string = '';
            });
          }
        };
        _proto.logout = function logout() {
          // this.tcLiveChat.logout();
        };
        _proto.showChatHistoryMsg = function showChatHistoryMsg(roomMessages) {
          this.chatFrameScrollView.content.removeAllChildren();
          if (roomMessages && roomMessages.length > 0) {
            for (var index = 0; index < roomMessages.length; index++) {
              this.addNewChatMsg(roomMessages[index]);
            }
          }
        };
        _proto.addNewChatMsg = function addNewChatMsg(roomMessage) {
          if (roomMessage) {
            var chatItem = instantiate(this.chatMsgNodePrefab);
            chatItem.getComponent(Label).string = roomMessage.sender.nickname + ":" + decodeURIComponent(roomMessage.textContent);
            this.chatFrameScrollView.content.addChild(chatItem);
            this.chatFrameScrollView.scrollToBottom();
          }
        };
        _proto.showChatFrame = function showChatFrame() {
          this.chatFrameScrollView.node.active = true;
          this.chatBtn.active = false;
          this.chatFrameScrollView.scrollToBottom();
        };
        _proto.hideChatFrame = function hideChatFrame() {
          this.chatBtn.active = true;
          this.chatFrameScrollView.node.active = false;
        };
        _proto.editboxInputStart = function editboxInputStart() {
          this.showChatFrame();
        };
        return GameChatView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "msgEditBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "chatFrameScrollView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "chatMsgNodePrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "chatBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameClock.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "6da3dmtySNE77IRgVjKqVHU", "GameClock", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameClock = exports('GameClock', (_dec = ccclass('GameClock'), _dec2 = property({
        tooltip: "倒计时纹理",
        type: Sprite
      }), _dec3 = property({
        tooltip: "倒计时文字",
        type: Label
      }), _dec4 = property({
        visible: false
      }), _dec5 = property({
        visible: false
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameClock, _Component);
        function GameClock() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "clockSprite", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "clockLabel", _descriptor2, _assertThisInitialized(_this));
          _this.isPlay = false;
          _this.currectTime = 0;
          _this.totalTime = 0;
          _this.isPlaySound = false;
          return _this;
        }
        var _proto = GameClock.prototype;
        _proto.startClock = function startClock(currectTime, totalTime) {
          if (totalTime === void 0) {
            totalTime = currectTime;
          }
          this.unscheduleAllCallbacks();
          this.clockTime = currectTime;
          this.totalTime = totalTime;
          this.node.active = true;
          this.isPlay = true;
        };
        _proto.stopClock = function stopClock() {
          this.isPlay = false;
          this.clockTime = 0;
          this.clockProgress = 1;
          this.unscheduleAllCallbacks();
          this.node.active = false;
        };
        _proto.update = function update(dt) {
          if (this.isPlay) {
            if (this.clockTime <= 0) {
              this.stopClock();
            } else {
              this.clockTime -= dt;
              this.clockProgress = this.clockTime / this.totalTime;
            }
          }
        };
        _createClass(GameClock, [{
          key: "clockTime",
          get: function get() {
            if (this.clockLabel) {
              return this.currectTime;
            } else {
              return 0;
            }
          },
          set: function set(time) {
            if (this.clockLabel) {
              this.currectTime = time;
              this.clockLabel.string = Math.ceil(time).toString();
            }
          }
        }, {
          key: "clockProgress",
          get: function get() {
            if (this.clockSprite) {
              return this.clockSprite.fillRange;
            } else {
              return 0;
            }
          },
          set: function set(progress) {
            if (this.clockSprite) {
              this.clockSprite.fillRange = progress;
            }
          }
        }]);
        return GameClock;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clockSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "clockLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "clockTime", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "clockTime"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clockProgress", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "clockProgress"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfig.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "654beWo20VM0qAQTiESGOqL", "GameConfig", undefined);
      var GameConfig = exports('GameConfig', {
        gameConfig: {
          WS_URL: '//39.105.156.65:3535',
          PROTO_URL: '//39.105.156.65:9595/assets/cyber.games.bin',
          HTTP_URL: 'http://192.168.3.180',
          IS_ACCESS: false
        }
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PopupMgr.ts', './AudioManager.ts', './Emitter.ts', './GlobalData.ts', './NetConnect.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, director, game, Game, error, Component, PopupMgr, AudioManager, Emitter, GlobalEvent, GlobalData, NetConnect;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      game = module.game;
      Game = module.Game;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      PopupMgr = module.PopupMgr;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Emitter = module.Emitter;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
      GlobalData = module.GlobalData;
    }, function (module) {
      NetConnect = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "13c30aSSvBEbZoDUs7R3prP", "GameMgr", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameMgr = exports('GameMgr', ccclass(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameMgr, _Component);
        function GameMgr() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = GameMgr.prototype;
        _proto.onLoad = function onLoad() {
          var _this = this;
          //将该节点设为常驻节点
          director.addPersistRootNode(this.node);
          /* 游戏进入前台 */
          game.on(Game.EVENT_SHOW, function () {
            if (NetConnect.isConnected) {
              Emitter.emit(GlobalEvent.EVENT_GAME_CONNECT_AGAIN_REFRESH);
            } else {
              _this.disConnectTip();
            }
          });
          /* 游戏进入后台 */
          game.on(Game.EVENT_HIDE, function () {
            AudioManager.stopAllSound();
          });
          /* 游戏内存不足 */
          game.on(Game.EVENT_LOW_MEMORY, function () {
            error('game low memory');
          });
          Emitter.on(GlobalEvent.EVENT_NET_DISCONNECT, this.disConnectTip, this);
          Emitter.on(GlobalEvent.EVENT_GAME_MAINTENANCE, this.maintenanceTip, this);
        }
        /**
         * 弹出断线提示
         */;
        _proto.disConnectTip = /*#__PURE__*/
        function () {
          var _disConnectTip = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (!GlobalData.isManualDisconnect) {
                    _context2.next = 4;
                    break;
                  }
                  GlobalData.isManualDisconnect = false;
                  _context2.next = 7;
                  break;
                case 4:
                  _context2.next = 6;
                  return PopupMgr.instance.showAlert('game_net_disconnect');
                case 6:
                  _context2.sent.confirm( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                    var success;
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return NetConnect.connect();
                        case 2:
                          success = _context.sent;
                          if (success) {
                            Emitter.emit(GlobalEvent.EVENT_GAME_CONNECT_AGAIN_REFRESH);
                          }
                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  })));
                case 7:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function disConnectTip() {
            return _disConnectTip.apply(this, arguments);
          }
          return disConnectTip;
        }();
        _proto.maintenanceTip = /*#__PURE__*/function () {
          var _maintenanceTip = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return PopupMgr.instance.showAlert('断开连接');
                case 2:
                  _context3.sent.confirm(function () {
                    _this2.exitGame();
                  });
                case 3:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function maintenanceTip() {
            return _maintenanceTip.apply(this, arguments);
          }
          return maintenanceTip;
        }();
        _proto.exitGame = function exitGame() {};
        return GameMgr;
      }(Component)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GamePackage.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2547c+FNXND1ZFCBoWeIF7D", "GamePackage", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameVideoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TCLivePlayer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, Node, game, view, Component, TCLivePlayer;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Node = module.Node;
      game = module.game;
      view = module.view;
      Component = module.Component;
    }, function (module) {
      TCLivePlayer = module.TCLivePlayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "f4e22gsOHtERbwjH5HaT4Uj", "GameVideoView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameVideoView = exports('GameVideoView', (_dec = ccclass('GameVideoView'), _dec2 = property(Toggle), _dec3 = property(Toggle), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameVideoView, _Component);
        function GameVideoView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // @property({ tooltip: 'video组件', type: VideoPlayer })
          // protected video: VideoPlayer = null;
          _initializerDefineProperty(_this, "muteToggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "playToggle", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "videoMask", _descriptor3, _assertThisInitialized(_this));
          /** 视频流dom节点 */
          _this.video = null;
          _this._tcLivePlayer = null;
          return _this;
        }
        var _proto = GameVideoView.prototype;
        _proto.start = function start() {
          var videoId = 'cocos-video';
          this.createVideoDom(videoId);
          this._tcLivePlayer = new TCLivePlayer(videoId);
        };
        _proto.createVideoDom = function createVideoDom(videoId) {
          this.video = document.createElement("video");
          this.video.id = videoId;
          this.video.style.position = "absolute";
          this.video.style.display = "fixed";
          this.video.style.width = "100%";
          this.video.style.height = "34%";
          this.video.style.objectFit = "cover";
          this.video.preload = "auto";
          this.video.muted = false; // 静音
          this.video.autoplay = true; // 自动播放
          this.video.controls = true;
          this.video.style.top = "0";
          this.video.style.zIndex = '-1';
          this.video.setAttribute('playsinline', 'true');
          this.video.setAttribute('webkit-playsinline', 'true');
          //this.setVideoPos();
          game.container.appendChild(this.video);
        };
        _proto.setVideoPos = function setVideoPos() {
          var designWidth = view.getDesignResolutionSize().width;
          var designHeight = view.getDesignResolutionSize().height;
          var designRote = designWidth / designHeight;
          var realSize = view.getFrameSize();
          var realRate = realSize.width / realSize.height;
          // console.log('real width:' + realSize.width);
          // console.log('real height:' + realSize.height);

          if (designRote > realRate) {
            //宽度
            this.video.style.width = "100%";
            var prop = realSize.width / view.getDesignResolutionSize().width;
            this.video.style.left = '0';

            // this.video.style.height = prop * 827 + 'px';
            // this.video.style.top = (prop * 276) + ((realSize.height / prop - designHeight) / 2) * prop + 'px';
            this.video.style.height = prop * 1280 + 'px';
            this.video.style.top = prop * 80 + (realSize.height / prop - designHeight) / 2 * prop + 'px';
            // this.video.style.top = ((realSize.height / prop - designHeight) / 2) * prop + 'px';
          } else {
            //高度
            var _prop = realSize.height / view.getDesignResolutionSize().height;
            var width = realSize.height / view.getDesignResolutionSize().height * 720;
            this.video.style.width = width + 'px';
            this.video.style.left = '50%';
            this.video.style.marginLeft = '-' + width / 2 + 'px';

            // this.video.style.height = realSize.height / view.getDesignResolutionSize().height * 827 + 'px';
            // this.video.style.top = realSize.height / view.getDesignResolutionSize().height * 276 + 'px';

            this.video.style.height = realSize.height / view.getDesignResolutionSize().height * 1280 + 'px';
            this.video.style.top = _prop * 80 + 'px';
          }
        };
        _proto.setVideoMute = function setVideoMute(isMute) {
          this.video.muted = isMute;
        };
        _proto.setVideoPlay = function setVideoPlay(isPlay) {
          if (isPlay) {
            this.video.play();
          } else {
            this.video.pause();
          }
        };
        _proto.changeUrl = function changeUrl(url) {
          if (this._tcLivePlayer && url) {
            this._tcLivePlayer.changeUrl(url); // url 播放地址
          }
        };

        _proto.playBtnClicked = function playBtnClicked() {
          this.setVideoPlay(true);
        };
        _proto.muteToggleClicked = function muteToggleClicked() {
          this.setVideoMute(!this.muteToggle.isChecked);
        };
        _proto.playToggleClicked = function playToggleClicked() {
          this.setVideoPlay(this.playToggle.isChecked);
          this.videoMask.active = !this.playToggle.isChecked;
        };
        return GameVideoView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "muteToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "playToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "videoMask", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GlobalData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0b822i+RCRKHo0snbrFOQUw", "GlobalData", undefined);
      var GlobalData = exports('GlobalData', {
        isManualDisconnect: false,
        maxCoin: 99999999
      });
      var GlobalEvent = exports('GlobalEvent', {
        EVENT_BROADCAST: "event_broadcast",
        EVENT_NET_DISCONNECT: "event_net_disconnect",
        EVENT_GAME_MAINTENANCE: "event_game_maintenance",
        EVENT_GAME_CONNECT_AGAIN_REFRESH: "event_game_connect_again_refresh",
        Event_Game_ON_CHAT_MESSAGE: "event_game_on_chat_message",
        EVENT_GAME_UPDATE_CHIPS: 'event_game_update_chips',
        EVENT_GAME_SHOW_VERIFY_INFO: 'event_game_show_verify_info'
      });
      var NetCode = exports('NetCode', {
        ResponseSuccess: 200,
        ResponseMaintenance: 500
      });
      var GameWSRoute = exports('GameWSRoute', {
        Login: 'connector.auth.login' //登录
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpUtils.ts", ['cc', './Utils.ts'], function (exports) {
  var cclegacy, log, error, Utils;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      error = module.error;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3a831VY+E9Od4ldWIe/pmey", "HttpUtils", undefined);
      var HttpUtils = exports('default', /*#__PURE__*/function () {
        function HttpUtils() {}
        /**
         * get请求
         * @param route   接口
         * @param params  参数
         * @param cb      
         */
        HttpUtils.httpGet = function httpGet(httpUrl, route, params) {
          return new Promise(function (resolve, reject) {
            var url = Utils.connectParasForHttpUrl(httpUrl + route, params);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
                var respone = xhr.responseText;
                log("response http get:" + route, JSON.parse(respone));
                resolve(JSON.parse(respone));
              }
            };
            xhr.onerror = function () {
              error('httpUtils onreadystatechange  onerror====' + xhr.readyState + '===' + xhr.status);
              reject(xhr.status);
            };
            log("request http:", url);
            xhr.open("GET", url, true);
            xhr.send();
          });
        }
        /**
         * post 请求
         * @param route 
         * @param params 
         * @param cb 
         */;
        HttpUtils.httpPost = function httpPost(httpUrl, route, params) {
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
              log('xhr.readyState=' + xhr.readyState + '  xhr.status=' + xhr.status);
              if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
                var respone = xhr.responseText;
                log("response http:" + route, JSON.parse(respone));
                resolve(JSON.parse(respone));
              }
            };
            xhr.onerror = function () {
              error('httpUtils onreadystatechange  onerror====' + xhr.readyState + '===' + xhr.status);
              reject(xhr.status);
            };
            log("request http post:", route, httpUrl + route, JSON.stringify(params));
            xhr.open("POST", httpUrl + route, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            //xhr.timeout = 10000;// 5 seconds for timeout  
            xhr.send(JSON.stringify(params));
          });
        };
        return HttpUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/I18nLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './I18nMgr.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, CCString, isValid, Component, I18nMgr;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      CCString = module.CCString;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      I18nMgr = module.I18nMgr;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b0d9fLtLE9GyqJDdFKoxjeU", "I18nLabel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        disallowMultiple = _decorator.disallowMultiple,
        requireComponent = _decorator.requireComponent,
        menu = _decorator.menu,
        executionOrder = _decorator.executionOrder;

      // @ccclass('I18nLabel')
      // @executeInEditMode
      // @requireComponent(Label)
      // @disallowMultiple(true)
      // // @executionOrder(3)
      // @menu('多语言/i18nLabel')

      var I18nLabel = exports('I18nLabel', (_dec = ccclass('I18nLabel'), _dec2 = requireComponent(Label), _dec3 = menu("多语言/i18nLabel"), _dec4 = property({
        visible: false,
        tooltip: "字符取值的键"
      }), _dec5 = property({
        visible: false,
        tooltip: "替换的部分"
      }), _dec6 = property({
        type: CCString
      }), _dec7 = property({
        type: [CCString]
      }), _dec(_class = executeInEditMode(_class = _dec2(_class = disallowMultiple(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(I18nLabel, _Component);
        function I18nLabel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "i18n_string", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "i18n_params", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = I18nLabel.prototype;
        _proto.start = function start() {
          I18nMgr.addOrDelLabel(this);
          this.resetValue();
        };
        _proto.setEndValue = function setEndValue() {
          var label = this.getComponent(Label);
          if (isValid(label)) {
            var str = I18nMgr.getLabel(this.i18n_string, this.i18n_params);
            if (str) {
              label.string = str;
            }
          }
        };
        _proto.resetValue = function resetValue() {
          this.string = this.i18n_string;
        };
        _proto.onDestroy = function onDestroy() {
          I18nMgr.addOrDelLabel(this, false);
        };
        _createClass(I18nLabel, [{
          key: "string",
          get: function get() {
            return this.i18n_string;
          },
          set: function set(value) {
            this.i18n_string = value;
            this.setEndValue();
          }
        }, {
          key: "params",
          get: function get() {
            return this.i18n_params;
          },
          set: function set(value) {
            this.i18n_params = value;
            this.setEndValue();
          }
        }]);
        return I18nLabel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "i18n_string", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "i18n_params", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "string", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "params", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "params"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/I18nMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BundleMgr.ts', './ClientEnum.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, assetManager, BundleMgr, BundleName;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
    }, function (module) {
      BundleMgr = module.BundleMgr;
    }, function (module) {
      BundleName = module.BundleName;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3152L07atN7bEGLXo1AQAm", "I18nMgr", undefined);
      var I18nMgr = exports('I18nMgr', /*#__PURE__*/function () {
        function I18nMgr() {}
        /** 检测默认语言是否存在  不存在默认是指中文 */
        I18nMgr.checkInit = function checkInit() {
          if (!this.language) {
            this.setLanguage("zh");
          }
        }

        /**
         * 设置语言
         * @param language 语言标记
         */;
        I18nMgr.setLanguage = /*#__PURE__*/
        function () {
          var _setLanguage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(language) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(this.language === language)) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  this.language = language;
                  _context.next = 5;
                  return this.reloadLabel();
                case 5:
                  this.updateSceneRenderers();
                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function setLanguage(_x) {
            return _setLanguage.apply(this, arguments);
          }
          return setLanguage;
        }()
        /**
         * 加载资源  浏览器环境和编辑器环境需要不同的处理方式 编辑器模式不能加载AssetManager.Bundle
         */;

        I18nMgr.reloadLabel = /*#__PURE__*/
        function () {
          var _reloadLabel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var path, bundleArr, i, bundleName, str, uuid, data, _i, _bundleName, _str, bundle, json;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(this.language === 'none')) {
                    _context2.next = 2;
                    break;
                  }
                  return _context2.abrupt("return");
                case 2:
                  path = "i18n/label/" + this.language;
                  bundleArr = ['resources'];
                  Object.keys(BundleName).forEach(function (key) {
                    bundleArr.push('game/' + BundleName[key]);
                  });
                  /** 编辑器环境 */
                  {
                    _context2.next = 23;
                    break;
                  }
                case 7:
                  if (!(i < bundleArr.length)) {
                    _context2.next = 21;
                    break;
                  }
                  bundleName = bundleArr[i];
                  str = bundleName.split('game/').join(""); //@ts-ignore
                  // 通过 地址读取uuid 加载uuid
                  _context2.next = 12;
                  return Editor.Message.request("asset-db", "query-uuid", "db://assets/" + bundleName + "/" + path + ".json");
                case 12:
                  uuid = _context2.sent;
                  if (!uuid) {
                    _context2.next = 18;
                    break;
                  }
                  _context2.next = 16;
                  return BundleMgr.loadAnyByUuid(uuid);
                case 16:
                  data = _context2.sent;
                  this.labelData[str] = data == null ? void 0 : data.json;
                case 18:
                  i++;
                  _context2.next = 7;
                  break;
                case 21:
                  _context2.next = 38;
                  break;
                case 23:
                  _i = 0;
                case 24:
                  if (!(_i < bundleArr.length)) {
                    _context2.next = 38;
                    break;
                  }
                  _bundleName = bundleArr[_i];
                  _str = _bundleName.split('game/').join("");
                  if (!this.labelData[_str]) {
                    _context2.next = 29;
                    break;
                  }
                  return _context2.abrupt("continue", 35);
                case 29:
                  bundle = assetManager.getBundle(_str);
                  if (!bundle) {
                    _context2.next = 35;
                    break;
                  }
                  _context2.next = 33;
                  return BundleMgr.loadWithJson(path, bundle);
                case 33:
                  json = _context2.sent;
                  this.labelData[_str] = json;
                case 35:
                  _i++;
                  _context2.next = 24;
                  break;
                case 38:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function reloadLabel() {
            return _reloadLabel.apply(this, arguments);
          }
          return reloadLabel;
        }();
        I18nMgr.updateSceneRenderers = function updateSceneRenderers() {
          for (var _iterator = _createForOfIteratorHelperLoose(this.labelArr), _step; !(_step = _iterator()).done;) {
            var one = _step.value;
            one.resetValue();
          }
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.spriteArr), _step2; !(_step2 = _iterator2()).done;) {
            var _one = _step2.value;
            _one.resetValue();
          }
        }

        /**
         * 添加或删除sprite对象到管理数组
         * @param sprite 图片的18n对象
         * @param isAdd 是否为添加 默认为是
         */;
        I18nMgr.addOrDelSprite = function addOrDelSprite(sprite, isAdd) {
          if (isAdd === void 0) {
            isAdd = true;
          }
          if (isAdd) {
            this.spriteArr.push(sprite);
          } else {
            var index = this.spriteArr.indexOf(sprite);
            if (index !== -1) {
              this.spriteArr.splice(index, 1);
            }
          }
        }

        /**
         * 获取图片资源
         * @param opt 获取图片的键
         * @param bundle 包体默认为resources
         * @returns 返回加载的图片资源
         */;
        I18nMgr.getSprite = /*#__PURE__*/
        function () {
          var _getSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(opt, bundleName) {
            var path, uuid, spriteFrame, bundle;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (bundleName === void 0) {
                    bundleName = 'resources';
                  }
                  this.checkInit();
                  path = "i18n/sprite/" + this.language + "/" + opt;
                  /** 编辑器环境 */
                  {
                    _context3.next = 20;
                    break;
                  }
                case 6:
                  _context3.next = 8;
                  return Editor.Message.request("asset-db", "query-uuid", "db://assets/" + bundleName + "/" + path + ".png");
                case 8:
                  uuid = _context3.sent;
                  if (uuid) {
                    _context3.next = 13;
                    break;
                  }
                  _context3.next = 12;
                  return Editor.Message.request("asset-db", "query-uuid", "db://assets/" + bundleName + "/" + path + ".jpg");
                case 12:
                  uuid = _context3.sent;
                case 13:
                  if (!uuid) {
                    _context3.next = 18;
                    break;
                  }
                  _context3.next = 16;
                  return BundleMgr.loadAnyByUuid(uuid + '@f9941');
                case 16:
                  spriteFrame = _context3.sent;
                  return _context3.abrupt("return", spriteFrame);
                case 18:
                  _context3.next = 26;
                  break;
                case 20:
                  if (!(this.language === 'none')) {
                    _context3.next = 22;
                    break;
                  }
                  return _context3.abrupt("return", null);
                case 22:
                  bundle = assetManager.getBundle(bundleName);
                  _context3.next = 25;
                  return BundleMgr.loadSpriteFrame(path + '/spriteFrame', bundle);
                case 25:
                  return _context3.abrupt("return", _context3.sent);
                case 26:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function getSprite(_x2, _x3) {
            return _getSprite.apply(this, arguments);
          }
          return getSprite;
        }()
        /**
         * 添加或删除label对象到管理数组
         * @param label 文字的18n对象
         * @param isAdd 是否为添加 默認为是
         */;

        I18nMgr.addOrDelLabel = function addOrDelLabel(label, isAdd) {
          if (isAdd === void 0) {
            isAdd = true;
          }
          if (isAdd) {
            this.labelArr.push(label);
          } else {
            var index = this.labelArr.indexOf(label);
            if (index !== -1) {
              this.labelArr.splice(index, 1);
            }
          }
        }

        /**
         * 获取文字
         * @param opt 获取文字的键
         * @param params 可选参数需要替换的文字
         * @param bundle 可选参数当前的资源属于那个bundle包 默认为resources 
         * @returns 获取当前语言对应的文字字符串
         */;
        I18nMgr.getLabel = function getLabel(opt, params, bundleName) {
          if (params === void 0) {
            params = [];
          }
          if (bundleName === void 0) {
            bundleName = 'resources';
          }
          if (this.language === 'none') {
            return ' ';
          }
          this.checkInit();
          if (!this.labelData[bundleName]) {
            return null;
          }
          if (params.length === 0) {
            return this.labelData[bundleName][opt];
          }
          var str = this.labelData[bundleName][opt];
          console.log(str, params);
          for (var i = 0; i < params.length; i++) {
            var reg = new RegExp("#" + i, "g");
            str = str.replace(reg, params[i]);
          }
          return str;
        };
        return I18nMgr;
      }());
      /** 当前语言 */
      I18nMgr.language = "";
      /** i18nLabel 列表 */
      I18nMgr.labelArr = [];
      /** 文字配置 */
      I18nMgr.labelData = {};
      /** i18nSprite 列表 */
      I18nMgr.spriteArr = [];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/I18nSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './I18nMgr.ts', './ClientEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Sprite, Enum, CCString, Component, isValid, I18nMgr, BundleName;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Enum = module.Enum;
      CCString = module.CCString;
      Component = module.Component;
      isValid = module.isValid;
    }, function (module) {
      I18nMgr = module.I18nMgr;
    }, function (module) {
      BundleName = module.BundleName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "90bc8eJs8dGbJYvpd08FPg9", "I18nSprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        disallowMultiple = _decorator.disallowMultiple,
        requireComponent = _decorator.requireComponent,
        menu = _decorator.menu;
      var E_bundle = /*#__PURE__*/function (E_bundle) {
        E_bundle[E_bundle["resources"] = 1] = "resources";
        return E_bundle;
      }(E_bundle || {});
      var num = 1;
      Object.keys(BundleName).forEach(function (key) {
        var opt = 'game/' + BundleName[key];
        //@ts-ignore
        E_bundle[opt] = ++num;
      });
      var I18nSprite = exports('I18nSprite', (_dec = ccclass('I18nSprite'), _dec2 = requireComponent(Sprite), _dec3 = disallowMultiple(true), _dec4 = menu('多语言/i18nSprite'), _dec5 = property({
        visible: false,
        tooltip: "图片取值的键"
      }), _dec6 = property({
        visible: false
      }), _dec7 = property({
        type: Enum(E_bundle),
        displayName: "bundle",
        tooltip: "bundle模块"
      }), _dec8 = property({
        type: CCString
      }), _dec(_class = executeInEditMode(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(I18nSprite, _Component);
        function I18nSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "i18n_string", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nowBundle", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = I18nSprite.prototype;
        _proto.start = function start() {
          I18nMgr.addOrDelSprite(this);
          this.resetValue();
        };
        _proto.updateSprite = /*#__PURE__*/function () {
          var _updateSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var sprite, spriteFrame;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  sprite = this.getComponent(Sprite);
                  if (!isValid(sprite)) {
                    _context.next = 6;
                    break;
                  }
                  _context.next = 4;
                  return I18nMgr.getSprite(this.i18n_string, E_bundle[this.nowBundle]);
                case 4:
                  spriteFrame = _context.sent;
                  sprite.spriteFrame = spriteFrame;
                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function updateSprite() {
            return _updateSprite.apply(this, arguments);
          }
          return updateSprite;
        }();
        _proto.resetValue = function resetValue() {
          this.string = this.i18n_string;
        };
        _proto.onDestroy = function onDestroy() {
          I18nMgr.addOrDelSprite(this, false);
        };
        _createClass(I18nSprite, [{
          key: "BundleName",
          get: function get() {
            return this.nowBundle;
          },
          set: function set(value) {
            this.nowBundle = value;
          }
        }, {
          key: "string",
          get: function get() {
            return this.i18n_string;
          },
          set: function set(value) {
            this.i18n_string = value;
            this.updateSprite();
          }
        }]);
        return I18nSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "i18n_string", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nowBundle", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return E_bundle.resources;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "BundleName", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "BundleName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "string", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LauncherScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pitaya_proto_wasm.ts', './NetConnect.ts', './LoadResNode.ts', './ClientEnum.ts', './LinkParasUtil.ts', './GameConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, BufferAsset, view, ResolutionPolicy, Component, director, initSync, NetConnect, LoadResNode, Scenes, BundleName, LinkParasUtil, GameConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BufferAsset = module.BufferAsset;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      initSync = module.initSync;
    }, function (module) {
      NetConnect = module.default;
    }, function (module) {
      LoadResNode = module.LoadResNode;
    }, function (module) {
      Scenes = module.Scenes;
      BundleName = module.BundleName;
    }, function (module) {
      LinkParasUtil = module.LinkParasUtil;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "3419d1EAI5MnI0rt4TohC7M", "LauncherScene", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LauncherScene = exports('LauncherScene', (_dec = ccclass('LauncherScene'), _dec2 = property(BufferAsset), _dec3 = property(LoadResNode), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LauncherScene, _Component);
        function LauncherScene() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "wasm_asset", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadResNode", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LauncherScene.prototype;
        _proto.onLoad = /*#__PURE__*/function () {
          var _onLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this$wasm_asset;
            var module, success;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(!LinkParasUtil.getParameterValue("username") || LinkParasUtil.getParameterValue("game") !== "baccarat")) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  //@ts-ignore
                  if (window.gameConfig) {
                    //@ts-ignore
                    GameConfig.gameConfig = window.gameConfig;
                  }
                  //初始化wasm 
                  module = (_this$wasm_asset = this.wasm_asset) == null ? void 0 : _this$wasm_asset.buffer();
                  if (module) {
                    initSync({
                      module: module
                    });
                  }
                  //设置屏幕适配
                  this.setFitScreenMode();
                  //ws连接
                  _context.next = 8;
                  return this.connectWs();
                case 8:
                  success = _context.sent;
                  //进入游戏
                  if (success) {
                    this.enterGame();
                  }
                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onLoad() {
            return _onLoad.apply(this, arguments);
          }
          return onLoad;
        }()
        /**
          * 屏幕适配
          */;

        _proto.setFitScreenMode = function setFitScreenMode() {
          var designWidth = view.getDesignResolutionSize().width;
          var designHeight = view.getDesignResolutionSize().height;
          var designRote = designWidth / designHeight;
          var realSize = view.getViewportRect();
          var realRate = realSize.width / realSize.height;
          if (designRote >= realRate) {
            view.setResolutionPolicy(ResolutionPolicy.FIXED_WIDTH);
            // FIXED_HEIGHT
          } else {
            view.setResolutionPolicy(ResolutionPolicy.FIXED_HEIGHT);
          }
        };
        _proto.connectWs = /*#__PURE__*/function () {
          var _connectWs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", NetConnect.connect());
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function connectWs() {
            return _connectWs.apply(this, arguments);
          }
          return connectWs;
        }();
        _proto.enterGame = /*#__PURE__*/function () {
          var _enterGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.loadResNode.loadGame({
                    bundleName: BundleName.BaccaratBundle,
                    sceneNames: [Scenes.BACCARAT_GAME_SCENE],
                    finderNames: []
                  });
                case 2:
                  //進入遊戲
                  director.loadScene(Scenes.BACCARAT_GAME_SCENE);
                case 3:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function enterGame() {
            return _enterGame.apply(this, arguments);
          }
          return enterGame;
        }();
        return LauncherScene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wasm_asset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loadResNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LinkParasUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "781a3/XJAtA4J2z5XJg0MM4", "LinkParasUtil", undefined);
      var LinkParasUtil = exports('LinkParasUtil', /*#__PURE__*/function () {
        function LinkParasUtil() {}
        /**
         * 获取 URL 查询字符串中的所有参数
         * @returns 包含所有参数的对象
         */
        LinkParasUtil.getLinkParas = function getLinkParas() {
          var linkParas = {};
          var search = window.location.search; // 获取 url 中 "?" 符后的字串
          if (search.indexOf("?") != -1) {
            var str = search.substr(1);
            var strs = str.split("&");
            for (var i = 0; i < strs.length; i++) {
              linkParas[strs[i].split("=")[0]] = decodeURIComponent(strs[i].split("=")[1]);
            }
          }
          return linkParas;
        }

        /**
         * 通过参数 key 获取对应参数值
         * @param key 参数名
         * @returns 参数值，如果未找到则返回 null
         */;
        LinkParasUtil.getParameterValue = function getParameterValue(key) {
          var params = this.getLinkParas();
          return params[key] || null;
        };
        return LinkParasUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadResNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetMgr.ts', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, ProgressBar, Component, AssetsMgr, Logger;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }, function (module) {
      AssetsMgr = module.AssetsMgr;
    }, function (module) {
      Logger = module.Logger;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "1d1fe7QK3JIxLk6qffhHUF7", "LoadResNode", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LoadResNode = exports('LoadResNode', (_dec = ccclass('LoadResNode'), _dec2 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadResNode, _Component);
        function LoadResNode() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "loadProgress", _descriptor, _assertThisInitialized(_this));
          _this.totalProgress = 1;
          return _this;
        }
        var _proto = LoadResNode.prototype;
        _proto.loadGame = /*#__PURE__*/function () {
          var _loadGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
                    var bundleName, sceneNames, finders, bundle, i, _i;
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          bundleName = data.bundleName;
                          sceneNames = data.sceneNames;
                          finders = data.finderNames;
                          _this2.totalProgress = sceneNames.length + finders.length;
                          _context.next = 6;
                          return AssetsMgr.loadBundle(bundleName);
                        case 6:
                          bundle = _context.sent;
                          i = 0;
                        case 8:
                          if (!(i < finders.length)) {
                            _context.next = 14;
                            break;
                          }
                          _context.next = 11;
                          return _this2.preLoadFinders(bundle, finders[i], i);
                        case 11:
                          i++;
                          _context.next = 8;
                          break;
                        case 14:
                          _i = 0;
                        case 15:
                          if (!(_i < sceneNames.length)) {
                            _context.next = 21;
                            break;
                          }
                          _context.next = 18;
                          return _this2.preloadScenes(bundle, sceneNames[_i], finders.length + _i);
                        case 18:
                          _i++;
                          _context.next = 15;
                          break;
                        case 21:
                          resolve(true);
                        case 22:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  }))));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function loadGame(_x) {
            return _loadGame.apply(this, arguments);
          }
          return loadGame;
        }()
        /**
         * 加载bundle包下的文件夹一般用来加载一个文件下所有的预制体
         * @param bundle 加载的bundle包名
         * @param finderName 包下的文件夹名
         * @returns Promise<Asset[]>
         */;

        _proto.preLoadFinders = function preLoadFinders(bundle, finderName, index) {
          var _this3 = this;
          return new Promise(function (resolve, reject) {
            bundle.loadDir(finderName, function (completedCount, totalCount, item) {
              _this3.refreshProgress(index, completedCount, totalCount);
            }, function (err, assts) {
              if (err) {
                Logger.errNet('loadDir error:', finderName);
              }
              resolve(assts);
            });
          });
        }

        /**
         * 加载bundle包下的文件夹一般用来加载一个文件下所有的预制体
         * @param bundle 加载的bundle包名
         * @param sceneName 包下的文件夹名
         * @returns Promise<Asset[]>
         */;
        _proto.preloadScenes = function preloadScenes(bundle, sceneName, index) {
          var _this4 = this;
          return new Promise(function (resolve, reject) {
            bundle.loadScene(sceneName, function (completedCount, totalCount, item) {
              _this4.refreshProgress(index, completedCount, totalCount);
            }, function (err, assts) {
              if (err) {
                Logger.errNet('loadScene error:', sceneName);
              }
              resolve(assts);
            });
          });
        }
        /**
         * 刷新进度条
         * @param count 
         * @param completedCount 
         * @param totalCount 
         */;
        _proto.refreshProgress = function refreshProgress(count, completedCount, totalCount) {
          var plan = (count + completedCount / totalCount) / this.totalProgress;
          this.loadProgress.progress = plan;
        };
        return LoadResNode;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadProgress", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Logger.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('Logger', void 0);
      cclegacy._RF.push({}, "fa1c5jw1X9CU4hsSCmrTjnt", "Logger", undefined);
      var Logger;
      (function (_Logger) {
        var LogLevel = {
          TRACE: "TRACE",
          DEBUG: "DEBUG",
          INFO: "INFO",
          WARN: "WARN",
          ERROR: "ERROR",
          FATAL: "FATAL"
        };
        function logNet() {
          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
          }
          log.apply(void 0, [LogLevel.INFO, 'Network'].concat(params));
        }
        _Logger.logNet = logNet;
        function errNet() {
          for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
          }
          log.apply(void 0, [LogLevel.ERROR, 'Network'].concat(params));
        }
        _Logger.errNet = errNet;
        function log(level, catalog) {
          var _console;
          var now = new Date();
          var time = "[" + now.getFullYear() + "/" + tenned(now.getMonth()) + "/" + tenned(now.getDay()) + " " + tenned(now.getHours()) + ":" + tenned(now.getMinutes()) + ":" + tenned(now.getSeconds()) + "]\t";
          for (var _len3 = arguments.length, params = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            params[_key3 - 2] = arguments[_key3];
          }
          (_console = console).log.apply(_console, [time, "[" + level + "]\t", "[" + catalog + "]\t"].concat(params));
        }
        function tenned(value) {
          if (value < 10) {
            return "0" + value;
          } else {
            return value.toString();
          }
        }
      })(Logger || (Logger = exports('Logger', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./ClientEnum.ts', './GameConfig.ts', './GamePackage.ts', './GlobalData.ts', './BaseState.ts', './StateMachineManager.ts', './BaseGameTale.ts', './BaseTableController.ts', './BaseTableModel.ts', './BaseTableProxy.ts', './BaseAllCardVerifyInfoView.ts', './BaseAutoSettingView.ts', './BaseCardVerifyView.ts', './BaseChipSettingView.ts', './BaseMainGameView.ts', './BaseMenuView.ts', './BaseRecordView.ts', './BaseRoadMapView.ts', './BaseSoundSettingView.ts', './BaseTableBetView.ts', './BaseTableCardView.ts', './BaseTableChipView.ts', './BaseTableSettleView.ts', './BaseTableTipView.ts', './BaseTableView.ts', './BaseGame.ts', './I18nLabel.ts', './I18nMgr.ts', './I18nSprite.ts', './bigRoad.ts', './bottomRoad.ts', './cubeRoad.ts', './dragonIncubatePool.ts', './proccessor.ts', './roadFragment.ts', './roadInfo.ts', './AssetMgr.ts', './AudioManager.ts', './AudioRoot.ts', './BundleMgr.ts', './GameMgr.ts', './PlayerMgr.ts', './PopupMgr.ts', './Emitter.ts', './HttpUtils.ts', './NetConnect.ts', './Protocol.ts', './WebSocketClient.ts', './account.ts', './bc_baccarat.ts', './bc_niuniu.ts', './chat.ts', './code.ts', './finance.ts', './game.ts', './pitaya_proto_wasm.ts', './GameChatView.ts', './GameVideoView.ts', './TCLiveChat.ts', './TCLivePlayer.ts', './BetChipItem.ts', './CardItem.ts', './ChipItem.ts', './GameClock.ts', './SetChipItem.ts', './TipPopup.ts', './ToastPopup.ts', './VerifyCardItem.ts', './LinkParasUtil.ts', './Logger.ts', './NumberFormatUtil.ts', './Utils.ts', './LauncherScene.ts', './LoadResNode.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/NetConnect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PopupMgr.ts', './Emitter.ts', './Utils.ts', './GameConfig.ts', './GlobalData.ts', './WebSocketClient.ts', './Logger.ts', './LinkParasUtil.ts', './PlayerMgr.ts', './code.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, warn, PopupMgr, Emitter, Utils, GameConfig, GlobalData, NetCode, GlobalEvent, GameWSRoute, PitayaClient, Logger, LinkParasUtil, PlayerMgr, Code;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
    }, function (module) {
      PopupMgr = module.PopupMgr;
    }, function (module) {
      Emitter = module.Emitter;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GlobalData = module.GlobalData;
      NetCode = module.NetCode;
      GlobalEvent = module.GlobalEvent;
      GameWSRoute = module.GameWSRoute;
    }, function (module) {
      PitayaClient = module.PitayaClient;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      LinkParasUtil = module.LinkParasUtil;
    }, function (module) {
      PlayerMgr = module.default;
    }, function (module) {
      Code = module.Code;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ebddcf9dFtAR6ZKnp0EA794", "NetConnect", undefined);

      /**
       * 网络加载模块
       */
      var NetConnect = exports('default', /*#__PURE__*/function () {
        function NetConnect() {}
        /**
         * 连接网络
         * @param cb 连接成功的回调
         */
        NetConnect.connect = /*#__PURE__*/
        function () {
          var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this = this;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                      while (1) switch (_context2.prev = _context2.next) {
                        case 0:
                          if (PitayaClient.WebSocketConnector.instance.isConnected) {
                            _this.disConnect();
                          }
                          _context2.next = 3;
                          return _this.initClient().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                            var username;
                            return _regeneratorRuntime().wrap(function _callee$(_context) {
                              while (1) switch (_context.prev = _context.next) {
                                case 0:
                                  username = LinkParasUtil.getParameterValue("username"); //登录
                                  _context.next = 3;
                                  return _this.sendRequest(GameWSRoute.Login, {
                                    vendor: 0,
                                    token: username ? username : 'demo-user'
                                  }).then(function (response) {
                                    PlayerMgr.instance.initData(response);
                                    resolve(true);
                                  }).then(function () {
                                    resolve(false);
                                  });
                                case 3:
                                case "end":
                                  return _context.stop();
                              }
                            }, _callee);
                          })), function () {
                            resolve(false);
                          });
                        case 3:
                        case "end":
                          return _context2.stop();
                      }
                    }, _callee2);
                  }))));
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function connect() {
            return _connect.apply(this, arguments);
          }
          return connect;
        }();
        NetConnect.initClient = function initClient() {
          var url = GameConfig.gameConfig.WS_URL;
          var protoUrl = GameConfig.gameConfig.PROTO_URL;
          Logger.logNet('WebSocketClient connecting...', url, protoUrl);
          return new Promise(function (resolve, reject) {
            PitayaClient.WebSocketConnector.instance.init({
              wsUrl: url,
              protoUrl: protoUrl,
              docsRoute: 'connector.meta.docs'
            }, function () {
              GlobalData.isManualDisconnect = false;
              Logger.logNet('WebSocketClient initialized');
              resolve(true);
            });
          });
        }

        /**
         * 断开连接
         */;
        NetConnect.disConnect = function disConnect() {
          GlobalData.isManualDisconnect = true;
          PitayaClient.WebSocketConnector.instance.disconnect();
        };
        NetConnect.reconnectMob = function reconnectMob(cb) {
          return new Promise(function (resolve, reject) {
            PitayaClient.WebSocketConnector.instance.reconnectMob(function () {
              resolve(true);
            });
          });
        }

        /** 获取socket连接状态 */;
        /**
         * 网络请求
         * @param route 消息id
         * @param msg   消息体  
         * @param cb    回调
         */
        NetConnect.sendRequest = function sendRequest(route, msg) {
          if (msg === void 0) {
            msg = {};
          }
          if (!PitayaClient.WebSocketConnector.instance.isConnected) {
            //网络连接失败
            warn('网络连接失败');
            return;
          }
          Logger.logNet('===发送消息===============' + Utils.getNowTime(), route, msg);
          return new Promise(function (resolve, reject) {
            PitayaClient.WebSocketConnector.instance.request(route, msg, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    Logger.logNet('===消息响应===============' + Utils.getNowTime(), route, data);
                    if (data.code == Code.Ok) {
                      resolve(data);
                    } else if (data.code == NetCode.ResponseMaintenance) {
                      Emitter.emit(GlobalEvent.EVENT_GAME_MAINTENANCE);
                      reject(data.code);
                    } else {
                      if (data.code) {
                        PopupMgr.instance.showToast(data.code);
                      }
                      reject(data.code);
                    }
                  case 2:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4);
            })));
          });
        };
        _createClass(NetConnect, null, [{
          key: "isConnected",
          get: function get() {
            return PitayaClient.WebSocketConnector.instance.isConnected;
          }
        }]);
        return NetConnect;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NumberFormatUtil.ts", ['cc', './decimal.mjs'], function (exports) {
  var cclegacy, Decimal;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Decimal = module.Decimal;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82ad3VLKn1Dt6cglcYpkOTR", "NumberFormatUtil", undefined);
      var NumberFormatUtil = exports('NumberFormatUtil', /*#__PURE__*/function () {
        function NumberFormatUtil() {}
        /**
         * 后端货币转换为前端显示的货币，后端的放大了10000倍
         * @param numStr 后端传入的货币字符串
         * @returns 转换后的货币值
         */
        NumberFormatUtil.formatMoneyToNumber = function formatMoneyToNumber(numStr) {
          // 使用 Decimal 进行计算
          var num = new Decimal(numStr);
          // 先除以 100 并取整
          num = num.div(100).floor();
          // 再除以 100
          num = num.div(100);
          // 转换为 number 类型
          return num.toNumber();
        }
        /**
         * 货币转换为后端识别的字串
         * @param num 
         * @returns 
         */;
        NumberFormatUtil.formatMoneyToString = function formatMoneyToString(num) {
          // 将 number 转换为 Decimal 类型
          var decimalNum = new Decimal(num);
          // 乘以 10000
          var result = decimalNum.mul(10000);
          // 转换为字符串类型
          return result.toString();
        }

        /**
         * 向下保留两位小数
         * @param value 
         * @param length 
         */;
        NumberFormatUtil.floorrRound = function floorrRound(value, length) {
          return Math.round(Math.floor(value * Math.pow(10, length))) / Math.pow(10, length);
        }
        /**
         * 数字千分位分割
         * @param num 
         */;
        NumberFormatUtil.formatNumDistance = function formatNumDistance(num) {
          var numStrs = num.toString().split(".");
          var integeStr = numStrs[0].replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
          if (numStrs.length > 1) {
            return integeStr + "." + numStrs[1];
          } else {
            return integeStr;
          }
        }

        /**
         * 
         * @param num 数值
         * @param length 保留的小数位
         * @param isLower 字母大小写
         */;
        NumberFormatUtil.formatUnit = function formatUnit(num, length, isLower) {
          if (length === void 0) {
            length = 0;
          }
          if (isLower === void 0) {
            isLower = false;
          }
          var numStr = Math.floor(num).toString();
          if (num >= 1000 && num < 1000000) {
            numStr = this.floorrRound(num / 1000, length) + (isLower ? "k" : "K");
          } else if (num >= 1000000 && num < 10000000000) {
            numStr = this.floorrRound(num / 1000000, length) + (isLower ? "m" : "M");
          } else if (num >= 10000000000) {
            numStr = this.floorrRound(num / 10000000000, length) + (isLower ? "b" : "B");
          }
          return numStr;
        };
        NumberFormatUtil.formatChipNum = function formatChipNum(num) {
          if (num % 1000 === 0) {
            return this.formatUnit(num);
          } else {
            return Math.floor(num).toString();
          }
        }

        /**
         * 
         * @param num 数值
         * @param formatCount 最多显示6位数；最多显示10位数；最多显示18位数
         */;
        NumberFormatUtil.formatMoneyByType = function formatMoneyByType(num, formatCount) {
          if (formatCount === void 0) {
            formatCount = 6;
          }
          var numStr = this.formatNumDistance(num);
          var len = numStr.length;
          var formatStr = "";
          var strs = ["", "K", "M", "B", "T"];
          var maxLen = 0;
          if (formatCount == 6) {
            maxLen = 21;
          } else if (formatCount == 18) {
            maxLen = 29;
          } else {
            maxLen = 25;
          }
          for (var i = 0; i < strs.length; i++) {
            var count = 4;
            var _num = i == 0 ? 0 : 1;
            if (len <= formatCount + i * count - _num) {
              if (i == 0) {
                formatStr = numStr;
              } else {
                formatStr = numStr.substring(0, len - i * 4) + strs[i];
              }
              break;
            }
          }
          if (len > maxLen) {
            console.error("已经超过最大显示上限formatCount:", formatCount, "numStr:", numStr);
            return numStr;
          }
          return formatStr;
        };
        return NumberFormatUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pitaya_proto_wasm.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports, module) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        default: __wbg_init,
        initSync: initSync,
        un_compress: un_compress
      });
      cclegacy._RF.push({}, "c6cec0LgVZBqoG1rrgP+SSW", "pitaya_proto_wasm", undefined);
      var wasm;
      var cachedTextDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', {
        ignoreBOM: true,
        fatal: true
      }) : {
        decode: function decode() {
          throw Error('TextDecoder not available');
        }
      };
      if (typeof TextDecoder !== 'undefined') {
        cachedTextDecoder.decode();
      }
      var cachedUint8ArrayMemory0 = null;
      function getUint8ArrayMemory0() {
        if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
          cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachedUint8ArrayMemory0;
      }
      function getStringFromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
      }
      var WASM_VECTOR_LEN = 0;
      function passArray8ToWasm0(arg, malloc) {
        var ptr = malloc(arg.length * 1, 1) >>> 0;
        getUint8ArrayMemory0().set(arg, ptr / 1);
        WASM_VECTOR_LEN = arg.length;
        return ptr;
      }
      function takeFromExternrefTable0(idx) {
        var value = wasm.__wbindgen_export_0.get(idx);
        wasm.__externref_table_dealloc(idx);
        return value;
      }
      function getArrayU8FromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
      }
      /**
       * @param {Uint8Array} data
       * @returns {Uint8Array}
       */
      function un_compress(data) {
        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.un_compress(ptr0, len0);
        if (ret[3]) {
          throw takeFromExternrefTable0(ret[2]);
        }
        var v2 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v2;
      }
      var cachedTextEncoder = typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : {
        encode: function encode() {
          throw Error('TextEncoder not available');
        }
      };
      var encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {
        return cachedTextEncoder.encodeInto(arg, view);
      } : function (arg, view) {
        var buf = cachedTextEncoder.encode(arg);
        view.set(buf);
        return {
          read: arg.length,
          written: buf.length
        };
      };
      function passStringToWasm0(arg, malloc, realloc) {
        if (realloc === undefined) {
          var buf = cachedTextEncoder.encode(arg);
          var _ptr = malloc(buf.length, 1) >>> 0;
          getUint8ArrayMemory0().subarray(_ptr, _ptr + buf.length).set(buf);
          WASM_VECTOR_LEN = buf.length;
          return _ptr;
        }
        var len = arg.length;
        var ptr = malloc(len, 1) >>> 0;
        var mem = getUint8ArrayMemory0();
        var offset = 0;
        for (; offset < len; offset++) {
          var code = arg.charCodeAt(offset);
          if (code > 0x7F) break;
          mem[ptr + offset] = code;
        }
        if (offset !== len) {
          if (offset !== 0) {
            arg = arg.slice(offset);
          }
          ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
          var view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
          var ret = encodeString(arg, view);
          offset += ret.written;
          ptr = realloc(ptr, len, offset, 1) >>> 0;
        }
        WASM_VECTOR_LEN = offset;
        return ptr;
      }
      var ProtoProcessorFinalization = typeof FinalizationRegistry === 'undefined' ? {
        register: function register() {},
        unregister: function unregister() {}
      } : new FinalizationRegistry(function (ptr) {
        return wasm.__wbg_protoprocessor_free(ptr >>> 0, 1);
      });
      var ProtoProcessor = exports('ProtoProcessor', /*#__PURE__*/function () {
        var _proto = ProtoProcessor.prototype;
        _proto.__destroy_into_raw = function __destroy_into_raw() {
          var ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ProtoProcessorFinalization.unregister(this);
          return ptr;
        };
        _proto.free = function free() {
          var ptr = this.__destroy_into_raw();
          wasm.__wbg_protoprocessor_free(ptr, 0);
        }
        /**
         * @param {Uint8Array} bytes
         */;
        function ProtoProcessor(bytes) {
          var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          var ret = wasm.protoprocessor_new(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          ProtoProcessorFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * @param {Uint8Array} bytes
         * @returns {string}
         */
        _proto.docs = function docs(bytes) {
          var deferred3_0;
          var deferred3_1;
          try {
            var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ret = wasm.protoprocessor_docs(this.__wbg_ptr, ptr0, len0);
            var ptr2 = ret[0];
            var len2 = ret[1];
            if (ret[3]) {
              ptr2 = 0;
              len2 = 0;
              throw takeFromExternrefTable0(ret[2]);
            }
            deferred3_0 = ptr2;
            deferred3_1 = len2;
            return getStringFromWasm0(ptr2, len2);
          } finally {
            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);
          }
        }
        /**
         * @param {string} name
         * @param {Uint8Array} bytes
         * @returns {string}
         */;
        _proto.decode = function decode(name, bytes) {
          var deferred4_0;
          var deferred4_1;
          try {
            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.protoprocessor_decode(this.__wbg_ptr, ptr0, len0, ptr1, len1);
            var ptr3 = ret[0];
            var len3 = ret[1];
            if (ret[3]) {
              ptr3 = 0;
              len3 = 0;
              throw takeFromExternrefTable0(ret[2]);
            }
            deferred4_0 = ptr3;
            deferred4_1 = len3;
            return getStringFromWasm0(ptr3, len3);
          } finally {
            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);
          }
        }
        /**
         * @param {string} name
         * @param {string} message
         * @returns {Uint8Array}
         */;
        _proto.encode = function encode(name, message) {
          var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          var len0 = WASM_VECTOR_LEN;
          var ptr1 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          var len1 = WASM_VECTOR_LEN;
          var ret = wasm.protoprocessor_encode(this.__wbg_ptr, ptr0, len0, ptr1, len1);
          if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
          }
          var v3 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
          wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          return v3;
        };
        return ProtoProcessor;
      }());
      function __wbg_load(_x, _x2) {
        return _wbg_load.apply(this, arguments);
      }
      function _wbg_load() {
        _wbg_load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(module, imports) {
          var bytes, instance;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(typeof Response === 'function' && module instanceof Response)) {
                  _context.next = 23;
                  break;
                }
                if (!(typeof WebAssembly.instantiateStreaming === 'function')) {
                  _context.next = 15;
                  break;
                }
                _context.prev = 2;
                _context.next = 5;
                return WebAssembly.instantiateStreaming(module, imports);
              case 5:
                return _context.abrupt("return", _context.sent);
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](2);
                if (!(module.headers.get('Content-Type') != 'application/wasm')) {
                  _context.next = 14;
                  break;
                }
                console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", _context.t0);
                _context.next = 15;
                break;
              case 14:
                throw _context.t0;
              case 15:
                _context.next = 17;
                return module.arrayBuffer();
              case 17:
                bytes = _context.sent;
                _context.next = 20;
                return WebAssembly.instantiate(bytes, imports);
              case 20:
                return _context.abrupt("return", _context.sent);
              case 23:
                _context.next = 25;
                return WebAssembly.instantiate(module, imports);
              case 25:
                instance = _context.sent;
                if (!(instance instanceof WebAssembly.Instance)) {
                  _context.next = 30;
                  break;
                }
                return _context.abrupt("return", {
                  instance: instance,
                  module: module
                });
              case 30:
                return _context.abrupt("return", instance);
              case 31:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[2, 8]]);
        }));
        return _wbg_load.apply(this, arguments);
      }
      function __wbg_get_imports() {
        var imports = {};
        imports.wbg = {};
        imports.wbg.__wbindgen_init_externref_table = function () {
          var table = wasm.__wbindgen_export_0;
          var offset = table.grow(4);
          table.set(0, undefined);
          table.set(offset + 0, undefined);
          table.set(offset + 1, null);
          table.set(offset + 2, true);
          table.set(offset + 3, false);
        };
        imports.wbg.__wbindgen_string_new = function (arg0, arg1) {
          var ret = getStringFromWasm0(arg0, arg1);
          return ret;
        };
        imports.wbg.__wbindgen_throw = function (arg0, arg1) {
          throw new Error(getStringFromWasm0(arg0, arg1));
        };
        return imports;
      }
      function __wbg_finalize_init(instance, module) {
        wasm = instance.exports;
        __wbg_init.__wbindgen_wasm_module = module;
        cachedUint8ArrayMemory0 = null;
        wasm.__wbindgen_start();
        return wasm;
      }
      function initSync(module) {
        if (wasm !== undefined) return wasm;
        if (typeof module !== 'undefined') {
          if (Object.getPrototypeOf(module) === Object.prototype) {
            var _module = module;
            module = _module.module;
          } else {
            console.warn('using deprecated parameters for `initSync()`; pass a single object instead');
          }
        }
        var imports = __wbg_get_imports();
        if (!(module instanceof WebAssembly.Module)) {
          module = new WebAssembly.Module(module);
        }
        var instance = new WebAssembly.Instance(module, imports);
        return __wbg_finalize_init(instance, module);
      }
      function __wbg_init(_x3) {
        return _wbg_init.apply(this, arguments);
      }
      function _wbg_init() {
        _wbg_init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(module_or_path) {
          var _module_or_path, imports, _yield$__wbg_load, instance, module$1;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (!(wasm !== undefined)) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return", wasm);
              case 2:
                if (typeof module_or_path !== 'undefined') {
                  if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
                    _module_or_path = module_or_path;
                    module_or_path = _module_or_path.module_or_path;
                  } else {
                    console.warn('using deprecated parameters for the initialization function; pass a single object instead');
                  }
                }
                if (typeof module_or_path === 'undefined') {
                  module_or_path = new URL('pitaya_proto_wasm_bg.wasm', module.meta.url);
                }
                imports = __wbg_get_imports();
                if (typeof module_or_path === 'string' || typeof Request === 'function' && module_or_path instanceof Request || typeof URL === 'function' && module_or_path instanceof URL) {
                  module_or_path = fetch(module_or_path);
                }
                _context2.t0 = __wbg_load;
                _context2.next = 10;
                return module_or_path;
              case 10:
                _context2.t1 = _context2.sent;
                _context2.t2 = imports;
                _context2.next = 14;
                return (0, _context2.t0)(_context2.t1, _context2.t2);
              case 14:
                _yield$__wbg_load = _context2.sent;
                instance = _yield$__wbg_load.instance;
                module$1 = _yield$__wbg_load.module;
                return _context2.abrupt("return", __wbg_finalize_init(instance, module$1));
              case 18:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return _wbg_init.apply(this, arguments);
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NumberFormatUtil.ts'], function (exports) {
  var _createClass, cclegacy, NumberFormatUtil;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85381zFXDNFt7EnxgVM8HbV", "PlayerMgr", undefined);

      /**
       * 自己的信息
       * 单例
       */
      var PlayerMgr = exports('default', /*#__PURE__*/function () {
        function PlayerMgr() {
          /** 用户钱 */
          this._coin = void 0;
          this.nickname = "";
          this.avatar = "";
          this.id = "";
        }
        var _proto = PlayerMgr.prototype;
        /**
         * 初始化数据
         * @param data 
         */
        _proto.initData = function initData(data) {
          this.coin = NumberFormatUtil.formatMoneyToNumber(data.coin);
          this.id = data.id;
          this.nickname = data.nickname;
        };
        _createClass(PlayerMgr, [{
          key: "coin",
          get:
          /**
           * 用户钱
           */
          function get() {
            return this._coin;
          },
          set:
          /**
           * 用户钱
           */
          function set(num) {
            this._coin = num;
          }
        }], [{
          key: "instance",
          get:
          /**
           * 创建单例
           */
          function get() {
            if (!this._instance) {
              this._instance = new PlayerMgr();
            }
            return this._instance;
          }
        }]);
        return PlayerMgr;
      }());
      PlayerMgr._instance = null;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetMgr.ts', './Utils.ts', './ClientEnum.ts', './TipPopup.ts', './ToastPopup.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, RenderRoot2D, instantiate, assetManager, resources, AssetsMgr, Utils, PopupCloseType, PopupName, TipPopup, ToastPopup;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RenderRoot2D = module.RenderRoot2D;
      instantiate = module.instantiate;
      assetManager = module.assetManager;
      resources = module.resources;
    }, function (module) {
      AssetsMgr = module.AssetsMgr;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      PopupCloseType = module.PopupCloseType;
      PopupName = module.PopupName;
    }, function (module) {
      TipPopup = module.TipPopup;
    }, function (module) {
      ToastPopup = module.ToastPopup;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "1aa0fqRcAlNtIVBaSCo7646", "PopupMgr", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var PopupMgr = exports('PopupMgr', (_dec = ccclass('PopupMgr'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function PopupMgr() {
          /**  */
          this.alertNode = null;
          this.alertInfo = {
            contentLabel: ''
          };
          /** 常驻父节点 保证节点不频繁的创建销毁 */
          this.staticNode = null;
          /**弹窗列表 */
          this.popupList = [];
          this.staticNode = Utils.getStaticNode('StaticNode');
          this.staticNode.addComponent(RenderRoot2D);
        }
        var _proto = PopupMgr.prototype;
        /**
         * 显示弹窗
         * @param popupInfo 
         */
        _proto.showPopup = /*#__PURE__*/
        function () {
          var _showPopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(popupInfo) {
            var prefabName, popupNode, loadPath, loadBundle, prefab;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  //先从本地list中获取,获取不到则动态加载
                  prefabName = popupInfo.name;
                  popupNode = this.getPopupNode(prefabName);
                  if (!popupNode) {
                    _context.next = 6;
                    break;
                  }
                  this.setPopNodeInfo(popupNode, popupInfo);
                  _context.next = 15;
                  break;
                case 6:
                  loadPath = (popupInfo.path ? popupInfo.path : "prefab/") + prefabName;
                  loadBundle = resources;
                  if (popupInfo.bundleName) {
                    loadBundle = assetManager.getBundle(popupInfo.bundleName);
                  }
                  _context.next = 11;
                  return AssetsMgr.loadPrefab(loadPath, loadBundle);
                case 11:
                  prefab = _context.sent;
                  popupNode = instantiate(prefab);
                  this.setPopNodeInfo(popupNode, popupInfo);
                  this.popupList.push(popupNode);
                case 15:
                  return _context.abrupt("return", popupNode);
                case 16:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function showPopup(_x) {
            return _showPopup.apply(this, arguments);
          }
          return showPopup;
        }()
        /**
         * 设置弹窗信息
         * @param popupNode 
         * @param popupInfo 
         */;

        _proto.setPopNodeInfo = function setPopNodeInfo(popupNode, popupInfo) {
          popupNode.active = true;
          var parent = popupInfo.parentNode ? popupInfo.parentNode : this.staticNode;
          if (popupNode.parent != parent) {
            popupNode.parent = parent;
          }

          //设置动画
          if (popupInfo.isAction) {
            this.playPopupInAni(popupNode);
          }
          //设置数据
          if (popupInfo.data) {
            var popupNodeName = popupNode.name;
            //获取组件，组件名默认为节点名称首字母大写
            var componentName = popupInfo.componentName ? popupInfo.componentName : popupNodeName.charAt(0).toLocaleUpperCase() + popupNodeName.substring(1);
            var component = popupNode.getComponent(componentName);
            //@ts-ignore
            component == null || component.init(popupInfo.data);
          }
        }

        /**
         * 关闭弹窗 
         * @param popupName 关闭弹窗的name 或弹窗的Component  在代码中用this表示
         * @param closeType 关闭类型  默认为隐藏
         */;
        _proto.closePopup = function closePopup(popupName, closeType) {
          if (closeType === void 0) {
            closeType = PopupCloseType.hide;
          }
          var popupNode = null;
          if (typeof popupName == 'string') {
            popupNode = this.getPopupNode(popupName);
          } else {
            var uiname = popupName.node.name;
            popupNode = this.getPopupNode(uiname);
          }
          if (popupNode) {
            if (closeType == PopupCloseType.hide) {
              popupNode.active = false;
            } else if (closeType == PopupCloseType.remove) {
              popupNode.removeFromParent();
              this.popupList = this.popupList.filter(function (element) {
                return element.name != popupName;
              });
            } else {
              popupNode.destroy();
              this.popupList = this.popupList.filter(function (element) {
                return element.name != popupName;
              });
            }
          }
        }

        /**
         * 关闭所有弹窗 
         * @param closeType 关闭类型  默认为隐藏
         */;
        _proto.closeAllPopup = function closeAllPopup(closeType) {
          if (closeType === void 0) {
            closeType = PopupCloseType.hide;
          }
          for (var index = 0; index < this.popupList.length; index++) {
            var popupNode = this.popupList[index];
            if (popupNode) {
              if (closeType == PopupCloseType.hide) {
                popupNode.active = false;
              } else if (closeType == PopupCloseType.remove) {
                popupNode.removeFromParent();
                this.popupList = [];
              } else {
                popupNode.destroy();
                this.popupList = [];
              }
            }
          }
        }
        /**
         * 播放弹出动画
         * @param popupNode 
         */;
        _proto.playPopupInAni = function playPopupInAni(popupNode) {}
        /**
         * 获取列表中的弹窗节点
         * @param popupName 
         */;
        _proto.getPopupNode = function getPopupNode(popupName) {
          // let popupNode: Node = null;
          for (var index = 0; index < this.popupList.length; index++) {
            var element = this.popupList[index];
            if (popupName === element.name) {
              return element;
            }
          }
          return null;
        }
        /**
         * 弹提示
         * @param msg 
         * @param time 
         */;
        _proto.showToast = /*#__PURE__*/
        function () {
          var _showToast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(msg, time) {
            var toastPopup;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (time === void 0) {
                    time = 2;
                  }
                  _context2.next = 3;
                  return this.showPopup({
                    name: 'toastPopup'
                  });
                case 3:
                  toastPopup = _context2.sent;
                  toastPopup.getComponent(ToastPopup).showMsg(msg, time);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function showToast(_x2, _x3) {
            return _showToast.apply(this, arguments);
          }
          return showToast;
        }()
        /**
         * 显示加载中
         */;

        _proto.showLoading = function showLoading() {}
        /**
         * 隐藏加载中
         */;
        _proto.showHideLoading = function showHideLoading() {}

        /**
         * 显示警告提示弹窗
         */;
        _proto.showAlert = /*#__PURE__*/
        function () {
          var _showAlert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(text, callback) {
            var popupInfo;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (callback === void 0) {
                    callback = null;
                  }
                  this.alertInfo.contentLabel = text;
                  this.alertInfo.confirmCallback = callback;
                  popupInfo = {
                    name: PopupName.GAME_TIP_POPUP,
                    data: this.alertInfo
                  };
                  _context3.next = 6;
                  return this.showPopup(popupInfo);
                case 6:
                  this.alertNode = _context3.sent;
                  return _context3.abrupt("return", this);
                case 8:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function showAlert(_x4, _x5) {
            return _showAlert.apply(this, arguments);
          }
          return showAlert;
        }()
        /**
         * 警告提示弹窗确定添加
         */;

        _proto.confirm = function confirm(callback) {
          this.alertInfo.confirmCallback = callback;
          this.refUIInfo();
          return this;
        }

        /**
         * 警告提示弹窗取消添加
         */;
        _proto.cancel = function cancel(callback) {
          this.alertInfo.cancelCallback = callback;
          this.refUIInfo();
          return this;
        };
        _proto.refUIInfo = function refUIInfo() {
          if (!this.alertNode) {
            return;
          }
          this.alertNode.getComponent(TipPopup).init(this.alertInfo);
        };
        _createClass(PopupMgr, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new PopupMgr();
            }
            return this._instance;
          }
        }]);
        return PopupMgr;
      }(), _class2._instance = null, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/proccessor.ts", ['cc', './cubeRoad.ts', './bigRoad.ts', './bottomRoad.ts'], function (exports) {
  var cclegacy, CubeRoadState, BigRoadState, BottomRoadState;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CubeRoadState = module.CubeRoadState;
    }, function (module) {
      BigRoadState = module.BigRoadState;
    }, function (module) {
      BottomRoadState = module.BottomRoadState;
    }],
    execute: function () {
      exports('roadPreProcess', roadPreProcess);
      cclegacy._RF.push({}, "d0e981o+7hJzauOL6DYy7FH", "proccessor", undefined);

      /** 对传入的路单进行处理，计算得到五种路单的图形要素，及庄/闲问路预测结果 */
      function roadPreProcess(request) {
        // big road 处理状态
        var bigRoadState = new BigRoadState(request.config.bigRoadRowCount);

        // cube road 处理状态
        var cubeRoadState = new CubeRoadState(request.config.cubeRoadRowCount);

        // 下三路状态
        var bigEyeRoadState = new BottomRoadState(request.config.bigEyeRoadRowCount);
        var smallEyeRoadState = new BottomRoadState(request.config.smallRoadRowCount);
        var cockroachRoadState = new BottomRoadState(request.config.cockroachRoadRowCount);
        var roundCount = request.roadInfos.length;
        for (var i = 0; i < roundCount; i++) {
          var roadInfo = request.roadInfos[i];
          var bottomInfo = bigRoadState.process(roadInfo);
          cubeRoadState.process(roadInfo);
          bigEyeRoadState.process(bottomInfo.bigEye);
          smallEyeRoadState.process(bottomInfo.smallRoad);
          cockroachRoadState.process(bottomInfo.cockroach);
        }

        // 庄问路
        var bigEyeRoadPretendBanker = bigRoadState.bottomRoadColorPretend(1);
        var smallRoadPretendBanker = bigRoadState.bottomRoadColorPretend(2);
        var cockroachRoadPretendBanker = bigRoadState.bottomRoadColorPretend(3);
        var bigEye = {
          banker: bigEyeRoadPretendBanker,
          player: BigRoadState.swapColor(bigEyeRoadPretendBanker)
        };
        var smallRoad = {
          banker: smallRoadPretendBanker,
          player: BigRoadState.swapColor(smallRoadPretendBanker)
        };
        var cockroach = {
          banker: cockroachRoadPretendBanker,
          player: BigRoadState.swapColor(cockroachRoadPretendBanker)
        };
        return {
          bigRoadFragments: bigRoadState.finish(),
          cubeRoadFragments: cubeRoadState.finish(),
          bigEyeRoadFragments: bigEyeRoadState.finish(),
          smallRoadFragments: smallEyeRoadState.finish(),
          cockroachRoadFragments: cockroachRoadState.finish(),
          bottomRoadPretends: {
            bigEye: bigEye,
            smallRoad: smallRoad,
            cockroach: cockroach
          }
        };
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Protocol.ts", ['cc', './pitaya_proto_wasm.ts'], function (exports) {
  var cclegacy, un_compress;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      un_compress = module.un_compress;
    }],
    execute: function () {
      exports({
        Message: void 0,
        Package: void 0,
        Protocol: void 0
      });
      cclegacy._RF.push({}, "f4fecGo1ntKLatGGJCymU+e", "Protocol", undefined);
      var CompressType = exports('CompressType', {
        NONE: 0,
        ZLIB: 1,
        GZIP: 2
      });
      var Protocol;
      (function (_Protocol) {
        var PKG_HEAD_BYTES = _Protocol.PKG_HEAD_BYTES = 4;
        var MSG_FLAG_BYTES = _Protocol.MSG_FLAG_BYTES = 1;
        var MSG_ROUTE_CODE_BYTES = _Protocol.MSG_ROUTE_CODE_BYTES = 2;
        var MSG_ID_MAX_BYTES = _Protocol.MSG_ID_MAX_BYTES = 5;
        var MSG_ROUTE_LEN_BYTES = _Protocol.MSG_ROUTE_LEN_BYTES = 1;
        var MSG_ROUTE_CODE_MAX = _Protocol.MSG_ROUTE_CODE_MAX = 0xffff;
        var MSG_COMPRESS_ROUTE_MASK = _Protocol.MSG_COMPRESS_ROUTE_MASK = 0x1;
        var MSG_TYPE_MASK = _Protocol.MSG_TYPE_MASK = 0x7;
        var utf8Encoder = new TextEncoder();
        var utf8Decoder = new TextDecoder('utf-8');

        /**
         * 基于 UTF-8 的字符串编码为字节流
         * @param str
         */
        function strEncode(str) {
          return utf8Encoder.encode(str);
        }
        _Protocol.strEncode = strEncode;
        function strDecode(buffer) {
          return utf8Decoder.decode(un_compress(buffer));
        }
        _Protocol.strDecode = strDecode;
        function copyArray(dest, dOffset, src, sOffset, length) {
          if (length > 0) {
            // Uint8Array
            for (var index = 0; index < length; index++) {
              dest[dOffset++] = src[sOffset++];
            }
          }
        }
        _Protocol.copyArray = copyArray;
      })(Protocol || (Protocol = exports('Protocol', {})));
      var PackageType = exports('PackageType', {
        HANDSHAKE: 1,
        HANDSHAKE_ACK: 2,
        HEARTBEAT: 3,
        DATA: 4,
        KICK: 5
      });
      var Package;
      (function (_Package) {
        function encode(type, body) {
          var _body$length;
          var length = (_body$length = body == null ? void 0 : body.length) != null ? _body$length : 0;
          var buffer = new Uint8Array(Protocol.PKG_HEAD_BYTES + length);
          var index = 0;
          buffer[index++] = type & 0xff;
          buffer[index++] = length >> 16 & 0xff;
          buffer[index++] = length >> 8 & 0xff;
          buffer[index++] = length & 0xff;
          if (body) {
            Protocol.copyArray(buffer, index, body, 0, length);
          }
          return buffer;
        }
        _Package.encode = encode;
        function decode(buffer) {
          var offset = 0;
          var bytes = new Uint8Array(buffer);
          var length = 0;
          var rs = [];
          while (offset < bytes.length) {
            var type = bytes[offset++];
            length = (bytes[offset++] << 16 | bytes[offset++] << 8 | bytes[offset++]) >>> 0;
            var body = void 0;
            if (length > 0) {
              body = new Uint8Array(length);
              Protocol.copyArray(body, 0, bytes, offset, length);
              offset += length;
            }
            rs.push({
              type: type,
              body: body
            });
          }
          return rs;
        }
        _Package.decode = decode;
      })(Package || (Package = exports('Package', {})));
      var MessageType = exports('MessageType', {
        REQUEST: 0,
        NOTIFY: 1,
        RESPONSE: 2,
        PUSH: 3
      });
      var Message;
      (function (_Message) {
        function encode(id, type, compressRoute, route, msg) {
          // calculate the max length of this message
          var idBytes = msgHasId(type) ? calculateMsgIdBytes(id) : 0;
          var msgLen = Protocol.MSG_FLAG_BYTES + idBytes;
          var routeBytes;
          if (msgHasRoute(type)) {
            if (compressRoute) {
              if (typeof route !== 'number') {
                throw new Error('error flag for number route!');
              }
              msgLen += Protocol.MSG_ROUTE_CODE_BYTES;
            } else {
              msgLen += Protocol.MSG_ROUTE_LEN_BYTES;
              if (route) {
                routeBytes = Protocol.strEncode(route);
                if (routeBytes.length > 255) {
                  throw new Error('route maxlength is overflow');
                }
                msgLen += routeBytes.length;
              }
            }
          }
          if (msg) {
            msgLen += msg.length;
          }
          var buffer = new Uint8Array(msgLen);
          var offset = 0;

          // add flag
          offset = encodeMsgFlag(type, compressRoute, buffer, offset);

          // add message id
          if (msgHasId(type)) {
            offset = encodeMsgId(id, buffer, offset);
          }

          // add route
          if (msgHasRoute(type)) {
            offset = encodeMsgRoute(compressRoute, compressRoute ? route : routeBytes, buffer, offset);
          }

          // add body
          if (msg) {
            offset = encodeMsgBody(msg, buffer, offset);
          }
          return buffer;
        }
        _Message.encode = encode;
        /**
         * 从字节流解码为业务消息
         * @param buffer
         */
        function decode(buffer) {
          var bytes = new Uint8Array(buffer);
          var bytesLen = bytes.length || bytes.byteLength;
          var offset = 0;
          var id = 0;

          // parse flag
          var flag = bytes[offset++];
          var compressRoute = (flag & Protocol.MSG_COMPRESS_ROUTE_MASK) !== 0;
          var type = flag >> 1 & Protocol.MSG_TYPE_MASK;

          // parse id
          if (msgHasId(type)) {
            var m = bytes[offset];
            var i = 0;
            do {
              m = bytes[offset];
              id = id + (m & 0x7f) * Math.pow(2, 7 * i);
              offset++;
              i++;
            } while (m >= 128);
          }

          // parse route
          var route;
          if (msgHasRoute(type)) {
            if (compressRoute) {
              route = bytes[offset++] << 8 | bytes[offset++];
            } else {
              var routeLen = bytes[offset++];
              if (routeLen) {
                var bytesRoute = new Uint8Array(routeLen);
                Protocol.copyArray(bytesRoute, 0, bytes, offset, routeLen);
                route = Protocol.strDecode(bytesRoute);
              } else {
                route = '';
              }
              offset += routeLen;
            }
          }

          // parse body
          var bodyLen = bytesLen - offset;
          var body = new Uint8Array(bodyLen);
          Protocol.copyArray(body, 0, bytes, offset, bodyLen);
          return {
            id: id,
            type: type,
            compressRoute: compressRoute,
            route: route,
            body: body
          };
        }
        _Message.decode = decode;
        function msgHasId(type) {
          return type === MessageType.REQUEST || type === MessageType.RESPONSE;
        }
        _Message.msgHasId = msgHasId;
        function msgHasRoute(type) {
          return type === MessageType.REQUEST || type === MessageType.NOTIFY || type === MessageType.PUSH;
        }
        _Message.msgHasRoute = msgHasRoute;
        function calculateMsgIdBytes(id) {
          var len = 0;
          do {
            len += 1;
            id >>= 7;
          } while (id > 0);
          return len;
        }
        _Message.calculateMsgIdBytes = calculateMsgIdBytes;
        function encodeMsgFlag(type, compressRoute, buffer, offset) {
          if (type !== MessageType.REQUEST && type !== MessageType.NOTIFY && type !== MessageType.RESPONSE && type !== MessageType.PUSH) {
            throw new Error('unknown message type: ' + type);
          }
          buffer[offset] = type << 1 | (compressRoute ? 1 : 0);
          return offset + Protocol.MSG_FLAG_BYTES;
        }
        _Message.encodeMsgFlag = encodeMsgFlag;
        function encodeMsgId(id, buffer, offset) {
          do {
            var tmp = id % 128;
            var next = Math.floor(id / 128);
            if (next !== 0) {
              tmp = tmp + 128;
            }
            buffer[offset++] = tmp;
            id = next;
          } while (id !== 0);
          return offset;
        }
        _Message.encodeMsgId = encodeMsgId;
        function encodeMsgRoute(compressRoute, route, buffer, offset) {
          if (compressRoute) {
            var numberRoute = route;
            if (numberRoute > Protocol.MSG_ROUTE_CODE_MAX) {
              throw new Error('route number is overflow');
            }
            buffer[offset++] = numberRoute >> 8 & 0xff;
            buffer[offset++] = numberRoute & 0xff;
          } else {
            var bytesRoute = route;
            if (bytesRoute) {
              buffer[offset++] = bytesRoute.length & 0xff;
              Protocol.copyArray(buffer, offset, bytesRoute, 0, bytesRoute.length);
              offset += bytesRoute.length;
            } else {
              buffer[offset++] = 0;
            }
          }
          return offset;
        }
        _Message.encodeMsgRoute = encodeMsgRoute;
        function encodeMsgBody(msg, buffer, offset) {
          Protocol.copyArray(buffer, offset, msg, 0, msg.length);
          return offset + msg.length;
        }
        _Message.encodeMsgBody = encodeMsgBody;
      })(Message || (Message = exports('Message', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/roadFragment.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "91547SabmFOuqUMTyFhRVPz", "roadFragment", undefined);
      /** 路段 */
      var RoadFragment = exports('RoadFragment', /*#__PURE__*/function () {
        function RoadFragment(rowCount, cells) {
          /** 允许纵向绘制的行数，当前路段必须从该行数以后拐向右方绘制。 */
          this.rowCount = void 0;
          /** 组成路段的全部单元格 */
          this.cells = void 0;
          this.rowCount = rowCount;
          this.cells = cells;
        }

        /**
         * 向右拐出的长度
         */
        var _proto = RoadFragment.prototype;
        _proto.dragonLength = function dragonLength() {
          if (this.cells.length > this.rowCount) {
            return this.cells.length - this.rowCount;
          } else {
            return 0;
          }
        };
        return RoadFragment;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/roadInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "743abwHc4BBp6VNbb35r6Ts", "roadInfo", undefined);
      /** 路盘颜色类别 */
      var ColorType = exports('ColorType', {
        Red: 1,
        Blue: 2
      });

      /** 路盘 UI 配置 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SetChipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GlobalData.ts', './NumberFormatUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, EditBox, Component, GlobalData, NumberFormatUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      EditBox = module.EditBox;
      Component = module.Component;
    }, function (module) {
      GlobalData = module.GlobalData;
    }, function (module) {
      NumberFormatUtil = module.NumberFormatUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "3be548o1udO2a1kzl3qXmfQ", "SetChipItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SetChipItem = exports('SetChipItem', (_dec = ccclass('SetChipItem'), _dec2 = property(Label), _dec3 = property(EditBox), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SetChipItem, _Component);
        function SetChipItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "chipNumLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "setEditbox", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SetChipItem.prototype;
        _proto.setChipInfo = function setChipInfo(betChipValue) {
          var chipNum = NumberFormatUtil.formatMoneyToNumber(betChipValue);
          this.setChipNum(chipNum);
        };
        _proto.setChipNum = function setChipNum(num) {
          this.chipNumLabel.string = NumberFormatUtil.formatChipNum(num);
          this.setEditbox.string = num.toString();
        };
        _proto.editBeginEvent = function editBeginEvent() {
          this.setEditbox.string = this.chipNumLabel.string;
        };
        _proto.editEndEvent = function editEndEvent() {
          var num = parseInt(this.setEditbox.string);
          if (isNaN(num)) {
            this.setChipNum(1);
          } else {
            this.setChipNum(num > GlobalData.maxCoin ? GlobalData.maxCoin : num);
          }
        };
        _proto.getChipNum = function getChipNum() {
          return parseInt(this.setEditbox.string);
        };
        return SetChipItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chipNumLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "setEditbox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StateMachineManager.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2f2e59xmjdJRqde9Cw2UWiw", "StateMachineManager", undefined);
      /**
       * 有限状态机管理基类
       */
      var StateMachineManager = exports('StateMachineManager', /*#__PURE__*/function () {
        function StateMachineManager(gameTable) {
          this.currentState = null;
          this.states = new Map();
          this.gameTable = null;
          this.gameTable = gameTable;
        }
        /**
         * 注册状态
         * @param statCode 状态名称
         * @param state 状态实例
         */
        var _proto = StateMachineManager.prototype;
        _proto.registerState = function registerState(statCode, state) {
          this.states.set(statCode, state);
          state.setManager(this, statCode, this.gameTable);
        }

        /**
         * 转换到指定状态
         * @param stateName 目标状态名称
         */;
        _proto.transitionTo = function transitionTo(statCode, isConnectAgain) {
          if (isConnectAgain === void 0) {
            isConnectAgain = false;
          }
          if (this.currentState) {
            log('exit current state', this.currentState.statCode);
            this.currentState.exit();
          }
          var newState = this.states.get(statCode);
          if (newState) {
            var _this$currentState;
            this.currentState = newState;
            log('enter state', (_this$currentState = this.currentState) == null ? void 0 : _this$currentState.statCode);
            newState.enter(isConnectAgain);
          } else {
            console.error("State " + statCode + " is not registered.");
          }
        }

        /**
         * 获取当前状态
         */;
        _proto.getCurrentState = function getCurrentState() {
          return this.currentState;
        };
        return StateMachineManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TCLiveChat.ts", ['cc', './index.mjs_cjs=&original=.js', './LinkParasUtil.ts', './index.js'], function (exports) {
  var cclegacy, LinkParasUtil, _cjsExports;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      LinkParasUtil = module.LinkParasUtil;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "55c54jeVsVJEaCgoyfZ/GtO", "TCLiveChat", undefined);
      var SDKAppID = 1600079547; // 接入时需要将0替换为您的即时通信 IM 应用的 SDKAppID
      var userID = LinkParasUtil.getParameterValue("username"); // 您的 userID
      var groupName = 'testGroup';
      var TCLiveChat = exports('TCLiveChat', /*#__PURE__*/function () {
        function TCLiveChat() {
          this.chat = null;
          this._isReady = false;
          this.createChat();
        }
        var _proto = TCLiveChat.prototype;
        _proto.createChat = function createChat() {
          var _this = this;
          if (!userID) {
            return;
          }
          this.chat = _cjsExports.create({
            SDKAppID: SDKAppID
          });
          {
            this.chat.setLogLevel(0);
          }
          var userSig;
          if (userID == 'test1') {
            userSig = 'eJwtzE8LwiAcxvH34nUx1GnOwQ61Q1GrS3-ouqHGj6hk2gij955tOz6fLzwfdKwPaa87VCCaYjQbNij98GBgYK*dJ1Nw6tZYCwoVZI4xFpIzMRb9ttDp6JxzGtOoHu5-EyyjLMeYTi9wjb*rOlBj9vlyQ5LtOlSvcNau9YFInj1lz5qLkAtok111KtH3Bw1ZMI8_';
          } else {
            userSig = 'eJwtzEELgjAYxvHvsnPIXFua0EGp6GAYrehcbslrbSydtYi*e0s9Pr8-PB90yHnwlA1KEAkwmvQbhNQWrtCzla0lY2jF7WwMCJSEM4xxNGc0Gop0BhrpnTFGfBrUgvpbRKeExjSMxxeo-G*Z1W930d2OveqlOuHtvnCFcY-7mhyzXJlqxUHzNO025QJ9fz93Mlw_';
          }
          // 登录 Chat
          var promise = this.chat.login({
            userID: userID,
            userSig: userSig
          });
          promise.then(function (imResponse) {
            _this._isReady = true;
            console.log(imResponse.data); // 登录成功
            if (imResponse.data.repeatLogin === true) {
              // 标识账号已登录，本次登录操作为重复登录。
              console.log(imResponse.data.errorInfo);
            }
          })["catch"](function (imError) {
            console.warn('login error:', imError); // 登录失败的相关信息
          });

          this.chat.on(_cjsExports.EVENT.MESSAGE_RECEIVED, this.onMessageReceived);
        };
        _proto.sendMsg = function sendMsg(msg) {
          if (!this._isReady) {
            console.warn('TCLiveChat not ready');
            return;
          }
          var message = this.chat.createTextMessage({
            to: '@TGS#aVXE3BOQY',
            conversationType: _cjsExports.TYPES.CONV_GROUP,
            payload: {
              text: msg
            }
          });
          this.chat.sendMessage(message);
        };
        _proto.onMessageReceived = function onMessageReceived(event) {
          var messageList = event.data;
          console.log('TCLiveChat onMessageReceived', messageList);
        };
        _proto.logout = function logout() {
          var _this2 = this;
          var promise = this.chat.logout();
          promise.then(function (imResponse) {
            _this2._isReady = false;
            console.log(imResponse.data); // 登出成功
          })["catch"](function (imError) {
            console.warn('logout error:', imError);
          });
        };
        _proto.destroy = function destroy() {
          this.chat.destroy();
        };
        _proto.createGroup = function createGroup() {
          this.chat.createGroup({
            name: groupName,
            type: _cjsExports.TYPES.GRP_AVCHATROOM
          }).then(function (imResponse) {
            console.log(imResponse.data); // 创建成功
          })["catch"](function (imError) {
            console.warn('createGroup error:', imError); // 登录失败的相关信息
          });
        };

        _proto.joinGroup = function joinGroup() {
          this.chat.joinGroup({
            groupID: '@TGS#aVXE3BOQY',
            type: _cjsExports.TYPES.GRP_AVCHATROOM
          }).then(function (imResponse) {
            console.log(imResponse.data); // 加入成功
          });
        };

        return TCLiveChat;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TCLivePlayer.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "92debPHDg1MJYH5WcacIR4A", "TCLivePlayer", undefined);
      //@ts-nocheck
      var TCLivePlayer = exports('TCLivePlayer', /*#__PURE__*/function () {
        function TCLivePlayer(videoId) {
          this.tcpPlayer = null;
          // player-container-id 为播放器容器 ID，必须与 html 中一致
          this.tcpPlayer = TCPlayer(videoId, {
            sources: ['http://1500009007.vod2.myqcloud.com/6c9c6038vodcq1500009007/2fb02795387702305297108918/w3C7ZwlsPNYA.mp4']
          });
        }
        var _proto = TCLivePlayer.prototype;
        _proto.changeUrl = function changeUrl(url) {
          if (this.tcpPlayer && url) {
            this.tcpPlayer.src(url); // url 播放地址
          }
        };

        return TCLivePlayer;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PopupMgr.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, PopupMgr;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      PopupMgr = module.PopupMgr;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "aff46L1qPdM/7U9mX+0oFWT", "TipPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TipPopup = exports('TipPopup', (_dec = ccclass('TipPopup'), _dec2 = property({
        tooltip: "取消按钮",
        type: Node
      }), _dec3 = property({
        tooltip: "确定按钮",
        type: Node
      }), _dec4 = property({
        tooltip: "提示文字",
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TipPopup, _Component);
        function TipPopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 取消按钮 */
          _initializerDefineProperty(_this, "cancelBtn", _descriptor, _assertThisInitialized(_this));
          /** 确定按钮 */
          _initializerDefineProperty(_this, "confirmBtn", _descriptor2, _assertThisInitialized(_this));
          /** 提示文字 */
          _initializerDefineProperty(_this, "contentLabel", _descriptor3, _assertThisInitialized(_this));
          _this.confirmCallback = null;
          _this.cancelCallback = null;
          return _this;
        }
        var _proto = TipPopup.prototype;
        _proto.init = function init(data) {
          this.contentLabel.string = data.contentLabel;
          this.confirmCallback = data.confirmCallback;
          this.cancelCallback = data.cancelCallback;
          this.cancelBtn.active = !!data.cancelCallback;
        };
        _proto.onConfirmBtnClick = function onConfirmBtnClick() {
          this.confirmCallback && this.confirmCallback();
          PopupMgr.instance.closePopup(this);
        };
        _proto.onCancelBtnClick = function onCancelBtnClick() {
          this.cancelCallback && this.cancelCallback();
          PopupMgr.instance.closePopup(this);
        };
        return TipPopup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cancelBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "confirmBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contentLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToastPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Tween, Vec3, tween, v3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "eaff5soUXRHcqCjecfQgfAW", "ToastPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ToastPopup = exports('ToastPopup', (_dec = ccclass('ToastPopup'), _dec2 = property({
        tooltip: "提示文字",
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToastPopup, _Component);
        function ToastPopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tipLabel", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ToastPopup.prototype;
        /**
         * 显示吐司内容
         * @param msg 
         * @param time 
         */
        _proto.showMsg = function showMsg(msg, time) {
          var _this2 = this;
          if (time === void 0) {
            time = 2;
          }
          this.tipLabel.string = msg;
          Tween.stopAllByTarget(this.node);
          this.node.position = new Vec3(0, 0);
          tween(this.node).to(time, {
            position: v3(0, 200)
          }).call(function () {
            _this2.node.destroy();
          }).start();
        };
        return ToastPopup;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tipLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, log, Color, sys, Vec3, Mat4, Node, Widget, director;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      Color = module.Color;
      sys = module.sys;
      Vec3 = module.Vec3;
      Mat4 = module.Mat4;
      Node = module.Node;
      Widget = module.Widget;
      director = module.director;
    }],
    execute: function () {
      cclegacy._RF.push({}, "781e2scfa9MEqFsSI2XYphZ", "Utils", undefined);
      var Utils = exports('Utils', /*#__PURE__*/function () {
        function Utils() {}
        Utils.format = function format(parmas1, parmas2) {
          if (parmas1 === void 0) {
            parmas1 = null;
          }
          if (parmas2 === void 0) {
            parmas2 = null;
          }
          var as = [].slice.call(arguments),
            fmt = as.shift(),
            i = 0;
          return fmt.replace(/%(\w)?(\d)?([dfsx])/ig, function (_, a, b, c) {
            var s = b ? new Array(b - 0 + 1).join(a || '') : '';
            if (c == 'd') s += parseInt(as[i++]);
            return b ? s.slice(b * -1) : s;
          });
        };
        Utils.formatStr = function formatStr(fstr) {
          for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            params[_key - 1] = arguments[_key];
          }
          if (typeof fstr !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
              //@ts-ignore
              objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
          }
          var i = 1;
          var args = arguments;
          var len = args.length;
          var formatRegExp = new RegExp("%%|%s|%d|%j", "g");
          //@ts-ignore
          var str = String(fstr).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;
            switch (x) {
              case '%s':
                return String(args[i++]);
              case '%d':
                return Number(args[i++]);
              case '%j':
                return JSON.stringify(args[i++]);
              default:
                return x;
            }
          });
          for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof x !== 'object') {
              str += ' ' + x;
            } else {
              //@ts-ignore
              str += ' ' + inspect(x);
            }
          }
          return str;
        }
        /**
         * 验证是否全为数字
         */;
        Utils.checkEditStringIsNum = function checkEditStringIsNum(str) {
          //var reg = /^[0~9]+.?[0~9]*$/;
          for (var i = 0; i < str.length; i++) {
            log("stringInt ===", parseInt(str.charAt(i)));
            if (!(parseInt(str.charAt(i)) >= 0 && parseInt(str.charAt(i)) < 10)) {
              return false;
            }
          }
          return true;
        }

        /**
         * 格式化分数
         */;
        Utils.formatGarde = function formatGarde(label, grade) {
          label.string = grade > 0 ? "+" + grade : grade.toString();
          label.color = grade >= 0 ? new Color(10, 240, 28) : new Color(240, 22, 22);
        }

        /**
         * 根据时间戳计算时间差
         * @param {*} tiemStamp 
         */;
        Utils.getTimerFromTimeStamp = function getTimerFromTimeStamp(tiemStamp) {
          var currentTimeStamp = Date.parse(new Date().toString()) / 1000;
          return currentTimeStamp - tiemStamp;
        }

        /**
         * url转小写
         * @returns 
         */;
        Utils.getUrlGameId = function getUrlGameId() {
          var url = window.document.location.href.toLowerCase();
          var u = url.split("?");
          if (typeof u[1] == "string") {
            u = u[1].split("&");
            var get = {};
            for (var i in u) {
              var j = u[i].split("=");
              get[j[0]] = j[1];
            }
            return get;
          } else {
            return {};
          }
        }
        /**
         * 不区分大小写获取参数
         */;
        Utils.getUrlParamsNotCaseSensitive = function getUrlParamsNotCaseSensitive() {
          var url = window.document.location.href.toLowerCase();
          var u = url.split("?");
          if (typeof u[1] == "string") {
            u = u[1].split("&");
            var get = {};
            for (var i in u) {
              var j = u[i].split("=");
              get[j[0]] = j[1];
            }
            return get;
          } else {
            return {};
          }
        }

        /**
         * 获取字符串字节长度
         * @param val 
         */;
        Utils.getStringLength = function getStringLength(val) {
          var str = new String(val);
          var bytesCount = 0;
          for (var i = 0, n = str.length; i < n; i++) {
            var c = str.charCodeAt(i);
            if (c >= 0x0001 && c <= 0x007e || 0xff60 <= c && c <= 0xff9f) {
              bytesCount += 1;
            } else {
              bytesCount += 2;
            }
          }
          return bytesCount;
        }

        /**
         * 获取当前时间戳
         * @returns 
         */;
        Utils.getCurrentTimestamp = function getCurrentTimestamp() {
          return new Date().getTime();
        }
        /**
         * 根据时间格式获取时间戳
         */;
        Utils.getTimestampForFormat = function getTimestampForFormat(timeFormat) {
          if (timeFormat) {
            return new Date(timeFormat).getTime();
          } else {
            return 0;
          }
        }
        /**
         * 根据时间戳计算时间
         */;
        Utils.timestampToTime = function timestampToTime(timestamp, type) {
          var format = function format(num) {
            var newStr = "";
            if (num > 9) {
              newStr = num.toString();
            } else {
              newStr = "0" + num;
            }
            return newStr;
          };
          var date = new Date(timestamp * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000
          var Y = date.getFullYear() + '/';
          var M = format(date.getMonth() + 1) + "/";
          var D = format(date.getDate()) + ' ';
          var h = format(date.getHours()) + ':';
          var m = format(date.getMinutes());
          var s = format(date.getSeconds());
          if (type == 1) {
            return Y + M + D + h + m;
          } else {
            return M + D + h + m;
          }
        };
        Utils.formatTimestamp2 = function formatTimestamp2(timestamp) {
          var format = function format(num) {
            var newStr = "";
            if (num > 9) {
              newStr = num.toString();
            } else {
              newStr = "0" + num;
            }
            return newStr;
          };
          var date = new Date(timestamp);
          var Y = date.getFullYear() + '/';
          var M = format(date.getMonth() + 1) + "/";
          var D = format(date.getDate());
          return Y + M + D;
        }

        /**
         * 初始化时间戳
         */;
        Utils.formatTimestamp = function formatTimestamp(timestamp, format) {
          var formatNum = function formatNum(num) {
            var newStr = "";
            if (num > 9) {
              newStr = num.toString();
            } else {
              newStr = "0" + num;
            }
            return newStr;
          };
          var date = new Date(timestamp.toString().length == 10 ? timestamp * 1000 : timestamp); //时间戳为10位需*1000，时间戳为13位的话不需乘1000
          var Y = date.getFullYear() + "";
          var M = formatNum(date.getMonth() + 1);
          var D = formatNum(date.getDate());
          var h = formatNum(date.getHours());
          var m = formatNum(date.getMinutes());
          var s = formatNum(date.getSeconds());
          var str = format;
          var strY = str.replace("Y", Y);
          var strM = strY.replace("M", M);
          var strD = strM.replace("D", D);
          var strh = strD.replace("h", h);
          var strm = strh.replace("m", m);
          var newStr = strm.replace("s", s);
          return newStr;
        }

        /**
         * 数字补全，不足补0
         * @param num    当前数字   
         * @param length 数字长度
         */;
        Utils.prefixInteger = function prefixInteger(num, length) {
          return (Array(length).join('0') + num).slice(-length);
        }

        /**
         * 四舍五入
         * @param value 需要处理的值
         * @param pos 保留的小数位数
         */;
        Utils.round = function round(value, length) {
          return Math.round(value * Math.pow(10, length)) / Math.pow(10, length);
        }

        /**
         * 小数转化为百分比
         * @param point 
         */;
        Utils.toPercent = function toPercent(point) {
          var str = Number(point * 100).toFixed(0);
          str += "%";
          return str;
        }

        /**
         * 强制保留2位小数
         */;
        Utils.fomatFloat = function fomatFloat(num) {
          return (parseInt(num * 100 + "") / 100).toFixed(2);
        };
        Utils.randomNumber = function randomNumber(min, max) {
          var fRound = Math.floor(Math.random() * (max - min + 1) + min);
          return fRound;
        }

        /**
         * 获取存储数据
         * @param key 
         */;
        Utils.getItem = function getItem(key) {
          var itemData = sys.localStorage.getItem(key);
          var data = null;
          if (itemData) {
            data = JSON.parse(itemData);
          }
          return data;
        }

        /**
         * 保存存储数据
         * @param key 
         * @param data 
         */;
        Utils.setItem = function setItem(key, data) {
          if (data) {
            var itemData = JSON.stringify(data);
            if (itemData) {
              sys.localStorage.setItem(key, itemData);
            }
          }
        }

        /**
         * 
         * @param key 删除指定存储数据
         */;
        Utils.removeItem = function removeItem(key) {
          sys.localStorage.removeItem(key);
        }

        /**
         * 舍弃小数点后的数字
         */;
        Utils.onDealPoint = function onDealPoint(value) {
          if (typeof value === "string") {
            return value.replace(/\.\d+/g, '');
          } else if (typeof value === "number") {
            return Number(value.toString().replace(/\.\d+/g, ''));
          }
        };
        Utils.connectParasForHttpUrl = function connectParasForHttpUrl(url, jsonData) {
          var connectUrl = "";
          if (jsonData) {
            var keys = Object.keys(jsonData);
            keys.forEach(function (element, index) {
              if (index == 0) {
                connectUrl = connectUrl + "?" + element + "=" + jsonData[element];
              } else {
                connectUrl = connectUrl + "&" + element + "=" + jsonData[element];
              }
            });
          }
          return url + connectUrl;
        }

        /**
         * 将cubeB坐标转换为cubA的节点坐标
         * @param cubeA 
         * @param cubeB 
         */;
        Utils.nodePosChengeOf3D = function nodePosChengeOf3D(cubeA, cubeB) {
          var tempPos = new Vec3();
          var tempMat4 = new Mat4();
          Mat4.invert(tempMat4, cubeA.getWorldMatrix());
          Vec3.transformMat4(tempPos, cubeB.worldPosition, tempMat4);
          //console.error("tempPos-----", tempPos)
          return tempPos;
        }

        /**
         * 获取本地时间
         * @returns 规范格式的事件字符串
         */;
        Utils.getNowTime = function getNowTime() {
          var date = new Date();
          var year = date.getFullYear();
          var month = date.getMonth() + 1;
          var day = date.getDate();
          var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
          var minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
          var second = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
          var milliSeconds = date.getMilliseconds();
          return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + milliSeconds;
        };
        /**
         * @param {String} nodeName 生成常驻节点的名称
         * @returns 返回生成的常驻节点
         */
        Utils.getStaticNode = function getStaticNode(nodeName) {
          if (!nodeName) {
            return null;
          }
          var tempNode = null;
          if (nodeName in this.staticNodeObj) {
            tempNode = this.staticNodeObj[nodeName];
          } else {
            tempNode = new Node(nodeName);
            tempNode.name = nodeName;
            this.staticNodeObj[nodeName] = tempNode;
          }
          var tWidgete = tempNode.getComponent(Widget);
          if (!tWidgete) {
            //设定自适应宽高
            tWidgete = tempNode.addComponent(Widget);
            tWidgete.isAlignTop = true;
            tWidgete.isAlignBottom = true;
            tWidgete.isAlignLeft = true;
            tWidgete.isAlignRight = true;
            tWidgete.top = 0;
            tWidgete.bottom = 0;
            tWidgete.left = 0;
            tWidgete.right = 0;
            tWidgete.alignMode = Widget.AlignMode.ALWAYS;
          }
          if (!director.getScene()) {
            return null;
          }
          if (!tempNode.parent) {
            director.getScene().addChild(tempNode); //添加到场景根节点   
          }

          director.addPersistRootNode(tempNode); //设置为常驻结点
          tWidgete.updateAlignment();
          return tempNode;
        };
        Utils.sleep = /*#__PURE__*/function () {
          var _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(time) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", new Promise(function (resolve) {
                    setTimeout(function () {
                      resolve(null);
                    }, time * 1000);
                  }));
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function sleep(_x) {
            return _sleep.apply(this, arguments);
          }
          return sleep;
        }()
        /**
         * 複製文字到剪貼簿
         * @param text 要複製的文字
         * @returns Promise<boolean> 是否複製成功
         */;

        Utils.copyToClipboard = /*#__PURE__*/
        function () {
          var _copyToClipboard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(text) {
            var textarea, result;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  if (!navigator.clipboard) {
                    _context2.next = 7;
                    break;
                  }
                  _context2.next = 4;
                  return navigator.clipboard.writeText(text);
                case 4:
                  return _context2.abrupt("return", true);
                case 7:
                  // 兼容舊版瀏覽器
                  textarea = document.createElement('textarea');
                  textarea.value = text;
                  textarea.style.position = 'fixed';
                  document.body.appendChild(textarea);
                  textarea.select();
                  result = document.execCommand('copy');
                  document.body.removeChild(textarea);
                  return _context2.abrupt("return", result);
                case 15:
                  _context2.next = 21;
                  break;
                case 17:
                  _context2.prev = 17;
                  _context2.t0 = _context2["catch"](0);
                  console.error('複製失敗:', _context2.t0);
                  return _context2.abrupt("return", false);
                case 21:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[0, 17]]);
          }));
          function copyToClipboard(_x2) {
            return _copyToClipboard.apply(this, arguments);
          }
          return copyToClipboard;
        }();
        Utils.executePreFrame = function executePreFrame(generator, duration, component) {
          duration = 1000 / 60;
          return new Promise(function (resolve, reject) {
            var gen = generator;
            // 创建执行函数
            var execute = function execute() {
              // 执行之前，先记录开始时间戳
              var startTime = new Date().getTime();

              // 然后一直从 Generator 中获取已经拆分好的代码段出来执行
              for (var iter = gen.next();; iter = gen.next()) {
                // 判断是否已经执行完所有 Generator 的小代码段
                // 如果是的话，那么就表示任务完成
                if (iter == null || iter.done) {
                  resolve("generator  end");
                  return;
                }

                // 每执行完一段小代码段，都检查一下是否
                // 已经超过我们分配给本帧，这些小代码端的最大可执行时间
                if (new Date().getTime() - startTime > duration) {
                  // 如果超过了，那么本帧就不在执行，开定时器，让下一帧再执行
                  component.scheduleOnce(function () {
                    execute();
                  });
                  return;
                }
              }
            };

            // 运行执行函数
            execute();
          });
        };
        return Utils;
      }());
      /** 常驻节点的对象合计 */
      Utils.staticNodeObj = {};
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VerifyCardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CardItem.ts', './Emitter.ts', './GlobalData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, CardItem, Emitter, GlobalEvent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      CardItem = module.CardItem;
    }, function (module) {
      Emitter = module.Emitter;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "048920RTgdNDJRPwF4w8/5j", "VerifyCardItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var VerifyCardItem = exports('VerifyCardItem', (_dec = ccclass('VerifyCardItem'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_CardItem) {
        _inheritsLoose(VerifyCardItem, _CardItem);
        function VerifyCardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _CardItem.call.apply(_CardItem, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "orderLabel", _descriptor, _assertThisInitialized(_this));
          _this.verifyInfo = null;
          return _this;
        }
        var _proto = VerifyCardItem.prototype;
        _proto.disCard = function disCard(verifyInfo) {
          if (verifyInfo) {
            this.verifyInfo = verifyInfo;
            this.cardBackNode.active = true;
            this.orderLabel.string = "" + verifyInfo.index;
            this.orderLabel.node.active = true;
            this.node.active = true;
            this._cardInfo = {
              color: null,
              value: null,
              index: verifyInfo.index,
              hash: verifyInfo.hash,
              name: null
            };
          }
        };
        _proto.setCard = function setCard(cardInfo, isShowBack) {
          if (isShowBack === void 0) {
            isShowBack = false;
          }
          _CardItem.prototype.setCard.call(this, cardInfo, isShowBack);
          //this.orderLabel.node.active = false;
        };

        _proto.verifyButtonClick = function verifyButtonClick() {
          Emitter.emit(GlobalEvent.EVENT_GAME_SHOW_VERIFY_INFO, this._cardInfo);
        };
        return VerifyCardItem;
      }(CardItem), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "orderLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSocketClient.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pitaya_proto_wasm.ts', './Logger.ts', './Protocol.ts', './Emitter.ts', './GlobalData.ts'], function (exports) {
  var _extends, _createForOfIteratorHelperLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, ProtoProcessor, Logger, Message, Package, PackageType, Protocol, MessageType, Emitter, GlobalEvent;
  return {
    setters: [function (module) {
      _extends = module.extends;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ProtoProcessor = module.ProtoProcessor;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      Message = module.Message;
      Package = module.Package;
      PackageType = module.PackageType;
      Protocol = module.Protocol;
      MessageType = module.MessageType;
    }, function (module) {
      Emitter = module.Emitter;
    }, function (module) {
      GlobalEvent = module.GlobalEvent;
    }],
    execute: function () {
      exports('PitayaClient', void 0);
      cclegacy._RF.push({}, "9c945Mk+rNKR6V2l/OGn5OG", "WebSocketClient", undefined);
      var PitayaClient;
      (function (_PitayaClient) {
        var MessageData = Message.MessageData;
        /** 连接成功 */
        var RES_OK = 200;
        /** 版本不统一 */
        var RES_OLD_CLIENT = 501;
        var DefaultConnectorOptions = {
          maxReconnectAttempts: 10,
          reconnect: true
        };
        /** 握手协议参数 */
        var HandshakeBuffer = {
          sys: {
            /** CLIENT类型 */
            type: 'js-websocket',
            /** CLIENT版本 */
            version: '0.6.6',
            rsa: {}
          },
          user: {}
        };

        /**
         * 基于 WebSocket 的连接器
         */
        var WebSocketConnector = /*#__PURE__*/function () {
          function WebSocketConnector() {
            /** WebSocket */
            this.socket = void 0;
            /** Protobuf 处理器 */
            this.protoProcessor = void 0;
            /** socket连接状态 */
            this.isConnected = false;
            /** 消息id */
            this.reqId = 0;
            /** 请求回调 */
            this.callbacks = {};
            /** 显示请求加载 */
            this.isShowLoads = {};
            /** 路由列表 */
            this.routeMap = {};
            /** 压缩路由正查表 */
            this.dict = {};
            /** 压缩路由反查表 */
            this.abbrs = {};
            /** 初始化Socket数据 */
            this.params = void 0;
            /** 心跳间隔 */
            this.heartbeatInterval = 0;
            /** 心跳延迟 */
            this.heartbeatTimeout = 0;
            /** 下次心跳延迟 */
            this.nextHeartbeatTimeout = 0;
            /** 心跳间隙阈值 */
            this.gapThreshold = 500;
            /** 心跳定时器 */
            this.heartbeatId = void 0;
            /** 心跳定时器 */
            this.heartbeatTimeoutId = void 0;
            /** 实际最大连接次数 */
            this.maxReconnectAttempts = 0;
            /** 多次连接 */
            this.reconnect = false;
            /** 重连定时器 */
            this.reconnectTimer = void 0;
            /** 重连连接次数 */
            this.reconnectAttempts = 0;
            /** 重连延时 */
            this.reconnectionDelay = 5000;
            /** pitaya handlers 的入参、出参 proto 名称 */
            this.handlersMap = {};
            /** pitaya push 的出参 proto 名称 */
            this.pushMap = {};
            /** 初始化回调 */
            this.initCallback = void 0;
            /** 重连 */
            this.reconnectCallback = void 0;
            this.lastTime = 0;
            this.isPinging = false;
          }
          var _proto = WebSocketConnector.prototype;
          /**
           * 初始化socket
           * @param params socket连接参数
           * @param cb 连接完成的回调
           */
          _proto.init = /*#__PURE__*/
          function () {
            var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params, cb) {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    Logger.logNet(params, "WebSocketClient init");
                    this.initCallback = cb;
                    this.params = _extends({}, DefaultConnectorOptions, params);
                    _context.next = 5;
                    return this.fetchDescriptors(params.protoUrl);
                  case 5:
                    this.protoProcessor = _context.sent;
                    this.connect(params, params.wsUrl);
                    this.isPinging = false;
                  case 8:
                  case "end":
                    return _context.stop();
                }
              }, _callee, this);
            }));
            function init(_x, _x2) {
              return _init.apply(this, arguments);
            }
            return init;
          }();
          _proto.startHeartbeat = function startHeartbeat() {
            var _this = this;
            if (!this.heartbeatInterval) {
              return;
            }
            if (this.isPinging) {
              return;
            }
            var obj = Package.encode(PackageType.HEARTBEAT);
            this.heartbeatId = setInterval(function () {
              if (_this.socket && _this.isConnected) {
                _this.send(obj);
              }
            }, this.heartbeatInterval);
            this.lastTime = Date.now();
            this.heartbeatTimeoutId = setInterval(function () {
              // this.send(obj);
              if (_this.socket && _this.isConnected && Date.now() - _this.lastTime > _this.heartbeatTimeout) {
                _this.disconnect();
              }
            }, this.gapThreshold);
            this.isPinging = true;
          }

          /**
           * 心跳检测
           */;
          _proto.heartbeat = function heartbeat() {
            var _this2 = this;
            if (!this.heartbeatInterval) {
              return;
            }
            this.lastTime = Date.now();
            var packet = Package.encode(PackageType.HEARTBEAT);
            if (this.heartbeatTimeoutId) {
              clearTimeout(this.heartbeatTimeoutId);
              this.heartbeatTimeoutId = undefined;
            }
            if (this.heartbeatId) {
              // already in a heartbeat interval
              return;
            }
            this.heartbeatId = setTimeout(function () {
              // console.log('====>>>>pingTime', Utils.getNowTime());
              _this2.heartbeatId = undefined;
              _this2.send(packet);
              _this2.nextHeartbeatTimeout = Date.now() + _this2.heartbeatTimeout;
              _this2.heartbeatTimeoutId = setTimeout(function () {
                _this2.heartbeatTimeoutCb();
              }, _this2.heartbeatTimeout);
            }, this.heartbeatInterval);

            // console.log('======>>>>>>>pongTime', Utils.getNowTime());
            // this.startHeartbeat();
          };
          /**
           * 心跳超时
           */
          _proto.heartbeatTimeoutCb = function heartbeatTimeoutCb() {
            var _this3 = this;
            var gap = this.nextHeartbeatTimeout - Date.now();
            if (gap > this.gapThreshold) {
              this.heartbeatTimeoutId = setTimeout(function () {
                _this3.heartbeatTimeoutCb();
              }, gap);
            } else {
              console.log('server heartbeat timeout');
              this.disconnect();
            }
          };
          /**
           * 握手协议
           * @param data
           */
          _proto.handshake = function handshake(data) {
            var _this4 = this;
            var response = JSON.parse(Protocol.strDecode(data));
            if (response.code === RES_OLD_CLIENT) {
              Logger.errNet('error', 'client version not fulfill');
              return;
            }
            if (response.code !== RES_OK) {
              Logger.errNet('error', 'handshake fail');
              return;
            }
            this.handshakeInit(response);
            var packet = Package.encode(PackageType.HANDSHAKE_ACK);
            this.send(packet);

            // 主动拉取 docs 描述
            if (this.protoProcessor) {
              var _this$params;
              this.request((_this$params = this.params) == null ? void 0 : _this$params.docsRoute, null, function (response) {
                Logger.logNet(response);
                _this4.protoInit(response);
                _this4.isConnected = true;
                _this4.initCallback && _this4.initCallback(_this4.socket);
                _this4.reconnectCallback && _this4.reconnectCallback();
              });
            }
          };
          /** 握手初始化 */
          _proto.handshakeInit = function handshakeInit(data) {
            if (data.sys && data.sys.heartbeat) {
              this.heartbeatInterval = data.sys.heartbeat * 1000;
              this.heartbeatTimeout = this.heartbeatInterval * 2;
            } else {
              this.heartbeatInterval = 0;
              this.heartbeatTimeout = 0;
            }
            this.initData(data);
          };
          _proto.protoInit = function protoInit(docs) {
            // 解析 handlers
            this.handlersMap = {};
            for (var route in docs.handlers) {
              var handler = docs.handlers[route];
              var input = "";
              var name = handler.input;
              if (name.startsWith("*")) {
                input = name.substring(1);
              } else {
                input = name;
              }
              var output = "";
              name = handler.output;
              if (name.startsWith("*")) {
                output = name.substring(1);
              } else {
                output = name;
              }
              this.handlersMap[route] = {
                input: input,
                output: output
              };
            }

            // 解析 push
            this.pushMap = {};
            for (var _route in docs.push) {
              this.pushMap[_route] = docs.push[_route];
            }
          }

          /**
           * 处理服务器消息
           * @param msg 服务器推送的数据
           */;
          _proto.processMessage = function processMessage(msg) {
            if (!(msg != null && msg.id)) {
              Logger.logNet('服务器广播消息', msg == null ? void 0 : msg.route, msg == null ? void 0 : msg.payload);
              Emitter.emit(msg == null ? void 0 : msg.route, msg == null ? void 0 : msg.payload);
              return;
            }

            // msg.body.isShowLoading = this.isShowLoads[msg.id];
            //if have a id then find the callback function with the request
            var cb = this.callbacks[msg.id];
            delete this.callbacks[msg.id];
            delete this.isShowLoads[msg.id];
            if (typeof cb === 'function') {
              cb(msg.payload);
            }
            return;
          };
          /**
           * 服务器数据推送
           * @param packet 服务器推送的数据
           */
          _proto.onData = function onData(packet) {
            var msg = this.messageDecode(packet);
            this.processMessage(msg);
          };
          /**
           * 被服务器强制踢出
           * @param data
           */
          _proto.onKick = function onKick(data) {
            // cc.log("onKick data:", data)
            if (data != null) {
              var kickMsg = JSON.parse(Protocol.strDecode(data));
              Logger.logNet("onKick data:", kickMsg);
            }
          };
          /**
           * 初始化数据
           * @param data
           */
          _proto.initData = function initData(data) {
            if (!data || !data.sys) {
              return;
            }
            this.dict = _extends({}, data.sys.dict);
            this.abbrs = {};
            for (var route in this.dict) {
              this.abbrs[this.dict[route]] = route;
            }
          };
          _proto.fetchDescriptors = /*#__PURE__*/function () {
            var _fetchDescriptors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(protoUrl) {
              var response, descriptors;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return fetch(protoUrl);
                  case 2:
                    response = _context2.sent;
                    if (!response.ok) {
                      _context2.next = 12;
                      break;
                    }
                    _context2.t0 = Uint8Array;
                    _context2.next = 7;
                    return response.arrayBuffer();
                  case 7:
                    _context2.t1 = _context2.sent;
                    descriptors = new _context2.t0(_context2.t1);
                    return _context2.abrupt("return", new ProtoProcessor(descriptors));
                  case 12:
                    Logger.logNet("fetch descriptors from " + protoUrl + " was failed: " + response.statusText);
                  case 13:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            function fetchDescriptors(_x3) {
              return _fetchDescriptors.apply(this, arguments);
            }
            return fetchDescriptors;
          }()
          /**
           *
           * @param params SocketParams
           * @param url string
           */;

          _proto.connect = function connect(params, url) {
            this.maxReconnectAttempts = params.maxReconnectAttempts || WebSocketConnector.DEFAULT_MAX_RECONNECT_ATTEMPTS;
            this.socket = new WebSocket(url);
            this.socket.binaryType = 'arraybuffer';
            this.socket.onopen = this.onOpen.bind(this);
            this.socket.onmessage = this.onMessage.bind(this);
            this.socket.onerror = this.onError.bind(this);
            this.socket.onclose = this.onClose.bind(this);
          };
          /**
           * 断开连接
           */
          _proto.disconnect = function disconnect() {
            if (this.socket) {
              if (this.socket.close) {
                this.socket.close();
              }
              this.isConnected = false;
              Logger.logNet('disconnect');
              this.socket = undefined;
            }
            if (this.heartbeatId) {
              clearTimeout(this.heartbeatId);
              this.heartbeatId = undefined;
            }
            if (this.heartbeatTimeoutId) {
              clearTimeout(this.heartbeatTimeoutId);
              this.heartbeatTimeoutId = undefined;
            }
            this.lastTime = 0;
          };
          /**
           * socket连接成功
           */
          _proto.onOpen = function onOpen() {
            this.reset();
            var packet = Package.encode(PackageType.HANDSHAKE, Protocol.strEncode(JSON.stringify(HandshakeBuffer)));
            this.send(packet);
          }

          /**
           * socket重置
           */;
          _proto.reset = function reset() {
            this.reconnect = false;
            // this.reconnectionDelay = 5000;
            this.reconnectAttempts = 0;
            if (this.reconnectTimer) {
              clearTimeout(this.reconnectTimer);
              this.reconnectTimer = undefined;
            }
          }

          /**
           * 接受请求服务器的返回
           * @param event
           */;
          _proto.onMessage = function onMessage(event) {
            this.processPackage(Package.decode(event.data));
            if (this.heartbeatTimeout) {
              this.nextHeartbeatTimeout = Date.now() + this.heartbeatTimeout;
            }
          }

          /**
           * 将数据添加到记录里
           * @param packages
           */;
          _proto.processPackage = function processPackage(packages) {
            for (var _iterator = _createForOfIteratorHelperLoose(packages), _step; !(_step = _iterator()).done;) {
              var pkg = _step.value;
              switch (pkg.type) {
                case PackageType.DATA:
                  this.onData(pkg.body);
                  break;
                case PackageType.HEARTBEAT:
                  this.heartbeat();
                  break;
                case PackageType.HANDSHAKE_ACK:
                  // this.startHeartbeat();
                  break;
                case PackageType.HANDSHAKE:
                  this.handshake(pkg.body);
                  break;
                case PackageType.KICK:
                  this.onKick(pkg.body);
                  break;
              }
            }
          };
          _proto.onError = function onError() {
            this.isConnected = false;
          };
          _proto.onClose = function onClose(event) {
            var _this$params2;
            this.isConnected = false;
            // TODO GameEventMgr.emit(Constants.LOCAL_EVENTS.LOCAL_EVENT_NET_DISCONNECT);

            Logger.logNet('socket close: ', event);
            Emitter.emit(GlobalEvent.EVENT_NET_DISCONNECT);
            if ((_this$params2 = this.params) != null && _this$params2.reconnect && this.reconnectAttempts < this.maxReconnectAttempts && !this.isConnected) {
              this.reconnect = true;
              this.reconnectAttempts++;
              // this.reconncetTimer = setTimeout(() => {
              //     this.connect(this.params, this.params.url);
              // }, this.reconnectionDelay);
              // this.reconnectionDelay *= 2;
            }

            this.disconnect();
          };
          _proto.reconnectMob = function reconnectMob(cb) {
            this.reconnectCallback = cb;
            this.connect(this.params, this.params.wsUrl);
          }

          /**
           * 发送请求到服务器
           * @param route 路由
           * @param msg 发送的数据
           * @param isLoading 是否加载 此功能暂未开放
           * @param cb 发送消息结束服务器的返回
           * @returns
           */;
          _proto.request = function request(route, msg, cb) {
            if (!route) {
              return;
            }
            this.reqId++;
            this.sendMessage(this.reqId, route, msg);
            this.callbacks[this.reqId] = cb;
            this.routeMap[this.reqId] = route;
          }

          /**
           * 对请求数据进行加密发送至服务器
           * @param reqId 请求协议的唯一标识
           * @param route 请求协议的路由
           * @param msg 请求的数据
           */;
          _proto.sendMessage = function sendMessage(reqId, route, msg) {
            var newMsg = this.messageEncode(reqId, route, msg);
            this.send(Package.encode(PackageType.DATA, newMsg));
          }

          /**
           * 发送消息
           * @param packet Uint8Array类型数组
           */;
          _proto.send = function send(packet) {
            var _this$socket;
            (_this$socket = this.socket) == null || _this$socket.send(packet.buffer);
          };
          /**
           * 对请求数据进行加密
           * @param reqId 请求协议的唯一标识
           * @param route 请求协议的路由
           * @param msg 请求的数据
           */
          _proto.messageEncode = function messageEncode(reqId, route, msg) {
            var type = reqId ? MessageType.REQUEST : MessageType.NOTIFY;
            var compressRoute = typeof route === "number";
            var message;
            if (msg !== null && msg !== undefined) {
              if (this.protoProcessor) {
                var _this$handlersMap$str;
                // 查询 proto 名称
                var strRoute;
                if (!compressRoute) {
                  strRoute = route;
                } else {
                  strRoute = this.abbrs[route];
                }
                var protoName = (_this$handlersMap$str = this.handlersMap[strRoute]) == null ? void 0 : _this$handlersMap$str.input;
                message = this.protoProcessor.encode(protoName, JSON.stringify(msg));
              } else {
                message = Protocol.strEncode(JSON.stringify(msg));
              }
            } else {
              message = new Uint8Array(0);
            }
            return Message.encode(reqId, type, compressRoute, route, message);
          }

          /**
           * 将服务器的加密数据解码
           * @param data
           * @returns
           */;
          _proto.messageDecode = function messageDecode(data) {
            var msg = Message.decode(data);
            if (msg.id > 0) {
              msg.route = this.routeMap[msg.id];
              delete this.routeMap[msg.id];
              if (!msg.route) {
                return;
              }
            }
            var route;
            if (msg.compressRoute) {
              if (!this.abbrs[msg.route]) {
                return;
              }
              route = msg.route = this.abbrs[msg.route];
            } else {
              route = msg.route;
            }

            // console.log(this.serverProtobufObj, routeNum);

            if (this.protoProcessor) {
              try {
                var _this$params3;
                var content = '';
                if (route !== ((_this$params3 = this.params) == null ? void 0 : _this$params3.docsRoute)) {
                  var protoName;

                  // 取出 proto 名称
                  if (msg.id > 0) {
                    protoName = this.handlersMap[route].output;
                  } else {
                    protoName = this.pushMap[route];
                  }
                  content = this.protoProcessor.decode(protoName, msg.body);
                } else {
                  content = this.protoProcessor.docs(msg.body);
                }
                msg.payload = JSON.parse(content);
              } catch (error) {
                var utf8String = Protocol.strDecode(msg.body);
                Logger.errNet("protobuf decode err:, routeNum:, bodyStr:", error, route, msg.body, utf8String);
              }
            } else {
              try {
                msg.payload = JSON.parse(Protocol.strDecode(msg.body));
              } catch (error) {
                var newData = new Date();
                Logger.errNet("default decode  time:, err:, routeNum:, bodyStr:", newData.toLocaleString(), error, route, String(msg.body));
              }
            }
            return msg;
          };
          _createClass(WebSocketConnector, null, [{
            key: "instance",
            get:
            /**
             * 创建单例
             */
            function get() {
              if (!this._instance) {
                this._instance = new WebSocketConnector();
              }
              return this._instance;
            }
          }]);
          return WebSocketConnector;
        }();
        /** 默认最大连接次数 */
        WebSocketConnector.DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;
        WebSocketConnector._instance = void 0;
        _PitayaClient.WebSocketConnector = WebSocketConnector;
      })(PitayaClient || (PitayaClient = exports('PitayaClient', {})));
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});