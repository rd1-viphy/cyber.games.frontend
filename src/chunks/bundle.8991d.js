System.register([], function(_export, _context) { return { execute: function () {
System.register("chunks:///_virtual/cjs-loader.mjs", [], function (exports) {
  return {
    execute: function () {
      var CjsLoader = /*#__PURE__*/function () {
        function CjsLoader() {
          this._registry = {};
          this._moduleCache = {};
        }

        /**
         * Defines a CommonJS module.
         * @param id Module ID.
         * @param factory The factory.
         * @param resolveMap An object or a function returning object which records the module specifier resolve result.
         * The later is called as "deferred resolve map" and would be invocated right before CommonJS code execution.
         */
        var _proto = CjsLoader.prototype;
        _proto.define = function define(id, factory, resolveMap) {
          this._registry[id] = {
            factory: factory,
            resolveMap: resolveMap
          };
        }

        /**
         * Requires a CommonJS module.
         * @param id Module ID.
         * @returns The module's `module.exports`.
         */;
        _proto.require = function require(id) {
          return this._require(id);
        };
        _proto.throwInvalidWrapper = function throwInvalidWrapper(requestTarget, from) {
          throw new Error("Module '" + requestTarget + "' imported from '" + from + "' is expected be an ESM-wrapped CommonJS module but it doesn't.");
        };
        _proto._require = function _require(id, parent) {
          var cachedModule = this._moduleCache[id];
          if (cachedModule) {
            return cachedModule.exports;
          }
          var module = {
            id: id,
            exports: {}
          };
          this._moduleCache[id] = module;
          this._tryModuleLoad(module, id);
          return module.exports;
        };
        _proto._resolve = function _resolve(specifier, parent) {
          return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);
        };
        _proto._resolveFromInfos = function _resolveFromInfos(specifier, parent) {
          var _cjsInfos$parent$reso, _cjsInfos$parent;
          if (specifier in cjsInfos) {
            return specifier;
          }
          if (!parent) {
            return;
          }
          return (_cjsInfos$parent$reso = (_cjsInfos$parent = cjsInfos[parent]) == null ? void 0 : _cjsInfos$parent.resolveCache[specifier]) != null ? _cjsInfos$parent$reso : undefined;
        };
        _proto._tryModuleLoad = function _tryModuleLoad(module, id) {
          var threw = true;
          try {
            this._load(module, id);
            threw = false;
          } finally {
            if (threw) {
              delete this._moduleCache[id];
            }
          }
        };
        _proto._load = function _load(module, id) {
          var _this$_loadWrapper = this._loadWrapper(id),
            factory = _this$_loadWrapper.factory,
            resolveMap = _this$_loadWrapper.resolveMap;
          var vendorRequire = this._createRequire(module);
          var require = resolveMap ? this._createRequireWithResolveMap(typeof resolveMap === 'function' ? resolveMap() : resolveMap, vendorRequire) : vendorRequire;
          factory(module.exports, require, module);
        };
        _proto._loadWrapper = function _loadWrapper(id) {
          if (id in this._registry) {
            return this._registry[id];
          } else {
            return this._loadHostProvidedModules(id);
          }
        };
        _proto._loadHostProvidedModules = function _loadHostProvidedModules(id) {
          return {
            factory: function factory(_exports, _require, module) {
              if (typeof require === 'undefined') {
                throw new Error("Current environment does not provide a require() for requiring '" + id + "'.");
              }
              try {
                module.exports = require(id);
              } catch (err) {
                throw new Error("Exception thrown when calling host defined require('" + id + "').", {
                  cause: err
                });
              }
            }
          };
        };
        _proto._createRequire = function _createRequire(module) {
          var _this = this;
          return function (specifier) {
            return _this._require(specifier, module);
          };
        };
        _proto._createRequireWithResolveMap = function _createRequireWithResolveMap(requireMap, originalRequire) {
          return function (specifier) {
            var resolved = requireMap[specifier];
            if (resolved) {
              return originalRequire(resolved);
            } else {
              throw new Error('Unresolved specifier ' + specifier);
            }
          };
        };
        _proto._throwUnresolved = function _throwUnresolved(specifier, parentUrl) {
          throw new Error("Unable to resolve " + specifier + " from " + parent + ".");
        };
        return CjsLoader;
      }();
      var loader = exports('default', new CjsLoader());
    }
  };
});

System.register("chunks:///_virtual/decimal.mjs", [], function (exports) {
  return {
    execute: function () {
      /*!
       *  decimal.js v10.5.0
       *  An arbitrary-precision Decimal type for JavaScript.
       *  https://github.com/MikeMcl/decimal.js
       *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
       *  MIT Licence
       */

      // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //

      // The maximum exponent magnitude.
      // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
      var EXP_LIMIT = 9e15,
        // 0 to 9e15

        // The limit on the value of `precision`, and on the value of the first argument to
        // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
        MAX_DIGITS = 1e9,
        // 0 to 1e9

        // Base conversion alphabet.
        NUMERALS = '0123456789abcdef',
        // The natural logarithm of 10 (1025 digits).
        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
        // Pi (1025 digits).
        PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
        // The initial configuration properties of the Decimal constructor.
        DEFAULTS = {
          // These values must be integers within the stated ranges (inclusive).
          // Most of these values can be changed at run-time using the `Decimal.config` method.

          // The maximum number of significant digits of the result of a calculation or base conversion.
          // E.g. `Decimal.config({ precision: 20 });`
          precision: 20,
          // 1 to MAX_DIGITS

          // The rounding mode used when rounding to `precision`.
          //
          // ROUND_UP         0 Away from zero.
          // ROUND_DOWN       1 Towards zero.
          // ROUND_CEIL       2 Towards +Infinity.
          // ROUND_FLOOR      3 Towards -Infinity.
          // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          //
          // E.g.
          // `Decimal.rounding = 4;`
          // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
          rounding: 4,
          // 0 to 8

          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP         0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
          // FLOOR      3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN  6 The IEEE 754 remainder function.
          // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
          //
          // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
          // division (9) are commonly used for the modulus operation. The other rounding modes can also
          // be used, but they may not give useful results.
          modulo: 1,
          // 0 to 9

          // The exponent value at and beneath which `toString` returns exponential notation.
          // JavaScript numbers: -7
          toExpNeg: -7,
          // 0 to -EXP_LIMIT

          // The exponent value at and above which `toString` returns exponential notation.
          // JavaScript numbers: 21
          toExpPos: 21,
          // 0 to EXP_LIMIT

          // The minimum exponent value, beneath which underflow to zero occurs.
          // JavaScript numbers: -324  (5e-324)
          minE: -EXP_LIMIT,
          // -1 to -EXP_LIMIT

          // The maximum exponent value, above which overflow to Infinity occurs.
          // JavaScript numbers: 308  (1.7976931348623157e+308)
          maxE: EXP_LIMIT,
          // 1 to EXP_LIMIT

          // Whether to use cryptographically-secure random number generation, if available.
          crypto: false // true/false
        },
        // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //

        inexact,
        quadrant,
        external = true,
        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
        cryptoUnavailable = decimalError + 'crypto unavailable',
        tag = '[object Decimal]',
        mathfloor = Math.floor,
        mathpow = Math.pow,
        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,
        LN10_PRECISION = LN10.length - 1,
        PI_PRECISION = PI.length - 1,
        // Decimal.prototype object
        P = {
          toStringTag: tag
        };

      // Decimal prototype methods

      /*
       *  absoluteValue             abs
       *  ceil
       *  clampedTo                 clamp
       *  comparedTo                cmp
       *  cosine                    cos
       *  cubeRoot                  cbrt
       *  decimalPlaces             dp
       *  dividedBy                 div
       *  dividedToIntegerBy        divToInt
       *  equals                    eq
       *  floor
       *  greaterThan               gt
       *  greaterThanOrEqualTo      gte
       *  hyperbolicCosine          cosh
       *  hyperbolicSine            sinh
       *  hyperbolicTangent         tanh
       *  inverseCosine             acos
       *  inverseHyperbolicCosine   acosh
       *  inverseHyperbolicSine     asinh
       *  inverseHyperbolicTangent  atanh
       *  inverseSine               asin
       *  inverseTangent            atan
       *  isFinite
       *  isInteger                 isInt
       *  isNaN
       *  isNegative                isNeg
       *  isPositive                isPos
       *  isZero
       *  lessThan                  lt
       *  lessThanOrEqualTo         lte
       *  logarithm                 log
       *  [maximum]                 [max]
       *  [minimum]                 [min]
       *  minus                     sub
       *  modulo                    mod
       *  naturalExponential        exp
       *  naturalLogarithm          ln
       *  negated                   neg
       *  plus                      add
       *  precision                 sd
       *  round
       *  sine                      sin
       *  squareRoot                sqrt
       *  tangent                   tan
       *  times                     mul
       *  toBinary
       *  toDecimalPlaces           toDP
       *  toExponential
       *  toFixed
       *  toFraction
       *  toHexadecimal             toHex
       *  toNearest
       *  toNumber
       *  toOctal
       *  toPower                   pow
       *  toPrecision
       *  toSignificantDigits       toSD
       *  toString
       *  truncated                 trunc
       *  valueOf                   toJSON
       */

      /*
       * Return a new Decimal whose value is the absolute value of this Decimal.
       *
       */
      P.absoluteValue = P.abs = function () {
        var x = new this.constructor(this);
        if (x.s < 0) x.s = 1;
        return finalise(x);
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of positive Infinity.
       *
       */
      P.ceil = function () {
        return finalise(new this.constructor(this), this.e + 1, 2);
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal clamped to the range
       * delineated by `min` and `max`.
       *
       * min {number|string|bigint|Decimal}
       * max {number|string|bigint|Decimal}
       *
       */
      P.clampedTo = P.clamp = function (min, max) {
        var k,
          x = this,
          Ctor = x.constructor;
        min = new Ctor(min);
        max = new Ctor(max);
        if (!min.s || !max.s) return new Ctor(NaN);
        if (min.gt(max)) throw Error(invalidArgument + max);
        k = x.cmp(min);
        return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
      };

      /*
       * Return
       *   1    if the value of this Decimal is greater than the value of `y`,
       *  -1    if the value of this Decimal is less than the value of `y`,
       *   0    if they have the same value,
       *   NaN  if the value of either Decimal is NaN.
       *
       */
      P.comparedTo = P.cmp = function (y) {
        var i,
          j,
          xdL,
          ydL,
          x = this,
          xd = x.d,
          yd = (y = new x.constructor(y)).d,
          xs = x.s,
          ys = y.s;

        // Either NaN or ±Infinity?
        if (!xd || !yd) {
          return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
        }

        // Either zero?
        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

        // Signs differ?
        if (xs !== ys) return xs;

        // Compare exponents.
        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
        xdL = xd.length;
        ydL = yd.length;

        // Compare digit by digit.
        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
          if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
        }

        // Compare lengths.
        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
      };

      /*
       * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * cos(0)         = 1
       * cos(-0)        = 1
       * cos(Infinity)  = NaN
       * cos(-Infinity) = NaN
       * cos(NaN)       = NaN
       *
       */
      P.cosine = P.cos = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (!x.d) return new Ctor(NaN);

        // cos(0) = cos(-0) = 1
        if (!x.d[0]) return new Ctor(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
      };

      /*
       *
       * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       *  cbrt(0)  =  0
       *  cbrt(-0) = -0
       *  cbrt(1)  =  1
       *  cbrt(-1) = -1
       *  cbrt(N)  =  N
       *  cbrt(-I) = -I
       *  cbrt(I)  =  I
       *
       * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
       *
       */
      P.cubeRoot = P.cbrt = function () {
        var e,
          m,
          n,
          r,
          rep,
          s,
          sd,
          t,
          t3,
          t3plusx,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        external = false;

        // Initial estimate.
        s = x.s * mathpow(x.s * x, 1 / 3);

        // Math.cbrt underflow/overflow?
        // Pass x to Math.pow as integer, then adjust the exponent of the result.
        if (!s || Math.abs(s) == 1 / 0) {
          n = digitsToString(x.d);
          e = x.e;

          // Adjust n exponent so it is a multiple of 3 away from x exponent.
          if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';
          s = mathpow(n, 1 / 3);

          // Rarely, e may be one less than the result exponent value.
          e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
          if (s == 1 / 0) {
            n = '5e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }
          r = new Ctor(n);
          r.s = x.s;
        } else {
          r = new Ctor(s.toString());
        }
        sd = (e = Ctor.precision) + 3;

        // Halley's method.
        // TODO? Compare Newton's method.
        for (;;) {
          t = r;
          t3 = t.times(t).times(t);
          t3plusx = t3.plus(x);
          r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
            // , i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {
              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);
                if (t.times(t).times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              sd += 4;
              rep = 1;
            } else {
              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).times(r).eq(x);
              }
              break;
            }
          }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
      };

      /*
       * Return the number of decimal places of the value of this Decimal.
       *
       */
      P.decimalPlaces = P.dp = function () {
        var w,
          d = this.d,
          n = NaN;
        if (d) {
          w = d.length - 1;
          n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last word.
          w = d[w];
          if (w) for (; w % 10 == 0; w /= 10) n--;
          if (n < 0) n = 0;
        }
        return n;
      };

      /*
       *  n / 0 = I
       *  n / N = N
       *  n / I = 0
       *  0 / n = 0
       *  0 / 0 = N
       *  0 / N = N
       *  0 / I = 0
       *  N / n = N
       *  N / 0 = N
       *  N / N = N
       *  N / I = N
       *  I / n = I
       *  I / 0 = I
       *  I / N = N
       *  I / I = N
       *
       * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedBy = P.div = function (y) {
        return divide(this, new this.constructor(y));
      };

      /*
       * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
       * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedToIntegerBy = P.divToInt = function (y) {
        var x = this,
          Ctor = x.constructor;
        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
      };

      /*
       * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
       *
       */
      P.equals = P.eq = function (y) {
        return this.cmp(y) === 0;
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of negative Infinity.
       *
       */
      P.floor = function () {
        return finalise(new this.constructor(this), this.e + 1, 3);
      };

      /*
       * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
       * false.
       *
       */
      P.greaterThan = P.gt = function (y) {
        return this.cmp(y) > 0;
      };

      /*
       * Return true if the value of this Decimal is greater than or equal to the value of `y`,
       * otherwise return false.
       *
       */
      P.greaterThanOrEqualTo = P.gte = function (y) {
        var k = this.cmp(y);
        return k == 1 || k === 0;
      };

      /*
       * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [1, Infinity]
       *
       * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
       *
       * cosh(0)         = 1
       * cosh(-0)        = 1
       * cosh(Infinity)  = Infinity
       * cosh(-Infinity) = Infinity
       * cosh(NaN)       = NaN
       *
       *  x        time taken (ms)   result
       * 1000      9                 9.8503555700852349694e+433
       * 10000     25                4.4034091128314607936e+4342
       * 100000    171               1.4033316802130615897e+43429
       * 1000000   3817              1.5166076984010437725e+434294
       * 10000000  abandoned after 2 minute wait
       *
       * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
       *
       */
      P.hyperbolicCosine = P.cosh = function () {
        var k,
          n,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor,
          one = new Ctor(1);
        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
        if (x.isZero()) return one;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;

        // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
        // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

        // Estimate the optimum number of times to use the argument reduction.
        // TODO? Estimation reused from cosine() and may not be optimal here.
        if (len < 32) {
          k = Math.ceil(len / 3);
          n = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          n = '2.3283064365386962890625e-10';
        }
        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

        // Reverse argument reduction
        var cosh2_x,
          i = k,
          d8 = new Ctor(8);
        for (; i--;) {
          cosh2_x = x.times(x);
          x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
        }
        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
      };

      /*
       * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
       *
       * sinh(0)         = 0
       * sinh(-0)        = -0
       * sinh(Infinity)  = Infinity
       * sinh(-Infinity) = -Infinity
       * sinh(NaN)       = NaN
       *
       * x        time taken (ms)
       * 10       2 ms
       * 100      5 ms
       * 1000     14 ms
       * 10000    82 ms
       * 100000   886 ms            1.4033316802130615897e+43429
       * 200000   2613 ms
       * 300000   5407 ms
       * 400000   8824 ms
       * 500000   13026 ms          8.7080643612718084129e+217146
       * 1000000  48543 ms
       *
       * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
       *
       */
      P.hyperbolicSine = P.sinh = function () {
        var k,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;
        if (len < 3) {
          x = taylorSeries(Ctor, 2, x, x, true);
        } else {
          // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
          // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
          // 3 multiplications and 1 addition

          // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
          // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
          // 4 multiplications and 2 additions

          // Estimate the optimum number of times to use the argument reduction.
          k = 1.4 * Math.sqrt(len);
          k = k > 16 ? 16 : k | 0;
          x = x.times(1 / tinyPow(5, k));
          x = taylorSeries(Ctor, 2, x, x, true);

          // Reverse argument reduction
          var sinh2_x,
            d5 = new Ctor(5),
            d16 = new Ctor(16),
            d20 = new Ctor(20);
          for (; k--;) {
            sinh2_x = x.times(x);
            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
          }
        }
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(x, pr, rm, true);
      };

      /*
       * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * tanh(x) = sinh(x) / cosh(x)
       *
       * tanh(0)         = 0
       * tanh(-0)        = -0
       * tanh(Infinity)  = 1
       * tanh(-Infinity) = -1
       * tanh(NaN)       = NaN
       *
       */
      P.hyperbolicTangent = P.tanh = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(x.s);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 7;
        Ctor.rounding = 1;
        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
      };

      /*
       * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
       * this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [0, pi]
       *
       * acos(x) = pi/2 - asin(x)
       *
       * acos(0)       = pi/2
       * acos(-0)      = pi/2
       * acos(1)       = 0
       * acos(-1)      = pi
       * acos(1/2)     = pi/3
       * acos(-1/2)    = 2*pi/3
       * acos(|x| > 1) = NaN
       * acos(NaN)     = NaN
       *
       */
      P.inverseCosine = P.acos = function () {
        var x = this,
          Ctor = x.constructor,
          k = x.abs().cmp(1),
          pr = Ctor.precision,
          rm = Ctor.rounding;
        if (k !== -1) {
          return k === 0
          // |x| is 1
          ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
          // |x| > 1 or x is NaN
          : new Ctor(NaN);
        }
        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

        // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;

        // See https://github.com/MikeMcl/decimal.js/pull/217
        x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(2);
      };

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
       * value of this Decimal.
       *
       * Domain: [1, Infinity]
       * Range: [0, Infinity]
       *
       * acosh(x) = ln(x + sqrt(x^2 - 1))
       *
       * acosh(x < 1)     = NaN
       * acosh(NaN)       = NaN
       * acosh(Infinity)  = Infinity
       * acosh(-Infinity) = NaN
       * acosh(0)         = NaN
       * acosh(-0)        = NaN
       * acosh(1)         = 0
       * acosh(-1)        = NaN
       *
       */
      P.inverseHyperbolicCosine = P.acosh = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
        if (!x.isFinite()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).minus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
      };

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * asinh(x) = ln(x + sqrt(x^2 + 1))
       *
       * asinh(NaN)       = NaN
       * asinh(Infinity)  = Infinity
       * asinh(-Infinity) = -Infinity
       * asinh(0)         = 0
       * asinh(-0)        = -0
       *
       */
      P.inverseHyperbolicSine = P.asinh = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).plus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
      };

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
       * value of this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [-Infinity, Infinity]
       *
       * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
       *
       * atanh(|x| > 1)   = NaN
       * atanh(NaN)       = NaN
       * atanh(Infinity)  = NaN
       * atanh(-Infinity) = NaN
       * atanh(0)         = 0
       * atanh(-0)        = -0
       * atanh(1)         = Infinity
       * atanh(-1)        = -Infinity
       *
       */
      P.inverseHyperbolicTangent = P.atanh = function () {
        var pr,
          rm,
          wpr,
          xsd,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        xsd = x.sd();
        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
        Ctor.precision = wpr = xsd - x.e;
        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
        Ctor.precision = pr + 4;
        Ctor.rounding = 1;
        x = x.ln();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(0.5);
      };

      /*
       * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
       *
       * asin(0)       = 0
       * asin(-0)      = -0
       * asin(1/2)     = pi/6
       * asin(-1/2)    = -pi/6
       * asin(1)       = pi/2
       * asin(-1)      = -pi/2
       * asin(|x| > 1) = NaN
       * asin(NaN)     = NaN
       *
       * TODO? Compare performance of Taylor series.
       *
       */
      P.inverseSine = P.asin = function () {
        var halfPi,
          k,
          pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (x.isZero()) return new Ctor(x);
        k = x.abs().cmp(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (k !== -1) {
          // |x| is 1
          if (k === 0) {
            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
            halfPi.s = x.s;
            return halfPi;
          }

          // |x| > 1 or x is NaN
          return new Ctor(NaN);
        }

        // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;
        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(2);
      };

      /*
       * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
       *
       * atan(0)         = 0
       * atan(-0)        = -0
       * atan(1)         = pi/4
       * atan(-1)        = -pi/4
       * atan(Infinity)  = pi/2
       * atan(-Infinity) = -pi/2
       * atan(NaN)       = NaN
       *
       */
      P.inverseTangent = P.atan = function () {
        var i,
          j,
          k,
          n,
          px,
          t,
          r,
          wpr,
          x2,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding;
        if (!x.isFinite()) {
          if (!x.s) return new Ctor(NaN);
          if (pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.5);
            r.s = x.s;
            return r;
          }
        } else if (x.isZero()) {
          return new Ctor(x);
        } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.25);
          r.s = x.s;
          return r;
        }
        Ctor.precision = wpr = pr + 10;
        Ctor.rounding = 1;

        // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

        // Argument reduction
        // Ensure |x| < 0.42
        // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

        k = Math.min(28, wpr / LOG_BASE + 2 | 0);
        for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));
        external = false;
        j = Math.ceil(wpr / LOG_BASE);
        n = 1;
        x2 = x.times(x);
        r = new Ctor(x);
        px = x;

        // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
        for (; i !== -1;) {
          px = px.times(x2);
          t = r.minus(px.div(n += 2));
          px = px.times(x2);
          r = t.plus(px.div(n += 2));
          if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
        }
        if (k) r = r.times(2 << k - 1);
        external = true;
        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
      };

      /*
       * Return true if the value of this Decimal is a finite number, otherwise return false.
       *
       */
      P.isFinite = function () {
        return !!this.d;
      };

      /*
       * Return true if the value of this Decimal is an integer, otherwise return false.
       *
       */
      P.isInteger = P.isInt = function () {
        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
      };

      /*
       * Return true if the value of this Decimal is NaN, otherwise return false.
       *
       */
      P.isNaN = function () {
        return !this.s;
      };

      /*
       * Return true if the value of this Decimal is negative, otherwise return false.
       *
       */
      P.isNegative = P.isNeg = function () {
        return this.s < 0;
      };

      /*
       * Return true if the value of this Decimal is positive, otherwise return false.
       *
       */
      P.isPositive = P.isPos = function () {
        return this.s > 0;
      };

      /*
       * Return true if the value of this Decimal is 0 or -0, otherwise return false.
       *
       */
      P.isZero = function () {
        return !!this.d && this.d[0] === 0;
      };

      /*
       * Return true if the value of this Decimal is less than `y`, otherwise return false.
       *
       */
      P.lessThan = P.lt = function (y) {
        return this.cmp(y) < 0;
      };

      /*
       * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
       *
       */
      P.lessThanOrEqualTo = P.lte = function (y) {
        return this.cmp(y) < 1;
      };

      /*
       * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * If no base is specified, return log[10](arg).
       *
       * log[base](arg) = ln(arg) / ln(base)
       *
       * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
       * otherwise:
       *
       * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
       * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
       * between the result and the correctly rounded result will be one ulp (unit in the last place).
       *
       * log[-b](a)       = NaN
       * log[0](a)        = NaN
       * log[1](a)        = NaN
       * log[NaN](a)      = NaN
       * log[Infinity](a) = NaN
       * log[b](0)        = -Infinity
       * log[b](-0)       = -Infinity
       * log[b](-a)       = NaN
       * log[b](1)        = 0
       * log[b](Infinity) = Infinity
       * log[b](NaN)      = NaN
       *
       * [base] {number|string|bigint|Decimal} The base of the logarithm.
       *
       */
      P.logarithm = P.log = function (base) {
        var isBase10,
          d,
          denominator,
          k,
          inf,
          num,
          sd,
          r,
          arg = this,
          Ctor = arg.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding,
          guard = 5;

        // Default base is 10.
        if (base == null) {
          base = new Ctor(10);
          isBase10 = true;
        } else {
          base = new Ctor(base);
          d = base.d;

          // Return NaN if base is negative, or non-finite, or is 0 or 1.
          if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
          isBase10 = base.eq(10);
        }
        d = arg.d;

        // Is arg negative, non-finite, 0 or 1?
        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
          return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
        }

        // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
        // integer power of 10.
        if (isBase10) {
          if (d.length > 1) {
            inf = true;
          } else {
            for (k = d[0]; k % 10 === 0;) k /= 10;
            inf = k !== 1;
          }
        }
        external = false;
        sd = pr + guard;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

        // The result will have 5 rounding digits.
        r = divide(num, denominator, sd, 1);

        // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
        // calculate 10 further digits.
        //
        // If the result is known to have an infinite decimal expansion, repeat this until it is clear
        // that the result is above or below the boundary. Otherwise, if after calculating the 10
        // further digits, the last 14 are nines, round up and assume the result is exact.
        // Also assume the result is exact if the last 14 are zero.
        //
        // Example of a result that will be incorrectly rounded:
        // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
        // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
        // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
        // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
        // place is still 2.6.
        if (checkRoundingDigits(r.d, k = pr, rm)) {
          do {
            sd += 10;
            num = naturalLogarithm(arg, sd);
            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
            r = divide(num, denominator, sd, 1);
            if (!inf) {
              // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
              if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                r = finalise(r, pr + 1, 0);
              }
              break;
            }
          } while (checkRoundingDigits(r.d, k += 10, rm));
        }
        external = true;
        return finalise(r, pr, rm);
      };

      /*
       * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|bigint|Decimal}
       *
      P.max = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, -1);
      };
       */

      /*
       * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|bigint|Decimal}
       *
      P.min = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, 1);
      };
       */

      /*
       *  n - 0 = n
       *  n - N = N
       *  n - I = -I
       *  0 - n = -n
       *  0 - 0 = 0
       *  0 - N = N
       *  0 - I = -I
       *  N - n = N
       *  N - 0 = N
       *  N - N = N
       *  N - I = N
       *  I - n = I
       *  I - 0 = I
       *  I - N = N
       *  I - I = N
       *
       * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.minus = P.sub = function (y) {
        var d,
          e,
          i,
          j,
          k,
          len,
          pr,
          rm,
          xd,
          xe,
          xLTy,
          yd,
          x = this,
          Ctor = x.constructor;
        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {
          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return y negated if x is finite and y is ±Infinity.
          else if (x.d) y.s = -y.s;

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with different signs.
          // Return NaN if both are ±Infinity with the same sign.
          else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
          return y;
        }

        // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.plus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {
          // Return y negated if x is zero and y is non-zero.
          if (yd[0]) y.s = -y.s;

          // Return x if y is zero and x is non-zero.
          else if (xd[0]) y = new Ctor(x);

          // Return zero if both are zero.
          // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
          else return new Ctor(rm === 3 ? -0 : 0);
          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        e = mathfloor(y.e / LOG_BASE);
        xe = mathfloor(x.e / LOG_BASE);
        xd = xd.slice();
        k = xe - e;

        // If base 1e7 exponents differ...
        if (k) {
          xLTy = k < 0;
          if (xLTy) {
            d = xd;
            k = -k;
            len = yd.length;
          } else {
            d = yd;
            e = xe;
            len = xd.length;
          }

          // Numbers with massively different exponents would result in a very high number of
          // zeros needing to be prepended, but this can be avoided while still ensuring correct
          // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
          i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
          if (k > i) {
            k = i;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents.
          d.reverse();
          for (i = k; i--;) d.push(0);
          d.reverse();

          // Base 1e7 exponents equal.
        } else {
          // Check digits to determine which is the bigger number.

          i = xd.length;
          len = yd.length;
          xLTy = i < len;
          if (xLTy) len = i;
          for (i = 0; i < len; i++) {
            if (xd[i] != yd[i]) {
              xLTy = xd[i] < yd[i];
              break;
            }
          }
          k = 0;
        }
        if (xLTy) {
          d = xd;
          xd = yd;
          yd = d;
          y.s = -y.s;
        }
        len = xd.length;

        // Append zeros to `xd` if shorter.
        // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

        // Subtract yd from xd.
        for (i = yd.length; i > k;) {
          if (xd[--i] < yd[i]) {
            for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
            --xd[j];
            xd[i] += BASE;
          }
          xd[i] -= yd[i];
        }

        // Remove trailing zeros.
        for (; xd[--len] === 0;) xd.pop();

        // Remove leading zeros and adjust exponent accordingly.
        for (; xd[0] === 0; xd.shift()) --e;

        // Zero?
        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
      };

      /*
       *   n % 0 =  N
       *   n % N =  N
       *   n % I =  n
       *   0 % n =  0
       *  -0 % n = -0
       *   0 % 0 =  N
       *   0 % N =  N
       *   0 % I =  0
       *   N % n =  N
       *   N % 0 =  N
       *   N % N =  N
       *   N % I =  N
       *   I % n =  N
       *   I % 0 =  N
       *   I % N =  N
       *   I % I =  N
       *
       * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * The result depends on the modulo mode.
       *
       */
      P.modulo = P.mod = function (y) {
        var q,
          x = this,
          Ctor = x.constructor;
        y = new Ctor(y);

        // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

        // Return x if y is ±Infinity or x is ±0.
        if (!y.d || x.d && !x.d[0]) {
          return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
        }

        // Prevent rounding of intermediate calculations.
        external = false;
        if (Ctor.modulo == 9) {
          // Euclidian division: q = sign(y) * floor(x / abs(y))
          // result = x - q * y    where  0 <= result < abs(y)
          q = divide(x, y.abs(), 0, 3, 1);
          q.s *= y.s;
        } else {
          q = divide(x, y, 0, Ctor.modulo, 1);
        }
        q = q.times(y);
        external = true;
        return x.minus(q);
      };

      /*
       * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
       * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.naturalExponential = P.exp = function () {
        return naturalExponential(this);
      };

      /*
       * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.naturalLogarithm = P.ln = function () {
        return naturalLogarithm(this);
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
       * -1.
       *
       */
      P.negated = P.neg = function () {
        var x = new this.constructor(this);
        x.s = -x.s;
        return finalise(x);
      };

      /*
       *  n + 0 = n
       *  n + N = N
       *  n + I = I
       *  0 + n = n
       *  0 + 0 = 0
       *  0 + N = N
       *  0 + I = I
       *  N + n = N
       *  N + 0 = N
       *  N + N = N
       *  N + I = N
       *  I + n = I
       *  I + 0 = I
       *  I + N = N
       *  I + I = I
       *
       * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.plus = P.add = function (y) {
        var carry,
          d,
          e,
          i,
          k,
          len,
          pr,
          rm,
          xd,
          yd,
          x = this,
          Ctor = x.constructor;
        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {
          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with the same sign.
          // Return NaN if both are ±Infinity with different signs.
          // Return y if x is finite and y is ±Infinity.
          else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
          return y;
        }

        // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.minus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {
          // Return x if y is zero.
          // Return y if y is non-zero.
          if (!yd[0]) y = new Ctor(x);
          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        k = mathfloor(x.e / LOG_BASE);
        e = mathfloor(y.e / LOG_BASE);
        xd = xd.slice();
        i = k - e;

        // If base 1e7 exponents differ...
        if (i) {
          if (i < 0) {
            d = xd;
            i = -i;
            len = yd.length;
          } else {
            d = yd;
            e = k;
            len = xd.length;
          }

          // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
          k = Math.ceil(pr / LOG_BASE);
          len = k > len ? k + 1 : len + 1;
          if (i > len) {
            i = len;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
          d.reverse();
          for (; i--;) d.push(0);
          d.reverse();
        }
        len = xd.length;
        i = yd.length;

        // If yd is longer than xd, swap xd and yd so xd points to the longer array.
        if (len - i < 0) {
          i = len;
          d = yd;
          yd = xd;
          xd = d;
        }

        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
        for (carry = 0; i;) {
          carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
          xd[i] %= BASE;
        }
        if (carry) {
          xd.unshift(carry);
          ++e;
        }

        // Remove trailing zeros.
        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
        for (len = xd.length; xd[--len] == 0;) xd.pop();
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
      };

      /*
       * Return the number of significant digits of the value of this Decimal.
       *
       * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
       *
       */
      P.precision = P.sd = function (z) {
        var k,
          x = this;
        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
        if (x.d) {
          k = getPrecision(x.d);
          if (z && x.e + 1 > k) k = x.e + 1;
        } else {
          k = NaN;
        }
        return k;
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
       * rounding mode `rounding`.
       *
       */
      P.round = function () {
        var x = this,
          Ctor = x.constructor;
        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
      };

      /*
       * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * sin(x) = x - x^3/3! + x^5/5! - ...
       *
       * sin(0)         = 0
       * sin(-0)        = -0
       * sin(Infinity)  = NaN
       * sin(-Infinity) = NaN
       * sin(NaN)       = NaN
       *
       */
      P.sine = P.sin = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = sine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
      };

      /*
       * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       *  sqrt(-n) =  N
       *  sqrt(N)  =  N
       *  sqrt(-I) =  N
       *  sqrt(I)  =  I
       *  sqrt(0)  =  0
       *  sqrt(-0) = -0
       *
       */
      P.squareRoot = P.sqrt = function () {
        var m,
          n,
          sd,
          r,
          rep,
          t,
          x = this,
          d = x.d,
          e = x.e,
          s = x.s,
          Ctor = x.constructor;

        // Negative/NaN/Infinity/zero?
        if (s !== 1 || !d || !d[0]) {
          return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
        }
        external = false;

        // Initial estimate.
        s = Math.sqrt(+x);

        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
        if (s == 0 || s == 1 / 0) {
          n = digitsToString(d);
          if ((n.length + e) % 2 == 0) n += '0';
          s = Math.sqrt(n);
          e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
          if (s == 1 / 0) {
            n = '5e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }
          r = new Ctor(n);
        } else {
          r = new Ctor(s.toString());
        }
        sd = (e = Ctor.precision) + 3;

        // Newton-Raphson iteration.
        for (;;) {
          t = r;
          r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
            // 4999, i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {
              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);
                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              sd += 4;
              rep = 1;
            } else {
              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).eq(x);
              }
              break;
            }
          }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
      };

      /*
       * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * tan(0)         = 0
       * tan(-0)        = -0
       * tan(Infinity)  = NaN
       * tan(-Infinity) = NaN
       * tan(NaN)       = NaN
       *
       */
      P.tangent = P.tan = function () {
        var pr,
          rm,
          x = this,
          Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 10;
        Ctor.rounding = 1;
        x = x.sin();
        x.s = 1;
        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
      };

      /*
       *  n * 0 = 0
       *  n * N = N
       *  n * I = I
       *  0 * n = 0
       *  0 * 0 = 0
       *  0 * N = N
       *  0 * I = N
       *  N * n = N
       *  N * 0 = N
       *  N * N = N
       *  N * I = N
       *  I * n = I
       *  I * 0 = N
       *  I * N = N
       *  I * I = I
       *
       * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       */
      P.times = P.mul = function (y) {
        var carry,
          e,
          i,
          k,
          r,
          rL,
          t,
          xdL,
          ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d;
        y.s *= x.s;

        // If either is NaN, ±Infinity or ±0...
        if (!xd || !xd[0] || !yd || !yd[0]) {
          return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

          // Return NaN if either is NaN.
          // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
          ? NaN

          // Return ±Infinity if either is ±Infinity.
          // Return ±0 if either is ±0.
          : !xd || !yd ? y.s / 0 : y.s * 0);
        }
        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
        xdL = xd.length;
        ydL = yd.length;

        // Ensure xd points to the longer array.
        if (xdL < ydL) {
          r = xd;
          xd = yd;
          yd = r;
          rL = xdL;
          xdL = ydL;
          ydL = rL;
        }

        // Initialise the result array with zeros.
        r = [];
        rL = xdL + ydL;
        for (i = rL; i--;) r.push(0);

        // Multiply!
        for (i = ydL; --i >= 0;) {
          carry = 0;
          for (k = xdL + i; k > i;) {
            t = r[k] + yd[i] * xd[k - i - 1] + carry;
            r[k--] = t % BASE | 0;
            carry = t / BASE | 0;
          }
          r[k] = (r[k] + carry) % BASE | 0;
        }

        // Remove trailing zeros.
        for (; !r[--rL];) r.pop();
        if (carry) ++e;else r.shift();
        y.d = r;
        y.e = getBase10Exponent(r, e);
        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
      };

      /*
       * Return a string representing the value of this Decimal in base 2, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toBinary = function (sd, rm) {
        return toStringBinary(this, 2, sd, rm);
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
       * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
       *
       * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toDecimalPlaces = P.toDP = function (dp, rm) {
        var x = this,
          Ctor = x.constructor;
        x = new Ctor(x);
        if (dp === void 0) return x;
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        return finalise(x, dp + x.e + 1, rm);
      };

      /*
       * Return a string representing the value of this Decimal in exponential notation rounded to
       * `dp` fixed decimal places using rounding mode `rounding`.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toExponential = function (dp, rm) {
        var str,
          x = this,
          Ctor = x.constructor;
        if (dp === void 0) {
          str = finiteToString(x, true);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
          x = finalise(new Ctor(x), dp + 1, rm);
          str = finiteToString(x, true, dp + 1);
        }
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };

      /*
       * Return a string representing the value of this Decimal in normal (fixed-point) notation to
       * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
       * omitted.
       *
       * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
       * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
       * (-0).toFixed(3) is '0.000'.
       * (-0.5).toFixed(0) is '-0'.
       *
       */
      P.toFixed = function (dp, rm) {
        var str,
          y,
          x = this,
          Ctor = x.constructor;
        if (dp === void 0) {
          str = finiteToString(x);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
          y = finalise(new Ctor(x), dp + x.e + 1, rm);
          str = finiteToString(y, false, dp + y.e + 1);
        }

        // To determine whether to add the minus sign look at the value before it was rounded,
        // i.e. look at `x` rather than `y`.
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };

      /*
       * Return an array representing the value of this Decimal as a simple fraction with an integer
       * numerator and an integer denominator.
       *
       * The denominator will be a positive non-zero value less than or equal to the specified maximum
       * denominator. If a maximum denominator is not specified, the denominator will be the lowest
       * value necessary to represent the number exactly.
       *
       * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
       *
       */
      P.toFraction = function (maxD) {
        var d,
          d0,
          d1,
          d2,
          e,
          k,
          n,
          n0,
          n1,
          pr,
          q,
          r,
          x = this,
          xd = x.d,
          Ctor = x.constructor;
        if (!xd) return new Ctor(x);
        n1 = d0 = new Ctor(1);
        d1 = n0 = new Ctor(0);
        d = new Ctor(d1);
        e = d.e = getPrecision(xd) - x.e - 1;
        k = e % LOG_BASE;
        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
        if (maxD == null) {
          // d is 10**e, the minimum max-denominator needed.
          maxD = e > 0 ? d : n1;
        } else {
          n = new Ctor(maxD);
          if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
          maxD = n.gt(d) ? e > 0 ? d : n1 : n;
        }
        external = false;
        n = new Ctor(digitsToString(xd));
        pr = Ctor.precision;
        Ctor.precision = e = xd.length * LOG_BASE * 2;
        for (;;) {
          q = divide(n, d, 0, 1, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.cmp(maxD) == 1) break;
          d0 = d1;
          d1 = d2;
          d2 = n1;
          n1 = n0.plus(q.times(d2));
          n0 = d2;
          d2 = d;
          d = n.minus(q.times(d2));
          n = d2;
        }
        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;

        // Determine which fraction is closer to x, n0/d0 or n1/d1?
        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
        Ctor.precision = pr;
        external = true;
        return r;
      };

      /*
       * Return a string representing the value of this Decimal in base 16, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toHexadecimal = P.toHex = function (sd, rm) {
        return toStringBinary(this, 16, sd, rm);
      };

      /*
       * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
       * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
       *
       * The return value will always have the same sign as this Decimal, unless either this Decimal
       * or `y` is NaN, in which case the return value will be also be NaN.
       *
       * The return value is not affected by the value of `precision`.
       *
       * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toNearest() rounding mode not an integer: {rm}'
       * 'toNearest() rounding mode out of range: {rm}'
       *
       */
      P.toNearest = function (y, rm) {
        var x = this,
          Ctor = x.constructor;
        x = new Ctor(x);
        if (y == null) {
          // If x is not finite, return x.
          if (!x.d) return x;
          y = new Ctor(1);
          rm = Ctor.rounding;
        } else {
          y = new Ctor(y);
          if (rm === void 0) {
            rm = Ctor.rounding;
          } else {
            checkInt32(rm, 0, 8);
          }

          // If x is not finite, return x if y is not NaN, else NaN.
          if (!x.d) return y.s ? x : y;

          // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
          if (!y.d) {
            if (y.s) y.s = x.s;
            return y;
          }
        }

        // If y is not zero, calculate the nearest multiple of y to x.
        if (y.d[0]) {
          external = false;
          x = divide(x, y, 0, rm, 1).times(y);
          external = true;
          finalise(x);

          // If y is zero, return zero with the sign of x.
        } else {
          y.s = x.s;
          x = y;
        }
        return x;
      };

      /*
       * Return the value of this Decimal converted to a number primitive.
       * Zero keeps its sign.
       *
       */
      P.toNumber = function () {
        return +this;
      };

      /*
       * Return a string representing the value of this Decimal in base 8, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toOctal = function (sd, rm) {
        return toStringBinary(this, 8, sd, rm);
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
       * to `precision` significant digits using rounding mode `rounding`.
       *
       * ECMAScript compliant.
       *
       *   pow(x, NaN)                           = NaN
       *   pow(x, ±0)                            = 1
         *   pow(NaN, non-zero)                    = NaN
       *   pow(abs(x) > 1, +Infinity)            = +Infinity
       *   pow(abs(x) > 1, -Infinity)            = +0
       *   pow(abs(x) == 1, ±Infinity)           = NaN
       *   pow(abs(x) < 1, +Infinity)            = +0
       *   pow(abs(x) < 1, -Infinity)            = +Infinity
       *   pow(+Infinity, y > 0)                 = +Infinity
       *   pow(+Infinity, y < 0)                 = +0
       *   pow(-Infinity, odd integer > 0)       = -Infinity
       *   pow(-Infinity, even integer > 0)      = +Infinity
       *   pow(-Infinity, odd integer < 0)       = -0
       *   pow(-Infinity, even integer < 0)      = +0
       *   pow(+0, y > 0)                        = +0
       *   pow(+0, y < 0)                        = +Infinity
       *   pow(-0, odd integer > 0)              = -0
       *   pow(-0, even integer > 0)             = +0
       *   pow(-0, odd integer < 0)              = -Infinity
       *   pow(-0, even integer < 0)             = +Infinity
       *   pow(finite x < 0, finite non-integer) = NaN
       *
       * For non-integer or very large exponents pow(x, y) is calculated using
       *
       *   x^y = exp(y*ln(x))
       *
       * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
       * probability of an incorrectly rounded result
       * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
       * i.e. 1 in 250,000,000,000,000
       *
       * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
       *
       * y {number|string|bigint|Decimal} The power to which to raise this Decimal.
       *
       */
      P.toPower = P.pow = function (y) {
        var e,
          k,
          pr,
          r,
          rm,
          s,
          x = this,
          Ctor = x.constructor,
          yn = +(y = new Ctor(y));

        // Either ±Infinity, NaN or ±0?
        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
        x = new Ctor(x);
        if (x.eq(1)) return x;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (y.eq(1)) return finalise(x, pr, rm);

        // y exponent
        e = mathfloor(y.e / LOG_BASE);

        // If y is a small integer use the 'exponentiation by squaring' algorithm.
        if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
          r = intPow(Ctor, x, k, pr);
          return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
        }
        s = x.s;

        // if x is negative
        if (s < 0) {
          // if y is not an integer
          if (e < y.d.length - 1) return new Ctor(NaN);

          // Result is positive if x is negative and the last digit of integer y is even.
          if ((y.d[e] & 1) == 0) s = 1;

          // if x.eq(-1)
          if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
            x.s = s;
            return x;
          }
        }

        // Estimate result exponent.
        // x^y = 10^e,  where e = y * log10(x)
        // log10(x) = log10(x_significand) + x_exponent
        // log10(x_significand) = ln(x_significand) / ln(10)
        k = mathpow(+x, yn);
        e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;

        // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

        // Overflow/underflow?
        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
        external = false;
        Ctor.rounding = x.s = 1;

        // Estimate the extra guard digits needed to ensure five correct rounding digits from
        // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
        // new Decimal(2.32456).pow('2087987436534566.46411')
        // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
        k = Math.min(12, (e + '').length);

        // r = x^y = exp(y*ln(x))
        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

        // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
        if (r.d) {
          // Truncate to the required precision plus five rounding digits.
          r = finalise(r, pr + 5, 1);

          // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
          // the result.
          if (checkRoundingDigits(r.d, pr, rm)) {
            e = pr + 10;

            // Truncate to the increased precision plus five rounding digits.
            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
          }
        }
        r.s = s;
        external = true;
        Ctor.rounding = rm;
        return finalise(r, pr, rm);
      };

      /*
       * Return a string representing the value of this Decimal rounded to `sd` significant digits
       * using rounding mode `rounding`.
       *
       * Return exponential notation if `sd` is less than the number of digits necessary to represent
       * the integer part of the value in normal notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toPrecision = function (sd, rm) {
        var str,
          x = this,
          Ctor = x.constructor;
        if (sd === void 0) {
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        } else {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
          x = finalise(new Ctor(x), sd, rm);
          str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
        }
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
       * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
       * omitted.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toSD() digits out of range: {sd}'
       * 'toSD() digits not an integer: {sd}'
       * 'toSD() rounding mode not an integer: {rm}'
       * 'toSD() rounding mode out of range: {rm}'
       *
       */
      P.toSignificantDigits = P.toSD = function (sd, rm) {
        var x = this,
          Ctor = x.constructor;
        if (sd === void 0) {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        } else {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        }
        return finalise(new Ctor(x), sd, rm);
      };

      /*
       * Return a string representing the value of this Decimal.
       *
       * Return exponential notation if this Decimal has a positive exponent equal to or greater than
       * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
       *
       */
      P.toString = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };

      /*
       * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
       *
       */
      P.truncated = P.trunc = function () {
        return finalise(new this.constructor(this), this.e + 1, 1);
      };

      /*
       * Return a string representing the value of this Decimal.
       * Unlike `toString`, negative zero will include the minus sign.
       *
       */
      P.valueOf = P.toJSON = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() ? '-' + str : str;
      };

      // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

      /*
       *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
       *                           finiteToString, naturalExponential, naturalLogarithm
       *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
       *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
       *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
       *  convertBase              toStringBinary, parseOther
       *  cos                      P.cos
       *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
       *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
       *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
       *                           taylorSeries, atan2, parseOther
       *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
       *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
       *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
       *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
       *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
       *                           P.truncated, divide, getLn10, getPi, naturalExponential,
       *                           naturalLogarithm, ceil, floor, round, trunc
       *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
       *                           toStringBinary
       *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
       *  getLn10                  P.logarithm, naturalLogarithm
       *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
       *  getPrecision             P.precision, P.toFraction
       *  getZeroString            digitsToString, finiteToString
       *  intPow                   P.toPower, parseOther
       *  isOdd                    toLessThanHalfPi
       *  maxOrMin                 max, min
       *  naturalExponential       P.naturalExponential, P.toPower
       *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
       *                           P.toPower, naturalExponential
       *  nonFiniteToString        finiteToString, toStringBinary
       *  parseDecimal             Decimal
       *  parseOther               Decimal
       *  sin                      P.sin
       *  taylorSeries             P.cosh, P.sinh, cos, sin
       *  toLessThanHalfPi         P.cos, P.sin
       *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
       *  truncate                 intPow
       *
       *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
       *                           naturalLogarithm, config, parseOther, random, Decimal
       */

      function digitsToString(d) {
        var i,
          k,
          ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];
        if (indexOfLastWord > 0) {
          str += w;
          for (i = 1; i < indexOfLastWord; i++) {
            ws = d[i] + '';
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
            str += ws;
          }
          w = d[i];
          ws = w + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
        } else if (w === 0) {
          return '0';
        }

        // Remove trailing zeros of last w.
        for (; w % 10 === 0;) w /= 10;
        return str + w;
      }
      function checkInt32(i, min, max) {
        if (i !== ~~i || i < min || i > max) {
          throw Error(invalidArgument + i);
        }
      }

      /*
       * Check 5 rounding digits if `repeating` is null, 4 otherwise.
       * `repeating == null` if caller is `log` or `pow`,
       * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
       */
      function checkRoundingDigits(d, i, rm, repeating) {
        var di, k, r, rd;

        // Get the length of the first word of the array d.
        for (k = d[0]; k >= 10; k /= 10) --i;

        // Is the rounding digit in the first word of d?
        if (--i < 0) {
          i += LOG_BASE;
          di = 0;
        } else {
          di = Math.ceil((i + 1) / LOG_BASE);
          i %= LOG_BASE;
        }

        // i is the index (0 - 6) of the rounding digit.
        // E.g. if within the word 3487563 the first rounding digit is 5,
        // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
        k = mathpow(10, LOG_BASE - i);
        rd = d[di] % k | 0;
        if (repeating == null) {
          if (i < 3) {
            if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;
            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
          } else {
            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
          }
        } else {
          if (i < 4) {
            if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;
            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
          } else {
            r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
          }
        }
        return r;
      }

      // Convert string of `baseIn` to an array of numbers of `baseOut`.
      // Eg. convertBase('255', 10, 16) returns [15, 15].
      // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
      function convertBase(str, baseIn, baseOut) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          strL = str.length;
        for (; i < strL;) {
          for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
          arr[0] += NUMERALS.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] === void 0) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }

      /*
       * cos(x) = 1 - x^2/2! + x^4/4! - ...
       * |x| < pi/2
       *
       */
      function cosine(Ctor, x) {
        var k, len, y;
        if (x.isZero()) return x;

        // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
        // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

        // Estimate the optimum number of times to use the argument reduction.
        len = x.d.length;
        if (len < 32) {
          k = Math.ceil(len / 3);
          y = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          y = '2.3283064365386962890625e-10';
        }
        Ctor.precision += k;
        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

        // Reverse argument reduction
        for (var i = k; i--;) {
          var cos2x = x.times(x);
          x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
        }
        Ctor.precision -= k;
        return x;
      }

      /*
       * Perform division in the specified base.
       */
      var divide = function () {
        // Assumes non-zero x and k, and hence non-zero result.
        function multiplyInteger(x, k, base) {
          var temp,
            carry = 0,
            i = x.length;
          for (x = x.slice(); i--;) {
            temp = x[i] * k + carry;
            x[i] = temp % base | 0;
            carry = temp / base | 0;
          }
          if (carry) x.unshift(carry);
          return x;
        }
        function compare(a, b, aL, bL) {
          var i, r;
          if (aL != bL) {
            r = aL > bL ? 1 : -1;
          } else {
            for (i = r = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                r = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }
          return r;
        }
        function subtract(a, b, aL, base) {
          var i = 0;

          // Subtract b from a.
          for (; aL--;) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }

          // Remove leading zeros.
          for (; !a[0] && a.length > 1;) a.shift();
        }
        return function (x, y, pr, rm, dp, base) {
          var cmp,
            e,
            i,
            k,
            logBase,
            more,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d;

          // Either NaN, Infinity or 0?
          if (!xd || !xd[0] || !yd || !yd[0]) {
            return new Ctor(
            // Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
            // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
          }
          if (base) {
            logBase = 1;
            e = x.e - y.e;
          } else {
            base = BASE;
            logBase = LOG_BASE;
            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
          }
          yL = yd.length;
          xL = xd.length;
          q = new Ctor(sign);
          qd = q.d = [];

          // Result exponent may be one less than e.
          // The digit array of a Decimal from toStringBinary may have trailing zeros.
          for (i = 0; yd[i] == (xd[i] || 0); i++);
          if (yd[i] > (xd[i] || 0)) e--;
          if (pr == null) {
            sd = pr = Ctor.precision;
            rm = Ctor.rounding;
          } else if (dp) {
            sd = pr + (x.e - y.e) + 1;
          } else {
            sd = pr;
          }
          if (sd < 0) {
            qd.push(1);
            more = true;
          } else {
            // Convert precision in number of base 10 digits to base 1e7 digits.
            sd = sd / logBase + 2 | 0;
            i = 0;

            // divisor < 1e7
            if (yL == 1) {
              k = 0;
              yd = yd[0];
              sd++;

              // k is the carry.
              for (; (i < xL || k) && sd--; i++) {
                t = k * base + (xd[i] || 0);
                qd[i] = t / yd | 0;
                k = t % yd | 0;
              }
              more = k || i < xL;

              // divisor >= 1e7
            } else {
              // Normalise xd and yd so highest order digit of yd is >= base/2
              k = base / (yd[0] + 1) | 0;
              if (k > 1) {
                yd = multiplyInteger(yd, k, base);
                xd = multiplyInteger(xd, k, base);
                yL = yd.length;
                xL = xd.length;
              }
              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL;) rem[remL++] = 0;
              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];
              if (yd[1] >= base / 2) ++yd0;
              do {
                k = 0;

                // Compare divisor and remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {
                  // Calculate trial digit, k.
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // k will be how many times the divisor goes into the current remainder.
                  k = rem0 / yd0 | 0;

                  //  Algorithm:
                  //  1. product = divisor * trial digit (k)
                  //  2. if product > remainder: product -= divisor, k--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, k++

                  if (k > 1) {
                    if (k >= base) k = base - 1;

                    // product = divisor * trial digit.
                    prod = multiplyInteger(yd, k, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    cmp = compare(prod, rem, prodL, remL);

                    // product > remainder.
                    if (cmp == 1) {
                      k--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yd, prodL, base);
                    }
                  } else {
                    // cmp is -1.
                    // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                    // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                    if (k == 0) cmp = k = 1;
                    prod = yd.slice();
                  }
                  prodL = prod.length;
                  if (prodL < remL) prod.unshift(0);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);

                  // If product was < previous remainder.
                  if (cmp == -1) {
                    remL = rem.length;

                    // Compare divisor and new remainder.
                    cmp = compare(yd, rem, yL, remL);

                    // If divisor < new remainder, subtract divisor from remainder.
                    if (cmp < 1) {
                      k++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yd, remL, base);
                    }
                  }
                  remL = rem.length;
                } else if (cmp === 0) {
                  k++;
                  rem = [0];
                } // if cmp === 1, k will be 0

                // Add the next digit, k, to the result array.
                qd[i++] = k;

                // Update the remainder.
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] !== void 0) && sd--);
              more = rem[0] !== void 0;
            }

            // Leading zero?
            if (!qd[0]) qd.shift();
          }

          // logBase is 1 when divide is being used for base conversion.
          if (logBase == 1) {
            q.e = e;
            inexact = more;
          } else {
            // To calculate q.e, first get the number of digits of qd[0].
            for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
            q.e = i + e * logBase - 1;
            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
          }
          return q;
        };
      }();

      /*
       * Round `x` to `sd` significant digits using rounding mode `rm`.
       * Check for over/under-flow.
       */
      function finalise(x, sd, rm, isTruncated) {
        var digits,
          i,
          j,
          k,
          rd,
          roundUp,
          w,
          xd,
          xdi,
          Ctor = x.constructor;

        // Don't round if sd is null or undefined.
        out: if (sd != null) {
          xd = x.d;

          // Infinity/NaN.
          if (!xd) return x;

          // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
          // w: the word of xd containing rd, a base 1e7 number.
          // xdi: the index of w within xd.
          // digits: the number of digits of w.
          // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
          // they had leading zeros)
          // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

          // Get the length of the first word of the digits array xd.
          for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
          i = sd - digits;

          // Is the rounding digit in the first word of xd?
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];

            // Get the rounding digit at index j of w.
            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k = xd.length;
            if (xdi >= k) {
              if (isTruncated) {
                // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
                for (; k++ <= xdi;) xd.push(0);
                w = rd = 0;
                digits = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              w = k = xd[xdi];

              // Get the number of digits of w.
              for (digits = 1; k >= 10; k /= 10) digits++;

              // Get the index of rd within w.
              i %= LOG_BASE;

              // Get the index of rd within w, adjusted for leading zeros.
              // The number of leading zeros of w is given by LOG_BASE - digits.
              j = i - LOG_BASE + digits;

              // Get the rounding digit at index j of w.
              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
            }
          }

          // Are there any non-zero digits after the rounding digit?
          isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

          // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
          // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
          // will give 714.

          roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
          // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xd[0]) {
            xd.length = 0;
            if (roundUp) {
              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x.e = -sd || 0;
            } else {
              // Zero.
              xd[0] = x.e = 0;
            }
            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xd.length = xdi;
            k = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k = mathpow(10, LOG_BASE - i);

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of w.
            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
          }
          if (roundUp) {
            for (;;) {
              // Is the digit to be rounded up in the first word of xd?
              if (xdi == 0) {
                // i will be the length of xd[0] before k is added.
                for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
                j = xd[0] += k;
                for (k = 1; j >= 10; j /= 10) k++;

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xd[0] == BASE) xd[0] = 1;
                }
                break;
              } else {
                xd[xdi] += k;
                if (xd[xdi] != BASE) break;
                xd[xdi--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xd.length; xd[--i] === 0;) xd.pop();
        }
        if (external) {
          // Overflow?
          if (x.e > Ctor.maxE) {
            // Infinity.
            x.d = null;
            x.e = NaN;

            // Underflow?
          } else if (x.e < Ctor.minE) {
            // Zero.
            x.e = 0;
            x.d = [0];
            // Ctor.underflow = true;
          } // else Ctor.underflow = false;
        }

        return x;
      }
      function finiteToString(x, isExp, sd) {
        if (!x.isFinite()) return nonFiniteToString(x);
        var k,
          e = x.e,
          str = digitsToString(x.d),
          len = str.length;
        if (isExp) {
          if (sd && (k = sd - len) > 0) {
            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
          } else if (len > 1) {
            str = str.charAt(0) + '.' + str.slice(1);
          }
          str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
        } else if (e < 0) {
          str = '0.' + getZeroString(-e - 1) + str;
          if (sd && (k = sd - len) > 0) str += getZeroString(k);
        } else if (e >= len) {
          str += getZeroString(e + 1 - len);
          if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
        } else {
          if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
          if (sd && (k = sd - len) > 0) {
            if (e + 1 === len) str += '.';
            str += getZeroString(k);
          }
        }
        return str;
      }

      // Calculate the base 10 exponent from the base 1e7 exponent.
      function getBase10Exponent(digits, e) {
        var w = digits[0];

        // Add the number of digits of the first word of the digits array.
        for (e *= LOG_BASE; w >= 10; w /= 10) e++;
        return e;
      }
      function getLn10(Ctor, sd, pr) {
        if (sd > LN10_PRECISION) {
          // Reset global state in case the exception is caught.
          external = true;
          if (pr) Ctor.precision = pr;
          throw Error(precisionLimitExceeded);
        }
        return finalise(new Ctor(LN10), sd, 1, true);
      }
      function getPi(Ctor, sd, rm) {
        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
        return finalise(new Ctor(PI), sd, rm, true);
      }
      function getPrecision(digits) {
        var w = digits.length - 1,
          len = w * LOG_BASE + 1;
        w = digits[w];

        // If non-zero...
        if (w) {
          // Subtract the number of trailing zeros of the last word.
          for (; w % 10 == 0; w /= 10) len--;

          // Add the number of digits of the first word.
          for (w = digits[0]; w >= 10; w /= 10) len++;
        }
        return len;
      }
      function getZeroString(k) {
        var zs = '';
        for (; k--;) zs += '0';
        return zs;
      }

      /*
       * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
       * integer of type number.
       *
       * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
       *
       */
      function intPow(Ctor, x, n, pr) {
        var isTruncated,
          r = new Ctor(1),
          // Max n of 9007199254740991 takes 53 loop iterations.
          // Maximum digits array length; leaves [28, 34] guard digits.
          k = Math.ceil(pr / LOG_BASE + 4);
        external = false;
        for (;;) {
          if (n % 2) {
            r = r.times(x);
            if (truncate(r.d, k)) isTruncated = true;
          }
          n = mathfloor(n / 2);
          if (n === 0) {
            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
            n = r.d.length - 1;
            if (isTruncated && r.d[n] === 0) ++r.d[n];
            break;
          }
          x = x.times(x);
          truncate(x.d, k);
        }
        external = true;
        return r;
      }
      function isOdd(n) {
        return n.d[n.d.length - 1] & 1;
      }

      /*
       * Handle `max` (`n` is -1) and `min` (`n` is 1).
       */
      function maxOrMin(Ctor, args, n) {
        var k,
          y,
          x = new Ctor(args[0]),
          i = 0;
        for (; ++i < args.length;) {
          y = new Ctor(args[i]);

          // NaN?
          if (!y.s) {
            x = y;
            break;
          }
          k = x.cmp(y);
          if (k === n || k === 0 && x.s === n) {
            x = y;
          }
        }
        return x;
      }

      /*
       * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
       * digits.
       *
       * Taylor/Maclaurin series.
       *
       * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
       *
       * Argument reduction:
       *   Repeat x = x / 32, k += 5, until |x| < 0.1
       *   exp(x) = exp(x / 2^k)^(2^k)
       *
       * Previously, the argument was initially reduced by
       * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
       * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
       * found to be slower than just dividing repeatedly by 32 as above.
       *
       * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
       * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
       * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
       *
       *  exp(Infinity)  = Infinity
       *  exp(-Infinity) = 0
       *  exp(NaN)       = NaN
       *  exp(±0)        = 1
       *
       *  exp(x) is non-terminating for any finite, non-zero x.
       *
       *  The result will always be correctly rounded.
       *
       */
      function naturalExponential(x, sd) {
        var denominator,
          guard,
          j,
          pow,
          sum,
          t,
          wpr,
          rep = 0,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // 0/NaN/Infinity?
        if (!x.d || !x.d[0] || x.e > 17) {
          return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
        }
        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }
        t = new Ctor(0.03125);

        // while abs(x) >= 0.1
        while (x.e > -2) {
          // x = x / 2^5
          x = x.times(t);
          k += 5;
        }

        // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
        // necessary to ensure the first 4 rounding digits are correct.
        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
        wpr += guard;
        denominator = pow = sum = new Ctor(1);
        Ctor.precision = wpr;
        for (;;) {
          pow = finalise(pow.times(x), wpr, 1);
          denominator = denominator.times(++i);
          t = sum.plus(divide(pow, denominator, wpr, 1));
          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            j = k;
            while (j--) sum = finalise(sum.times(sum), wpr, 1);

            // Check to see if the first 4 rounding digits are [49]999.
            // If so, repeat the summation with a higher precision, otherwise
            // e.g. with precision: 18, rounding: 1
            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {
              if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += 10;
                denominator = pow = t = new Ctor(1);
                i = 0;
                rep++;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }
          sum = t;
        }
      }

      /*
       * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
       * digits.
       *
       *  ln(-n)        = NaN
       *  ln(0)         = -Infinity
       *  ln(-0)        = -Infinity
       *  ln(1)         = 0
       *  ln(Infinity)  = Infinity
       *  ln(-Infinity) = NaN
       *  ln(NaN)       = NaN
       *
       *  ln(n) (n != 1) is non-terminating.
       *
       */
      function naturalLogarithm(y, sd) {
        var c,
          c0,
          denominator,
          e,
          numerator,
          rep,
          sum,
          t,
          wpr,
          x1,
          x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // Is x negative or Infinity, NaN, 0 or 1?
        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
          return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
        }
        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }
        Ctor.precision = wpr += guard;
        c = digitsToString(xd);
        c0 = c.charAt(0);
        if (Math.abs(e = x.e) < 1.5e15) {
          // Argument reduction.
          // The series converges faster the closer the argument is to 1, so using
          // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
          // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
          // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
          // later be divided by this number, then separate out the power of 10 using
          // ln(a*10^b) = ln(a) + b*ln(10).

          // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
          //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
          // max n is 6 (gives 0.7 - 1.3)
          while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
            x = x.times(y);
            c = digitsToString(x.d);
            c0 = c.charAt(0);
            n++;
          }
          e = x.e;
          if (c0 > 1) {
            x = new Ctor('0.' + c);
            e++;
          } else {
            x = new Ctor(c0 + '.' + c.slice(1));
          }
        } else {
          // The argument reduction method above may result in overflow if the argument y is a massive
          // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
          // function using ln(x*10^e) = ln(x) + e*ln(10).
          t = getLn10(Ctor, wpr + 2, pr).times(e + '');
          x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
          Ctor.precision = pr;
          return sd == null ? finalise(x, pr, rm, external = true) : x;
        }

        // x1 is x reduced to a value near 1.
        x1 = x;

        // Taylor series.
        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
        // where x = (y - 1)/(y + 1)    (|x| < 1)
        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
        x2 = finalise(x.times(x), wpr, 1);
        denominator = 3;
        for (;;) {
          numerator = finalise(numerator.times(x2), wpr, 1);
          t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            sum = sum.times(2);

            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
            sum = divide(sum, new Ctor(n), wpr, 1);

            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
            // been repeated previously) and the first 4 rounding digits 9999?
            // If so, restart the summation with a higher precision, otherwise
            // e.g. with precision: 12, rounding: 1
            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {
              if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += guard;
                t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                x2 = finalise(x.times(x), wpr, 1);
                denominator = rep = 1;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }
          sum = t;
          denominator += 2;
        }
      }

      // ±Infinity, NaN.
      function nonFiniteToString(x) {
        // Unsigned.
        return String(x.s * x.s / 0);
      }

      /*
       * Parse the value of a new Decimal `x` from string `str`.
       */
      function parseDecimal(x, str) {
        var e, i, len;

        // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.
        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {
          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          // Integer.
          e = str.length;
        }

        // Determine leading zeros.
        for (i = 0; str.charCodeAt(i) === 48; i++);

        // Determine trailing zeros.
        for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
        str = str.slice(i, len);
        if (str) {
          len -= i;
          x.e = e = e - i - 1;
          x.d = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first word of the digits array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;
          if (i < len) {
            if (i) x.d.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
            str = str.slice(i);
            i = LOG_BASE - str.length;
          } else {
            i -= len;
          }
          for (; i--;) str += '0';
          x.d.push(+str);
          if (external) {
            // Overflow?
            if (x.e > x.constructor.maxE) {
              // Infinity.
              x.d = null;
              x.e = NaN;

              // Underflow?
            } else if (x.e < x.constructor.minE) {
              // Zero.
              x.e = 0;
              x.d = [0];
              // x.constructor.underflow = true;
            } // else x.constructor.underflow = false;
          }
        } else {
          // Zero.
          x.e = 0;
          x.d = [0];
        }
        return x;
      }

      /*
       * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
       */
      function parseOther(x, str) {
        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
        if (str.indexOf('_') > -1) {
          str = str.replace(/(\d)_(?=\d)/g, '$1');
          if (isDecimal.test(str)) return parseDecimal(x, str);
        } else if (str === 'Infinity' || str === 'NaN') {
          if (!+str) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return x;
        }
        if (isHex.test(str)) {
          base = 16;
          str = str.toLowerCase();
        } else if (isBinary.test(str)) {
          base = 2;
        } else if (isOctal.test(str)) {
          base = 8;
        } else {
          throw Error(invalidArgument + str);
        }

        // Is there a binary exponent part?
        i = str.search(/p/i);
        if (i > 0) {
          p = +str.slice(i + 1);
          str = str.substring(2, i);
        } else {
          str = str.slice(2);
        }

        // Convert `str` as an integer then divide the result by `base` raised to a power such that the
        // fraction part will be restored.
        i = str.indexOf('.');
        isFloat = i >= 0;
        Ctor = x.constructor;
        if (isFloat) {
          str = str.replace('.', '');
          len = str.length;
          i = len - i;

          // log[10](16) = 1.2041... , log[10](88) = 1.9444....
          divisor = intPow(Ctor, new Ctor(base), i, i * 2);
        }
        xd = convertBase(str, base, BASE);
        xe = xd.length - 1;

        // Remove trailing zeros.
        for (i = xe; xd[i] === 0; --i) xd.pop();
        if (i < 0) return new Ctor(x.s * 0);
        x.e = getBase10Exponent(xd, xe);
        x.d = xd;
        external = false;

        // At what precision to perform the division to ensure exact conversion?
        // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
        // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
        // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
        // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
        // Therefore using 4 * the number of digits of str will always be enough.
        if (isFloat) x = divide(x, divisor, len * 4);

        // Multiply by the binary exponent part if present.
        if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
        external = true;
        return x;
      }

      /*
       * sin(x) = x - x^3/3! + x^5/5! - ...
       * |x| < pi/2
       *
       */
      function sine(Ctor, x) {
        var k,
          len = x.d.length;
        if (len < 3) {
          return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
        }

        // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
        // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
        // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x);

        // Reverse argument reduction
        var sin2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
        for (; k--;) {
          sin2_x = x.times(x);
          x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
        }
        return x;
      }

      // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
      function taylorSeries(Ctor, n, x, y, isHyperbolic) {
        var j,
          t,
          u,
          x2,
          pr = Ctor.precision,
          k = Math.ceil(pr / LOG_BASE);
        external = false;
        x2 = x.times(x);
        u = new Ctor(y);
        for (;;) {
          t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
          u = isHyperbolic ? y.plus(t) : y.minus(t);
          y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
          t = u.plus(y);
          if (t.d[k] !== void 0) {
            for (j = k; t.d[j] === u.d[j] && j--;);
            if (j == -1) break;
          }
          j = u;
          u = y;
          y = t;
          t = j;
        }
        external = true;
        t.d.length = k + 1;
        return t;
      }

      // Exponent e must be positive and non-zero.
      function tinyPow(b, e) {
        var n = b;
        while (--e) n *= b;
        return n;
      }

      // Return the absolute value of `x` reduced to less than or equal to half pi.
      function toLessThanHalfPi(Ctor, x) {
        var t,
          isNeg = x.s < 0,
          pi = getPi(Ctor, Ctor.precision, 1),
          halfPi = pi.times(0.5);
        x = x.abs();
        if (x.lte(halfPi)) {
          quadrant = isNeg ? 4 : 1;
          return x;
        }
        t = x.divToInt(pi);
        if (t.isZero()) {
          quadrant = isNeg ? 3 : 2;
        } else {
          x = x.minus(t.times(pi));

          // 0 <= x < pi
          if (x.lte(halfPi)) {
            quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
            return x;
          }
          quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
        }
        return x.minus(pi).abs();
      }

      /*
       * Return the value of Decimal `x` as a string in base `baseOut`.
       *
       * If the optional `sd` argument is present include a binary exponent suffix.
       */
      function toStringBinary(x, baseOut, sd, rm) {
        var base,
          e,
          i,
          k,
          len,
          roundUp,
          str,
          xd,
          y,
          Ctor = x.constructor,
          isExp = sd !== void 0;
        if (isExp) {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        } else {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        }
        if (!x.isFinite()) {
          str = nonFiniteToString(x);
        } else {
          str = finiteToString(x);
          i = str.indexOf('.');

          // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
          // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
          // minBinaryExponent = floor(decimalExponent * log[2](10))
          // log[2](10) = 3.321928094887362347870319429489390175864

          if (isExp) {
            base = 2;
            if (baseOut == 16) {
              sd = sd * 4 - 3;
            } else if (baseOut == 8) {
              sd = sd * 3 - 2;
            }
          } else {
            base = baseOut;
          }

          // Convert the number as an integer then divide the result by its base raised to a power such
          // that the fraction part will be restored.

          // Non-integer.
          if (i >= 0) {
            str = str.replace('.', '');
            y = new Ctor(1);
            y.e = str.length - i;
            y.d = convertBase(finiteToString(y), 10, base);
            y.e = y.d.length;
          }
          xd = convertBase(str, 10, base);
          e = len = xd.length;

          // Remove trailing zeros.
          for (; xd[--len] == 0;) xd.pop();
          if (!xd[0]) {
            str = isExp ? '0p+0' : '0';
          } else {
            if (i < 0) {
              e--;
            } else {
              x = new Ctor(x);
              x.d = xd;
              x.e = e;
              x = divide(x, y, sd, rm, 0, base);
              xd = x.d;
              e = x.e;
              roundUp = inexact;
            }

            // The rounding digit, i.e. the digit after the digit that may be rounded up.
            i = xd[sd];
            k = base / 2;
            roundUp = roundUp || xd[sd + 1] !== void 0;
            roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
            xd.length = sd;
            if (roundUp) {
              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (; ++xd[--sd] > base - 1;) {
                xd[sd] = 0;
                if (!sd) {
                  ++e;
                  xd.unshift(1);
                }
              }
            }

            // Determine trailing zeros.
            for (len = xd.length; !xd[len - 1]; --len);

            // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

            // Add binary exponent suffix?
            if (isExp) {
              if (len > 1) {
                if (baseOut == 16 || baseOut == 8) {
                  i = baseOut == 16 ? 4 : 3;
                  for (--len; len % i; len++) str += '0';
                  xd = convertBase(str, base, baseOut);
                  for (len = xd.length; !xd[len - 1]; --len);

                  // xd[0] will always be be 1
                  for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
                } else {
                  str = str.charAt(0) + '.' + str.slice(1);
                }
              }
              str = str + (e < 0 ? 'p' : 'p+') + e;
            } else if (e < 0) {
              for (; ++e;) str = '0' + str;
              str = '0.' + str;
            } else {
              if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
            }
          }
          str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
        }
        return x.s < 0 ? '-' + str : str;
      }

      // Does not strip trailing zeros.
      function truncate(arr, len) {
        if (arr.length > len) {
          arr.length = len;
          return true;
        }
      }

      // Decimal methods

      /*
       *  abs
       *  acos
       *  acosh
       *  add
       *  asin
       *  asinh
       *  atan
       *  atanh
       *  atan2
       *  cbrt
       *  ceil
       *  clamp
       *  clone
       *  config
       *  cos
       *  cosh
       *  div
       *  exp
       *  floor
       *  hypot
       *  ln
       *  log
       *  log2
       *  log10
       *  max
       *  min
       *  mod
       *  mul
       *  pow
       *  random
       *  round
       *  set
       *  sign
       *  sin
       *  sinh
       *  sqrt
       *  sub
       *  sum
       *  tan
       *  tanh
       *  trunc
       */

      /*
       * Return a new Decimal whose value is the absolute value of `x`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function abs(x) {
        return new this(x).abs();
      }

      /*
       * Return a new Decimal whose value is the arccosine in radians of `x`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function acos(x) {
        return new this(x).acos();
      }

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function acosh(x) {
        return new this(x).acosh();
      }

      /*
       * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       * y {number|string|bigint|Decimal}
       *
       */
      function add(x, y) {
        return new this(x).plus(y);
      }

      /*
       * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function asin(x) {
        return new this(x).asin();
      }

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function asinh(x) {
        return new this(x).asinh();
      }

      /*
       * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function atan(x) {
        return new this(x).atan();
      }

      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function atanh(x) {
        return new this(x).atanh();
      }

      /*
       * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
       * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi, pi]
       *
       * y {number|string|bigint|Decimal} The y-coordinate.
       * x {number|string|bigint|Decimal} The x-coordinate.
       *
       * atan2(±0, -0)               = ±pi
       * atan2(±0, +0)               = ±0
       * atan2(±0, -x)               = ±pi for x > 0
       * atan2(±0, x)                = ±0 for x > 0
       * atan2(-y, ±0)               = -pi/2 for y > 0
       * atan2(y, ±0)                = pi/2 for y > 0
       * atan2(±y, -Infinity)        = ±pi for finite y > 0
       * atan2(±y, +Infinity)        = ±0 for finite y > 0
       * atan2(±Infinity, x)         = ±pi/2 for finite x
       * atan2(±Infinity, -Infinity) = ±3*pi/4
       * atan2(±Infinity, +Infinity) = ±pi/4
       * atan2(NaN, x) = NaN
       * atan2(y, NaN) = NaN
       *
       */
      function atan2(y, x) {
        y = new this(y);
        x = new this(x);
        var r,
          pr = this.precision,
          rm = this.rounding,
          wpr = pr + 4;

        // Either NaN
        if (!y.s || !x.s) {
          r = new this(NaN);

          // Both ±Infinity
        } else if (!y.d && !x.d) {
          r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
          r.s = y.s;

          // x is ±Infinity or y is ±0
        } else if (!x.d || y.isZero()) {
          r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
          r.s = y.s;

          // y is ±Infinity or x is ±0
        } else if (!y.d || x.isZero()) {
          r = getPi(this, wpr, 1).times(0.5);
          r.s = y.s;

          // Both non-zero and finite
        } else if (x.s < 0) {
          this.precision = wpr;
          this.rounding = 1;
          r = this.atan(divide(y, x, wpr, 1));
          x = getPi(this, wpr, 1);
          this.precision = pr;
          this.rounding = rm;
          r = y.s < 0 ? r.minus(x) : r.plus(x);
        } else {
          r = this.atan(divide(y, x, wpr, 1));
        }
        return r;
      }

      /*
       * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function cbrt(x) {
        return new this(x).cbrt();
      }

      /*
       * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function ceil(x) {
        return finalise(x = new this(x), x.e + 1, 2);
      }

      /*
       * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
       *
       * x {number|string|bigint|Decimal}
       * min {number|string|bigint|Decimal}
       * max {number|string|bigint|Decimal}
       *
       */
      function clamp(x, min, max) {
        return new this(x).clamp(min, max);
      }

      /*
       * Configure global settings for a Decimal constructor.
       *
       * `obj` is an object with one or more of the following properties,
       *
       *   precision  {number}
       *   rounding   {number}
       *   toExpNeg   {number}
       *   toExpPos   {number}
       *   maxE       {number}
       *   minE       {number}
       *   modulo     {number}
       *   crypto     {boolean|number}
       *   defaults   {true}
       *
       * E.g. Decimal.config({ precision: 20, rounding: 4 })
       *
       */
      function config(obj) {
        if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
        var i,
          p,
          v,
          useDefaults = obj.defaults === true,
          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];
        for (i = 0; i < ps.length; i += 3) {
          if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
          if ((v = obj[p]) !== void 0) {
            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
          }
        }
        if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (v === true || v === false || v === 0 || v === 1) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                this[p] = true;
              } else {
                throw Error(cryptoUnavailable);
              }
            } else {
              this[p] = false;
            }
          } else {
            throw Error(invalidArgument + p + ': ' + v);
          }
        }
        return this;
      }

      /*
       * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function cos(x) {
        return new this(x).cos();
      }

      /*
       * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function cosh(x) {
        return new this(x).cosh();
      }

      /*
       * Create and return a Decimal constructor with the same configuration properties as this Decimal
       * constructor.
       *
       */
      function clone(obj) {
        var i, p, ps;

        /*
         * The Decimal constructor and exported function.
         * Return a new Decimal instance.
         *
         * v {number|string|bigint|Decimal} A numeric value.
         *
         */
        function Decimal(v) {
          var e,
            i,
            t,
            x = this;

          // Decimal called without new.
          if (!(x instanceof Decimal)) return new Decimal(v);

          // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
          // which points to Object.
          x.constructor = Decimal;
          if (isDecimalInstance(v)) {
            x.s = v.s;
            if (external) {
              if (!v.d || v.e > Decimal.maxE) {
                // Infinity.
                x.e = NaN;
                x.d = null;
              } else if (v.e < Decimal.minE) {
                // Zero.
                x.e = 0;
                x.d = [0];
              } else {
                x.e = v.e;
                x.d = v.d.slice();
              }
            } else {
              x.e = v.e;
              x.d = v.d ? v.d.slice() : v.d;
            }
            return;
          }
          t = typeof v;
          if (t === 'number') {
            if (v === 0) {
              x.s = 1 / v < 0 ? -1 : 1;
              x.e = 0;
              x.d = [0];
              return;
            }
            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }

            // Fast path for small integers.
            if (v === ~~v && v < 1e7) {
              for (e = 0, i = v; i >= 10; i /= 10) e++;
              if (external) {
                if (e > Decimal.maxE) {
                  x.e = NaN;
                  x.d = null;
                } else if (e < Decimal.minE) {
                  x.e = 0;
                  x.d = [0];
                } else {
                  x.e = e;
                  x.d = [v];
                }
              } else {
                x.e = e;
                x.d = [v];
              }
              return;
            }

            // Infinity or NaN?
            if (v * 0 !== 0) {
              if (!v) x.s = NaN;
              x.e = NaN;
              x.d = null;
              return;
            }
            return parseDecimal(x, v.toString());
          }
          if (t === 'string') {
            if ((i = v.charCodeAt(0)) === 45) {
              // minus sign
              v = v.slice(1);
              x.s = -1;
            } else {
              if (i === 43) v = v.slice(1); // plus sign
              x.s = 1;
            }
            return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
          }
          if (t === 'bigint') {
            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }
            return parseDecimal(x, v.toString());
          }
          throw Error(invalidArgument + v);
        }
        Decimal.prototype = P;
        Decimal.ROUND_UP = 0;
        Decimal.ROUND_DOWN = 1;
        Decimal.ROUND_CEIL = 2;
        Decimal.ROUND_FLOOR = 3;
        Decimal.ROUND_HALF_UP = 4;
        Decimal.ROUND_HALF_DOWN = 5;
        Decimal.ROUND_HALF_EVEN = 6;
        Decimal.ROUND_HALF_CEIL = 7;
        Decimal.ROUND_HALF_FLOOR = 8;
        Decimal.EUCLID = 9;
        Decimal.config = Decimal.set = config;
        Decimal.clone = clone;
        Decimal.isDecimal = isDecimalInstance;
        Decimal.abs = abs;
        Decimal.acos = acos;
        Decimal.acosh = acosh; // ES6
        Decimal.add = add;
        Decimal.asin = asin;
        Decimal.asinh = asinh; // ES6
        Decimal.atan = atan;
        Decimal.atanh = atanh; // ES6
        Decimal.atan2 = atan2;
        Decimal.cbrt = cbrt; // ES6
        Decimal.ceil = ceil;
        Decimal.clamp = clamp;
        Decimal.cos = cos;
        Decimal.cosh = cosh; // ES6
        Decimal.div = div;
        Decimal.exp = exp;
        Decimal.floor = floor;
        Decimal.hypot = hypot; // ES6
        Decimal.ln = ln;
        Decimal.log = log;
        Decimal.log10 = log10; // ES6
        Decimal.log2 = log2; // ES6
        Decimal.max = max;
        Decimal.min = min;
        Decimal.mod = mod;
        Decimal.mul = mul;
        Decimal.pow = pow;
        Decimal.random = random;
        Decimal.round = round;
        Decimal.sign = sign; // ES6
        Decimal.sin = sin;
        Decimal.sinh = sinh; // ES6
        Decimal.sqrt = sqrt;
        Decimal.sub = sub;
        Decimal.sum = sum;
        Decimal.tan = tan;
        Decimal.tanh = tanh; // ES6
        Decimal.trunc = trunc; // ES6

        if (obj === void 0) obj = {};
        if (obj) {
          if (obj.defaults !== true) {
            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
            for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
          }
        }
        Decimal.config(obj);
        return Decimal;
      }

      /*
       * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       * y {number|string|bigint|Decimal}
       *
       */
      function div(x, y) {
        return new this(x).div(y);
      }

      /*
       * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.
       *
       */
      function exp(x) {
        return new this(x).exp();
      }

      /*
       * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function floor(x) {
        return finalise(x = new this(x), x.e + 1, 3);
      }

      /*
       * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
       *
       * arguments {number|string|bigint|Decimal}
       *
       */
      function hypot() {
        var i,
          n,
          t = new this(0);
        external = false;
        for (i = 0; i < arguments.length;) {
          n = new this(arguments[i++]);
          if (!n.d) {
            if (n.s) {
              external = true;
              return new this(1 / 0);
            }
            t = n;
          } else if (t.d) {
            t = t.plus(n.times(n));
          }
        }
        external = true;
        return t.sqrt();
      }

      /*
       * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
       * otherwise return false.
       *
       */
      function isDecimalInstance(obj) {
        return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
      }

      /*
       * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function ln(x) {
        return new this(x).ln();
      }

      /*
       * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
       * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * log[y](x)
       *
       * x {number|string|bigint|Decimal} The argument of the logarithm.
       * y {number|string|bigint|Decimal} The base of the logarithm.
       *
       */
      function log(x, y) {
        return new this(x).log(y);
      }

      /*
       * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function log2(x) {
        return new this(x).log(2);
      }

      /*
       * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function log10(x) {
        return new this(x).log(10);
      }

      /*
       * Return a new Decimal whose value is the maximum of the arguments.
       *
       * arguments {number|string|bigint|Decimal}
       *
       */
      function max() {
        return maxOrMin(this, arguments, -1);
      }

      /*
       * Return a new Decimal whose value is the minimum of the arguments.
       *
       * arguments {number|string|bigint|Decimal}
       *
       */
      function min() {
        return maxOrMin(this, arguments, 1);
      }

      /*
       * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       * y {number|string|bigint|Decimal}
       *
       */
      function mod(x, y) {
        return new this(x).mod(y);
      }

      /*
       * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       * y {number|string|bigint|Decimal}
       *
       */
      function mul(x, y) {
        return new this(x).mul(y);
      }

      /*
       * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} The base.
       * y {number|string|bigint|Decimal} The exponent.
       *
       */
      function pow(x, y) {
        return new this(x).pow(y);
      }

      /*
       * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
       * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
       * are produced).
       *
       * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
       *
       */
      function random(sd) {
        var d,
          e,
          k,
          n,
          i = 0,
          r = new this(1),
          rd = [];
        if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);
        k = Math.ceil(sd / LOG_BASE);
        if (!this.crypto) {
          for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

          // Browsers supporting crypto.getRandomValues.
        } else if (crypto.getRandomValues) {
          d = crypto.getRandomValues(new Uint32Array(k));
          for (; i < k;) {
            n = d[i];

            // 0 <= n < 4294967296
            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
            if (n >= 4.29e9) {
              d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
            } else {
              // 0 <= n <= 4289999999
              // 0 <= (n % 1e7) <= 9999999
              rd[i++] = n % 1e7;
            }
          }

          // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {
          // buffer
          d = crypto.randomBytes(k *= 4);
          for (; i < k;) {
            // 0 <= n < 2147483648
            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
            if (n >= 2.14e9) {
              crypto.randomBytes(4).copy(d, i);
            } else {
              // 0 <= n <= 2139999999
              // 0 <= (n % 1e7) <= 9999999
              rd.push(n % 1e7);
              i += 4;
            }
          }
          i = k / 4;
        } else {
          throw Error(cryptoUnavailable);
        }
        k = rd[--i];
        sd %= LOG_BASE;

        // Convert trailing digits to zeros according to sd.
        if (k && sd) {
          n = mathpow(10, LOG_BASE - sd);
          rd[i] = (k / n | 0) * n;
        }

        // Remove trailing words which are zero.
        for (; rd[i] === 0; i--) rd.pop();

        // Zero?
        if (i < 0) {
          e = 0;
          rd = [0];
        } else {
          e = -1;

          // Remove leading words which are zero and adjust exponent accordingly.
          for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

          // Count the digits of the first word of rd to determine leading zeros.
          for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

          // Adjust the exponent for leading zeros of the first word of rd.
          if (k < LOG_BASE) e -= LOG_BASE - k;
        }
        r.e = e;
        r.d = rd;
        return r;
      }

      /*
       * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
       *
       * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function round(x) {
        return finalise(x = new this(x), x.e + 1, this.rounding);
      }

      /*
       * Return
       *   1    if x > 0,
       *  -1    if x < 0,
       *   0    if x is 0,
       *  -0    if x is -0,
       *   NaN  otherwise
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function sign(x) {
        x = new this(x);
        return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
      }

      /*
       * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function sin(x) {
        return new this(x).sin();
      }

      /*
       * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function sinh(x) {
        return new this(x).sinh();
      }

      /*
       * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function sqrt(x) {
        return new this(x).sqrt();
      }

      /*
       * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal}
       * y {number|string|bigint|Decimal}
       *
       */
      function sub(x, y) {
        return new this(x).sub(y);
      }

      /*
       * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * Only the result is rounded, not the intermediate calculations.
       *
       * arguments {number|string|bigint|Decimal}
       *
       */
      function sum() {
        var i = 0,
          args = arguments,
          x = new this(args[i]);
        external = false;
        for (; x.s && ++i < args.length;) x = x.plus(args[i]);
        external = true;
        return finalise(x, this.precision, this.rounding);
      }

      /*
       * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function tan(x) {
        return new this(x).tan();
      }

      /*
       * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|bigint|Decimal} A value in radians.
       *
       */
      function tanh(x) {
        return new this(x).tanh();
      }

      /*
       * Return a new Decimal whose value is `x` truncated to an integer.
       *
       * x {number|string|bigint|Decimal}
       *
       */
      function trunc(x) {
        return finalise(x = new this(x), x.e + 1, 1);
      }
      P[Symbol["for"]('nodejs.util.inspect.custom')] = P.toString;
      P[Symbol.toStringTag] = 'Decimal';

      // Create and configure initial Decimal constructor.
      var Decimal = function (v) {
        return exports({
          Decimal: v,
          default: v
        }), v;
      }(P.constructor = clone(DEFAULTS));

      // Create the internal constants from their string values.
      LN10 = new Decimal(LN10);
      PI = new Decimal(PI);
    }
  };
});

System.register("chunks:///_virtual/index.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);
      var _cjsExports;
      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        !function (e, t) {
          "object" == typeof exports$1 && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).TencentCloudChat = t();
        }(this, function () {
          function l(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var n = 0, o = Array(t); n < t; n++) o[n] = e[n];
            return o;
          }
          function b(e) {
            if (Array.isArray(e)) return e;
          }
          function i(e, t, n) {
            t = x(t);
            var o = e,
              t = V() ? Reflect.construct(t, n || [], x(e).constructor) : t.apply(e, n);
            if (!t || "object" != typeof t && "function" != typeof t) {
              if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
              if (void 0 === (t = o)) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return t;
          }
          function p(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }
          function w(e, t) {
            for (var n = 0; n < t.length; n++) {
              var o = t[n];
              o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, J(o.key), o);
            }
          }
          function e(e, t, n) {
            return t && w(e.prototype, t), n && w(e, n), Object.defineProperty(e, "prototype", {
              writable: !1
            }), e;
          }
          function F(e, t) {
            var n,
              o,
              i,
              a,
              _s2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
            if (_s2) return i = !(o = !0), {
              s: function s() {
                _s2 = _s2.call(e);
              },
              n: function n() {
                var e = _s2.next();
                return o = e.done, e;
              },
              e: function e(_e2) {
                i = !0, n = _e2;
              },
              f: function f() {
                try {
                  o || null == _s2["return"] || _s2["return"]();
                } finally {
                  if (i) throw n;
                }
              }
            };
            if (Array.isArray(e) || (_s2 = X(e)) || t && e && "number" == typeof e.length) return _s2 && (e = _s2), a = 0, {
              s: t = function t() {},
              n: function n() {
                return a >= e.length ? {
                  done: !0
                } : {
                  done: !1,
                  value: e[a++]
                };
              },
              e: function e(_e3) {
                throw _e3;
              },
              f: t
            };
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function q(e, t, n) {
            return (t = J(t)) in e ? Object.defineProperty(e, t, {
              value: n,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = n, e;
          }
          function x(e) {
            return (x = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            })(e);
          }
          function t(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                writable: !0,
                configurable: !0
              }
            }), Object.defineProperty(e, "prototype", {
              writable: !1
            }), t && Y(e, t);
          }
          function V() {
            try {
              var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            } catch (e) {}
            return (V = function V() {
              return !!e;
            })();
          }
          function B(e) {
            if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
          }
          function H() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function K(t, e) {
            var n,
              o = Object.keys(t);
            return Object.getOwnPropertySymbols && (n = Object.getOwnPropertySymbols(t), e && (n = n.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })), o.push.apply(o, n)), o;
          }
          function y(t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = null != arguments[e] ? arguments[e] : {};
              e % 2 ? K(Object(n), !0).forEach(function (e) {
                q(t, e, n[e]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : K(Object(n)).forEach(function (e) {
                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
              });
            }
            return t;
          }
          function W(e, t) {
            if (null == e) return {};
            var n,
              o = function (e, t) {
                if (null == e) return {};
                var n,
                  o = {};
                for (n in e) if ({}.hasOwnProperty.call(e, n)) {
                  if (0 <= t.indexOf(n)) continue;
                  o[n] = e[n];
                }
                return o;
              }(e, t);
            if (Object.getOwnPropertySymbols) for (var i = Object.getOwnPropertySymbols(e), a = 0; a < i.length; a++) n = i[a], 0 <= t.indexOf(n) || {}.propertyIsEnumerable.call(e, n) && (o[n] = e[n]);
            return o;
          }
          function Y(e, t) {
            return (Y = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) {
              return e.__proto__ = t, e;
            })(e, t);
          }
          function j(e, t) {
            return b(e) || function (e, t) {
              var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
              if (null != n) {
                var o,
                  i,
                  a,
                  s,
                  r = [],
                  c = !0,
                  u = !1;
                try {
                  if (a = (n = n.call(e)).next, 0 === t) {
                    if (Object(n) !== n) return;
                    c = !1;
                  } else for (; !(c = (o = a.call(n)).done) && (r.push(o.value), r.length !== t); c = !0);
                } catch (e) {
                  u = !0, i = e;
                } finally {
                  try {
                    if (!c && null != n["return"] && (s = n["return"](), Object(s) !== s)) return;
                  } finally {
                    if (u) throw i;
                  }
                }
                return r;
              }
            }(e, t) || X(e, t) || H();
          }
          function d(e) {
            return function (e) {
              if (Array.isArray(e)) return l(e);
            }(e) || B(e) || X(e) || function () {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
          }
          function J(e) {
            e = function (e) {
              if ("object" != typeof e || !e) return e;
              var t = e[Symbol.toPrimitive];
              if (void 0 === t) return String(e);
              t = t.call(e, "string");
              if ("object" != typeof t) return t;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }(e);
            return "symbol" == typeof e ? e : e + "";
          }
          function z(e) {
            return (z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
              return typeof e;
            } : function (e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            })(e);
          }
          function X(e, t) {
            var n;
            if (e) return "string" == typeof e ? l(e, t) : "Map" === (n = "Object" === (n = {}.toString.call(e).slice(8, -1)) && e.constructor ? e.constructor.name : n) || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? l(e, t) : void 0;
          }
          function Z(e) {
            var n = "function" == typeof Map ? new Map() : void 0;
            return function (e) {
              if (null === e || !function (t) {
                try {
                  return -1 !== Function.toString.call(t).indexOf("[native code]");
                } catch (e) {
                  return "function" == typeof t;
                }
              }(e)) return e;
              if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== n) {
                if (n.has(e)) return n.get(e);
                n.set(e, t);
              }
              function t() {
                return function (e, t, n) {
                  var o;
                  return V() ? Reflect.construct.apply(null, arguments) : ((o = [null]).push.apply(o, t), t = new (e.bind.apply(e, o))(), n && Y(t, n.prototype), t);
                }(e, arguments, x(this).constructor);
              }
              return t.prototype = Object.create(e.prototype, {
                constructor: {
                  value: t,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), Y(t, e);
            }(e);
          }
          var h = {
              SDK_READY: "sdkStateReady",
              SDK_NOT_READY: "sdkStateNotReady",
              SDK_DESTROY: "sdkDestroy",
              MESSAGE_RECEIVED: "onMessageReceived",
              ROOM_CUSTOM_DATA_RECEIVED: "onRoomCustomDataReceived",
              MESSAGE_MODIFIED: "onMessageModified",
              MESSAGE_REVOKED: "onMessageRevoked",
              MESSAGE_READ_BY_PEER: "onMessageReadByPeer",
              MESSAGE_READ_RECEIPT_RECEIVED: "onMessageReadReceiptReceived",
              MESSAGE_EXTENSIONS_UPDATED: "onMessageExtensionsUpdated",
              MESSAGE_EXTENSIONS_DELETED: "onMessageExtensionsDeleted",
              MESSAGE_REACTIONS_UPDATED: "onMessageReactionsUpdated",
              CONVERSATION_LIST_UPDATED: "onConversationListUpdated",
              TOTAL_UNREAD_MESSAGE_COUNT_UPDATED: "onTotalUnreadMessageCountUpdated",
              CONVERSATION_GROUP_LIST_UPDATED: "onConversationGroupListUpdated",
              CONVERSATION_IN_GROUP_UPDATED: "onConversationInGroupUpdated",
              GROUP_LIST_UPDATED: "onGroupListUpdated",
              GROUP_ATTRIBUTES_UPDATED: "groupAttributesUpdated",
              GROUP_COUNTER_UPDATED: "onGroupCounterUpdated",
              TOPIC_CREATED: "onTopicCreated",
              TOPIC_DELETED: "onTopicDeleted",
              TOPIC_UPDATED: "onTopicUpdated",
              PROFILE_UPDATED: "onProfileUpdated",
              USER_STATUS_UPDATED: "onUserStatusUpdated",
              BLACKLIST_UPDATED: "blacklistUpdated",
              FRIEND_LIST_UPDATED: "onFriendListUpdated",
              FRIEND_GROUP_LIST_UPDATED: "onFriendGroupListUpdated",
              FRIEND_APPLICATION_LIST_UPDATED: "onFriendApplicationListUpdated",
              MY_FOLLOWERS_LIST_UPDATED: "onMyFollowersListUpdated",
              MY_FOLLOWING_LIST_UPDATED: "onMyFollowingListUpdated",
              MUTUAL_FOLLOWERS_LIST_UPDATED: "onMutualFollowersListUpdated",
              KICKED_OUT: "kickedOut",
              ERROR: "error",
              NET_STATE_CHANGE: "netStateChange",
              ALL_RECEIVE_MESSAGE_OPT_UPDATED: "onAllReceiveMessageOptUpdated"
            },
            R = {
              MSG_TEXT: "TIMTextElem",
              MSG_IMAGE: "TIMImageElem",
              MSG_SOUND: "TIMSoundElem",
              MSG_AUDIO: "TIMSoundElem",
              MSG_FILE: "TIMFileElem",
              MSG_FACE: "TIMFaceElem",
              MSG_VIDEO: "TIMVideoFileElem",
              MSG_GEO: "TIMLocationElem",
              MSG_LOCATION: "TIMLocationElem",
              MSG_GRP_TIP: "TIMGroupTipElem",
              MSG_GRP_SYS_NOTICE: "TIMGroupSystemNoticeElem",
              MSG_CUSTOM: "TIMCustomElem",
              MSG_MERGER: "TIMRelayElem",
              MSG_PRIORITY_HIGH: "High",
              MSG_PRIORITY_NORMAL: "Normal",
              MSG_PRIORITY_LOW: "Low",
              MSG_PRIORITY_LOWEST: "Lowest",
              CONV_C2C: "C2C",
              CONV_GROUP: "GROUP",
              CONV_TOPIC: "TOPIC",
              CONV_SYSTEM: "@TIM#SYSTEM",
              CONV_AT_ME: 1,
              CONV_AT_ALL: 2,
              CONV_AT_ALL_AT_ME: 3,
              CONV_MARK_TYPE_STAR: 1,
              CONV_MARK_TYPE_UNREAD: 2,
              CONV_MARK_TYPE_FOLD: 4,
              CONV_MARK_TYPE_HIDE: 8,
              GRP_PRIVATE: "Private",
              GRP_WORK: "Private",
              GRP_PUBLIC: "Public",
              GRP_CHATROOM: "ChatRoom",
              GRP_MEETING: "ChatRoom",
              GRP_AVCHATROOM: "AVChatRoom",
              GRP_COMMUNITY: "Community",
              GRP_ROOM: "Room",
              GRP_LIVE: "Live",
              GRP_MBR_ROLE_OWNER: "Owner",
              GRP_MBR_ROLE_ADMIN: "Admin",
              GRP_MBR_ROLE_MEMBER: "Member",
              GRP_MBR_ROLE_CUSTOM: "Custom",
              GRP_TIP_MBR_JOIN: 1,
              GRP_TIP_MBR_QUIT: 2,
              GRP_TIP_MBR_KICKED_OUT: 3,
              GRP_TIP_MBR_SET_ADMIN: 4,
              GRP_TIP_MBR_CANCELED_ADMIN: 5,
              GRP_TIP_GRP_PROFILE_UPDATED: 6,
              GRP_TIP_MBR_PROFILE_UPDATED: 7,
              GRP_TIP_BAN_AVCHATROOM_MEMBER: 10,
              GRP_TIP_UNBAN_AVCHATROOM_MEMBER: 11,
              MSG_REMIND_ACPT_AND_NOTE: "AcceptAndNotify",
              MSG_REMIND_ACPT_NOT_NOTE: "AcceptNotNotify",
              MSG_REMIND_DISCARD: "Discard",
              RECEIVE_WITH_OFFLINE_PUSH_EXCEPT_AT: "AcceptNotNotifyExceptAt",
              NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT: "AcceptNotNotifyExceptAt",
              NOT_RECEIVE_MSG_EXCEPT_AT: "NotReceiveMsgExceptAt",
              GENDER_UNKNOWN: "Gender_Type_Unknown",
              GENDER_FEMALE: "Gender_Type_Female",
              GENDER_MALE: "Gender_Type_Male",
              KICKED_OUT_MULT_ACCOUNT: "multipleAccount",
              KICKED_OUT_MULT_DEVICE: "multipleDevice",
              KICKED_OUT_USERSIG_EXPIRED: "userSigExpired",
              KICKED_OUT_REST_API: "REST_API_Kick",
              ALLOW_TYPE_ALLOW_ANY: "AllowType_Type_AllowAny",
              ALLOW_TYPE_NEED_CONFIRM: "AllowType_Type_NeedConfirm",
              ALLOW_TYPE_DENY_ANY: "AllowType_Type_DenyAny",
              FORBID_TYPE_NONE: "AdminForbid_Type_None",
              FORBID_TYPE_SEND_OUT: "AdminForbid_Type_SendOut",
              JOIN_OPTIONS_FREE_ACCESS: "FreeAccess",
              JOIN_OPTIONS_NEED_PERMISSION: "NeedPermission",
              JOIN_OPTIONS_DISABLE_APPLY: "DisableApply",
              JOIN_STATUS_SUCCESS: "JoinedSuccess",
              JOIN_STATUS_ALREADY_IN_GROUP: "AlreadyInGroup",
              JOIN_STATUS_WAIT_APPROVAL: "WaitAdminApproval",
              INVITE_OPTIONS_DISABLE_INVITE: "DisableInvite",
              INVITE_OPTIONS_NEED_PERMISSION: "NeedPermission",
              INVITE_OPTIONS_FREE_ACCESS: "FreeAccess",
              GRP_PROFILE_OWNER_ID: "ownerID",
              GRP_PROFILE_CREATE_TIME: "createTime",
              GRP_PROFILE_LAST_INFO_TIME: "lastInfoTime",
              GRP_PROFILE_MEMBER_NUM: "memberNum",
              GRP_PROFILE_MAX_MEMBER_NUM: "maxMemberNum",
              GRP_PROFILE_JOIN_OPTION: "joinOption",
              GRP_PROFILE_INVITE_OPTION: "inviteOption",
              GRP_PROFILE_INTRODUCTION: "introduction",
              GRP_PROFILE_NOTIFICATION: "notification",
              GRP_PROFILE_MUTE_ALL_MBRS: "muteAllMembers",
              SNS_ADD_TYPE_SINGLE: "Add_Type_Single",
              SNS_ADD_TYPE_BOTH: "Add_Type_Both",
              SNS_DELETE_TYPE_SINGLE: "Delete_Type_Single",
              SNS_DELETE_TYPE_BOTH: "Delete_Type_Both",
              SNS_APPLICATION_TYPE_BOTH: "Pendency_Type_Both",
              SNS_APPLICATION_SENT_TO_ME: "Pendency_Type_ComeIn",
              SNS_APPLICATION_SENT_BY_ME: "Pendency_Type_SendOut",
              SNS_APPLICATION_AGREE: "Response_Action_Agree",
              SNS_APPLICATION_AGREE_AND_ADD: "Response_Action_AgreeAndAdd",
              SNS_CHECK_TYPE_BOTH: "CheckResult_Type_Both",
              SNS_CHECK_TYPE_SINGLE: "CheckResult_Type_Single",
              SNS_TYPE_NO_RELATION: "CheckResult_Type_NoRelation",
              SNS_TYPE_A_WITH_B: "CheckResult_Type_AWithB",
              SNS_TYPE_B_WITH_A: "CheckResult_Type_BWithA",
              SNS_TYPE_BOTH_WAY: "CheckResult_Type_BothWay",
              NET_STATE_CONNECTED: "connected",
              NET_STATE_CONNECTING: "connecting",
              NET_STATE_DISCONNECTED: "disconnected",
              MSG_AT_ALL: "__kImSDK_MesssageAtALL__",
              READ_ALL_C2C_MSG: "readAllC2CMessage",
              READ_ALL_GROUP_MSG: "readAllGroupMessage",
              READ_ALL_MSG: "readAllMessage",
              USER_STATUS_UNKNOWN: 0,
              USER_STATUS_ONLINE: 1,
              USER_STATUS_OFFLINE: 2,
              USER_STATUS_UNLOGINED: 3,
              IOS_OFFLINE_PUSH_NO_SOUND: "push.no_sound",
              IOS_OFFLINE_PUSH_DEFAULT_SOUND: "default"
            },
            _ = {
              NEW_INVITATION_RECEIVED: "newInvitationReceived",
              INVITEE_ACCEPTED: "ts_invitee_accepted",
              INVITEE_REJECTED: "ts_invitee_rejected",
              INVITATION_CANCELLED: "ts_invitation_cancelled",
              INVITATION_TIMEOUT: "ts_invitation_timeout",
              INVITATION_MODIFIED: "ts_invitation_modified",
              ACTION_TYPE_UNKNOWN: 0,
              ACTION_TYPE_INVITE: 1,
              ACTION_TYPE_CANCEL_INVITE: 2,
              ACTION_TYPE_ACCEPT_INVITE: 3,
              ACTION_TYPE_REJECT_INVITE: 4,
              ACTION_TYPE_INVITE_TIMEOUT: 5
            },
            Q = e(function e() {
              p(this, e), this.cache = [], this.options = null;
            }, [{
              key: "use",
              value: function value(e) {
                if ("function" != typeof e) throw "middleware must be a function";
                return this.cache.push(e), this;
              }
            }, {
              key: "next",
              value: function value(e) {
                if (this.middlewares && 0 < this.middlewares.length) return this.middlewares.shift().call(this, this.options, this.next.bind(this));
              }
            }, {
              key: "run",
              value: function value(e) {
                return this.middlewares = this.cache.map(function (e) {
                  return e;
                }), this.options = e, this.next();
              }
            }]),
            $ = e(function e() {
              var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0,
                n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
              p(this, e), this.high = t, this.low = n;
            }, [{
              key: "equal",
              value: function value(e) {
                return null !== e && this.low === e.low && this.high === e.high;
              }
            }, {
              key: "toString",
              value: function value() {
                var e = Number(this.high).toString(16),
                  t = Number(this.low).toString(16);
                if (t.length < 8) for (var n = 8 - t.length; n;) t = "0" + t, n--;
                return e + t;
              }
            }]),
            ee = {
              TEST: {
                CHINA: {
                  DEFAULT: "wss://wss-dev.tim.qq.com"
                },
                OVERSEA: {
                  DEFAULT: "wss://wss-dev.tim.qq.com"
                },
                SINGAPORE: {
                  DEFAULT: "wss://wsssgp-dev.im.qcloud.com"
                },
                KOREA: {
                  DEFAULT: "wss://wsskr-dev.im.qcloud.com"
                },
                GERMANY: {
                  DEFAULT: "wss://wssger-dev.im.qcloud.com"
                },
                IND: {
                  DEFAULT: "wss://wssind-dev.im.qcloud.com"
                },
                JPN: {
                  DEFAULT: "wss://wssjpn-dev.im.qcloud.com"
                },
                USA: {
                  DEFAULT: "wss://wssusa-dev.im.qcloud.com"
                },
                INDONESIA: {
                  DEFAULT: "wss://wssidn-dev.im.qcloud.com"
                }
              },
              PRODUCTION: {
                CHINA: {
                  DEFAULT0: "wss://*w4c.my-imcloud.com",
                  DEFAULT: "wss://wss.im.qcloud.com",
                  IPV6: "wss://wssv6.im.qcloud.com",
                  BACKUP: "wss://wss.tim.qq.com",
                  BACKUP_WEB: "wss://*w4c.my-cpaas.com",
                  STAT: "https://events.im.qcloud.com",
                  ANYCAST: "wss://162.14.13.203"
                },
                OVERSEA: {
                  DEFAULT0: "wss://*w4c.my-imcloud.com",
                  DEFAULT: "wss://wss.im.qcloud.com",
                  IPV6: "wss://wssv6.im.qcloud.com",
                  BACKUP: "wss://wss.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4c.my-cpaas.com",
                  STAT: "https://api.my-imcloud.com"
                },
                SINGAPORE: {
                  DEFAULT0: "wss://*w4s.my-imcloud.com",
                  DEFAULT: "wss://wsssgp.im.qcloud.com",
                  IPV6: "wss://wsssgpv6.im.qcloud.com",
                  BACKUP: "wss://wsssgp.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4s.my-cpaas.com",
                  STAT: "https://apisgp.my-imcloud.com",
                  ANYCAST: "wss://162.14.19.159"
                },
                KOREA: {
                  DEFAULT0: "wss://*w4k.my-imcloud.com",
                  DEFAULT: "wss://wsskr.im.qcloud.com",
                  IPV6: "wss://wsskrv6.im.qcloud.com",
                  BACKUP: "wss://wsskr.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4k.my-cpaas.com",
                  STAT: "https://apikr.my-imcloud.com",
                  ANYCAST: "wss://162.14.13.104"
                },
                GERMANY: {
                  DEFAULT0: "wss://*w4g.my-imcloud.com",
                  DEFAULT: "wss://wssger.im.qcloud.com",
                  IPV6: "wss://wssgerv6.im.qcloud.com",
                  BACKUP: "wss://wssger.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4g.my-cpaas.com",
                  STAT: "https://apiger.my-imcloud.com",
                  ANYCAST: "wss://162.14.3.17"
                },
                IND: {
                  DEFAULT0: "wss://*w4i.my-imcloud.com",
                  DEFAULT: "wss://wssind.my-imcloud.com",
                  IPV6: "wss://wssindv6.im.qcloud.com",
                  BACKUP: "wss://wssind.im.qcloud.com",
                  BACKUP_WEB: "wss://*w4i.my-cpaas.com",
                  STAT: "https://apiind.my-imcloud.com",
                  ANYCAST: "wss://162.14.19.46"
                },
                JPN: {
                  DEFAULT0: "wss://*w4j.my-imcloud.com",
                  DEFAULT: "wss://wssjpn.im.qcloud.com",
                  IPV6: "wss://wssjpnv6.im.qcloud.com",
                  BACKUP: "wss://wssjpn.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4j.my-cpaas.com",
                  STAT: "https://apijpn.my-imcloud.com"
                },
                USA: {
                  DEFAULT0: "wss://*w4u.my-imcloud.com",
                  DEFAULT: "wss://wssusa.im.qcloud.com",
                  IPV6: "wss://wssusav6.im.qcloud.com",
                  BACKUP: "wss://wssusa.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4u.my-cpaas.com",
                  STAT: "https://apiusa.my-imcloud.com",
                  ANYCAST: "wss://162.14.10.42"
                },
                INDONESIA: {
                  DEFAULT0: "wss://*w4y.my-imcloud.com",
                  DEFAULT: "wss://wssidn.im.qcloud.com",
                  IPV6: "wss://wssidnv6.im.qcloud.com",
                  BACKUP: "wss://wssidn.my-imcloud.com",
                  BACKUP_WEB: "wss://*w4y.my-cpaas.com",
                  STAT: "https://apiidn.my-imcloud.com",
                  ANYCAST: "wss://43.129.34.169"
                }
              }
            },
            te = {
              ANDROID: 2,
              IOS: 3,
              MAC: 4,
              WEB: 7,
              WX_MP: 8,
              QQ_MP: 9,
              TT_MP: 10,
              BAIDU_MP: 11,
              ALI_MP: 12,
              IPAD: 13,
              UNI_NATIVE_APP: 15,
              DONUT_NATIVE_APP: 19,
              NS_NATIVE_APP: 20,
              RN_NATIVE_APP: 21
            },
            ne = "1.7.3",
            oe = 537048168,
            ae = "CHINA",
            a = {
              HOST: {
                CURRENT: {
                  DEFAULT: "wss://wss.im.qcloud.com",
                  STAT: "https://events.im.qcloud.com"
                },
                setCurrent: function setCurrent() {
                  this.CURRENT = ee.PRODUCTION[0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : ae];
                }
              },
              NAME: {
                OPEN_IM: "openim",
                OPEN_IM_MSG_EXT: "openim_msg_ext_http_svc",
                GRP: "group_open_http_svc",
                GRP_AV: "group_open_avchatroom_http_svc",
                GRP_COMMUNITY: "million_group_open_http_svc",
                GRP_ATTR: "group_open_attr_http_svc",
                FD: "sns",
                PROFILE: "profile",
                RECENT_CONTACT: "recentcontact",
                PIC: "openpic",
                BIG_GRP_NO_AUTH: "group_open_http_noauth_svc",
                BIG_GRP_POLLING: "group_open_long_polling_http_svc",
                BIG_GRP_POLLING_NO_AUTH: "group_open_long_polling_http_noauth_svc",
                IM_OPEN_STAT: "imopenstat",
                WEB_IM: "webim",
                IM_COS_SIGN: "im_cos_sign_svr",
                CUSTOM_UPLOAD: "im_cos_msg",
                HEARTBEAT: "heartbeat",
                IM_OPEN_PUSH: "im_open_push",
                IM_OPEN_STATUS: "im_open_status",
                IM_LONG_MSG: "im_long_msg",
                IM_CONFIG_MANAGER: "im_sdk_config_mgr",
                STAT_SERVICE: "StatSvc",
                OVERLOAD_PUSH: "OverLoadPush",
                IM_MSG_AUDIT_MGR: "im_msg_audit_mgr",
                TUIROOM_SVR: "tui_room_svr",
                IM_OPEN_TRANSLATE: "im_open_translate",
                IM_OPEN_SPEECH: "im_open_speech",
                MSG_SEARCH: "message_search",
                GRP_SEARCH: "group_search",
                GRP_MEMBER_SEARCH: "group_member_search",
                USER_SEARCH: "user_search",
                FOLLOW: "follow",
                OFFLINE_PUSH_REPORT: "offline_push_report",
                IM_MSG_LOGIC: "im_msg_db_logic"
              }
            },
            g = {
              SEARCH_GRP_SNS: new $(0, Math.pow(2, 1)).toString(),
              AV_HISTORY_MSG: new $(0, Math.pow(2, 2)).toString(),
              GRP_COMMUNITY: new $(0, Math.pow(2, 3)).toString(),
              MSG_TO_SPECIFIED_GRP_MBR: new $(0, Math.pow(2, 4)).toString(),
              AV_MBR_LIST: new $(0, Math.pow(2, 6)).toString(),
              USER_STATUS: new $(0, Math.pow(2, 7)).toString(),
              CONV_MARK: new $(0, Math.pow(2, 9)).toString(),
              CONV_GROUP: new $(0, Math.pow(2, 10)).toString(),
              AV_BAN_MBR: new $(0, Math.pow(2, 11)).toString(),
              MSG_EXT: new $(0, Math.pow(2, 13)).toString(),
              GRP_COUNTER: new $(0, Math.pow(2, 15)).toString(),
              PLUGIN_TRANSLATE: new $(Math.pow(2, 6)).toString(),
              PLUGIN_VOICE_TO_TEXT: new $(Math.pow(2, 7)).toString(),
              PLUGIN_CS: new $(Math.pow(2, 8)).toString(),
              PLUGIN_PUSH: new $(Math.pow(2, 9)).toString(),
              PLUGIN_BOT: new $(Math.pow(2, 10)).toString(),
              MSG_REACTION: new $(Math.pow(2, 16)).toString(),
              FOLLOW: new $(Math.pow(2, 20)).toString()
            },
            se = "group_profile",
            re = ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember", "InviteJoinOption"],
            ce = ["Role", "JoinTime", "MsgSeq", "MsgFlag"];
          a.HOST.setCurrent(ae);
          for (var ue, le = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), de = le && "function" == typeof wx.createGamePortal, pe = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting), _e = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting), he = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting), ge = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting), n = "undefined" != typeof jd && "function" == typeof jd.getSystemInfoSync, fe = "undefined" != typeof uni && "undefined" == typeof window && "function" == typeof uni.requireNativePlugin, o = le && "object" === z(wx.miniapp), me = "undefined" != typeof uni, v = le || pe || _e || he || ge || fe || n, s = "undefined" == typeof window && !v && "undefined" != typeof global && void 0 !== global.NativeScriptGlobals, ve = "undefined" != typeof global && (void 0 !== global.nativeModuleProxy || void 0 !== global.ReactNative), Ie = "undefined" != typeof uni ? !v : "undefined" != typeof window && !v && !ve, I = pe ? qq : _e ? tt : he ? swan : ge ? my : le ? wx : fe ? uni : n ? jd : {}, Me = Ie && window && window.navigator && window.navigator.userAgent || "", ye = (n = "WEB", /(micromessenger|webbrowser)/i.test(Me) ? n = "WEB" : pe ? n = "QQ_MP" : _e ? n = "TT_MP" : he ? n = "BAIDU_MP" : ge ? n = "ALI_MP" : le ? n = o ? "DONUT_NATIVE_APP" : "WX_MP" : fe ? n = "UNI_NATIVE_APP" : s ? n = "NS_NATIVE_APP" : ve && (n = "RN_NATIVE_APP"), te[n]), o = /iPad/i.test(Me), s = /iPhone/i.test(Me) && !o, n = /iPod/i.test(Me), Ce = s || o || n, Te = (s = Me.match(/OS (\d+)_/i)) && s[1] ? s[1] : null, De = /Android/i.test(Me), Ee = (o = Me.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i)) ? (n = o[1] && parseFloat(o[1]), s = o[2] && parseFloat(o[2]), n && s ? parseFloat(o[1] + "." + o[2]) : n || null) : null, s = /Edge/i.test(Me), o = !s && /Chrome/i.test(Me), Le = /MSIE/.test(Me) || -1 < Me.indexOf("Trident") && -1 < Me.indexOf("rv:11.0"), Se = n = !(n = (n = /MSIE\s(\d+)\.\d/.exec(Me)) && parseFloat(n[1])) && /Trident\/7.0/i.test(Me) && /rv:11.0/.test(Me) ? 11 : n, n = /Safari/i.test(Me) && !o && !De && !s, ke = /Windows/i.test(Me), Re = /MAC OS X/i.test(Me), Ae = Ie && "undefined" != typeof Worker && !Le, Oe = De || Ce, Ne = Ie && void 0 !== window.tencent_cloud_im_csig_flutter_for_web_25F_cy, Ge = "undefined" != typeof window && void 0 !== window.navigator && (o = window.navigator.standalone, !(!Ce || o || n)), Pe = "undefined" != typeof console ? console : "undefined" != typeof global && global.console ? global.console : "undefined" != typeof window && window.console ? window.console : {}, Ue = function Ue() {}, be = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], we = be.length; we--;) ue = be[we], console[ue] || (Pe[ue] = Ue);
          function Fe() {
            var e = new Date();
            return e.setTime(He()), e;
          }
          function qe() {
            Be = 0;
          }
          function xe() {
            return Math.floor(He() / 1e3);
          }
          var Ve = Pe,
            Be = 0,
            He = function He() {
              return new Date().getTime() + Be;
            },
            Ke = 0;
          function We() {
            return Zt() ? "%c Chat %c" : "Chat";
          }
          function Ye() {
            var e = Fe();
            return e.toLocaleTimeString("en-US", {
              hour12: !1
            }) + "." + function (e) {
              var t;
              switch (e.toString().length) {
                case 1:
                  t = "00" + e;
                  break;
                case 2:
                  t = "0" + e;
                  break;
                default:
                  t = e;
              }
              return t;
            }(e.getMilliseconds());
          }
          var M = {
              arguments2String: function arguments2String(e) {
                var t = "";
                if (1 === e.length) t = e[0];else for (var n = 0, o = e.length; n < o; n++) {
                  if (Mt(e[n])) try {
                    t += yt(e[n]) ? JSON.stringify(e[n], ["message", "code"]) : JSON.stringify(e[n]);
                  } catch (e) {
                    t += e ? e.message : "";
                    break;
                  } else t += e[n];
                  t += " ";
                }
                return t;
              },
              _exec: function _exec(e, t) {
                Zt() ? Ve[e](We(), "background:#0abf5b; padding:1px; border-radius:3px; color: #fff", "background:transparent", Ye(), t) : Ve[e]("".concat(We(), " ").concat(Ye(), " ").concat(t));
              },
              d: function d() {
                var e;
                Ke <= -1 && (e = this.arguments2String(arguments), this._exec("debug", e));
              },
              l: function l() {
                var e;
                Ke <= 0 && (e = this.arguments2String(arguments), this._exec("log", e));
              },
              log: function log() {
                var e;
                Ke <= 0 && (e = this.arguments2String(arguments), this._exec("log", e));
              },
              i: function i() {
                var e;
                Ke <= 1 && (e = this.arguments2String(arguments), this._exec("info", e));
              },
              w: function w() {
                var e;
                Ke <= 2 && (e = this.arguments2String(arguments), this._exec("warn", e));
              },
              e: function e() {
                var e;
                Ke <= 3 && (e = this.arguments2String(arguments), this._exec("error", e));
              },
              setLevel: function setLevel(e) {
                e < 4 && this._exec("log", "set level from " + Ke + " to " + e), Ke = e;
              },
              getLevel: function getLevel() {
                return Ke;
              }
            },
            je = {
              JPG: 1,
              JPEG: 1,
              GIF: 2,
              PNG: 3,
              BMP: 4,
              UNKNOWN: 255
            },
            s = "Tag_Profile_IM_",
            f = {
              NICK: "".concat(s, "Nick"),
              GENDER: "".concat(s, "Gender"),
              BIRTHDAY: "".concat(s, "BirthDay"),
              LOCATION: "".concat(s, "Location"),
              SELFSIGNATURE: "".concat(s, "SelfSignature"),
              ALLOWTYPE: "".concat(s, "AllowType"),
              LANGUAGE: "".concat(s, "Language"),
              AVATAR: "".concat(s, "Image"),
              MESSAGESETTINGS: "".concat(s, "MsgSettings"),
              ADMINFORBIDTYPE: "".concat(s, "AdminForbidType"),
              LEVEL: "".concat(s, "Level"),
              ROLE: "".concat(s, "Role")
            },
            Je = {
              GROUP: "".concat("Tag_SNS_IM_", "Group"),
              REMARK: "".concat("Tag_SNS_IM_", "Remark"),
              ADDSOURCE: "".concat("Tag_SNS_IM_", "AddSource"),
              ADDWORDING: "".concat("Tag_SNS_IM_", "Wording"),
              ADDTIME: "".concat("Tag_SNS_IM_", "AddTime")
            },
            o = "Gender_Type_",
            ze = {
              UNKNOWN: "".concat(o, "Unknown"),
              FEMALE: "".concat(o, "Female"),
              MALE: "".concat(o, "Male")
            },
            Xe = {
              NONE: "".concat("AdminForbid_Type_", "None"),
              SEND_OUT: "".concat("AdminForbid_Type_", "SendOut")
            },
            Ze = {
              NEED_CONFIRM: "".concat("AllowType_Type_", "NeedConfirm"),
              ALLOW_ANY: "".concat("AllowType_Type_", "AllowAny"),
              DENY_ANY: "".concat("AllowType_Type_", "DenyAny")
            },
            Qe = "JoinedSuccess",
            $e = "WaitAdminApproval",
            et = "@TOPIC#_",
            nt = Object.prototype.hasOwnProperty;
          function S(e) {
            if (null == e) return !0;
            if ("boolean" == typeof e) return !1;
            if ("number" == typeof e) return 0 === e;
            if ("string" == typeof e) return 0 === e.length;
            if ("function" == typeof e) return 0 === e.length;
            if (Array.isArray(e)) return 0 === e.length;
            if (e instanceof Error) return "" === e.message;
            if (m(e)) {
              for (var t in e) if (nt.call(e, t)) return !1;
              return !0;
            }
            return !!(ot(e) || it(e) || at(e)) && 0 === e.size;
          }
          function ot(e) {
            return "map" === Ct(e);
          }
          function it(e) {
            return "set" === Ct(e);
          }
          function at(e) {
            return "file" === Ct(e);
          }
          function A(e) {
            return null !== e && ("number" == typeof e && !isNaN(+e) || "object" === z(e) && e.constructor === Number);
          }
          function st(e) {
            return null !== e && "object" === z(e);
          }
          function m(e) {
            if ("object" === z(e) && null !== e) {
              if (null === (e = Object.getPrototypeOf(e))) return 1;
              for (var t = e; null !== Object.getPrototypeOf(t);) t = Object.getPrototypeOf(t);
              return e === t;
            }
          }
          function O(e) {
            return "function" == typeof Array.isArray ? Array.isArray(e) : "array" === Ct(e);
          }
          function rt(e) {
            return O(e) && 0 < e.length;
          }
          function ct(e) {
            return "function" == typeof e;
          }
          function ut(e) {
            return "filelist" === Ct(e);
          }
          function lt(e) {
            return "string" == typeof e && (e = e[0], !/[^a-zA-Z0-9]/.test(e));
          }
          function dt(e, t, n, o) {
            if (!Mt(e) || !Mt(t)) return 0;
            for (var i, a = 0, s = Object.keys(t), r = 0, c = s.length; r < c; r++) if (i = s[r], !(N(t[i]) || n && n.includes(i))) if (Mt(e[i]) && Mt(t[i])) a += dt(e[i], t[i], n, o);else {
              if (o && o.includes(t[i])) continue;
              e[i] !== t[i] && (e[i] = t[i], a += 1);
            }
            return a;
          }
          function pt(e, t) {
            var n,
              o = new Map(),
              i = F(e.entries());
            try {
              for (i.s(); !(n = i.n()).done;) {
                var a = j(n.value, 2),
                  s = a[0],
                  r = a[1];
                r && o.set(s, t ? JSON.stringify(r) : JSON.parse(JSON.stringify(r)));
              }
            } catch (e) {
              i.e(e);
            } finally {
              i.f();
            }
            return o;
          }
          function _t(e) {
            if (0 === e.length) return 0;
            for (var t = 0, n = 0, o = "undefined" != typeof document && void 0 !== document.characterSet ? document.characterSet : "UTF-8"; void 0 !== e[t];) n += e[t++].charCodeAt[t] <= 255 ? 1 : !1 === o ? 3 : 2;
            return n;
          }
          function ht(e) {
            return e = e || 99999999, Math.round(Math.random() * e);
          }
          function gt() {
            for (var e = "", t = 32; 0 < t; --t) e += Tt[Math.floor(Math.random() * Dt)];
            return e;
          }
          function ft(e, t) {
            for (var n in e) if (e[n] === t) return 1;
          }
          function mt(e) {
            return -1 === e.indexOf("http://") || -1 === e.indexOf("https://") ? "https://" + e : e.replace(/https|http/, "https");
          }
          function vt(e) {
            if (0 === Object.getOwnPropertyNames(e).length) return Object.create(null);
            var t,
              n,
              o = Array.isArray(e) ? [] : Object.create(null);
            for (n in e) null !== e[n] ? void 0 !== e[n] ? (t = z(e[n]), 0 <= ["string", "number", "function", "boolean"].indexOf(t) ? o[n] = e[n] : o[n] = vt(e[n])) : o[n] = void 0 : o[n] = null;
            return o;
          }
          var It = ["url"],
            C = function C(e) {
              return "string" == typeof e;
            },
            N = function N(e) {
              return void 0 === e;
            },
            Mt = function Mt(e) {
              return O(e) || st(e);
            },
            yt = function yt(e) {
              return e instanceof Error;
            },
            Ct = function Ct(e) {
              return Object.prototype.toString.call(e).match(/^\[object (.*)\]$/)[1].toLowerCase();
            },
            Tt = (Date.now || (Date.now = function () {
              return new Date().getTime();
            }), "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
            Dt = Tt.length,
            Et = {};
          function Lt(o, e) {
            var i;
            return !(!O(o) || !O(e)) && (i = !1, e.forEach(function (e) {
              var t = e.key,
                e = e.value,
                n = o.find(function (e) {
                  return e.key === t;
                });
              n ? n.value !== e && (n.value = e, i = !0) : (o.push({
                key: t,
                value: e
              }), i = !0);
            }), i);
          }
          function St(e) {
            return S(e) ? [] : e.filter(function (e) {
              return !0 === e.isModified;
            });
          }
          function kt(e) {
            if (m(e) && m(e.webhookInfo)) {
              var t = [];
              if (e.webhookInfo.disableCloudMessagePreHook && t.push("ForbidBeforeSendMsgCallback"), e.webhookInfo.disableCloudMessagePostHook && t.push("ForbidAfterSendMsgCallback"), 0 !== t.length) return t;
            }
          }
          function Rt(e) {
            return S(e) ? [] : e.filter(function (e) {
              return !1 === e.isModified;
            });
          }
          function At(e) {
            return e === R.GRP_AVCHATROOM;
          }
          function Ot(e) {
            var t = e.type,
              e = e.groupID;
            return t === R.GRP_COMMUNITY || "".concat(e).startsWith("@TGS#_") && !"".concat(e).includes(et);
          }
          function Nt(e) {
            return "".concat(e).startsWith("@TGS#_") && "".concat(e).includes(et);
          }
          function Gt(e) {
            return C(e) && e.slice(0, 3) === R.CONV_C2C;
          }
          function Pt(e) {
            return C(e) && e.slice(0, 5) === R.CONV_GROUP;
          }
          function Ut(e) {
            return C(e) && e === R.CONV_SYSTEM;
          }
          function bt(t, n) {
            var o = {};
            return Object.keys(t).forEach(function (e) {
              o[e] = n(t[e], e);
            }), o;
          }
          function wt(o) {
            return ve ? Promise.resolve({
              width: 0,
              height: 0
            }) : v ? new Promise(function (t, e) {
              I.getImageInfo({
                src: o,
                success: function success(e) {
                  t({
                    width: e.width,
                    height: e.height
                  });
                },
                fail: function fail() {
                  t({
                    width: 0,
                    height: 0
                  });
                }
              });
            }) : Le && 9 === Se ? Promise.resolve({
              width: 0,
              height: 0
            }) : new Promise(function (e, t) {
              var n = new Image();
              n.onload = function () {
                e({
                  width: this.width,
                  height: this.height
                }), n = null;
              }, n.onerror = function () {
                e({
                  width: 0,
                  height: 0
                }), n = null;
              }, n.src = o;
            });
          }
          function Ft() {
            function e() {
              return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
            }
            return "".concat(e() + e()).concat(e()).concat(e()).concat(e()).concat(e()).concat(e()).concat(e());
          }
          function qt() {
            var e = De ? "android" : Ce ? "ios" : ke ? "windows" : Re ? "mac" : "unknown";
            if (v) try {
              var t = I.getSystemInfoSync().platform;
              void 0 !== t && (e = t);
            } catch (e) {}
            return e;
          }
          function xt(e, t) {
            e = e.split("."), t = t.split(".");
            for (var n = Math.max(e.length, t.length); e.length < n;) e.push("0");
            for (; t.length < n;) t.push("0");
            for (var o = 0; o < n; o++) {
              var i = parseInt(e[o]),
                a = parseInt(t[o]);
              if (a < i) return 1;
              if (i < a) return -1;
            }
            return 0;
          }
          function Vt(e) {
            var t = e.originUrl,
              t = void 0 === t ? void 0 : t,
              n = e.originWidth,
              o = e.originHeight,
              e = e.min,
              e = void 0 === e ? 198 : e,
              n = parseInt(n),
              o = parseInt(o),
              i = {
                url: void 0,
                width: 0,
                height: 0
              };
            return (n <= o ? n : o) <= e ? (i.url = t, i.width = n, i.height = o) : (o <= n ? (i.width = Math.ceil(n * e / o), i.height = e) : (i.width = e, i.height = Math.ceil(o * e / n)), o = t && -1 < t.indexOf("?") ? "".concat(t, "&") : "".concat(t, "?"), i.url = "".concat(o, 198 === e ? "imageView2/3/w/198/h/198" : "imageView2/3/w/720/h/720")), N(t) ? W(i, It) : i;
          }
          function Bt(e) {
            var t = e[2];
            e[2] = e[1], e[1] = t;
            for (var n = 0; n < e.length; n++) e[n].setType(n);
          }
          function Ht(e) {
            e = e.servcmd;
            return e.slice(e.indexOf(".") + 1);
          }
          function Kt(e, t) {
            return Math.round(Number(e) * Math.pow(10, t)) / Math.pow(10, t);
          }
          function Wt(e, t) {
            return e.includes(t);
          }
          function Yt(e, t) {
            return e.includes(t);
          }
          function jt(e) {
            return e.split(et)[0];
          }
          function Jt(e, t, n) {
            if (N(t)) return "";
            switch (e) {
              case R.MSG_TEXT:
                return t.text;
              case R.MSG_IMAGE:
                return n ? "[Image]" : "[图片]";
              case R.MSG_LOCATION:
                return n ? "[Location]" : "[位置]";
              case R.MSG_AUDIO:
                return n ? "[Voice]" : "[语音]";
              case R.MSG_VIDEO:
                return n ? "[Video]" : "[视频]";
              case R.MSG_FILE:
                return n ? "[File]" : "[文件]";
              case R.MSG_CUSTOM:
                return n ? "[Custom Messages]" : "[自定义消息]";
              case R.MSG_GRP_TIP:
                return n ? "[Group Notification]" : "[群提示消息]";
              case R.MSG_GRP_SYS_NOTICE:
                return n ? "[Group System Message]" : "[群系统通知]";
              case R.MSG_FACE:
                return n ? "[Animated Sticker]" : "[动画表情]";
              case R.MSG_MERGER:
                return n ? "[Chat Record]" : "[聊天记录]";
              default:
                return "";
            }
          }
          function zt(e) {
            return e === R.MSG_TEXT || e === R.MSG_CUSTOM || e === R.MSG_LOCATION || e === R.MSG_FACE;
          }
          function Xt(e) {
            var t = [];
            if (C(e)) {
              var n = e.length;
              if (0 !== n) for (var o = n - 1; 0 <= o; o--) "1" === e[o] && t.push(Math.pow(2, n - o - 1));
            }
            return t;
          }
          function Zt() {
            return !Le && !v;
          }
          function Qt(e) {
            return "the length of userIDList cannot exceed ".concat(e);
          }
          function $t(e) {
            var t;
            if (O(e) && 0 !== e.length) return t = 0, e.forEach(function (e) {
              t += e;
            }), t.toFixed(0);
          }
          function en(e) {
            var t;
            if (O(e) && 0 !== e.length) return t = 0, e.forEach(function (e) {
              t += e;
            }), (t / e.length).toFixed(0);
          }
          function tn(e, t, n) {
            var t = !(1 < arguments.length && void 0 !== t) || t,
              n = !(2 < arguments.length && void 0 !== n) || n,
              o = Date.now();
            return t ? n ? "".concat(o - e, " ms") : "".concat(Math.round((o - e) / 1e3), " s") : n ? o - e : Math.round((o - e) / 1e3);
          }
          function nn(e) {
            return e && 1 < e ? !0 : !1;
          }
          function on(e, t, n, o) {
            var i, a, s;
            return void 0 === t || (i = !0, t.required && S(e) && (M.e("[".concat(n, '] Missing required params: "').concat(o, '".')), i = !1), S(e) || (a = Ct(e)) === (s = t.type.toLowerCase()) || "asyncfunction" === a && "function" === s || (M.e("[".concat(n, '] Invalid params: type check failed for "').concat(o, '". Expected ').concat(t.type, ".")), i = !1), t.validator && !t.validator(e, n, o) && (M.e("[".concat(n, '] Invalid params: custom validator check failed for "').concat(o, '".')), i = !1), i);
          }
          function an(e) {
            return !(!e || !(Gt(e) || Pt(e) || Ut(e)) && ((e = u("InvalidConversationID", e)) && M.w(e), 1));
          }
          function r(e) {
            "" !== e.desc && "" !== u("API_REFER") && M.w("[".concat(e.api, "] | ").concat(e.paramName, " | ").concat(e.desc, ", ").concat(u("API_REFER")).concat(e.api));
          }
          function sn() {
            return u("StringRequiredLog");
          }
          function rn(e) {
            return u("NonEmptyStringRequiredLog", e);
          }
          function cn() {
            return u("NumberRequiredLog");
          }
          function un() {
            return u("UndefinedNotAllowedLog");
          }
          function ln() {
            return u("FileRequiredLog");
          }
          function dn() {
            return u("FunctionRequiredLog");
          }
          function pn() {
            return u("ArrayRequiredLog");
          }
          function _n() {
            return u("NonEmptyArrayLog");
          }
          function hn() {
            return u("CallbackMissingLog");
          }
          function gn() {
            return u("PositiveIntegerRequiredLog");
          }
          function fn(e, t) {
            return u("StringNotLongerThanLog", e, t);
          }
          function mn(e, t) {
            return u("NumberGreaterThanLog", e, t);
          }
          function vn(e, t) {
            return u("NumberGreaterOrEqualLog", e, t);
          }
          function In(e) {
            return u("KeyValueStringRequiredLog", e);
          }
          function Mn() {
            return u("PlainObjectRequiredLog");
          }
          function yn() {
            return u("NonEmptyContentRequiredLog");
          }
          function Cn() {
            return u("FileNotSelectedLog");
          }
          function Tn() {
            return u("MessageInstanceRequiredLog");
          }
          function Dn() {
            return u("NonAnonymousFunctionLog");
          }
          function En() {
            return u("MessageExtensionNotAvailableLog");
          }
          function Ln() {
            return u("MessageReactionRequiredLog");
          }
          function Sn(e, t) {
            return u("ContainsUnsupportedTypeLog", e, t);
          }
          function kn(e, t, n, o) {
            var i = o.allowUndefined,
              a = o.allowEmpty,
              o = o.maxLength;
            return N(e) ? !!i || (r({
              api: t,
              paramName: n,
              desc: un()
            }), !1) : O(e) ? !(0 === e.length && (r({
              api: t,
              paramName: n,
              desc: _n()
            }), !a) || o && e.length > o && (r({
              api: t,
              paramName: n,
              desc: u("MaximumArrayLengthLog", n, o)
            }), 1)) : (r({
              api: t,
              paramName: n,
              desc: pn()
            }), !1);
          }
          function Rn(e, t, n, o) {
            var i = o.allowUndefined,
              a = o.min,
              o = o.max;
            return N(e) ? !!i || (r({
              api: t,
              paramName: n,
              desc: un()
            }), !1) : A(e) ? A(a) && e < a ? (r({
              api: t,
              paramName: n,
              desc: 0 === a ? vn(n, a) : mn(n, a - 1)
            }), !1) : !(A(o) && o < e && (r({
              api: t,
              paramName: n,
              desc: u("MaximumNumberLog", n, o)
            }), 1)) : (r({
              api: t,
              paramName: n,
              desc: cn()
            }), !1);
          }
          function T(e) {
            return {
              code: 0,
              data: e || {}
            };
          }
          function D(e) {
            return Promise.resolve(T(e));
          }
          function E(e) {
            var t,
              n = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
            return e instanceof L ? (n && null !== Vn && Vn.emit(h.ERROR, e), Promise.reject(e)) : e instanceof Error ? (t = new L({
              code: k.UNCAUGHT_ERROR
            }), n && null !== Vn && Vn.emit(h.ERROR, t), Promise.reject(t)) : N(e) || N(e.code) ? Promise.reject(new L({
              code: k.UNCAUGHT_ERROR
            })) : (t = new L(e), n && null !== Vn && Vn.emit(h.ERROR, t), Promise.reject(t));
          }
          var An = "unSend",
            On = "success",
            Nn = "fail",
            Gn = "notStart",
            Pn = "pending",
            Un = "resolved",
            bn = "rejected",
            n = {
              type: "String",
              required: !0
            },
            s = {
              type: "Array",
              required: !0
            },
            o = {
              type: "Object",
              required: !0
            },
            wn = {
              type: "Boolean",
              required: !0
            },
            c = {
              type: "number",
              required: !0
            },
            Fn = {
              keywordListForMsg: {
                type: "Array",
                required: !1,
                validator: function validator(e, t, n) {
                  return kn(e, t, n, {
                    allowUndefined: !0,
                    allowEmpty: !0,
                    maxLength: 5
                  });
                }
              },
              keywordListExceptMsg: {
                type: "Array",
                required: !0,
                validator: function validator(e, t, n) {
                  return kn(e, t, n, {
                    allowUndefined: !1,
                    allowEmpty: !1,
                    maxLength: 5
                  });
                }
              },
              keywordListMatchType: {
                type: "String",
                required: !1,
                validator: function validator(e, t, n) {
                  return !e || "or" === e || "and" === e || r({
                    api: t,
                    paramName: n,
                    desc: "".concat(e, " is invalid match type")
                  });
                }
              },
              cursor: {
                type: "String",
                required: !1
              },
              count: {
                type: "Number",
                required: !1,
                validator: function validator(e, t, n) {
                  return Rn(e, t, n, {
                    allowUndefined: !0,
                    min: 1,
                    max: 100
                  });
                }
              },
              groupTypeList: {
                type: "Array",
                required: !1,
                validator: function validator(e, t, n) {
                  var o;
                  return !e || !(!kn(e, t, n, {
                    allowUndefined: !0,
                    allowEmpty: !0
                  }) || (o = [R.GRP_PUBLIC, R.GRP_COMMUNITY, R.GRP_WORK, R.GRP_MEETING], 0 < e.filter(function (e) {
                    return -1 === o.indexOf(e);
                  }).length && (r({
                    api: t,
                    paramName: n,
                    desc: Sn(n, "group")
                  }), 1)));
                }
              }
            },
            u = null,
            qn = {
              hookGetAPITips: function hookGetAPITips(e) {
                u = e;
              },
              login: {
                userID: n,
                userSig: n
              },
              addToBlacklist: {
                userIDList: s
              },
              removeFromBlacklist: {
                userIDList: s
              },
              on: [{
                name: "eventName",
                type: "String",
                validator: function validator(e, t, n) {
                  return "string" == typeof e && 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: rn(n)
                  }), !1);
                }
              }, {
                name: "handler",
                type: "Function",
                validator: function validator(e, t, n) {
                  return "function" != typeof e ? (r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !1) : ("" === e.name && r({
                    api: t,
                    paramName: n,
                    desc: Dn()
                  }), !0);
                }
              }],
              once: [{
                name: "eventName",
                type: "String",
                validator: function validator(e, t, n) {
                  return "string" == typeof e && 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: rn(n)
                  }), !1);
                }
              }, {
                name: "handler",
                type: "Function",
                validator: function validator(e, t, n) {
                  return "function" != typeof e ? (r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !1) : ("" === e.name && r({
                    api: t,
                    paramName: n,
                    desc: Dn()
                  }), !0);
                }
              }],
              off: [{
                name: "eventName",
                type: "String",
                validator: function validator(e, t, n) {
                  return "string" == typeof e && 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: rn(n)
                  }), !1);
                }
              }, {
                name: "handler",
                type: "Function",
                validator: function validator(e, t, n) {
                  return "function" != typeof e ? (r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !1) : ("" === e.name && r({
                    api: t,
                    paramName: n,
                    desc: Dn()
                  }), !0);
                }
              }],
              sendMessage: [y({
                name: "message"
              }, o)],
              setMessageExtensions: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return e.status === On && !0 === e.isSupportExtension || (r({
                    api: t,
                    paramName: n,
                    desc: En()
                  }), !1);
                }
              }), y({
                name: "extensions"
              }, s)],
              getMessageExtensions: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return e.status === On && !0 === e.isSupportExtension || (r({
                    api: t,
                    paramName: n,
                    desc: En()
                  }), !1);
                }
              })],
              deleteMessageExtensions: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return e.status === On && !0 === e.isSupportExtension || (r({
                    api: t,
                    paramName: n,
                    desc: En()
                  }), !1);
                }
              })],
              addMessageReaction: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return e.status === On || (r({
                    api: t,
                    paramName: n,
                    desc: Ln()
                  }), !1);
                }
              }), y({
                name: "reactionID"
              }, n)],
              removeMessageReaction: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return e.status === On || (r({
                    api: t,
                    paramName: n,
                    desc: Ln()
                  }), !1);
                }
              }), y({
                name: "reactionID"
              }, n)],
              getMessageReactions: {
                messageList: y({}, s)
              },
              getAllUserListOfMessageReaction: {
                message: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return e.status === On || (r({
                      api: t,
                      paramName: n,
                      desc: Ln()
                    }), !1);
                  }
                }),
                reactionID: y({}, n),
                nextSeq: {
                  type: "Number"
                },
                count: {
                  type: "Number"
                }
              },
              getMessageList: {
                conversationID: y(y({}, n), {}, {
                  validator: an
                }),
                nextReqMessageID: {
                  type: "String"
                },
                count: {
                  type: "Number",
                  validator: function validator(e, t, n) {
                    return !(!N(e) && !/^[1-9][0-9]*$/.test(e) && (r({
                      api: t,
                      paramName: n,
                      desc: gn()
                    }), 1));
                  }
                }
              },
              getMessageListHopping: {
                conversationID: y(y({}, n), {}, {
                  validator: an
                }),
                sequence: {
                  type: "Number"
                },
                time: {
                  type: "Number"
                },
                direction: {
                  type: "Number",
                  validator: function validator(e, t, n) {
                    return !(!N(e) && 0 !== e && 1 !== e && (r({
                      api: t,
                      paramName: n,
                      desc: u("0Or1RequiredLog")
                    }), 1));
                  }
                },
                count: {
                  type: "Number",
                  validator: function validator(e, t, n) {
                    return !(!N(e) && !/^[1-9][0-9]*$/.test(e) && (r({
                      api: t,
                      paramName: n,
                      desc: gn
                    }), 1));
                  }
                }
              },
              setMessageRead: {
                conversationID: y(y({}, n), {}, {
                  validator: an
                })
              },
              setAllMessageRead: {
                scope: {
                  type: "String",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return !e || -1 !== [R.READ_ALL_C2C_MSG, R.READ_ALL_GROUP_MSG, R.READ_ALL_MSG].indexOf(e) || (r({
                      api: t,
                      paramName: n,
                      desc: u("ValidScopeRequired")
                    }), !1);
                  }
                }
              },
              getConversationProfile: [y(y({
                name: "conversationID"
              }, n), {}, {
                validator: an
              })],
              clearHistoryMessage: [y(y({
                name: "conversationID"
              }, n), {}, {
                validator: an
              })],
              pinConversation: {
                conversationID: y(y({}, n), {}, {
                  validator: an
                }),
                isPinned: y({}, wn)
              },
              setConversationDraft: {
                conversationID: y(y({}, n), {}, {
                  validator: an
                }),
                draftText: {
                  type: "String",
                  validator: function validator(e, t, n) {
                    return !!C(e) || (r({
                      api: t,
                      paramName: n,
                      desc: sn()
                    }), !1);
                  }
                }
              },
              setConversationCustomData: {
                conversationIDList: y({}, s),
                customData: {
                  type: "String",
                  validator: function validator(e, t, n) {
                    return C(e) ? !(256 < e.length && (r({
                      api: t,
                      paramName: n,
                      desc: fn(n, 256)
                    }), 1)) : (r({
                      api: t,
                      paramName: n,
                      desc: sn()
                    }), !1);
                  }
                }
              },
              markConversation: {
                conversationIDList: y({}, s),
                markType: {
                  type: "number",
                  validator: function validator(e, t, n) {
                    return A(e) ? e <= 0 ? (r({
                      api: t,
                      paramName: n,
                      desc: mn(n, 0)
                    }), !1) : !(e >= Math.pow(2, 64) && (r({
                      api: t,
                      paramName: n,
                      desc: u("NumberLessThanLog", n, "Math.pow(2,64)")
                    }), 1)) : (r({
                      api: t,
                      paramName: n,
                      desc: cn()
                    }), !1);
                  }
                },
                enableMark: y({}, wn)
              },
              createConversationGroup: {
                conversationIDList: y({}, s),
                groupName: y(y({}, n), {}, {
                  validator: function validator(e, t, n) {
                    return !(!e || 32 < e.length && (r({
                      api: t,
                      paramName: n,
                      desc: fn(n, 32)
                    }), 1));
                  }
                })
              },
              deleteConversationGroup: [y({
                name: "groupName"
              }, n)],
              renameConversationGroup: {
                oldName: y({}, n),
                newName: y(y({}, n), {}, {
                  validator: function validator(e, t, n) {
                    return !(!e || 32 < e.length && (r({
                      api: t,
                      paramName: n,
                      desc: fn(n, 32)
                    }), 1));
                  }
                })
              },
              addConversationsToGroup: {
                conversationIDList: y({}, s),
                groupName: y({}, n)
              },
              deleteConversationsFromGroup: {
                conversationIDList: y({}, s),
                groupName: y({}, n)
              },
              getGroupList: {
                groupProfileFilter: {
                  type: "Array"
                }
              },
              getGroupProfile: {
                groupID: n,
                groupCustomFieldFilter: {
                  type: "Array"
                },
                memberCustomFieldFilter: {
                  type: "Array"
                }
              },
              getGroupProfileAdvance: {
                groupIDList: s
              },
              createGroup: {
                name: n
              },
              joinGroup: {
                groupID: n,
                type: {
                  type: "String"
                },
                applyMessage: {
                  type: "String"
                }
              },
              quitGroup: [y({
                name: "groupID"
              }, n)],
              handleApplication: {
                message: o,
                handleAction: n,
                handleMessage: {
                  type: "String"
                }
              },
              changeGroupOwner: {
                groupID: n,
                newOwnerID: n
              },
              updateGroupProfile: {
                groupID: n,
                muteAllMembers: {
                  type: "Boolean"
                }
              },
              dismissGroup: [y({
                name: "groupID"
              }, n)],
              searchGroupByID: [y({
                name: "groupID"
              }, n)],
              getGroupOnlineMemberCount: [y({
                name: "groupID"
              }, n)],
              initGroupAttributes: {
                groupID: n,
                groupAttributes: y(y({}, o), {}, {
                  validator: function validator(t, n, o) {
                    var i = !0;
                    return Object.keys(t).forEach(function (e) {
                      if (!C(t[e])) return r({
                        api: n,
                        paramName: o,
                        desc: In("value")
                      }), i = !1;
                    }), i;
                  }
                })
              },
              setGroupAttributes: {
                groupID: n,
                groupAttributes: y(y({}, o), {}, {
                  validator: function validator(t, n, o) {
                    var i = !0;
                    return Object.keys(t).forEach(function (e) {
                      if (!C(t[e])) return r({
                        api: n,
                        paramName: o,
                        desc: In("value")
                      }), i = !1;
                    }), i;
                  }
                })
              },
              deleteGroupAttributes: {
                groupID: n,
                keyList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    var o;
                    return N(e) || !O(e) ? (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1) : !!S(e) || (o = !0, e.forEach(function (e) {
                      if (!C(e)) return r({
                        api: t,
                        paramName: n,
                        desc: u("StringArrayRequiredLog")
                      }), o = !1;
                    }), o);
                  }
                }
              },
              getGroupAttributes: {
                groupID: n,
                keyList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    var o;
                    return N(e) || !O(e) ? (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1) : !!S(e) || (o = !0, e.forEach(function (e) {
                      if (!C(e)) return r({
                        api: t,
                        paramName: n,
                        desc: In("key")
                      }), o = !1;
                    }), o);
                  }
                }
              },
              setGroupCounters: {
                groupID: n,
                counters: o
              },
              increaseGroupCounter: {
                groupID: n,
                key: n,
                value: c
              },
              decreaseGroupCounter: {
                groupID: n,
                key: n,
                value: c
              },
              getGroupCounters: {
                groupID: n
              },
              getGroupMemberList: {
                groupID: n,
                count: {
                  type: "Number"
                }
              },
              getGroupMemberProfile: {
                groupID: n,
                userIDList: s,
                memberCustomFieldFilter: {
                  type: "Array"
                }
              },
              addGroupMember: {
                groupID: n,
                userIDList: s
              },
              setGroupMemberRole: {
                groupID: n,
                userID: n,
                role: n
              },
              setGroupMemberMuteTime: {
                groupID: n,
                userID: n,
                muteTime: {
                  type: "Number",
                  validator: function validator(e) {
                    return 0 <= e;
                  }
                }
              },
              setGroupMemberNameCard: {
                groupID: n,
                userID: {
                  type: "String"
                },
                nameCard: {
                  type: "String",
                  validator: function validator(e, t, n) {
                    return C(e) ? (e.length, !0) : (r({
                      api: t,
                      paramName: n,
                      desc: sn()
                    }), !1);
                  }
                }
              },
              setGroupMemberCustomField: {
                groupID: n,
                userID: {
                  type: "String"
                },
                memberCustomField: s
              },
              deleteGroupMember: {
                groupID: n
              },
              markGroupMemberList: {
                groupID: n,
                markType: {
                  type: "number",
                  validator: function validator(e, t, n) {
                    return A(e) ? !(e < 1e3 && (r({
                      api: t,
                      paramName: n,
                      desc: vn(n, 1e3)
                    }), 1)) : (r({
                      api: t,
                      paramName: n,
                      desc: cn()
                    }), !1);
                  }
                },
                userIDList: y({}, s),
                enableMark: y({}, wn)
              },
              createTextMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return m(e) ? C(e.text) ? 0 !== e.text.length || (r({
                      api: t,
                      paramName: "payload.text",
                      desc: yn()
                    }), !1) : (r({
                      api: t,
                      paramName: "payload.text",
                      desc: sn()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1);
                  }
                })
              },
              createTextAtMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return m(e) ? C(e.text) ? 0 === e.text.length ? (r({
                      api: t,
                      paramName: "payload.text",
                      desc: yn()
                    }), !1) : !(e.atUserList && !O(e.atUserList) && (r({
                      api: t,
                      paramName: "payload.atUserList",
                      desc: pn()
                    }), 1)) : (r({
                      api: t,
                      paramName: "payload.text",
                      desc: sn()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1);
                  }
                })
              },
              createCustomMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return m(e) ? e.data && !C(e.data) ? (r({
                      api: t,
                      paramName: "payload.data",
                      desc: sn()
                    }), !1) : e.description && !C(e.description) ? (r({
                      api: t,
                      paramName: "payload.description",
                      desc: sn()
                    }), !1) : !(e.extension && !C(e.extension) && (r({
                      api: t,
                      paramName: "payload.extension",
                      desc: sn()
                    }), 1)) : (r({
                      api: t,
                      paramName: "payload",
                      desc: Mn()
                    }), !1);
                  }
                })
              },
              createImageMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    if (!m(e)) return r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1;
                    if (N(e.file)) return r({
                      api: t,
                      paramName: "payload.file",
                      desc: un()
                    }), !1;
                    if (Ie) {
                      if (!(e.file instanceof HTMLInputElement || at(e.file))) return m(e.file) && "undefined" != typeof uni ? 0 !== e.file.tempFilePaths.length && 0 !== e.file.tempFiles.length || (r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1) : (r({
                        api: t,
                        paramName: "payload.file",
                        desc: ln()
                      }), !1);
                      if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1;
                    }
                    return !0;
                  },
                  onProgress: {
                    type: "Function",
                    required: !1,
                    validator: function validator(e, t, n) {
                      return N(e) && r({
                        api: t,
                        paramName: n,
                        desc: hn()
                      }), !0;
                    }
                  }
                })
              },
              createAudioMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return !!m(e) || (r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1);
                  }
                }),
                onProgress: {
                  type: "Function",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return N(e) && r({
                      api: t,
                      paramName: n,
                      desc: hn()
                    }), !0;
                  }
                }
              },
              createVideoMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    if (!m(e)) return r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1;
                    if (N(e.file)) return r({
                      api: t,
                      paramName: "payload.file",
                      desc: un()
                    }), !1;
                    if (Ie) {
                      if (!(e.file instanceof HTMLInputElement || at(e.file))) return m(e.file) && "undefined" != typeof uni ? !!at(e.file.tempFile) || (r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1) : (r({
                        api: t,
                        paramName: "payload.file",
                        desc: ln()
                      }), !1);
                      if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1;
                    }
                    return !0;
                  }
                }),
                onProgress: {
                  type: "Function",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return N(e) && r({
                      api: t,
                      paramName: n,
                      desc: hn()
                    }), !0;
                  }
                }
              },
              createFaceMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return m(e) ? A(e.index) ? !!C(e.data) || (r({
                      api: t,
                      paramName: "payload.data",
                      desc: sn()
                    }), !1) : (r({
                      api: t,
                      paramName: "payload.index",
                      desc: cn()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1);
                  }
                })
              },
              createFileMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    if (!m(e)) return r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1;
                    if (N(e.file)) return r({
                      api: t,
                      paramName: "payload.file",
                      desc: un()
                    }), !1;
                    if (Ie) {
                      if (!(e.file instanceof HTMLInputElement || at(e.file))) return m(e.file) && "undefined" != typeof uni ? 0 !== e.file.tempFilePaths.length && 0 !== e.file.tempFiles.length || (r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1) : (r({
                        api: t,
                        paramName: "payload.file",
                        desc: ln()
                      }), !1);
                      if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return r({
                        api: t,
                        paramName: "payload.file",
                        desc: Cn()
                      }), !1;
                    }
                    return !0;
                  }
                }),
                onProgress: {
                  type: "Function",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return N(e) && r({
                      api: t,
                      paramName: n,
                      desc: hn()
                    }), !0;
                  }
                }
              },
              createLocationMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return m(e) ? C(e.description) ? A(e.longitude) ? !!A(e.latitude) || (r({
                      api: t,
                      paramName: "payload.latitude",
                      desc: cn()
                    }), !1) : (r({
                      api: t,
                      paramName: "payload.longitude",
                      desc: cn()
                    }), !1) : (r({
                      api: t,
                      paramName: "payload.description",
                      desc: sn()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: Mn()
                    }), !1);
                  }
                })
              },
              createMergerMessage: {
                to: n,
                conversationType: n,
                payload: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    var o;
                    return S(e.messageList) ? (r({
                      api: t,
                      paramName: "payload.messageList",
                      desc: _n()
                    }), !1) : S(e.compatibleText) ? (r({
                      api: t,
                      paramName: "payload.compatibleText",
                      desc: rn("compatibleText")
                    }), !1) : (o = !1, e.messageList.forEach(function (e) {
                      e.status === Nn && (o = !0);
                    }), !o || (r({
                      api: t,
                      paramName: "payload.messageList",
                      desc: u("MergeFailedMessageLog")
                    }), !1));
                  }
                })
              },
              revokeMessage: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return S(e) ? (r({
                    api: t,
                    paramName: n,
                    desc: Tn()
                  }), !1) : e.conversationType === R.CONV_SYSTEM ? (r({
                    api: t,
                    paramName: n,
                    desc: u("MessageCanBeRevokedDesc")
                  }), !1) : !0 !== e.isRevoked || (r({
                    api: t,
                    paramName: n,
                    desc: u("MessageRevokedLog")
                  }), !1);
                }
              })],
              deleteMessage: [y(y({
                name: "messageList"
              }, s), {}, {
                validator: function validator(e, t, n) {
                  return !S(e) || (r({
                    api: t,
                    paramName: n,
                    desc: _n()
                  }), !1);
                }
              })],
              translateText: {
                sourceTextList: s,
                sourceLanguage: n,
                targetLanguage: n
              },
              convertVoiceToText: {
                message: y(y({}, o), {}, {
                  validator: function validator(e, t, n) {
                    return S(e) ? (r({
                      api: t,
                      paramName: n,
                      desc: Tn()
                    }), !1) : e.type === R.MSG_AUDIO && e.status === On || (r({
                      api: t,
                      paramName: n,
                      desc: u("AudioMessageRequiredLog")
                    }), !1);
                  }
                })
              },
              modifyMessage: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return S(e) ? (r({
                    api: t,
                    paramName: n,
                    desc: Tn()
                  }), !1) : e.conversationType === R.CONV_SYSTEM ? (r({
                    api: t,
                    paramName: n,
                    desc: u("MessageCanBeModifiedLog")
                  }), !1) : !0 !== e._onlineOnlyFlag || (r({
                    api: t,
                    paramName: n,
                    desc: u("OnlineMessageNotSupportLog")
                  }), !1);
                }
              })],
              searchCloudMessages: {
                keywordList: Fn.keywordListForMsg,
                keywordListMatchType: Fn.keywordListMatchType,
                cursor: Fn.cursor,
                senderUserIDList: {
                  type: "Array",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return kn(e, t, n, {
                      allowUndefined: !0,
                      allowEmpty: !0,
                      maxLength: 5
                    });
                  }
                },
                messageTypeList: {
                  type: "Array",
                  required: !1,
                  validator: function validator(e, t, n) {
                    var o;
                    return !e || !(!kn(e, t, n, {
                      allowUndefined: !0,
                      allowEmpty: !0
                    }) || (o = [R.MSG_TEXT, R.MSG_IMAGE, R.MSG_AUDIO, R.MSG_FILE, R.MSG_VIDEO, R.MSG_LOCATION, R.MSG_CUSTOM, R.MSG_MERGER], 0 < e.filter(function (e) {
                      return -1 === o.indexOf(e);
                    }).length && (r({
                      api: t,
                      paramName: n,
                      desc: Sn(n, "message")
                    }), 1)));
                  }
                },
                conversationID: {
                  type: "String",
                  required: !1,
                  validator: function validator(e) {
                    return !e || an(e);
                  }
                },
                timePosition: {
                  type: "number",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return Rn(e, t, n, {
                      allowUndefined: !0,
                      min: 0
                    });
                  }
                },
                timePeriod: {
                  type: "number",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return Rn(e, t, n, {
                      allowUndefined: !0,
                      min: 0
                    });
                  }
                }
              },
              searchCloudUsers: {
                keywordList: Fn.keywordListExceptMsg,
                keywordListMatchType: Fn.keywordListMatchType,
                cursor: Fn.cursor,
                count: Fn.count,
                miniBirthday: {
                  type: "Number",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return Rn(e, t, n, {
                      allowUndefined: !0,
                      min: 0
                    });
                  }
                },
                maxBirthday: {
                  type: "Number",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return Rn(e, t, n, {
                      allowUndefined: !0,
                      min: 0
                    });
                  }
                },
                gender: {
                  type: "String",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return !e || e === R.GENDER_FEMALE || e === R.GENDER_MALE || r({
                      api: t,
                      paramName: n,
                      desc: "".concat(e, " is invalid match type")
                    });
                  }
                }
              },
              searchCloudGroups: {
                keywordList: Fn.keywordListExceptMsg,
                keywordListMatchType: Fn.keywordListMatchType,
                cursor: Fn.cursor,
                count: Fn.count,
                groupTypeList: Fn.groupTypeList
              },
              searchCloudGroupMembers: {
                keywordList: Fn.keywordListExceptMsg,
                keywordListMatchType: Fn.keywordListMatchType,
                cursor: Fn.cursor,
                count: Fn.count,
                groupTypeList: Fn.groupTypeList,
                groupIDList: {
                  type: "Array",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return kn(e, t, n, {
                      allowUndefined: !0,
                      allowEmpty: !0
                    });
                  }
                }
              },
              getUserProfile: {
                userIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return O(e) ? (0 === e.length && r({
                      api: t,
                      paramName: n,
                      desc: _n()
                    }), !0) : (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              updateMyProfile: {
                profileCustomField: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return !!N(e) || !!O(e) || (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              setSelfStatus: {
                customStatus: {
                  type: "String",
                  validator: function validator(e, t, n) {
                    return !!C(e) || (r({
                      api: t,
                      paramName: n,
                      desc: sn()
                    }), !1);
                  }
                }
              },
              getUserStatus: {
                userIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return O(e) ? 0 !== e.length || (r({
                      api: t,
                      paramName: n,
                      desc: _n()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              subscribeUserStatus: {
                userIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return O(e) ? 0 !== e.length || (r({
                      api: t,
                      paramName: n,
                      desc: _n()
                    }), !1) : (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              unsubscribeUserStatus: {
                userIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return !e || !!O(e) || (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              addFriend: {
                to: n,
                source: {
                  type: "String",
                  required: !0,
                  validator: function validator(e, t, n) {
                    return !(!e || (e.startsWith("AddSource_Type_") ? 8 < e.replace("AddSource_Type_", "").length && (r({
                      api: t,
                      paramName: n,
                      desc: fn("keyword", 8)
                    }), 1) : (r({
                      api: t,
                      paramName: n,
                      desc: u("SourcePrefixLog")
                    }), 1)));
                  }
                },
                remark: {
                  type: "String",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return !(C(e) && 96 < e.length && (r({
                      api: t,
                      paramName: n,
                      desc: fn(n, 96)
                    }), 1));
                  }
                }
              },
              deleteFriend: {
                userIDList: s
              },
              checkFriend: {
                userIDList: s
              },
              getFriendProfile: {
                userIDList: s
              },
              updateFriend: {
                userID: n,
                remark: {
                  type: "String",
                  required: !1,
                  validator: function validator(e, t, n) {
                    return !(C(e) && 96 < e.length && (r({
                      api: t,
                      paramName: n,
                      desc: fn(n, 96)
                    }), 1));
                  }
                },
                friendCustomField: {
                  type: "Array",
                  required: !1,
                  validator: function validator(e, t, n) {
                    var o;
                    return !e || (O(e) ? (o = !0, e.forEach(function (e) {
                      return C(e.key) && -1 !== e.key.indexOf("Tag_SNS_Custom") ? C(e.value) ? 8 < e.key.replace("Tag_SNS_Custom_", "").length ? (r({
                        api: t,
                        paramName: n,
                        desc: fn("keyword", 8)
                      }), o = !1) : void 0 : (r({
                        api: t,
                        paramName: n,
                        desc: In("value")
                      }), o = !1) : (r({
                        api: t,
                        paramName: n,
                        desc: u("FriendCustomFieldPrefixLog")
                      }), o = !1);
                    }), o) : (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1));
                  }
                }
              },
              acceptFriendApplication: {
                userID: n
              },
              refuseFriendApplication: {
                userID: n
              },
              deleteFriendApplication: {
                userID: n
              },
              createFriendGroup: {
                name: n
              },
              deleteFriendGroup: {
                name: n
              },
              addToFriendGroup: {
                name: n,
                userIDList: s
              },
              removeFromFriendGroup: {
                name: n,
                userIDList: s
              },
              renameFriendGroup: {
                oldName: n,
                newName: n
              },
              sendMessageReadReceipt: [{
                name: "messageList",
                type: "Array",
                validator: function validator(e, t, n) {
                  return O(e) ? 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: _n()
                  }), !1) : (r({
                    api: t,
                    paramName: n,
                    desc: pn()
                  }), !1);
                }
              }],
              getMessageReadReceiptList: [{
                name: "messageList",
                type: "Array",
                validator: function validator(e, t, n) {
                  return O(e) ? 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: _n()
                  }), !1) : (r({
                    api: t,
                    paramName: n,
                    desc: pn()
                  }), !1);
                }
              }],
              createTopicInCommunity: {
                groupID: n,
                topicName: n
              },
              deleteTopicFromCommunity: {
                groupID: n,
                topicIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return !e || !!O(e) || (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              updateTopicProfile: {
                groupID: n,
                topicID: n
              },
              getTopicList: {
                groupID: n,
                topicIDList: {
                  type: "Array",
                  validator: function validator(e, t, n) {
                    return !e || !!O(e) || (r({
                      api: t,
                      paramName: n,
                      desc: pn()
                    }), !1);
                  }
                }
              },
              followUser: [y({
                name: "userIDList"
              }, s)],
              unfollowUser: [y({
                name: "userIDList"
              }, s)],
              getMyFollowingList: [y(y({
                name: "startIndex"
              }, n), {}, {
                required: !1
              })],
              getMyFollowersList: [y(y({
                name: "startIndex"
              }, n), {}, {
                required: !1
              })],
              getMutualFollowersList: [y(y({
                name: "startIndex"
              }, n), {}, {
                required: !1
              })],
              getUserFollowInfo: [y(y({
                name: "userIDList"
              }, s), {}, {
                required: !1
              })],
              checkFollowType: [y({
                name: "userIDList"
              }, s)],
              addSignalingListener: [{
                name: "eventName",
                type: "String",
                validator: function validator(e, t, n) {
                  return "string" == typeof e && 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: rn(n)
                  }), !1);
                }
              }, {
                name: "handler",
                type: "Function",
                validator: function validator(e, t, n) {
                  return "function" != typeof e ? (r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !1) : ("" === e.name && r({
                    api: t,
                    paramName: n,
                    desc: Dn()
                  }), !0);
                }
              }],
              removeSignalingListener: [{
                name: "eventName",
                type: "String",
                validator: function validator(e, t, n) {
                  return "string" == typeof e && 0 !== e.length || (r({
                    api: t,
                    paramName: n,
                    desc: rn(n)
                  }), !1);
                }
              }, {
                name: "handler",
                type: "Function",
                validator: function validator(e, t, n) {
                  return "function" != typeof e ? (r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !1) : ("" === e.name && r({
                    api: t,
                    paramName: n,
                    desc: Dn()
                  }), !0);
                }
              }],
              invite: {
                userID: n
              },
              inviteSync: [y(y({}, o), {}, {
                validator: function validator(e, t, n) {
                  return m(e) ? !!C(e.userID) || (r({
                    api: t,
                    paramName: "options.userID",
                    desc: sn()
                  }), !1) : (r({
                    api: t,
                    paramName: "options",
                    desc: Mn()
                  }), !1);
                }
              }), {
                name: "successCb",
                type: "Function",
                required: !1,
                validator: function validator(e, t, n) {
                  return N(e) && r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !0;
                }
              }, {
                name: "errorCb",
                type: "Function",
                required: !1,
                validator: function validator(e, t, n) {
                  return N(e) && r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !0;
                }
              }],
              inviteInGroup: {
                groupID: n,
                inviteeList: s
              },
              inviteInGroupSync: [y(y({}, o), {}, {
                validator: function validator(e, t, n) {
                  return m(e) ? C(e.groupID) ? !!O(e.inviteeList) || (r({
                    api: t,
                    paramName: "options.inviteeList",
                    desc: pn()
                  }), !1) : (r({
                    api: t,
                    paramName: "options.groupID",
                    desc: sn()
                  }), !1) : (r({
                    api: t,
                    paramName: "options",
                    desc: Mn()
                  }), !1);
                }
              }), {
                name: "successCb",
                type: "Function",
                required: !1,
                validator: function validator(e, t, n) {
                  return N(e) && r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !0;
                }
              }, {
                name: "errorCb",
                type: "Function",
                required: !1,
                validator: function validator(e, t, n) {
                  return N(e) && r({
                    api: t,
                    paramName: n,
                    desc: dn()
                  }), !0;
                }
              }],
              accept: {
                inviteID: n
              },
              reject: {
                inviteID: n
              },
              getSignalingInfo: [y(y({
                name: "message"
              }, o), {}, {
                validator: function validator(e, t, n) {
                  return !S(e) || (r({
                    api: t,
                    paramName: n,
                    desc: Tn()
                  }), !1);
                }
              })],
              modifyInvitation: {
                inviteID: n,
                data: n
              }
            },
            xn = {
              login: 1,
              logout: 1,
              getLoginUser: 1,
              getServerTime: 1,
              on: 1,
              once: 1,
              off: 1,
              setLogLevel: 1,
              registerPlugin: 1,
              destroy: 1,
              isReady: 1,
              createTextMessage: 1,
              createTextAtMessage: 1,
              createImageMessage: 1,
              createAudioMessage: 1,
              createVideoMessage: 1,
              createCustomMessage: 1,
              createFaceMessage: 1,
              createFileMessage: 1,
              createLocationMessage: 1,
              createMergerMessage: 1,
              downloadMergerMessage: 1,
              createForwardMessage: 1,
              sendMessage: 1,
              resendMessage: 1,
              revokeMessage: 1,
              deleteMessage: 1,
              translateText: 1,
              convertVoiceToText: 1,
              modifyMessage: 1,
              sendMessageReadReceipt: 1,
              getGroupMessageReadMemberList: 1,
              getMessageReadReceiptList: 1,
              setMessageExtensions: 1,
              getMessageExtensions: 1,
              deleteMessageExtensions: 1,
              addMessageReaction: 1,
              removeMessageReaction: 1,
              getMessageReactions: 1,
              getAllUserListOfMessageReaction: 1,
              getMessageList: 1,
              findMessage: 1,
              getMessageListHopping: 1,
              setMessageRead: 1,
              setAllMessageRead: 1,
              getConversationList: 1,
              getConversationProfile: 1,
              deleteConversation: 1,
              setConversationDraft: 1,
              pinConversation: 1,
              getTotalUnreadMessageCount: 1,
              setConversationCustomData: 1,
              markConversation: 1,
              createConversationGroup: 1,
              getConversationGroupList: 1,
              deleteConversationGroup: 1,
              renameConversationGroup: 1,
              addConversationsToGroup: 1,
              deleteConversationsFromGroup: 1,
              clearHistoryMessage: 1,
              setMessageRemindType: 1,
              setAllReceiveMessageOpt: 1,
              getAllReceiveMessageOpt: 1,
              getGroupList: 1,
              getGroupProfile: 1,
              createGroup: 1,
              joinGroup: 1,
              updateGroupProfile: 1,
              quitGroup: 1,
              dismissGroup: 1,
              changeGroupOwner: 1,
              searchGroupByID: 1,
              getGroupApplicationList: 1,
              handleGroupApplication: 1,
              initGroupAttributes: 1,
              setGroupAttributes: 1,
              deleteGroupAttributes: 1,
              getGroupAttributes: 1,
              setGroupCounters: 1,
              increaseGroupCounter: 1,
              decreaseGroupCounter: 1,
              getGroupCounters: 1,
              getJoinedCommunityList: 1,
              createTopicInCommunity: 1,
              deleteTopicFromCommunity: 1,
              updateTopicProfile: 1,
              getTopicList: 1,
              getGroupMemberProfile: 1,
              getGroupMemberList: 1,
              addGroupMember: 1,
              deleteGroupMember: 1,
              setGroupMemberNameCard: 1,
              setGroupMemberMuteTime: 1,
              setGroupMemberRole: 1,
              setGroupMemberCustomField: 1,
              getGroupOnlineMemberCount: 1,
              markGroupMemberList: 1,
              getMyProfile: 1,
              getUserProfile: 1,
              updateMyProfile: 1,
              setSelfStatus: 1,
              getUserStatus: 1,
              subscribeUserStatus: 1,
              unsubscribeUserStatus: 1,
              getBlacklist: 1,
              addToBlacklist: 1,
              removeFromBlacklist: 1,
              searchCloudMessages: 1,
              searchCloudUsers: 1,
              searchCloudGroups: 1,
              searchCloudGroupMembers: 1,
              getFriendList: 1,
              addFriend: 1,
              deleteFriend: 1,
              checkFriend: 1,
              updateFriend: 1,
              getFriendProfile: 1,
              getFriendApplicationList: 1,
              refuseFriendApplication: 1,
              deleteFriendApplication: 1,
              acceptFriendApplication: 1,
              setFriendApplicationRead: 1,
              getFriendGroupList: 1,
              createFriendGroup: 1,
              renameFriendGroup: 1,
              deleteFriendGroup: 1,
              addToFriendGroup: 1,
              removeFromFriendGroup: 1,
              followUser: 1,
              unfollowUser: 1,
              getMyFollowingList: 1,
              getMyFollowersList: 1,
              getMutualFollowersList: 1,
              getUserFollowInfo: 1,
              checkFollowType: 1,
              callExperimentalAPI: 1,
              addSignalingListener: 1,
              removeSignalingListener: 1,
              invite: 1,
              inviteSync: 1,
              inviteInGroup: 1,
              inviteInGroupSync: 1,
              cancel: 1,
              accept: 1,
              reject: 1,
              getSignalingInfo: 1,
              modifyInvitation: 1
            },
            L = (t(io, Z(Error)), e(io)),
            k = {
              NO_SDKAPPID: 2e3,
              NO_ACCOUNT_TYPE: 2001,
              NO_IDENTIFIER: 2002,
              NO_USERSIG: 2003,
              NO_TINYID: 2022,
              NO_A2KEY: 2023,
              USER_NOT_LOGGED_IN: 2024,
              REPEAT_LOGIN: 2025,
              COS_UNDETECTED: 2040,
              COS_GET_SIG_FAIL: 2041,
              MSG_SEND_FAIL: 2100,
              MSG_SEND_FAIL_NOT_IN_AV: 2101,
              MSG_INSTANCE_REQUIRED: 2105,
              MSG_INVALID_CONV_TYPE: 2106,
              MSG_F_IS_EMPTY: 2108,
              MSG_ONPROGRESS_ERR: 2109,
              MSG_REVOKE_FAIL: 2110,
              MSG_DELETE_FAIL: 2111,
              MSG_UNREAD_ALL_FAIL: 2112,
              READ_RECEIPT_MSG_LIST_EMPTY: 2114,
              MSG_SEND_GRP_WITH_TOPIC_FAIL: 2115,
              CANNOT_DELETE_GRP_SYSTEM_NOTICE: 2116,
              TRANSLATE_TEXT_FAIL: 2117,
              VOICE_TO_TEXT_FAIL: 2118,
              UNSUPPORTED_VOICE_FORMAT: 2119,
              MSG_I_SELECT_F_FIRST: 2251,
              MSG_I_TYPES_LIMIT: 2252,
              MSG_I_SIZE_LIMIT: 2253,
              MSG_A_UPLOAD_FAIL: 2300,
              MSG_A_SIZE_LIMIT: 2301,
              MSG_V_UPLOAD_FAIL: 2350,
              MSG_V_SIZE_LIMIT: 2351,
              MSG_V_TYPES_LIMIT: 2352,
              MSG_F_UPLOAD_FAIL: 2400,
              MSG_F_SELECT_F_FIRST: 2401,
              MSG_F_SIZE_LIMIT: 2402,
              MSG_F_URL_IS_EMPTY: 2403,
              MSG_MERGER_TYPE_INVALID: 2450,
              MSG_MERGER_KEY_INVALID: 2451,
              MSG_MERGER_DOWNLOAD_FAIL: 2452,
              MSG_FORWARD_TYPE_INVALID: 2453,
              MSG_FORWARD_INVALID_ELEMENTS: 2454,
              MSG_MODIFY_CONFLICT: 2480,
              MSG_MODIFY_DISABLED_IN_AV: 2481,
              CONV_NOT_FOUND: 2500,
              USER_OR_GRP_NOT_FOUND: 2501,
              CONV_UN_RECORDED_TYPE: 2502,
              INVALID_CONV_ID: 2503,
              ILLEGAL_GRP_TYPE: 2600,
              ILLEGAL_GRP_ID: 2602,
              CANNOT_FIND_GRP: 2603,
              CANNOT_CHANGE_OWNER_IN_AV: 2620,
              CANNOT_CHANGE_OWNER_TO_SELF: 2621,
              MEMBER_NOT_IN_GRP: 2623,
              JOIN_GRP_FAIL: 2660,
              CANNOT_ADD_MEMBER_IN_AV: 2661,
              CANNOT_JOIN_NON_AV_WITHOUT_LOGIN: 2662,
              NOT_OWNER: 2681,
              INVALID_MEMBER_ROLE: 2683,
              CANNOT_SET_SELF_MEMBER_ROLE: 2684,
              CANNOT_MUTE_SELF: 2685,
              BAN_DURATION_INVALID: 2686,
              OPERATION_NOT_SUPPORTED_IN_AV: 2687,
              NOT_MY_FRIEND: 2700,
              ALREADY_MY_FRIEND: 2701,
              FRIEND_GRP_EXISTED: 2710,
              FRIEND_GRP_NOT_EXIST: 2711,
              FRIEND_APPLICATION_NOT_EXIST: 2716,
              UPDATE_PROFILE_INVALID_PARAM: 2721,
              UPDATE_PROFILE_NO_KEY: 2722,
              CANNOT_ADD_SELF_TO_BLACKLIST: 2742,
              NETWORK_ERROR: 2800,
              NETWORK_TIMEOUT: 2801,
              NO_NETWORK: 2805,
              UNCAUGHT_ERROR: 2903,
              INVALID_OPERATION: 2905,
              INVALID_TRTC_CMD: 2995,
              OVER_FREQUENCY_LIMIT: 2996,
              NO_PROTOCOL: 2997,
              NO_MODULE: 2998,
              SDK_IS_NOT_READY: 2999,
              LOGGING_IN: 3e3,
              LOGIN_FAILED: 3001,
              KICKED_OUT_MULT_DEVICE: 3002,
              KICKED_OUT_MULT_ACCOUNT: 3003,
              KICKED_OUT_USERSIG_EXPIRED: 3004,
              LOGGED_OUT: 3005,
              KICKED_OUT_REST_API: 3006,
              ILLEGAL_TOPIC_ID: 3021,
              NO_USE: 3122,
              PROFANITY_FOUND: 3123,
              OPTIONS_IS_EMPTY: 3153,
              MSG_A2KEY_EXPIRED: 20002,
              ACCOUNT_A2KEY_EXPIRED: 70001,
              HELLO_ANSWER_KICKED_OUT: 1002,
              OPEN_SERVICE_OVERLOAD_ERROR: 60022,
              SIGNALING_INVALID_INVITE_ID: 8010,
              SIGNALING_NO_PERMISSION: 8011,
              SIGNALING_ALREADY_EXISTS: 8012,
              INVALID_CANCEL_MESSAGE: 8020
            },
            Vn = null,
            c = e(function e(t) {
              p(this, e), this._m = t, this._n = "";
            }, [{
              key: "isLoggedIn",
              value: function value() {
                return this._m.get(12).isLoggedIn();
              }
            }, {
              key: "isOversea",
              value: function value() {
                return this._m.get(12).isOversea();
              }
            }, {
              key: "isPrivateNetWork",
              value: function value() {
                var e = this._m.get(12);
                return e.isPrivateNetWork() && !e.getFileDownloadProxy();
              }
            }, {
              key: "getFileDownloadProxy",
              value: function value() {
                return this._m.get(12).getFileDownloadProxy();
              }
            }, {
              key: "getDownloadFileAuthKey",
              value: function value() {
                return this._m.get(12).getDownloadFileAuthKey();
              }
            }, {
              key: "getMyUserID",
              value: function value() {
                return this._m.get(12).getUserID();
              }
            }, {
              key: "getMyTinyID",
              value: function value() {
                return this._m.get(12).getTinyID();
              }
            }, {
              key: "getSDKAppID",
              value: function value() {
                return this._m.get(12).getSDKAppID();
              }
            }, {
              key: "isIntl",
              value: function value() {
                return this._m.get(12).isIntl();
              }
            }, {
              key: "isUsingChatCore",
              value: function value() {
                return this._m.get(12).isUsingChatCore();
              }
            }, {
              key: "isDevMode",
              value: function value() {
                return this._m.get(12).isDevMode();
              }
            }, {
              key: "get",
              value: function value(e) {
                return this._m.get(e);
              }
            }, {
              key: "getPlatform",
              value: function value() {
                return ye;
              }
            }, {
              key: "getCloudConfig",
              value: function value(e) {
                return this._m.get(23).getCloudConfig(e);
              }
            }, {
              key: "emitOEvt",
              value: function value(e, t) {
                this._m.getOEmitInst().emit(e, t);
              }
            }, {
              key: "emitIEvt",
              value: function value(e, t) {
                this._m.getIEmitInst().emit(e, t);
              }
            }, {
              key: "getIEmitInst",
              value: function value() {
                return this._m.getIEmitInst();
              }
            }, {
              key: "req",
              value: function value(e) {
                return this._m.get(20).req(e);
              }
            }, {
              key: "canIUse",
              value: function value(e) {
                return this._m.get(27).canIUse(e);
              }
            }, {
              key: "getErrMsg",
              value: function value(e, t, n) {
                return this._m.getErrMsg(e, t, n);
              }
            }, {
              key: "warn",
              value: function value(e, t, n) {
                e = this.getErrMsg(e, t, n);
                e && M.w(e);
              }
            }, {
              key: "noUse",
              value: function value(e) {
                var t = k.NO_USE;
                return E({
                  code: t,
                  message: this.getErrMsg(t, e)
                });
              }
            }]),
            G = {
              LOGIN: "wslogin",
              LOGOUT: "wslogout",
              HELLO: "wshello",
              KICK_OTHER: "KickOther",
              SYNC_UNREAD_MSG: "getmsg",
              SEND_C2C_MSG: "sendmsg",
              SEND_GRP_MSG: "send_group_msg",
              GET_USER_PROFILE: "portrait_get_all",
              UPDATE_MY_PROFILE: "portrait_set",
              GET_BL: "black_list_get",
              ADD_TO_BL: "black_list_add",
              RM_FROM_BL: "black_list_delete",
              GET_FD_LIST: "friend_get",
              GET_FD_PROFILE: "friend_get_specified",
              CHECK_FD: "friend_check",
              DEL_FD: "friend_delete",
              ADD_FD: "friend_add",
              UPDATE_FD: "friend_update",
              RESPOND_FD_APPLICATION: "friend_response",
              GET_FD_APPLICATION_LIST: "pendency_get",
              DEL_FD_APPLICATION: "pendency_delete",
              REFUSE_FD_APPLICATION: "pendency_refuse",
              REPORT_FD_APPLICATION: "pendency_report",
              GET_FD_GRP_LIST: "group_get",
              CREATE_FD_GRP: "group_add",
              DEL_FD_GRP: "group_delete",
              UPDATE_FD_GRP: "group_update",
              REVOKE_C2C_MSG: "msgwithdraw",
              SET_C2C_MSG_READ: "msgreaded",
              SET_C2C_PEER_MUTE_NOTIFICATIONS: "set_c2c_peer_mute_notifications",
              GET_C2C_PEER_MUTE_NOTIFICATIONS: "get_c2c_peer_mute_notifications",
              GET_C2C_ROAMING_MSG: "getroammsg",
              GET_C2C_PEER_READ_TIME: "get_peer_read_time",
              DEL_C2C_MSG: "delete_c2c_msg_ramble",
              MODIFY_C2C_MSG: "modify_c2c_msg",
              MODIFY_C2C_MSG_EXT: "set_key_values",
              GET_C2C_MSG_EXT: "get_key_values",
              ADD_C2C_MSG_REACTION: "reaction_add",
              RM_C2C_MSG_REACTION: "reaction_del",
              GET_C2C_MSG_REACTIONS: "reaction_multi_stat",
              GET_C2C_MSG_REACTION_USER_LIST: "reaction_iterate",
              PAGING_GET_CONV_LIST: "page_get",
              DEL_CONV: "batch_delete",
              CLEAR_HISTORY_MSG: "clear_msg",
              PIN_CONV: "top",
              DEL_GROUP_AT_TIPS: "deletemsg",
              SET_CONV_CUSTOM_DATA: "set_conv_custom_data",
              MARK_CONV: "mark_contact",
              CREATE_CONV_GRP: "create_contact_group",
              DEL_CONV_GRP: "del_contact_group",
              RENAME_CONV_GRP: "update_contact_group",
              ADD_CONV_TO_GRP: "add_conv_to_group",
              DEL_CONV_FROM_GRP: "del_conv_from_group",
              GET_CONV_GRP_LIST: "get_contact_group",
              SEARCH_CONV_GRP_MARK: "search_contact_group",
              GET_GRP_LIST: "get_joined_group_list",
              GET_GRP_PROFILE: "get_group_self_member_info",
              CREATE_GRP: "create_group",
              DISMISS_GRP: "destroy_group",
              UPDATE_GRP_PROFILE: "modify_group_base_info",
              APPLY_JOIN_GRP: "apply_join_group",
              APPLY_JOIN_GRP_NOAUTH: "apply_join_group_noauth",
              QUIT_GRP: "quit_group",
              SEARCH_GRP: "get_group_public_info",
              CHANGE_GRP_OWNER: "change_group_owner",
              HANDLE_GRP_APPLICATION: "handle_apply_join_group",
              HANDLE_INVITE_JOIN_GRP: "handle_invite_join_permission_group",
              HANDLE_GRP_INVITATION: "handle_invite_join_group",
              REVOKE_GRP_MSG: "group_msg_recall",
              SET_GRP_MSG_READ: "msg_read_report",
              SET_ALL_MSG_READ: "read_all_unread_msg",
              GET_GRP_ROAMING_MSG: "group_msg_get",
              GET_READ_RECEIPT: "get_group_msg_receipt",
              SEND_READ_RECEIPT: "group_msg_receipt",
              SEND_C2C_READ_RECEIPT: "c2c_msg_read_receipt",
              GET_READ_RECEIPT_DETAIL: "get_group_msg_receipt_detail",
              GET_GRP_RECEIPTS_BY_USERS: "get_group_msg_receipts_by_users",
              GET_GRP_PENDENCY: "get_pendency",
              DEL_GRP_SYSTEM_NOTICE: "deletemsg",
              AV_POLLING: "get_msg",
              AV_NOAUTH_POLLING: "get_msg_noauth",
              GET_ONLINE_MBR_NUM: "get_online_member_num",
              DEL_GRP_MSG: "delete_group_ramble_msg_by_seq",
              MODIFY_GRP_MSG: "modify_group_msg",
              SET_GRP_ATTR: "set_group_attr",
              MODIFY_GRP_ATTR: "modify_group_attr",
              DEL_GRP_ATTR: "delete_group_attr",
              CLEAR_GRP_ATTR: "clear_group_attr",
              GET_GRP_ATTR: "get_group_attr",
              MODIFY_GRP_MSG_EXT: "group_set_key_values",
              GET_GRP_MSG_EXT: "group_get_key_values",
              GET_GRP_NOTIFY: "batch_get_group_notify",
              UPDATE_GRP_COUNTER: "update_group_counter",
              GET_GRP_COUNTER: "get_group_counter",
              ADD_GRP_MSG_REACTION: "group_reaction_add",
              RM_GRP_MSG_REACTION: "group_reaction_del",
              GET_GRP_MSG_REACTIONS: "group_reaction_multi_stat",
              GET_GRP_MSG_REACTION_USER_LIST: "group_reaction_iterate",
              GET_GRP_MBR_LIST: "get_group_member_info",
              GET_AV_MBR_LIST: "get_members",
              GET_GRP_MBR_PROFILE: "get_specified_group_member_info",
              ADD_GRP_MBR: "add_group_member",
              DEL_GRP_MBR: "delete_group_member",
              BAN_AV_MBR: "ban_group_member",
              MODIFY_GRP_MBR_INFO: "modify_group_member_info",
              MARK_AV_MBR_INFO: "modify_user_info",
              COS_SIGN: "cos",
              COS_PRE_SIG: "pre_sig",
              SIMPLE_COS_PRE_SIG: "simple_sig",
              GET_IMAGE_INFO: "get_imageinfo",
              GET_IP: "get_final_ip",
              VIDEO_COVER: "video_cover",
              SSO_STAT: "tim_web_report_v2",
              PING: "alive",
              MSG_PUSH: "msg_push",
              CS: "query",
              GRP_CS: "query_grp",
              MBR_CS: "query_grp_member",
              USER_CS: "query_user",
              MULTI_MSG_PUSH: "multi_msg_push_ws",
              MSG_PUSH_ACK: "ws_msg_push_ack",
              STATUS_FORCE_OFFLINE: "stat_forceoffline",
              UPLOAD_MERGER_MSG: "save_relay_json_msg",
              DOWNLOAD_MERGER_MSG: "get_relay_json_msg",
              FETCH_CLOUD_CTRL_CONFIG: "fetch_config",
              PUSHED_CLOUD_CTRL_CONFIG: "push_configv2",
              FETCH_COMMERCIAL_CONFIG: "fetch_imsdk_purchase_bitsv2",
              PUSHED_COMMERCIAL_CONFIG: "push_imsdk_purchase_bitsv2",
              OVERLOAD_NOTIFY: "notify2",
              CREATE_TOPIC: "create_topic",
              DEL_TOPIC: "destroy_topic",
              UPDATE_TOPIC_PROFILE: "modify_topic",
              GET_TOPIC_LIST: "get_topic",
              SET_SELF_STATUS: "ws_set_custom_status",
              GET_USER_STATUS: "ws_get_user_status",
              SUB_USER_STATUS: "ws_status_subscribe",
              UNSUB_USER_STATUS: "ws_status_unsubscribe",
              STAT_BACKGROUND: "ws_stat_background",
              STAT_FOREGROUND: "ws_stat_foreground",
              SET_TOKEN: "ws_stat_settoken",
              PUSH_REPORT: "uniapp_sdk_report",
              GET_PROFANITY_LIST: "get_local_words",
              TRANSLATE_TEXT: "ws_batch_trans_text",
              VOICE_TO_TEXT: "ws_sentence_recognition",
              FOLLOW: "follow_add",
              UNFOLLOW: "follow_delete",
              GET_FOLLOW: "follow_get",
              GET_FOLLOW_INFO: "follow_get_info",
              CHECK_FOLLOW_TYPE: "follow_check",
              SET_ALL_RECEIVE_MSG_OPT: "ws_set_do_not_disturb",
              GET_ALL_RECEIVE_MSG_OPT: "ws_get_do_not_disturb"
            },
            Bn = "networkRTT",
            Hn = "messageE2EDelay",
            Kn = "sendMessageC2C",
            Wn = "sendMessageGroup",
            Yn = "sendMessageGroupAV",
            jn = "sendMessageRichMedia",
            Jn = "cosUpload",
            zn = "messageReceivedGroup",
            Xn = "messageReceivedGroupAVPush",
            Zn = "messageReceivedGroupAVPull",
            Qn = q(q(q(q(q(q(q(q(q(q({}, Bn, 2), Hn, 3), Kn, 4), Wn, 5), Yn, 6), jn, 7), zn, 8), Xn, 9), Zn, 10), Jn, 11),
            $n = {
              info: 4,
              warning: 5,
              error: 6
            },
            eo = {
              wifi: 1,
              "2g": 2,
              "3g": 3,
              "4g": 4,
              "5g": 5,
              unknown: 6,
              none: 7,
              online: 8
            },
            to = {
              login: 4,
              plugin_search: 16,
              plugin_translate: 16,
              plugin_voice_to_text: 16,
              plugin_cs: 16,
              plugin_push: 16,
              plugin_bot: 16,
              plugin_emoji_reaction: 16,
              tui_key_features: 16
            },
            P = e(oo, [{
              key: "updateTimeStamp",
              value: function value() {
                this.timestamp = He();
              }
            }, {
              key: "start",
              value: function value(e) {
                return this._startts = e, this;
              }
            }, {
              key: "end",
              value: function value() {
                var e,
                  t = this,
                  n = 0 < arguments.length && void 0 !== arguments[0] && arguments[0];
                this._sentFlag || (this._netMonitorModule && (e = this._netMonitorModule.getNetworkType(), this.setNetworkType(e)), e = He(), 0 === this.costTime && (this.costTime = e - this._startts), this.setMoreMessage("startts:".concat(this._startts, " endts:").concat(e)), n ? (this._sentFlag = !0, this._eventStatModule && this._eventStatModule.pushIn(this)) : setTimeout(function () {
                  t._sentFlag = !0, t._eventStatModule && t._eventStatModule.pushIn(t);
                }, 0));
              }
            }, {
              key: "setError",
              value: function value(e) {
                var t;
                return e instanceof Error ? this._sentFlag || (t = !0, (t = this._netMonitorModule ? this._netMonitorModule.isOnline() : t) ? (e.code && this.setCode(e.code), e.message && this.setMoreMessage(e.message)) : this.setCode(k.NO_NETWORK), this.setLevel("error")) : M.w("".concat(this._n, ".setError value not instanceof Error, please check!")), this;
              }
            }, {
              key: "setCode",
              value: function value(e) {
                return N(e) || this._sentFlag || ("ECONNABORTED" === e && (this.code = 103), A(e) ? this.code = e : M.w("".concat(this._n, ".setCode value not a number, please check!"), e, z(e))), this;
              }
            }, {
              key: "setMessage",
              value: function value(e) {
                return N(e) || this._sentFlag || (A(e) && (this.message = e.toString()), C(e) && (this.message = e)), this;
              }
            }, {
              key: "setCostTime",
              value: function value(e) {
                return this.costTime = e, this;
              }
            }, {
              key: "setLevel",
              value: function value(e) {
                return N(e) || this._sentFlag || (this.level = $n[e]), this;
              }
            }, {
              key: "setMoreMessage",
              value: function value(e) {
                return S(this.moreMessage) ? this.moreMessage = "".concat(e) : this.moreMessage += " ".concat(e), this;
              }
            }, {
              key: "setNetworkType",
              value: function value(e) {
                return N(e) ? M.w("".concat(this._n, ".setNetworkType value is undefined, please check!")) : (e = eo[e.toLowerCase()], N(e) || (this.networkType = e)), this;
              }
            }, {
              key: "getStartTs",
              value: function value() {
                return this._startts;
              }
            }, {
              key: "setUIPlatform",
              value: function value(e) {
                return this.uiPlatform = e, this;
              }
            }, {
              key: "setExtension",
              value: function value(e) {
                return this.extension = e, this;
              }
            }, {
              key: "setEventType",
              value: function value(e) {
                return this.eventType = e, this;
              }
            }], [{
              key: "bindEventStatModule",
              value: function value(e) {
                oo.prototype._eventStatModule = e;
              }
            }, {
              key: "bindNetMonitorModule",
              value: function value(e) {
                oo.prototype._netMonitorModule = e;
              }
            }]),
            no = e(function e(t) {
              p(this, e), this.type = R.MSG_TEXT, this.content = {
                text: t.text || ""
              };
            }, [{
              key: "setText",
              value: function value(e) {
                this.content.text = e;
              }
            }, {
              key: "sendable",
              value: function value() {
                return 0 !== this.content.text.length;
              }
            }]);
          function oo(e) {
            p(this, oo), this._n = "SSOLogData", this.eventType = to[e] || 0, this.timestamp = 0, this.networkType = 8, this.code = 0, this.message = "", this.moreMessage = "", this.extension = e, this.costTime = 0, this.duplicate = !1, this.level = 4, this.uiPlatform = void 0, this._sentFlag = !1, this._startts = He();
          }
          function io(e) {
            p(this, io), t = i(this, io);
            var t,
              n = e.code,
              o = e.message,
              e = e.data;
            return t.code = n, o ? t.message = o : t._getErrMsg && (t.message = t._getErrMsg(t.code)), t.data = e || {}, t;
          }
          function ao(e, t, n, o) {
            var i,
              o = 3 < arguments.length && void 0 !== o ? o : [];
            return e && (i = e, t && (e.startsWith("http://") ? i = e.replace(/^http:\/\/[^/]+/, t) : e.startsWith("https://") && (i = e.replace(/^https:\/\/[^/]+/, t))), n && -1 === i.indexOf("authKey=") && co(i, o) ? (-1 < i.indexOf("?") ? "".concat(i, "&authKey=") : "".concat(i, "?authKey=")).concat(n) : i);
          }
          function so(e, t, n) {
            var o = 2 < arguments.length && void 0 !== n ? n : [],
              n = t[0].content || t[0].payload;
            return e === R.MSG_IMAGE ? n.imageInfoArray.forEach(function (e) {
              co(e.imageUrl, o) && (e.imageUrl = ro(e.imageUrl));
            }) : e === R.MSG_VIDEO ? (co(n.snapshotUrl, o) && (n.snapshotUrl = ro(n.snapshotUrl), n.thumbUrl = ro(n.thumbUrl)), co(n.remoteVideoUrl, o) && (n.remoteVideoUrl = ro(n.remoteVideoUrl))) : e === R.MSG_AUDIO ? co(n.remoteAudioUrl, o) && (n.remoteAudioUrl = ro(n.remoteAudioUrl)) : e === R.MSG_FILE ? co(n.fileUrl, o) && (n.fileUrl = ro(n.fileUrl)) : e === R.MSG_MERGER && (e = (n = t[0].content || t[0].payload).downloadKey, n = void 0 === (n = n.messageList) ? [] : n, S(void 0 === e ? "" : e)) && n.forEach(function (e) {
              so(e.messageBody[0].type, e.messageBody, o);
            }), t;
          }
          function ro(e) {
            if (!e) return e;
            if (-1 === e.indexOf("authKey=")) return e;
            for (var e = e.split("?"), t = e[1].split("&"), n = 0, o = 0; o < t.length; o++) if (-1 < t[o].indexOf("authKey=")) {
              n = o;
              break;
            }
            return t.splice(n, 1), 0 < t.length ? "".concat(e[0], "?").concat(t.join("&")) : e[0];
          }
          function co(e, t) {
            var n = !1;
            if (e) {
              var e = e.match(/:\/\/([0-9]?\.)?(.[^/:]+)/),
                o = e && e[2] || "";
              if (o.includes("rich-dev")) return 1;
              for (var i = 0; i < t.length; i++) if (o.endsWith(t[i])) {
                n = !0;
                break;
              }
            }
            return n;
          }
          var uo = e(function e(t, n, o, i) {
              p(this, e), this._imageMemoryURL = "", this._fileDownloadProxy = n, this._authKey = o, this._fileDNList = i, v || ve ? this.createImageDataASURL(t.file) : this.createImageDataASURLInWeb(t.file), this._initImageInfoModel(), this.type = R.MSG_IMAGE, this._percent = 0, this.content = {
                imageFormat: t.imageFormat || je.UNKNOWN,
                uuid: t.uuid,
                imageInfoArray: []
              }, this.initImageInfoArray(t.imageInfoArray), this._autoFixUrl();
            }, [{
              key: "_initImageInfoModel",
              value: function value() {
                var t = this;
                this._ImageInfoModel = function (e) {
                  this.instanceID = ht(9999999), this.sizeType = e.type || 0, this.type = 0, this.size = e.size || 0, this.width = e.width || 0, this.height = e.height || 0, this.imageUrl = e.imageUrl || e.url || "", this.url = ao(e.url || t._imageMemoryURL, t._fileDownloadProxy, t._authKey, t._fileDNList);
                }, this._ImageInfoModel.prototype = {
                  setSizeType: function setSizeType(e) {
                    this.sizeType = e;
                  },
                  setType: function setType(e) {
                    this.type = e;
                  },
                  setImageUrl: function setImageUrl(e) {
                    e && (this.imageUrl = ao(e, t._fileDownloadProxy, t._authKey, t._fileDNList));
                  },
                  getImageUrl: function getImageUrl() {
                    return this.imageUrl;
                  }
                };
              }
            }, {
              key: "initImageInfoArray",
              value: function value(e) {
                for (var t, n = 0, o = null; n <= 2;) t = N(e) || N(e[n]) ? {
                  type: 0,
                  size: 0,
                  width: 0,
                  height: 0,
                  url: ""
                } : e[n], (o = new this._ImageInfoModel(t)).setSizeType(n + 1), o.setType(n), this.addImageInfo(o), n++;
                this.updateAccessSideImageInfoArray();
              }
            }, {
              key: "updateImageInfoArray",
              value: function value(e) {
                for (var t, n = this.content.imageInfoArray.length, o = 0; o < n; o++) t = this.content.imageInfoArray[o], e[o].size && (t.size = e[o].size), e[o].url && t.setImageUrl(e[o].url), e[o].width && (t.width = e[o].width), e[o].height && (t.height = e[o].height);
              }
            }, {
              key: "_autoFixUrl",
              value: function value() {
                for (var e = this.content.imageInfoArray.length, t = "", n = "", o = ["http", "https"], i = null, a = 0; a < e; a++) this.content.imageInfoArray[a].url && "" !== (i = this.content.imageInfoArray[a]).imageUrl && (n = i.imageUrl.slice(0, i.imageUrl.indexOf("://") + 1), t = i.imageUrl.slice(i.imageUrl.indexOf("://") + 1), o.indexOf(n) < 0 && (n = "https:"), this.content.imageInfoArray[a].setImageUrl([n, t].join("")));
              }
            }, {
              key: "updatePercent",
              value: function value(e) {
                this._percent = e, 1 < this._percent && (this._percent = 1);
              }
            }, {
              key: "updateImageFormat",
              value: function value(e) {
                this.content.imageFormat = je[e.toUpperCase()] || je.UNKNOWN;
              }
            }, {
              key: "createImageDataASURLInWeb",
              value: function value(e) {
                void 0 !== e && 0 < e.files.length && (this._imageMemoryURL = window.URL.createObjectURL(e.files[0]));
              }
            }, {
              key: "createImageDataASURL",
              value: function value(e) {
                e && e.url && (this._imageMemoryURL = e.url);
              }
            }, {
              key: "replaceImageInfo",
              value: function value(e, t) {
                this.content.imageInfoArray[t] instanceof this._ImageInfoModel || (this.content.imageInfoArray[t] = e);
              }
            }, {
              key: "addImageInfo",
              value: function value(e) {
                3 <= this.content.imageInfoArray.length || this.content.imageInfoArray.push(e);
              }
            }, {
              key: "updateAccessSideImageInfoArray",
              value: function value() {
                var e = this.content.imageInfoArray,
                  t = e[0],
                  n = t.width,
                  n = void 0 === n ? 0 : n,
                  t = t.height,
                  t = void 0 === t ? 0 : t;
                0 !== n && 0 !== t && (Bt(e), Object.assign(e[2], Vt({
                  originWidth: n,
                  originHeight: t,
                  min: 720
                })));
              }
            }, {
              key: "sendable",
              value: function value() {
                return 0 !== this.content.imageInfoArray.length && "" !== this.content.imageInfoArray[0].imageUrl && 0 !== this.content.imageInfoArray[0].size;
              }
            }]),
            lo = e(function e(t) {
              p(this, e), this.type = R.MSG_FACE, this.content = t || null;
            }, [{
              key: "sendable",
              value: function value() {
                return null !== this.content;
              }
            }]),
            po = e(function e(t, n, o, i) {
              p(this, e), this.type = R.MSG_AUDIO, this._percent = 0, this._fileDownloadProxy = n, this._authKey = o, this._fileDNList = i, this.content = {
                downloadFlag: 2,
                second: t.second,
                size: t.size,
                url: ao(t.url, this._fileDownloadProxy, this._authKey, this._fileDNList),
                remoteAudioUrl: ao(t.url || "", this._fileDownloadProxy, this._authKey, this._fileDNList),
                uuid: t.uuid
              };
            }, [{
              key: "updatePercent",
              value: function value(e) {
                this._percent = e, 1 < this._percent && (this._percent = 1);
              }
            }, {
              key: "updateAudioUrl",
              value: function value(e) {
                this.content.remoteAudioUrl = ao(e, this._fileDownloadProxy, this._authKey, this._fileDNList);
              }
            }, {
              key: "sendable",
              value: function value() {
                return "" !== this.content.remoteAudioUrl;
              }
            }]),
            _o = {
              from: !0,
              groupID: !0,
              groupName: !0,
              to: !0
            },
            ho = e(function e(t) {
              p(this, e), this.type = R.MSG_GRP_TIP, this.content = {}, this._initContent(t);
            }, [{
              key: "_initContent",
              value: function value(t) {
                var n = this;
                Object.keys(t).forEach(function (e) {
                  switch (e) {
                    case "remarkInfo":
                      break;
                    case "groupProfile":
                      n.content.groupProfile = {}, n._initGroupProfile(t[e]);
                      break;
                    case "operatorInfo":
                      n.content.operatorInfo = {}, n._initOperatorInfo(t[e]);
                      break;
                    case "memberInfoList":
                    case "msgMemberInfo":
                      n._updateMemberList(t[e]);
                      break;
                    case "memberExtraInfo":
                    case "onlineMemberInfo":
                      break;
                    case "memberNum":
                      n.content[e] = t[e], n.content.memberCount = t[e];
                      break;
                    case "newGroupProfile":
                      n.content.newGroupProfile = {}, n._initNewGroupProfile(t[e]);
                      break;
                    default:
                      n.content[e] = t[e];
                  }
                }), this.content.userIDList || (this.content.userIDList = [this.content.operatorID]);
              }
            }, {
              key: "_initGroupProfile",
              value: function value(e) {
                for (var t = Object.keys(e), n = 0; n < t.length; n++) {
                  var o = t[n];
                  _o[o] && (this.content.groupProfile[o] = e[o]);
                }
              }
            }, {
              key: "_initOperatorInfo",
              value: function value(e) {
                for (var t = Object.keys(e), n = 0; n < t.length; n++) {
                  var o = t[n];
                  this.content.operatorInfo[o] = e[o];
                }
              }
            }, {
              key: "_updateMemberList",
              value: function value(e) {
                S(this.content.memberList) ? this.content.memberList = e : this.content.memberList.forEach(function (t) {
                  e.forEach(function (e) {
                    t.userID === e.userID && Object.assign(t, e);
                  });
                });
              }
            }, {
              key: "_initNewGroupProfile",
              value: function value(e) {
                for (var t = Object.keys(e), n = 0; n < t.length; n++) {
                  var o = t[n];
                  this.content.newGroupProfile[o] = "muteAllMembers" !== o ? e[o] : 1 === e[o];
                }
              }
            }]),
            go = {
              from: !0,
              groupID: !0,
              groupName: !0,
              to: !0,
              groupType: !0
            },
            fo = e(function e(t) {
              p(this, e), this.type = R.MSG_GRP_SYS_NOTICE, this.content = {}, this._initContent(t);
            }, [{
              key: "_initContent",
              value: function value(t) {
                var n = this;
                Object.keys(t).forEach(function (e) {
                  switch (e) {
                    case "memberInfoList":
                      break;
                    case "remarkInfo":
                      n.content.handleMessage = t[e];
                      break;
                    case "groupProfile":
                      n.content.groupProfile = {}, n._initGroupProfile(t[e]);
                      break;
                    default:
                      n.content[e] = t[e];
                  }
                });
              }
            }, {
              key: "_initGroupProfile",
              value: function value(e) {
                for (var t = Object.keys(e), n = 0; n < t.length; n++) {
                  var o = t[n];
                  go[o] && ("groupName" === o ? this.content.groupProfile.name = e[o] : this.content.groupProfile[o] = e[o]);
                }
              }
            }]),
            mo = e(function e(t, n, o, i) {
              p(this, e), this.type = R.MSG_FILE, this._percent = 0;
              var a = this._getFileInfo(t);
              this.content = {
                downloadFlag: 2,
                fileUrl: ao(t.url || t.fileUrl, n, o, i) || "",
                uuid: t.uuid,
                fileName: a.name || "",
                fileSize: a.size || 0
              };
            }, [{
              key: "_getFileInfo",
              value: function value(e) {
                var t, n;
                return N(e.fileName) || N(e.fileSize) ? (t = e.file.files[0], fe && (t.path && -1 !== t.path.indexOf(".") && (n = t.path.slice(t.path.lastIndexOf(".") + 1).toLowerCase(), t.type = n, t.name || (t.name = "".concat(ht(999999), ".").concat(n))), t.name || (t.type = "", t.name = t.path.slice(t.path.lastIndexOf("/") + 1).toLowerCase()), t.suffix && (t.type = t.suffix), t.url || (t.url = t.path)), {
                  size: t.size,
                  name: t.name
                }) : {
                  size: e.fileSize,
                  name: e.fileName
                };
              }
            }, {
              key: "updatePercent",
              value: function value(e) {
                this._percent = e, 1 < this._percent && (this._percent = 1);
              }
            }, {
              key: "updateFileUrl",
              value: function value(e) {
                this.content.fileUrl = e;
              }
            }, {
              key: "sendable",
              value: function value() {
                return "" !== this.content.fileUrl && "" !== this.content.fileName && 0 !== this.content.fileSize;
              }
            }]),
            vo = e(function e(t) {
              p(this, e), this.type = R.MSG_CUSTOM, this.content = {
                data: t.data || "",
                description: t.description || "",
                extension: t.extension || ""
              };
            }, [{
              key: "setData",
              value: function value(e) {
                return this.content.data = e, this;
              }
            }, {
              key: "setDescription",
              value: function value(e) {
                return this.content.description = e, this;
              }
            }, {
              key: "setExtension",
              value: function value(e) {
                return this.content.extension = e, this;
              }
            }, {
              key: "sendable",
              value: function value() {
                return 0 !== this.content.data.length || 0 !== this.content.description.length || 0 !== this.content.extension.length;
              }
            }]),
            Io = e(function e(t, n, o, i) {
              p(this, e), this.type = R.MSG_VIDEO, this._percent = 0, this._fileDownloadProxy = n, this._authKey = o, this._fileDNList = i, this.content = {
                remoteVideoUrl: ao(t.remoteVideoUrl || t.videoUrl || "", this._fileDownloadProxy, this._authKey, this._fileDNList),
                videoFormat: t.videoFormat,
                videoSecond: parseInt(t.videoSecond, 10),
                videoSize: t.videoSize,
                videoUrl: ao(t.videoUrl, this._fileDownloadProxy, this._authKey, this._fileDNList),
                videoDownloadFlag: 2,
                videoUUID: t.videoUUID,
                thumbUUID: t.thumbUUID,
                thumbFormat: t.thumbFormat,
                thumbWidth: t.thumbWidth,
                snapshotWidth: t.thumbWidth,
                thumbHeight: t.thumbHeight,
                snapshotHeight: t.thumbHeight,
                thumbSize: t.thumbSize,
                snapshotSize: t.thumbSize,
                thumbDownloadFlag: 2,
                thumbUrl: ao(t.thumbUrl, this._fileDownloadProxy, this._authKey, this._fileDNList),
                snapshotUrl: ao(t.thumbUrl, this._fileDownloadProxy, this._authKey, this._fileDNList)
              };
            }, [{
              key: "updatePercent",
              value: function value(e) {
                this._percent = e, 1 < this._percent && (this._percent = 1);
              }
            }, {
              key: "updateVideoUrl",
              value: function value(e) {
                e && (this.content.remoteVideoUrl = ao(e, this._fileDownloadProxy, this._authKey, this._fileDNList));
              }
            }, {
              key: "updateSnapshotInfo",
              value: function value(e) {
                var t = e.snapshotUrl,
                  n = e.snapshotWidth,
                  e = e.snapshotHeight;
                S(t) || (this.content.thumbUrl = this.content.snapshotUrl = t), S(n) || (this.content.thumbWidth = this.content.snapshotWidth = Number(n)), S(e) || (this.content.thumbHeight = this.content.snapshotHeight = Number(e));
              }
            }, {
              key: "sendable",
              value: function value() {
                return "" !== this.content.remoteVideoUrl;
              }
            }]),
            Mo = e(function e(t) {
              p(this, e), this.type = R.MSG_LOCATION;
              var n = t.description,
                o = t.longitude,
                t = t.latitude;
              this.content = {
                description: n,
                longitude: o,
                latitude: t
              };
            }, [{
              key: "sendable",
              value: function value() {
                return !0;
              }
            }]),
            yo = e(function e(t, n, o, i) {
              var a, s;
              p(this, e), this.from = t.from, this.messageSender = t.from, this.time = t.time, this.messageSequence = t.sequence, this.clientSequence = t.clientSequence || t.sequence, this.messageRandom = t.random, this.cloudCustomData = t.cloudCustomData || "", this.clientTime = t.clientTime || void 0, t.ID ? (this.ID = t.ID || "", this.nick = t.nick || "", this.avatar = t.avatar || "", t.messageBody ? this.messageBody = JSON.parse(JSON.stringify(t.messageBody)) : this.messageBody = [{
                type: t.type,
                payload: t.payload
              }], t.conversationType ? t.conversationType.startsWith(R.CONV_C2C) ? this.receiverUserID = t.to : t.conversationType.startsWith(R.CONV_GROUP) && (this.receiverGroupID = t.to) : t.receiverGroupID ? this.receiverGroupID = t.receiverGroupID : t.receiverUserID && (this.receiverUserID = t.receiverUserID), this.messageReceiver = t.to || t.messageReceiver) : (this.nick = t.nick || "", this.avatar = t.avatar || "", this.messageBody = [], a = t.elements[0].type, s = t.elements[0].content, this._patchRichMediaPayload(a, s), this._updateRichMediaDownloadUrl(a, s, n, o, i), a === R.MSG_MERGER ? this.messageBody.push({
                type: a,
                payload: new Co(s, n, o, i).content
              }) : this.messageBody.push({
                type: a,
                payload: s
              }), t.groupID && (this.receiverGroupID = t.groupID, this.messageReceiver = t.groupID), t.to && (this.receiverUserID = t.to, this.messageReceiver = t.to), this.ID = "".concat(t.tinyID, "-").concat(t.clientTime, "-").concat(t.random));
            }, [{
              key: "_patchRichMediaPayload",
              value: function value(e, t) {
                e === R.MSG_IMAGE ? t.imageInfoArray.forEach(function (e) {
                  !e.imageUrl && e.url && (e.imageUrl = e.url, e.sizeType = e.type, 1 === e.type ? e.type = 0 : 3 === e.type && (e.type = 1));
                }) : e === R.MSG_VIDEO ? !t.remoteVideoUrl && t.videoUrl && (t.remoteVideoUrl = t.videoUrl) : e === R.MSG_AUDIO ? !t.remoteAudioUrl && t.url && (t.remoteAudioUrl = t.url) : e === R.MSG_FILE && !t.fileUrl && t.url && (t.fileUrl = t.url, t.url = void 0);
              }
            }, {
              key: "_updateRichMediaDownloadUrl",
              value: function value(e, t, n, o, i) {
                (n || o) && (e === R.MSG_IMAGE ? t.imageInfoArray.forEach(function (e) {
                  e.imageUrl = ao(e.imageUrl, n, o, i), e.url = ao(e.url, n, o, i);
                }) : e === R.MSG_VIDEO ? (t.remoteVideoUrl = ao(t.remoteVideoUrl, n, o, i), t.videoUrl = ao(t.videoUrl, n, o, i), t.thumbUrl = ao(t.thumbUrl, n, o, i), t.snapshotUrl = ao(t.thumbUrl, n, o, i), t.snapshotHeight = t.thumbHeight, t.snapshotWidth = t.thumbWidth) : e === R.MSG_AUDIO ? (t.remoteAudioUrl = ao(t.remoteAudioUrl, n, o, i), t.url = ao(t.url, n, o, i)) : e === R.MSG_FILE && (t.fileUrl = ao(t.fileUrl, n, o, i)));
              }
            }]),
            Co = e(function e(t, n, o, i) {
              var a, s, r, c, u, l, d;
              p(this, e), this.type = R.MSG_MERGER, this.content = {
                downloadKey: "",
                pbDownloadKey: "",
                messageList: [],
                title: "",
                abstractList: [],
                compatibleText: "",
                version: 0,
                layersOverLimit: !1
              }, t.downloadKey ? (s = t.downloadKey, r = t.pbDownloadKey, c = t.title, u = t.abstractList, l = t.compatibleText, a = t.version, this.content.downloadKey = s, this.content.pbDownloadKey = r, this.content.title = c, this.content.abstractList = u, this.content.compatibleText = l, this.content.version = a || 0) : S(t.messageList) ? 1 === t.layersOverLimit && (this.content.layersOverLimit = !0) : (s = t.messageList, r = t.title, c = t.abstractList, u = t.compatibleText, l = t.version, d = [], s.forEach(function (e) {
                S(e) || (e = new yo(e, n, o, i), d.push(e));
              }), this.content.messageList = d, this.content.title = r, this.content.abstractList = c, this.content.compatibleText = u, this.content.version = l || 0);
            }, [{
              key: "sendable",
              value: function value() {
                return !S(this.content.messageList) || !S(this.content.downloadKey);
              }
            }]),
            To = {
              1: R.MSG_PRIORITY_HIGH,
              2: R.MSG_PRIORITY_NORMAL,
              3: R.MSG_PRIORITY_LOW,
              4: R.MSG_PRIORITY_LOWEST
            },
            Do = e(function e(t) {
              p(this, e), this.ID = "", this.conversationID = t.conversationID || null, this.conversationType = t.conversationType || R.CONV_C2C, this.conversationSubType = t.conversationSubType, this.time = t.time || Math.ceil(Date.now() / 1e3), this.sequence = t.sequence || 0, this.clientSequence = t.clientSequence || t.sequence || 0, this.random = t.random || 0 === t.random ? t.random : ht(), this.priority = this._computePriority(t.priority), this.nick = t.nick || "", this.avatar = t.avatar || "", this.isPeerRead = !1, this.nameCard = "", this.hasRiskContent = nn(t.checkResult), this._elements = [], this.isPlaceMessage = t.isPlaceMessage || 0, this.isRevoked = 2 === t.isPlaceMessage || 8 === t.msgFlagBits, this.from = t.from || null, this.to = t.to || null, this.flow = "", this.isSystemMessage = t.isSystemMessage || !1, this.protocol = t.protocol || "JSON", this.isResend = !1, this.isRead = !1, this.status = t.status || On, this._onlineOnlyFlag = !1, this._groupAtInfoList = [], this._relayFlag = !1, this.atUserList = [], this.cloudCustomData = t.cloudCustomData || "", this.isDeleted = !1, this.isModified = !!t.messageVersion, this._isExcludedFromUnreadCount = !(!t.messageControlInfo || 1 !== t.messageControlInfo.excludedFromUnreadCount), this._isExcludedFromLastMessage = !(!t.messageControlInfo || 1 !== t.messageControlInfo.excludedFromLastMessage), this.clientTime = t.clientTime || xe() || 0, this.senderTinyID = t.senderTinyID || t.tinyID || "", this.readReceiptInfo = t.readReceiptInfo || {
                readCount: void 0,
                unreadCount: void 0,
                isPeerRead: void 0,
                timestamp: 0
              }, this.needReadReceipt = !0 === t.needReadReceipt || 1 === t.needReadReceipt, this.version = t.messageVersion || 0, this.isBroadcastMessage = t.isBroadcastMessage || !1, this._receiverList = t.receiverList || void 0, this.isSupportExtension = !0 === t.isSupportExtension || 1 === t.isSupportExtension, this._cmConfigID = t.customModerationConfigurationID, this.revoker = t.revokerInfo && t.revokerInfo.revoker || "", this.revokerInfo = t.revokerInfo || {
                userID: "",
                nick: "",
                avatar: ""
              }, this.revokeReason = t.revokeReason || "", this.reInitialize(t.currentUser), this.extractGroupInfo(t.groupProfile || null), this.handleGroupAtInfo(t), this.initC2CReadReceiptInfo(t);
            }, [{
              key: "elements",
              get: function get() {
                return this._elements;
              }
            }, {
              key: "getElements",
              value: function value() {
                return this._elements;
              }
            }, {
              key: "extractGroupInfo",
              value: function value(e) {
                null !== e && (C(e.nick) && (this.nick = e.nick), C(e.avatar) && (this.avatar = e.avatar), e = e.messageFromAccountExtraInformation, m(e)) && C(e.nameCard) && (this.nameCard = e.nameCard);
              }
            }, {
              key: "handleGroupAtInfo",
              value: function value(e) {
                var t = this;
                e.payload && e.payload.atUserList && e.payload.atUserList.forEach(function (e) {
                  e !== R.MSG_AT_ALL ? (t._groupAtInfoList.push({
                    groupAtAllFlag: 0,
                    groupAtUserID: e
                  }), t.atUserList.push(e)) : (t._groupAtInfoList.push({
                    groupAtAllFlag: 1
                  }), t.atUserList.push(R.MSG_AT_ALL));
                }), O(e.groupAtInfo) && e.groupAtInfo.forEach(function (e) {
                  0 === e.groupAtAllFlag ? t.atUserList.push(e.groupAtUserID) : 1 === e.groupAtAllFlag && t.atUserList.push(R.MSG_AT_ALL);
                });
              }
            }, {
              key: "getGroupAtInfoList",
              value: function value() {
                return this._groupAtInfoList;
              }
            }, {
              key: "_initProxy",
              value: function value() {
                this._elements[0] && (this.payload = this._elements[0].content, this.type = this._elements[0].type);
              }
            }, {
              key: "reInitialize",
              value: function value(e) {
                e && (this.status = this.from ? On : An, !this.from) && (this.from = e), this._initFlow(e), this._initSequence(e), this._concatConversationID(e), this.generateMessageID();
              }
            }, {
              key: "isSendable",
              value: function value() {
                return 0 !== this._elements.length && (!0 === this._relayFlag || "function" == typeof this._elements[0].sendable && this._elements[0].sendable());
              }
            }, {
              key: "_initTo",
              value: function value(e) {
                this.conversationType === R.CONV_GROUP && (this.to = e.groupID);
              }
            }, {
              key: "_initSequence",
              value: function value(e) {
                var t, n, o;
                0 === this.clientSequence && e && (this.clientSequence = !!(e = e) && (void 0 === Et[e] && (o = new Date(), t = "3".concat(o.getHours()).slice(-2), n = "0".concat(o.getMinutes()).slice(-2), o = "0".concat(o.getSeconds()).slice(-2), Et[e] = parseInt([t, n, o, "0001"].join("")), o = n = t = null, M.l("autoIncrementIndex start index:".concat(Et[e]))), Et[e]++)), 0 === this.sequence && this.conversationType === R.CONV_C2C && (this.sequence = this.clientSequence);
              }
            }, {
              key: "generateMessageID",
              value: function value() {
                this.from === R.CONV_SYSTEM && (this.senderTinyID = "144115198244471703"), this.ID = "".concat(this.senderTinyID, "-").concat(this.clientTime, "-").concat(this.random);
              }
            }, {
              key: "_initFlow",
              value: function value(e) {
                "" !== e && (e === this.from ? (this.flow = "out", this.isRead = !0) : this.flow = "in");
              }
            }, {
              key: "_concatConversationID",
              value: function value(e) {
                var t = this.to,
                  n = this.conversationType;
                n !== R.CONV_SYSTEM ? (e = n === R.CONV_C2C ? e === this.from ? t : this.from : this.to, this.conversationID = e ? "".concat(n).concat(e) : null) : this.conversationID = R.CONV_SYSTEM;
              }
            }, {
              key: "isElement",
              value: function value(e) {
                return e instanceof no || e instanceof uo || e instanceof lo || e instanceof po || e instanceof mo || e instanceof Io || e instanceof ho || e instanceof fo || e instanceof vo || e instanceof Mo || e instanceof Co;
              }
            }, {
              key: "setElement",
              value: function value(e, t, n, o) {
                var i = this;
                if (this.isElement(e)) this._elements = [e];else {
                  var a = function a(e) {
                    if (e.type && e.content) switch (e.type) {
                      case R.MSG_TEXT:
                        i.setTextElement(e.content);
                        break;
                      case R.MSG_IMAGE:
                        i.setImageElement(e.content, t, n, o);
                        break;
                      case R.MSG_AUDIO:
                        i.setAudioElement(e.content, t, n, o);
                        break;
                      case R.MSG_FILE:
                        i.setFileElement(e.content, t, n, o);
                        break;
                      case R.MSG_VIDEO:
                        i.setVideoElement(e.content, t, n, o);
                        break;
                      case R.MSG_CUSTOM:
                        i.setCustomElement(e.content);
                        break;
                      case R.MSG_LOCATION:
                        i.setLocationElement(e.content);
                        break;
                      case R.MSG_GRP_TIP:
                        i.setGroupTipElement(e.content);
                        break;
                      case R.MSG_GRP_SYS_NOTICE:
                        i.setGroupSystemNoticeElement(e.content);
                        break;
                      case R.MSG_FACE:
                        i.setFaceElement(e.content);
                        break;
                      case R.MSG_MERGER:
                        i.setMergerElement(e.content, t, n, o);
                    }
                  };
                  if (O(e)) for (var s = 0; s < e.length; s++) a(e[s]);else a(e);
                }
                this._initProxy();
              }
            }, {
              key: "clearElement",
              value: function value() {
                this._elements.length = 0;
              }
            }, {
              key: "setTextElement",
              value: function value(e) {
                e = "string" == typeof e ? e : e.text, e = new no({
                  text: e
                });
                this._elements.push(e);
              }
            }, {
              key: "setImageElement",
              value: function value(e, t, n, o) {
                e = new uo(e, t, n, o);
                this._elements.push(e);
              }
            }, {
              key: "setAudioElement",
              value: function value(e, t, n, o) {
                e = new po(e, t, n, o);
                this._elements.push(e);
              }
            }, {
              key: "setFileElement",
              value: function value(e, t, n, o) {
                e = new mo(e, t, n, o);
                this._elements.push(e);
              }
            }, {
              key: "setVideoElement",
              value: function value(e, t, n, o) {
                e = new Io(e, t, n, o);
                this._elements.push(e);
              }
            }, {
              key: "setLocationElement",
              value: function value(e) {
                e = new Mo(e);
                this._elements.push(e);
              }
            }, {
              key: "setCustomElement",
              value: function value(e) {
                e = new vo(e);
                this._elements.push(e);
              }
            }, {
              key: "setGroupTipElement",
              value: function value(e) {
                var t,
                  n = {},
                  o = e.operationType;
                S(e.memberInfoList) ? e.operatorInfo && (n = e.operatorInfo) : o !== R.GRP_TIP_MBR_JOIN && o !== R.GRP_TIP_MBR_KICKED_OUT && o !== R.GRP_TIP_MBR_SET_ADMIN && o !== R.GRP_TIP_MBR_CANCELED_ADMIN || (n = e.memberInfoList[0]), S(e.memberExtraInfo) || (t = e.memberExtraInfo.reason, e.msgMemberInfo.forEach(function (e) {
                  e.reason = t;
                }));
                o = n.nick, n = n.avatar, C(o) && (this.nick = o), C(n) && (this.avatar = n), o = new ho(e);
                this._elements.push(o);
              }
            }, {
              key: "setGroupSystemNoticeElement",
              value: function value(e) {
                e = new fo(e);
                this._elements.push(e);
              }
            }, {
              key: "setFaceElement",
              value: function value(e) {
                e = new lo(e);
                this._elements.push(e);
              }
            }, {
              key: "setMergerElement",
              value: function value(e, t, n, o) {
                e = new Co(e, t, n, o);
                this._elements.push(e);
              }
            }, {
              key: "setIsRead",
              value: function value(e) {
                this.isRead = e;
              }
            }, {
              key: "setRelayFlag",
              value: function value(e) {
                this._relayFlag = e;
              }
            }, {
              key: "_computePriority",
              value: function value(e) {
                if (!N(e)) {
                  if (C(e) && -1 !== Object.values(To).indexOf(e)) return e;
                  if (A(e)) {
                    e = "" + e;
                    if (-1 !== Object.keys(To).indexOf(e)) return To[e];
                  }
                }
                return R.MSG_PRIORITY_NORMAL;
              }
            }, {
              key: "setNickAndAvatar",
              value: function value(e) {
                var t = e.nick,
                  e = e.avatar;
                C(t) && (this.nick = t), C(e) && (this.avatar = e);
              }
            }, {
              key: "setNameCard",
              value: function value(e) {
                C(e) && (this.nameCard = e);
              }
            }, {
              key: "initC2CReadReceiptInfo",
              value: function value(e) {
                var t = e.readReceiptSentByPeer,
                  e = e.timestamp,
                  e = void 0 === e ? 0 : e;
                this.conversationType === R.CONV_C2C && !0 === this.needReadReceipt && (this.readReceiptInfo.isPeerRead = 1 === (void 0 === t ? void 0 : t), this.readReceiptInfo.timestamp = e);
              }
            }]),
            Eo = ["sound", "FCMChannelID"];
          function Lo(e) {
            if (m(e)) return {
              pushFlag: !0 === e.disablePush ? 1 : 0,
              title: e.title || "",
              desc: e.description || "",
              ext: e.extension || "",
              apnsInfo: (n = void 0 === (n = (t = e).apnsInfo) ? {} : n, o = t.ignoreIOSBadge, t = t.disableVoipPush, o = !0 === n.ignoreIOSBadge || !0 === (void 0 !== o && o) ? 1 : 0, i = void 0, N(t) || (i = !1 === t ? 1 : 0), N(n.disableVoipPush) || (i = !1 === n.disableVoipPush ? 1 : 0), y(y({}, n), {}, {
                badgeMode: o,
                isVoipPush: i
              })),
              androidInfo: (n = void 0 === (n = (t = e).androidInfo) ? {} : n, t = t.androidOPPOChannelID, t = n.OPPOChannelID || (void 0 === t ? "" : t), o = void 0 === (o = n.sound) ? "" : o, i = void 0 === (i = n.FCMChannelID) ? "" : i, y(y({}, W(n, Eo)), {}, {
                Sound: -1 === (o = (n = o).lastIndexOf(".")) ? n : n.slice(0, o),
                OPPOChannelID: t,
                GoogleChannelID: i
              }))
            };
            var t, n, o, i;
          }
          t(Ro, c);
          var So = e(Ro, [{
              key: "onNewMessage",
              value: function value(e) {
                var t = e.dataList,
                  n = e.isInstantMessage,
                  o = e.C2CRemainingUnreadList,
                  i = e.C2CPairUnreadList,
                  e = e.isSyncingEnded,
                  t = (n || M.l("".concat(this._n, ".onNewMessage C2CPairUnreadList:"), i, "C2CRemainingUnreadList:", o), this._assembly({
                    dataList: t,
                    C2CRemainingUnreadList: o,
                    C2CPairUnreadList: i,
                    isInstantMessage: n
                  })),
                  o = t.conversationOptionsList,
                  i = t.messageList,
                  t = t.isUnreadC2CMessage,
                  a = St(i),
                  a = (0 < a.length && this.emitOEvt(h.MESSAGE_MODIFIED, a), this.get(11).onNewMessage({
                    conversationOptionsList: o,
                    isInstantMessage: n,
                    isUnreadC2CMessage: t,
                    isSyncingEnded: e
                  }), Rt(i));
                n && 0 < a.length && this.emitOEvt(h.MESSAGE_RECEIVED, a), i.length = 0;
              }
            }, {
              key: "_assembly",
              value: function value(e) {
                for (var t = e.dataList, n = e.C2CRemainingUnreadList, o = e.C2CPairUnreadList, i = e.isInstantMessage, a = null, s = [], r = [], c = {}, u = this.get(26), l = !1, d = this.get(11), p = this.get(4), e = this.get(17), _ = this.getFileDownloadProxy(), h = this.getDownloadFileAuthKey(), g = e.getFileDNList(), f = 0, m = t.length; f < m; f++) if (this._isC2CNotice(t[f])) this._noticeFromUnreadDBList.push(t[f].eventArray[0].c2CNotifyMsgArray[0]);else {
                  var v = t[f],
                    I = (v.currentUser = this.getMyUserID(), v.conversationType = R.CONV_C2C, v.isSystemMessage = !!v.isSystemMessage, (N(v.nick) || N(v.avatar)) && (l = !0), (a = new Do(v)).setElement(v.elements, _, h, g), a.setNickAndAvatar({
                      nick: v.nick,
                      avatar: v.avatar
                    }), a.conversationID);
                  if (i) {
                    if (this._msgFromUnreadDBMap.get(a.ID)) continue;
                    var M,
                      y,
                      C = !1,
                      T = (a.from !== this.getMyUserID() ? (y = d.getLatestMessageSentByPeer(I)) && (M = y.nick, y = y.avatar, l ? a.setNickAndAvatar({
                        nick: M,
                        avatar: y
                      }) : M === a.nick && y === a.avatar || (C = !0)) : (M = d.getLatestMessageSentByMe(I)) && (y = M.nick, T = M.avatar, y === a.nick && T === a.avatar || (d.modifyMessageSentByMe({
                        conversationID: I,
                        latestNick: a.nick,
                        latestAvatar: a.avatar
                      }), p.mockOnNickAvatarModified(a.nick, a.avatar))), 1 === t[f].isModified);
                    if (d.isMessageSentByCurrentInstance(a) ? a.isModified = T : T = !1, 0 === v.msgLifeTime) a._onlineOnlyFlag = !0, d.isMessageSentByCurrentInstance(a) || r.push(a);else {
                      if (!d.pushIntoMessageList(r, a, T)) continue;
                      C && (d.modifyMessageSentByPeer({
                        conversationID: I,
                        latestNick: a.nick,
                        latestAvatar: a.avatar
                      }), d.updateUserProfileSpecifiedKey({
                        conversationID: I,
                        nick: a.nick,
                        avatar: a.avatar
                      }));
                    }
                    i && 0 < a.clientTime && u.addMessageDelay(a.clientTime);
                  } else this._msgFromUnreadDBMap.set(a.ID, a);
                  if (0 !== v.msgLifeTime) {
                    if (!1 === a._onlineOnlyFlag) {
                      C = d.getLastMessageTime(I);
                      if (A(C) && a.time < C) continue;
                      i && (N(c[I]) ? (v = 0, "in" !== a.flow || a._isExcludedFromUnreadCount || (v = 1), c[I] = s.push({
                        conversationID: I,
                        unreadCount: v,
                        type: a.conversationType,
                        subType: a.conversationSubType,
                        lastMessage: a._isExcludedFromLastMessage ? "" : a
                      }) - 1) : (v = c[I], s[v].type = a.conversationType, s[v].subType = a.conversationSubType, s[v].lastMessage = a._isExcludedFromLastMessage ? "" : a, "in" !== a.flow || a._isExcludedFromUnreadCount || s[v].unreadCount++));
                    }
                  } else a._onlineOnlyFlag = !0;
                }
                this._handleNoticeFromUnreadDB();
                var D = !1;
                if (O(o) && 0 < o.length) for (var E = 0, L = o.length; E < L; E++) !function (t) {
                  if (o[t].from === R.CONV_SYSTEM) return;
                  D = !0;
                  var e = s.find(function (e) {
                    return e.conversationID === "".concat(R.CONV_C2C).concat(o[t].from);
                  });
                  e ? e.unreadCount = o[t].unreadCount : s.push({
                    conversationID: "".concat(R.CONV_C2C).concat(o[t].from),
                    unreadCount: o[t].unreadCount,
                    type: R.CONV_C2C
                  });
                }(E);
                if (O(n)) for (var S = 0, k = n.length; S < k; S++) !function (t) {
                  s.find(function (e) {
                    return e.conversationID === "".concat(R.CONV_C2C).concat(n[t].from);
                  }) || s.push({
                    conversationID: "".concat(R.CONV_C2C).concat(n[t].from),
                    type: R.CONV_C2C,
                    lastMsgTime: n[t].lastMsgTime
                  });
                }(S);
                return {
                  conversationOptionsList: s,
                  messageList: r,
                  isUnreadC2CMessage: D
                };
              }
            }, {
              key: "getMessageListFromUnreadDB",
              value: function value() {
                return d(this._msgFromUnreadDBMap.values());
              }
            }, {
              key: "_isC2CNotice",
              value: function value(e) {
                e = e.eventArray;
                return !(!O(e) || 10 !== e[0].event);
              }
            }, {
              key: "_handleNoticeFromUnreadDB",
              value: function value() {
                var t,
                  e = this._noticeFromUnreadDBList.length;
                0 !== e && (M.l("".concat(this._n, "._handleNoticeFromUnreadDB count:").concat(e)), t = [], this._noticeFromUnreadDBList.forEach(function (e) {
                  e.hasOwnProperty("c2cMessageRevokedNotify") && t.push(e);
                }), this.onMsgRevoked({
                  dataList: t
                }), this._noticeFromUnreadDBList.length = 0, t.length = 0);
              }
            }, {
              key: "onMsgRevoked",
              value: function value(e, t) {
                var a,
                  s = this,
                  r = this.get(11),
                  c = [];
                e.dataList.forEach(function (e) {
                  e.c2cMessageRevokedNotify && (e = e.c2cMessageRevokedNotify.revokedInfos, N(e) || e.forEach(function (e) {
                    var t = s.getMyUserID() === e.from ? "".concat(R.CONV_C2C).concat(e.to) : "".concat(R.CONV_C2C).concat(e.from);
                    a = r.revoke(t, e.sequence, e.random);
                    var n,
                      o = e.revokerInfo && e.revokerInfo.revoker,
                      i = e.revokerInfo && e.revokerInfo.reason || "";
                    a ? n = a : (n = {
                      conversationID: t,
                      sequence: e.sequence
                    }, e.tinyID && e.clientTime && e.random && (n.ID = "".concat(e.tinyID, "-").concat(e.clientTime, "-").concat(e.random)), e.time && (n.time = e.time)), n && (n.revoker = o, n.revokeReason = i, n.revokerInfo = {
                      userID: o,
                      nick: "",
                      avatar: ""
                    }, c.push(n));
                  }));
                }), 0 !== c.length && (M.l("".concat(this._n, ".onMsgRevoked count:").concat(c.length, " updateUnreadCount:").concat(t)), r.onMessageRevoked(c, t), r.updateRevokerInfo(c).then(function (e) {
                  s.emitOEvt(h.MESSAGE_REVOKED, e);
                }));
              }
            }, {
              key: "onMsgReadReceipt",
              value: function value(e) {
                var i = this;
                e.dataList.forEach(function (e) {
                  var o;
                  S(e.c2cMessageReadReceipt) || (o = e.c2cMessageReadReceipt.to, e.c2cMessageReadReceipt.uinPairReadArray.forEach(function (e) {
                    var e = e.peerReadTime,
                      t = (M.l("".concat(i._n, ".onMsgReadReceipt to:").concat(o, " peerReadTime:").concat(e)), "".concat(R.CONV_C2C).concat(o)),
                      n = i.get(11);
                    n.recordPeerReadTime(t, e), n.updateMsgIsPeerReadProp(t, e);
                  }));
                });
              }
            }, {
              key: "onMsgReadNotice",
              value: function value(e) {
                var o = this;
                e.dataList.forEach(function (e) {
                  var n;
                  S(e.c2cMessageReadNotice) || (n = o.get(11), e.c2cMessageReadNotice.uinPairReadArray.forEach(function (e) {
                    var t = e.from,
                      e = e.peerReadTime,
                      t = (M.l("".concat(o._n, ".onMsgReadNotice from:").concat(t, " lastReadTime:").concat(e)), "".concat(R.CONV_C2C).concat(t));
                    n.updateIsReadAfterReadReport({
                      conversationID: t,
                      lastMessageTime: e
                    }), n.updateUnreadCount(t);
                  }));
                });
              }
            }, {
              key: "onMsgModified",
              value: function value(e) {
                M.l("".concat(this._n, ".onMsgModified options:"), e);
                var t = this.get(11);
                e.dataList.forEach(function (e) {
                  t.onMessageModified(y(y({}, e), {}, {
                    conversationType: R.CONV_C2C
                  }));
                });
              }
            }, {
              key: "onReadReceiptList",
              value: function value(e) {
                M.l("".concat(this._n, ".onReadReceiptList options:"), e), this.get(11).updateReadReceiptInfo(e.dataList);
              }
            }, {
              key: "sendMessage",
              value: function value(e, t) {
                e = this._createC2CMessagePack(e, t);
                return this.req(e);
              }
            }, {
              key: "_createC2CMessagePack",
              value: function value(e, t) {
                var n = null,
                  o = (t && (t.offlinePushInfo && (n = t.offlinePushInfo), !0 === t.onlineUserOnly) && (n ? n.disablePush = !0 : n = {
                    disablePush: !0
                  }), ""),
                  i = (C(e.cloudCustomData) && 0 < e.cloudCustomData.length && (o = e.cloudCustomData), []),
                  a = (m(t) && m(t.messageControlInfo) && (a = (r = t.messageControlInfo).excludedFromUnreadCount, s = r.excludedFromLastMessage, r = r.excludedFromContentModeration, !0 === a && i.push("NoUnread"), !0 === s && i.push("NoLastMsg"), !0 === r) && i.push("NoMsgCheck"), this.isOnlineMessage(e, t) ? 0 : void 0),
                  s = JSON.parse(JSON.stringify(e.getElements())),
                  r = this.get(17).getFileDNList();
                return {
                  P: G.SEND_C2C_MSG,
                  data: {
                    fromAccount: this.getMyUserID(),
                    toAccount: e.to,
                    msgBody: so(e.type, s, r),
                    cloudCustomData: o,
                    msgSeq: e.sequence,
                    msgRandom: e.random,
                    msgLifeTime: a,
                    nick: e.nick,
                    avatar: e.avatar,
                    offlinePushInfo: Lo(n),
                    messageControlInfo: 0 !== a ? i : void 0,
                    clientTime: e.clientTime,
                    needReadReceipt: !0 === e.needReadReceipt ? 1 : 0,
                    isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                    isRelayMessage: !0 === e._relayFlag ? 1 : 0,
                    cmConfigID: e._cmConfigID,
                    forbidCallbackControl: kt(t)
                  }
                };
              }
            }, {
              key: "isOnlineMessage",
              value: function value(e, t) {
                return !(!t || !0 !== t.onlineUserOnly);
              }
            }, {
              key: "revokeMessage",
              value: function value(e) {
                return this.req({
                  P: G.REVOKE_C2C_MSG,
                  data: {
                    msgInfo: {
                      fromAccount: e.from,
                      toAccount: e.to,
                      msgSeq: e.sequence,
                      msgRandom: e.random,
                      msgTimeStamp: e.time
                    }
                  }
                });
              }
            }, {
              key: "deleteMessage",
              value: function value(e) {
                var t = e.to,
                  e = e.keyList;
                return M.l("".concat(this._n, ".deleteMessage toAccount:").concat(t, " count:").concat(e.length)), this.req({
                  P: G.DEL_C2C_MSG,
                  data: {
                    fromAccount: this.getMyUserID(),
                    to: t,
                    keyList: e
                  }
                });
              }
            }, {
              key: "modifyRemoteMessage",
              value: function value(e) {
                var t = e.from,
                  n = e.to,
                  o = e.version,
                  o = void 0 === o ? 0 : o,
                  i = e.sequence,
                  a = e.random,
                  s = e.time,
                  r = e.payload,
                  c = e.type,
                  u = e.cloudCustomData,
                  e = e._elements,
                  l = void 0;
                return zt(c) && (1 < e.length && e.splice(0, 1, {
                  type: c,
                  content: r
                }), l = e), this.req({
                  P: G.MODIFY_C2C_MSG,
                  data: {
                    from: t,
                    to: n,
                    version: o,
                    sequence: i,
                    random: a,
                    time: s,
                    elements: l,
                    cloudCustomData: u
                  }
                });
              }
            }, {
              key: "setMessageRead",
              value: function value(e) {
                var t = this,
                  n = e.conversationID,
                  o = e.lastMessageTime,
                  i = "".concat(this._n, ".").concat("setMessageRead"),
                  e = "convID:".concat(n, " lastMessageTime:").concat(o),
                  a = (M.l("".concat(i, " ").concat(e)), A(o) || this.warn("DoNotModifyLastTime"), new P("setMessageRead"));
                return a.setMessage(e), this.req({
                  P: G.SET_C2C_MSG_READ,
                  data: {
                    C2CMsgReaded: {
                      cookie: "",
                      C2CMsgReadedItem: [{
                        toAccount: n.replace("C2C", ""),
                        lastMessageTime: o,
                        receipt: 1
                      }]
                    }
                  }
                }).then(function () {
                  a.end(), M.l("".concat(i, " ok"));
                  var e = t.get(11);
                  return e.updateIsReadAfterReadReport({
                    conversationID: n,
                    lastMessageTime: o
                  }), e.updateUnreadCount(n), T();
                })["catch"](function (e) {
                  return a.setError(e).end(), M.l("".concat(i, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getRoamingMessage",
              value: function value(e) {
                var s = this,
                  r = "".concat(this._n, ".").concat("getRoamingMessage"),
                  t = e.peerAccount,
                  c = e.conversationID,
                  n = e.count,
                  o = e.lastMessageTime,
                  e = e.messageKey,
                  u = "peerAccount:".concat(t, " count:").concat(n || 15, " lastMessageTime:").concat(o || 0, " messageKey:").concat(e),
                  l = (M.l("".concat(r, " ").concat(u)), new P("getRoamingMessage"));
                return this.req({
                  P: G.GET_C2C_ROAMING_MSG,
                  data: {
                    peerAccount: t,
                    count: n || 15,
                    lastMessageTime: o || 0,
                    messageKey: e
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.complete,
                    n = e.messageList,
                    o = e.messageKey,
                    e = e.lastMessageTime,
                    i = (N(n) ? M.l("".concat(r, " ok. complete:").concat(t, " but messageList is undefined!")) : M.l("".concat(r, " ok. complete:").concat(t, " count:").concat(n.length)), l.setMessage("".concat(u, " complete:").concat(t, " length:").concat(n.length)).end(), s.get(11)),
                    t = 1 === t,
                    a = (t && i.setCompleted(c), []),
                    n = i.onRoamingMessage(n, c, !0, a),
                    o = (i.modifyMessageList(c), i.updateIsRead(c), i.updateRoamingMsgKeyAndTime(c, o, e), i.getPeerReadTime(c)),
                    o = (M.l("".concat(r, " update isPeerRead property. convID:").concat(c, " peerReadTime:").concat(o)), o ? i.updateMsgIsPeerReadProp(c, o) : (e = c.replace(R.CONV_C2C, ""), s.getRemotePeerReadTime([e]).then(function () {
                      i.updateMsgIsPeerReadProp(c, i.getPeerReadTime(c));
                    })), "");
                  return 0 < n.length ? o = n[0].ID : (e = i.getLocalOldestMessage(c)) && (o = e.ID), M.l("".concat(r, " nextReqID:").concat(o, " storedMsgCount:").concat(n.length)), {
                    nextReqID: o,
                    storedMessageList: n,
                    assembledMessageList: a,
                    isPullingCompleted: t
                  };
                })["catch"](function (e) {
                  return l.setMessage(u).setError(e).end(), M.w("".concat(r, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getRoamingMessagesHopping",
              value: function value(e) {
                var a = this,
                  s = "".concat(this._n, ".").concat("getRoamingMessagesHopping"),
                  t = e.peerAccount,
                  n = e.time,
                  n = void 0 === n ? 0 : n,
                  o = e.count,
                  r = e.direction,
                  c = "".concat(R.CONV_C2C).concat(t),
                  u = "peerAccount:".concat(t, " count:").concat(o, " time:").concat(n, " direction:").concat(r),
                  l = (M.l("".concat(s, " ").concat(u)), new P("getRoamingMessagesHopping"));
                return this.req({
                  P: G.GET_C2C_ROAMING_MSG,
                  data: {
                    peerAccount: t,
                    count: o + 1,
                    lastMessageTime: n,
                    direction: r
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.complete,
                    n = e.messageList,
                    n = void 0 === n ? [] : n,
                    e = e.lastMessageTime,
                    o = "complete:".concat(t, " count:").concat(n.length),
                    i = (M.l("".concat(s, " ok. ").concat(o)), l.setMessage("".concat(u, " ").concat(o)).end(), 1 !== t && (1 === r ? n.pop() : n.shift()), a.get(11)),
                    o = i.onRoamingMessage(n, c, !1),
                    n = (a._modifyMessageList(c, o), a._computeResult({
                      complete: t,
                      lastMessageTime: e,
                      resultList: o
                    })),
                    t = (i.storeHoppingMessageList(n.messageList), i.getPeerReadTime(c));
                  return M.l("".concat(s, " update isPeerRead property. convID:").concat(c, " peerReadTime:").concat(t)), t ? i.updateMsgIsPeerReadProp(c, t) : (e = c.replace(R.CONV_C2C, ""), a.getRemotePeerReadTime([e]).then(function () {
                    i.updateMsgIsPeerReadProp(c, i.getPeerReadTime(c));
                  })), T(n);
                })["catch"](function (e) {
                  return l.setMessage(u).setError(e).end(), M.w("".concat(s, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_computeResult",
              value: function value(e) {
                var t = e.complete,
                  t = void 0 === t ? 0 : t,
                  n = e.lastMessageTime,
                  e = e.resultList,
                  e = {
                    messageList: d(void 0 === e ? [] : e),
                    isCompleted: !1,
                    nextMessageTime: ""
                  };
                return 1 === t ? e.isCompleted = !0 : e.nextMessageTime = n, e;
              }
            }, {
              key: "_modifyMessageList",
              value: function value(e, t) {
                e = this.get(11).getLocalConversation(e);
                if (e) for (var n = e.userProfile.nick, o = e.userProfile.avatar, e = this.get(4).getNickAndAvatarByUserID(this.getMyUserID()), i = e.nick, a = e.avatar, s = t.length - 1; 0 <= s; s--) {
                  var r = t[s];
                  "in" === r.flow && (r.nick !== n && r.setNickAndAvatar({
                    nick: n
                  }), r.avatar !== o) && r.setNickAndAvatar({
                    avatar: o
                  }), "out" === r.flow && (r.nick !== i && r.setNickAndAvatar({
                    nick: i
                  }), r.avatar !== a) && r.setNickAndAvatar({
                    avatar: a
                  });
                }
              }
            }, {
              key: "getRemotePeerReadTime",
              value: function value(a) {
                var s,
                  r = this,
                  c = "".concat(this._n, ".").concat("getRemotePeerReadTime");
                return S(a) ? Promise.resolve() : (s = new P("getRemotePeerReadTime"), M.l("".concat(c, " userIDList:").concat(a)), this.req({
                  P: G.GET_C2C_PEER_READ_TIME,
                  data: {
                    userIDList: a
                  }
                }).then(function (e) {
                  var t = e.data.peerReadTimeList;
                  M.l("".concat(c, " ok. peerReadTimeList:").concat(t));
                  for (var n = "", o = r.get(11), i = 0; i < a.length; i++) n += "".concat(a[i], "-").concat(t[i], " "), 0 < t[i] && o.recordPeerReadTime("".concat(R.CONV_C2C).concat(a[i]), t[i]);
                  s.setMessage(n).end();
                })["catch"](function (e) {
                  s.setError(e).end(), M.w("".concat(c, " failed. error:"), e);
                }));
              }
            }, {
              key: "sendReadReceipt",
              value: function value(e) {
                var t,
                  n = e[0].conversationID.replace(R.CONV_C2C, ""),
                  o = new P("sendReadReceipt"),
                  i = (o.setMessage("peerAccount:".concat(n)), this.getMyUserID()),
                  e = e.filter(function (e) {
                    return e.from !== i && !0 === e.needReadReceipt;
                  }).map(function (e) {
                    return {
                      fromAccount: e.from,
                      toAccount: e.to,
                      sequence: e.sequence,
                      random: e.random,
                      time: e.time,
                      clientTime: e.clientTime
                    };
                  });
                return 0 === e.length ? E({
                  code: k.READ_RECEIPT_MSG_LIST_EMPTY
                }) : (t = "".concat(this._n, ".").concat("sendReadReceipt"), M.l("".concat(t, ". peerAccount:").concat(n, " length:").concat(e.length)), this.req({
                  P: G.SEND_C2C_READ_RECEIPT,
                  data: {
                    peerAccount: n,
                    messageInfoList: e
                  }
                }).then(function (e) {
                  return o.end(), M.l("".concat(t, " ok")), T();
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(t, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getReadReceiptList",
              value: function value(e) {
                var t = e[0].conversationID.replace(R.CONV_C2C, "");
                return M.l("".concat(this._n, ".getReadReceiptList peerAccount:").concat(t, " msgCount:").concat(e.length)), D({
                  messageList: e
                });
              }
            }, {
              key: "getMessageExtensions",
              value: function value(e, t) {
                return M.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t)), this.req({
                  P: G.GET_C2C_MSG_EXT,
                  data: {
                    from: e.from,
                    to: e.to,
                    messageKey: this.getMessageKey(e),
                    startSequence: t
                  }
                });
              }
            }, {
              key: "modifyMsgExts",
              value: function value(e, t) {
                var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
                return M.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n)), this.req({
                  P: G.MODIFY_C2C_MSG_EXT,
                  data: {
                    from: e.from,
                    to: e.to,
                    messageKey: this.getMessageKey(e),
                    extensionList: t,
                    operateType: n
                  }
                });
              }
            }, {
              key: "getMessageKey",
              value: function value(e) {
                var t = e.clientSequence,
                  n = e.random,
                  e = e.time;
                return "".concat(t, "_").concat(n, "_").concat(e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._msgFromUnreadDBMap.clear(), this._noticeFromUnreadDBList.length = 0;
              }
            }]),
            U = {
              A2KEY_AND_TINYID_UPDATED: "_inner".concat(1),
              CLOUD_CONFIG: "_inner".concat(2),
              PROFILE_UPDATED: "_inner".concat(3),
              CONV_SYNC_COMPLETED: "_inner".concat(4),
              C2C_UNREAD_HANDLE_COMPLETED: "_inner".concat(5)
            },
            ko = e(function e(t) {
              p(this, e), this._convM = t, this._map = new Map(), this._n = "MsgListHandler", this._latestMsgSentByPeerMap = new Map(), this._latestMsgSentByMeMap = new Map(), this._hoppingMsgMap = new Map(), this.TOPIC_MSG_LIMIT = 1e3, this._convM.getIEmitInst().on(U.CLOUD_CONFIG, this._onCloudConfig, this);
            }, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this._convM.getCloudConfig("topic_msg_limit");
                N(e) || (this.TOPIC_MSG_LIMIT = Number(e)), M.l("".concat(this._n, "._onCloudConfig topicMsgLimit:").concat(this.TOPIC_MSG_LIMIT));
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                if (e % 20 == 0 && 0 < this._map.size) {
                  var t,
                    n = F(this._map);
                  try {
                    for (n.s(); !(t = n.n()).done;) {
                      var o = j(t.value, 2),
                        i = o[0],
                        a = o[1];
                      i.includes(et) && a.size >= this.TOPIC_MSG_LIMIT && this._convM.clearMemMsg(i, !0);
                    }
                  } catch (e) {
                    n.e(e);
                  } finally {
                    n.f();
                  }
                }
              }
            }, {
              key: "pushIn",
              value: function value(e) {
                var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
                  n = e.conversationID,
                  o = !0,
                  i = (this._map.has(n) || this._map.set(n, new Map()), this._getUniqueIDOfMsg(e));
                if (this._map.get(n).has(i)) {
                  var a = this._map.get(n).get(i);
                  if (!t || !0 === a.isModified) return !1;
                }
                return this._map.get(n).set(i, e), this._setLatestMsgSentByPeer(n, e), this._setLatestMsgSentByMe(n, e), o;
              }
            }, {
              key: "unshift",
              value: function value(e, t) {
                var n;
                if (O(e) ? 0 < e.length && (n = e[0].conversationID, this._unshiftMultipleMsgs(e, t)) : (n = e.conversationID, this._unshiftSingleMsg(e, t)), n) {
                  var o = Array.from(this._map.get(n).values()),
                    e = o.length;
                  if (0 !== e) {
                    for (var i = e - 1; 0 <= i; i--) if ("out" === o[i].flow) {
                      this._setLatestMsgSentByMe(n, o[i]);
                      break;
                    }
                    if (n.startsWith(R.CONV_C2C)) for (var a = e - 1; 0 <= a; a--) if ("in" === o[a].flow) {
                      this._setLatestMsgSentByPeer(n, o[a]);
                      break;
                    }
                  }
                }
              }
            }, {
              key: "_unshiftSingleMsg",
              value: function value(e, t) {
                var n,
                  o,
                  i = e.conversationID,
                  a = this._getUniqueIDOfMsg(e);
                this._map.has(i) ? (n = this._map.get(i), o = Array.from(n), n.has(a) || (o.unshift([a, e]), this._map.set(i, new Map(o)), t.push(e))) : (this._map.set(i, new Map()), this._map.get(i).set(a, e), t.push(e));
              }
            }, {
              key: "_unshiftMultipleMsgs",
              value: function value(e, t) {
                for (var n = e.length, o = [], i = e[0].conversationID, a = this._map.get(i), s = this._map.has(i) ? Array.from(a) : [], r = 0; r < n; r++) {
                  var c = this._getUniqueIDOfMsg(e[r]);
                  a && a.has(c) || (o.push([c, e[r]]), t.push(e[r]));
                }
                this._map.set(i, new Map(o.concat(s)));
              }
            }, {
              key: "remove",
              value: function value(e) {
                var t = e.conversationID,
                  e = this._getUniqueIDOfMsg(e);
                this._map.has(t) && this._map.get(t)["delete"](e);
              }
            }, {
              key: "revoke",
              value: function value(e, t, n) {
                var o;
                return this._map.has(e) ? (o = this._map.get(e), this._updateMsgIsRevoked(o, t, n)) : this._hoppingMsgMap.has(e) ? (o = this._hoppingMsgMap.get(e), this._updateMsgIsRevoked(o, t, n)) : null;
              }
            }, {
              key: "_updateMsgIsRevoked",
              value: function value(e, t, n) {
                var o,
                  i = F(e);
                try {
                  for (i.s(); !(o = i.n()).done;) {
                    var a = j(o.value, 2)[1];
                    if (a.sequence === t && (N(n) || a.random === n)) return a.isRevoked || (a.isRevoked = !0), a;
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
              }
            }, {
              key: "removeByConvID",
              value: function value(e) {
                var t = this._map.has(e);
                M.l("".concat(this._n, ".removeByConvID convID:").concat(e, " has:").concat(t)), t && (this._map["delete"](e), this._latestMsgSentByPeerMap["delete"](e), this._latestMsgSentByMeMap["delete"](e));
              }
            }, {
              key: "findMessage",
              value: function value(e) {
                return this._findMsg(e, this._map) || this._findMsg(e, this._hoppingMsgMap);
              }
            }, {
              key: "_findMsg",
              value: function value(e, t) {
                var n,
                  o = null,
                  i = F(t);
                try {
                  for (i.s(); !(n = i.n()).done;) for (var a = d(j(n.value, 2)[1].values()), s = a.length, r = 0; r < s; r++) if (a[r].ID === e) {
                    o = a[r];
                    break;
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return o;
              }
            }, {
              key: "updateMsgIsPeerReadProp",
              value: function value(e, t) {
                var n,
                  o = [];
                return this._map.has(e) ? (n = this._map.get(e), o = this._updateMsgIsPeerReadProp(n, t)) : this._hoppingMsgMap.has(e) && (n = this._hoppingMsgMap.get(e), o = this._updateMsgIsPeerReadProp(n, t)), M.l("".concat(this._n, ".updateMsgIsPeerReadProp convID:").concat(e, " peerReadTime:").concat(t, " count:").concat(o.length)), o;
              }
            }, {
              key: "_updateMsgIsPeerReadProp",
              value: function value(e, t) {
                var n,
                  o = [],
                  i = F(e);
                try {
                  for (i.s(); !(n = i.n()).done;) {
                    var a = j(n.value, 2)[1];
                    a.time <= t && !a.isPeerRead && "out" === a.flow && (a.isPeerRead = !0, o.push(a));
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return o;
              }
            }, {
              key: "updateMsgIsModifiedProp",
              value: function value(e) {
                var t = e.conversationID;
                this._map.has(t) && (e = this._getUniqueIDOfMsg(e), t = this._map.get(t).get(e)) && (t.isModified = !0);
              }
            }, {
              key: "hasLocalMsgList",
              value: function value(e) {
                return this._map.has(e);
              }
            }, {
              key: "getLocalMsgList",
              value: function value(e) {
                return this.hasLocalMsgList(e) ? d(this._map.get(e).values()) : [];
              }
            }, {
              key: "getLocalMaxSeq",
              value: function value(e) {
                return this.hasLocalMsgList(e) ? (e = d(this._map.get(e).values()).map(function (e) {
                  return e.sequence;
                }), Math.max.apply(Math, d(e))) : 0;
              }
            }, {
              key: "getLocalMaxTime",
              value: function value(e) {
                return this.hasLocalMsgList(e) ? (e = d(this._map.get(e).values()).map(function (e) {
                  return e.time;
                }), Math.max.apply(Math, d(e))) : 0;
              }
            }, {
              key: "hasLocalMsg",
              value: function value(e, t) {
                for (var n = !1, o = this.getLocalMsgList(e), i = o.length, a = 0; a < i; a++) o[a].ID === t && (n = !0);
                return n;
              }
            }, {
              key: "getLocalMsg",
              value: function value(e, t) {
                for (var n = null, o = this.getLocalMsgList(e), i = o.length, a = 0; a < i; a++) if (o[a].ID === t) {
                  n = o[a];
                  break;
                }
                return n;
              }
            }, {
              key: "getLocalLastMsg",
              value: function value(e) {
                e = this.getLocalMsgList(e);
                return e[e.length - 1];
              }
            }, {
              key: "getLocalSecondLastMsg",
              value: function value(e) {
                e = this.getLocalMsgList(e);
                return e[e.length - 2];
              }
            }, {
              key: "getLocalOldestMsg",
              value: function value(e) {
                return this.getLocalMsgList(e)[0];
              }
            }, {
              key: "_setLatestMsgSentByPeer",
              value: function value(e, t) {
                e.startsWith(R.CONV_C2C) && "in" === t.flow && this._latestMsgSentByPeerMap.set(e, t);
              }
            }, {
              key: "_setLatestMsgSentByMe",
              value: function value(e, t) {
                "out" === t.flow && this._latestMsgSentByMeMap.set(e, t);
              }
            }, {
              key: "getLatestMsgSentByPeer",
              value: function value(e) {
                return this._latestMsgSentByPeerMap.get(e);
              }
            }, {
              key: "getLatestMsgSentByMe",
              value: function value(e) {
                return this._latestMsgSentByMeMap.get(e);
              }
            }, {
              key: "modifyMsgSentByPeer",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.latestNick,
                  o = e.latestAvatar,
                  e = this._map.get(t);
                if (!S(e)) {
                  var i = Array.from(e.values()),
                    e = i.length;
                  if (0 !== e) {
                    for (var a = null, s = 0, r = !1, c = e - 1; 0 <= c; c--) "in" === i[c].flow && ((a = i[c]).nick !== n && (a.setNickAndAvatar({
                      nick: n
                    }), r = !0), a.avatar !== o && (a.setNickAndAvatar({
                      avatar: o
                    }), r = !0), r) && (s += 1);
                    M.l("".concat(this._n, ".modifyMsgSentByPeer convID:").concat(t, " count:").concat(s));
                  }
                }
              }
            }, {
              key: "modifyMsgSentByMe",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.latestNick,
                  o = e.latestAvatar,
                  e = this._map.get(t);
                if (!S(e)) {
                  var i = Array.from(e.values()),
                    e = i.length;
                  if (0 !== e) {
                    for (var a = null, s = 0, r = !1, c = e - 1; 0 <= c; c--) "out" === i[c].flow && ((a = i[c]).nick !== n && (a.setNickAndAvatar({
                      nick: n
                    }), r = !0), a.avatar !== o && (a.setNickAndAvatar({
                      avatar: o
                    }), r = !0), r) && (s += 1);
                    M.l("".concat(this._n, ".modifyMsgSentByMe convID:").concat(t, " count:").concat(s));
                  }
                }
              }
            }, {
              key: "getTopicConvIDList",
              value: function value(t) {
                return d(this._map.keys()).filter(function (e) {
                  return e.startsWith("".concat(R.CONV_GROUP).concat(t));
                });
              }
            }, {
              key: "onMsgModified",
              value: function value(e, t) {
                var n, o, i, a;
                return (this._map.has(e) || this._hoppingMsgMap.has(e)) && (n = "".concat(this._n, ".onMsgModified"), i = this._getUniqueIDOfMsg(t), a = !!(o = this._getTargetMsg(e, i)), M.l("".concat(n, " convID:").concat(e, " uniqueID:").concat(i, " has:").concat(a)), a) ? (e = t.messageVersion, i = t.elements, a = t.cloudCustomData, t = t.checkResult, M.l("".concat(n, " localVersion:").concat(o.version, " remoteVersion:").concat(e)), o.version < e ? (o.version = e, o._elements = JSON.parse(JSON.stringify(i)), o.payload = o._elements[0].content, o.type = o._elements[0].type, o.cloudCustomData = a, o.isModified = !0, o.hasRiskContent = nn(t), {
                  isUpdated: !0,
                  message: o
                }) : {
                  isUpdated: !1,
                  message: o
                }) : {
                  isUpdated: !1,
                  message: null
                };
              }
            }, {
              key: "_getUniqueIDOfMsg",
              value: function value(e) {
                var t = e.from,
                  n = e.to,
                  o = e.random,
                  i = e.sequence,
                  e = e.time;
                return "".concat(t, "-").concat(n, "-").concat(o, "-").concat(i, "-").concat(e);
              }
            }, {
              key: "_getTargetMsg",
              value: function value(e, t) {
                if (this._map.has(e)) return this._map.get(e).get(t);
                var n = void 0;
                if (this._hoppingMsgMap.has(e)) for (var o = d(this._hoppingMsgMap.get(e).values()), i = 0; i < o.length; i++) if (this._getUniqueIDOfMsg(o[i]) === t) {
                  n = o[i];
                  break;
                }
                return n;
              }
            }, {
              key: "storeHoppingMsgList",
              value: function value(e) {
                if (0 !== e.length) {
                  var t = e[0].conversationID,
                    n = e.length;
                  this._hoppingMsgMap.has(t) || this._hoppingMsgMap.set(t, new Map());
                  for (var o = this._hoppingMsgMap.get(t), i = 0; i < n; i++) {
                    var a = e[i];
                    o.has(a.ID) || o.set(a.ID, a);
                  }
                }
              }
            }, {
              key: "getHoppingMsg",
              value: function value(e, t) {
                if (this._hoppingMsgMap.has(e)) return this._hoppingMsgMap.get(e).get(t);
              }
            }, {
              key: "reset",
              value: function value() {
                this._map.clear(), this._latestMsgSentByPeerMap.clear(), this._latestMsgSentByMeMap.clear(), this._hoppingMsgMap.clear();
              }
            }]);
          function Ro(e) {
            return p(this, Ro), (e = i(this, Ro, [e]))._n = "C2CModule", e._msgFromUnreadDBMap = new Map(), e._noticeFromUnreadDBList = [], e;
          }
          function Ao(e) {
            this.mixin(e);
          }
          Ao.mixin = function (e) {
            e = e.prototype || e;
            e._isReady = !1, e.ready = function (e) {
              if (e) return this._isReady ? void (1 < arguments.length && void 0 !== arguments[1] && arguments[1] ? e.call(this) : setTimeout(e, 1)) : (this._readyQueue = this._readyQueue || [], void this._readyQueue.push(e));
            }, e.triggerReady = function () {
              var t = this;
              this._isReady = !0, setTimeout(function () {
                var e = t._readyQueue;
                t._readyQueue = [], e && 0 < e.length && e.forEach(function (e) {
                  e.call(this);
                }, t);
              }, 1);
            }, e.resetReady = function () {
              this._isReady = !1, this._readyQueue = [];
            }, e.isReady = function () {
              return this._isReady;
            };
          };
          function Oo(e, t, n) {
            return N(e) ? {
              lastTime: 0,
              lastSequence: 0,
              fromAccount: "",
              messageForShow: "",
              payload: null,
              type: "",
              isRevoked: !1,
              cloudCustomData: "",
              onlineOnlyFlag: !1,
              nick: "",
              nameCard: "",
              version: 0,
              isPeerRead: !1,
              revoker: null
            } : n && e.ID || e instanceof Do ? {
              lastTime: e.time || 0,
              lastSequence: e.sequence || 0,
              fromAccount: e.from || "",
              messageForShow: Jt(e.type, e.payload, t),
              payload: e.payload || null,
              type: e.type || null,
              isRevoked: e.isRevoked || !1,
              cloudCustomData: e.cloudCustomData || "",
              onlineOnlyFlag: e._onlineOnlyFlag || !1,
              nick: e.nick || "",
              nameCard: e.nameCard || "",
              version: e.version || 0,
              isPeerRead: e.isPeerRead || !1,
              revoker: e.revoker || null
            } : y(y({}, e), {}, {
              messageForShow: Jt(e.type, e.payload, t)
            });
          }
          function No(e, t) {
            return S(e) ? {
              lastTime: 0,
              lastSequence: 0,
              fromAccount: "",
              payload: null,
              type: "",
              messageForShow: "",
              nick: "",
              avatar: "",
              version: 0,
              cloudCustomData: "",
              isRevoked: !1,
              revoker: null
            } : {
              lastTime: e.time || 0,
              lastSequence: e.sequence || 0,
              fromAccount: e.from || "",
              payload: e.payload || null,
              type: e.type || "",
              messageForShow: Jt(e.type, e.payload, t),
              nick: e.nick || "",
              avatar: e.avatar || "",
              version: e.version || 0,
              cloudCustomData: e.cloudCustomData || "",
              isRevoked: e.isRevoked || !1,
              revoker: e.revoker || null
            };
          }
          function Go(e) {
            var t = String(e).replace(/[=]+$/, ""),
              n = "";
            if (t.length % 4 == 1) return "";
            for (var o, i, a = 0, s = 0; i = t.charAt(s++); ~i && (o = a % 4 ? 64 * o + i : i, a++ % 4) && (n += String.fromCharCode(255 & o >> (-2 * a & 6)))) i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(i);
            try {
              return decodeURIComponent(escape(n));
            } catch (e) {
              return "";
            }
          }
          var Po = ["jpg", "jpeg", "gif", "png", "bmp", "image", "webp"],
            Uo = ["mp4", "quicktime", "mov"],
            bo = e(function e(t) {
              var n = this;
              p(this, e), S(t) || (this.userID = t.userID || "", this.nick = t.nick || "", this.gender = t.gender || "", this.birthday = t.birthday || 0, this.location = t.location || "", this.selfSignature = t.selfSignature || "", this.allowType = t.allowType || R.ALLOW_TYPE_ALLOW_ANY, this.language = t.language || 0, this.avatar = t.avatar || "", this.messageSettings = t.messageSettings || 0, this.adminForbidType = t.adminForbidType || R.FORBID_TYPE_NONE, this.level = t.level || 0, this.role = t.role || 0, this.lastUpdatedTime = 0, this.profileCustomField = [], S(t.profileCustomField)) || t.profileCustomField.forEach(function (e) {
                n.profileCustomField.push({
                  key: e.key,
                  value: e.value
                });
              });
            }, [{
              key: "validate",
              value: function value(e) {
                var t,
                  n = !0,
                  o = "";
                if (S(e)) return {
                  valid: !1,
                  tips: "empty options"
                };
                if (e.profileCustomField) for (var i = e.profileCustomField.length, a = null, s = 0; s < i; s++) {
                  if (a = e.profileCustomField[s], !C(a.key) || -1 === a.key.indexOf("Tag_Profile_Custom")) return {
                    valid: !1,
                    tips: "The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom"
                  };
                  if (!C(a.value)) return {
                    valid: !1,
                    tips: "The type of values of the custom profile key-value pairs (which is profileCustomField) must be String"
                  };
                }
                for (t in e) if (Object.prototype.hasOwnProperty.call(e, t)) {
                  if ("profileCustomField" === t) continue;
                  if (S(e[t]) && !C(e[t]) && !A(e[t])) {
                    o = "key:" + t + ", invalid value:" + e[t], n = !1;
                    continue;
                  }
                  switch (t) {
                    case "nick":
                      C(e[t]) || (n = !(o = "nick must be a string")), 500 < _t(e[t]) && (o = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(_t(e[t]), " bytes"), n = !1);
                      break;
                    case "gender":
                      ft(ze, e.gender) || (o = "key:gender, invalid value:" + e.gender, n = !1);
                      break;
                    case "birthday":
                      A(e.birthday) || (n = !(o = "birthday must be a number"));
                      break;
                    case "location":
                      C(e.location) || (n = !(o = "location must be a string"));
                      break;
                    case "selfSignature":
                      C(e.selfSignature) || (n = !(o = "selfSignature must be a string"));
                      break;
                    case "allowType":
                      ft(Ze, e.allowType) || (o = "key:allowType, invalid value:" + e.allowType, n = !1);
                      break;
                    case "language":
                      A(e.language) || (n = !(o = "language must be a number"));
                      break;
                    case "avatar":
                      C(e.avatar) || (n = !(o = "avatar must be a string"));
                      break;
                    case "messageSettings":
                      0 !== e.messageSettings && 1 !== e.messageSettings && (n = !(o = "messageSettings must be 0 or 1"));
                      break;
                    case "adminForbidType":
                      ft(Xe, e.adminForbidType) || (o = "key:adminForbidType, invalid value:" + e.adminForbidType, n = !1);
                      break;
                    case "level":
                      A(e.level) || (n = !(o = "level must be a number"));
                      break;
                    case "role":
                      A(e.role) || (n = !(o = "role must be a number"));
                      break;
                    default:
                      o = "unknown key:" + t + "  " + e[t], n = !1;
                  }
                }
                return {
                  valid: n,
                  tips: o
                };
              }
            }]),
            wo = e(function e(t) {
              p(this, e), this.MAX_LENGTH = t, this.map = new Map();
            }, [{
              key: "set",
              value: function value(e) {
                var t;
                this.map.size >= this.MAX_LENGTH && (t = this.map.entries().next().value[0], this.map["delete"](t)), this.map.set(e, 1);
              }
            }, {
              key: "has",
              value: function value(e) {
                return this.map.has(e);
              }
            }, {
              key: "delete",
              value: function value(e) {
                this.has(e) && this.map["delete"](e);
              }
            }, {
              key: "reset",
              value: function value() {
                this.map.clear();
              }
            }]),
            Fo = ["groupID", "name", "avatar", "type", "introduction", "notification", "ownerID", "selfInfo", "createTime", "infoSequence", "lastInfoTime", "lastMessage", "nextMessageSeq", "memberNum", "maxMemberNum", "memberList", "joinOption", "groupCustomField", "muteAllMembers", "isSupportTopic", "inviteOption", "_lastRevokedTime"],
            qo = e(function e(t) {
              p(this, e), this.groupID = "", this.name = "", this.avatar = "", this.type = "", this.introduction = "", this.notification = "", this.ownerID = "", this.createTime = "", this.infoSequence = "", this.lastInfoTime = "", this.selfInfo = {
                messageRemindType: "",
                joinTime: "",
                nameCard: "",
                role: "",
                userID: "",
                memberCustomField: void 0,
                readedSequence: 0,
                excludedUnreadSequenceList: void 0
              }, this.lastMessage = {
                lastTime: "",
                lastSequence: "",
                fromAccount: "",
                messageForShow: ""
              }, this.nextMessageSeq = "", this.memberNum = "", this.memberCount = "", this.maxMemberNum = "", this.maxMemberCount = "", this.joinOption = "", this.inviteOption = "", this.groupCustomField = [], this.muteAllMembers = !1, this.isSupportTopic = !1, this._lastRevokedTime = 0, this._initGroup(t);
            }, [{
              key: "memberNum",
              get: function get() {
                return this.memberCount;
              },
              set: function set(e) {}
            }, {
              key: "maxMemberNum",
              get: function get() {
                return this.maxMemberCount;
              },
              set: function set(e) {}
            }, {
              key: "_initGroup",
              value: function value(e) {
                for (var t in e) Fo.indexOf(t) < 0 || ("selfInfo" !== t ? ("memberNum" === t && (this.memberCount = e[t]), "maxMemberNum" === t && (this.maxMemberCount = e[t]), "isSupportTopic" !== t ? this[t] = e[t] : this.isSupportTopic = 1 === e[t]) : this.updateSelfInfo(e[t]));
              }
            }, {
              key: "updateGroup",
              value: function value(e) {
                var t = this,
                  e = (e.appid = void 0, e.grossTopicNextMsgSeq = void 0, e.selfInfo && (e.selfInfo.grossTopicReadSeq = void 0), JSON.parse(JSON.stringify(e)));
                e.lastMsgTime && (this.lastMessage.lastTime = e.lastMsgTime), N(e.muteAllMembers) || ("On" === e.muteAllMembers ? e.muteAllMembers = !0 : e.muteAllMembers = !1), e.groupCustomField && Lt(this.groupCustomField, e.groupCustomField), N(e.memberNum) || (this.memberCount = e.memberNum), N(e.maxMemberNum) || (this.maxMemberCount = e.maxMemberNum), N(e.isSupportTopic) || (this.isSupportTopic = A(e.isSupportTopic) ? 1 === e.isSupportTopic : e.isSupportTopic), dt(this, e, ["members", "errorCode", "lastMsgTime", "groupCustomField", "memberNum", "maxMemberNum", "isSupportTopic"]), O(e.members) && 0 < e.members.length && e.members.forEach(function (e) {
                  e.userID === t.selfInfo.userID && dt(t.selfInfo, e, ["sequence"]);
                });
              }
            }, {
              key: "updateSelfInfo",
              value: function value(e) {
                e = {
                  nameCard: e.nameCard,
                  joinTime: e.joinTime,
                  role: e.role,
                  messageRemindType: e.messageRemindType,
                  readedSequence: e.readedSequence,
                  excludedUnreadSequenceList: e.excludedUnreadSequenceList
                };
                dt(this.selfInfo, y({}, e), [], ["", null, void 0, 0, NaN]);
              }
            }, {
              key: "setSelfNameCard",
              value: function value(e) {
                this.selfInfo.nameCard = e;
              }
            }]),
            xo = e(function e(t, n) {
              var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2];
              p(this, e), this.conversationID = t.conversationID || "", this.unreadCount = t.unreadCount || 0, this.type = t.type || "", this.lastMessage = Oo(t.lastMessage, n, o), t.lastMsgTime && (this.lastMessage.lastTime = t.lastMsgTime), this._isInfoCompleted = !1, this.peerReadTime = t.peerReadTime || 0, this.groupAtInfoList = [], this.remark = "", this.isPinned = t.isPinned || !1, this.messageRemindType = t.messageRemindType, this.markList = t.markList || [], this.customData = t.customData || "", this.conversationGroupList = t.conversationGroupList || [], this.draftText = t.draftText || "", this._initProfile(t), this.subType = this.groupProfile ? this.groupProfile.type : "";
            }, [{
              key: "toAccount",
              get: function get() {
                return this.conversationID.startsWith(R.CONV_C2C) ? this.conversationID.replace(R.CONV_C2C, "") : this.conversationID.startsWith(R.CONV_GROUP) ? this.conversationID.replace(R.CONV_GROUP, "") : "";
              }
            }, {
              key: "_initProfile",
              value: function value(t) {
                var n = this;
                Object.keys(t).forEach(function (e) {
                  switch (e) {
                    case "userProfile":
                      n.userProfile = t.userProfile;
                      break;
                    case "groupProfile":
                      n.groupProfile = t.groupProfile;
                  }
                }), N(this.userProfile) && this.type === R.CONV_C2C ? this.userProfile = new bo({
                  userID: t.conversationID.replace("C2C", "")
                }) : N(this.groupProfile) && this.type === R.CONV_GROUP && (this.groupProfile = new qo({
                  groupID: t.conversationID.replace("GROUP", "")
                }));
              }
            }, {
              key: "updateUnreadCount",
              value: function value(e) {
                var t = e.nextUnreadCount,
                  n = e.isFromGetConversations,
                  e = e.isUnreadC2CMessage;
                N(t) || (At(this.subType) ? this.unreadCount = 0 : n && this.type === R.CONV_GROUP || n && this.type === R.CONV_TOPIC || e && this.type === R.CONV_C2C ? this.unreadCount = t : this.unreadCount = this.unreadCount + t);
              }
            }, {
              key: "updateLastMessage",
              value: function value(e) {
                this.lastMessage = Oo(e);
              }
            }, {
              key: "updateGroupAtInfoList",
              value: function value(e) {
                var t;
                this._isNeedMergeGroupAtInfo(e) || (-1 !== (t = (b(t = e.groupAtType) || B(t) || X(t) || H()).slice(0)).indexOf(R.CONV_AT_ME) && -1 !== t.indexOf(R.CONV_AT_ALL) && (t = [R.CONV_AT_ALL_AT_ME]), t = {
                  from: e.from,
                  groupID: e.groupID,
                  topicID: e.topicID,
                  messageSequence: e.sequence,
                  atTypeArray: t,
                  __random: e.__random,
                  __sequence: e.__sequence
                }, this.groupAtInfoList.push(t));
              }
            }, {
              key: "_isNeedMergeGroupAtInfo",
              value: function value(t) {
                var n,
                  e = t.groupID,
                  o = t.sequence;
                return !!Ot({
                  groupID: e
                }) && (n = !1, this.groupAtInfoList.forEach(function (e) {
                  e.messageSequence === o && (-1 < e.atTypeArray.indexOf(R.CONV_AT_ME) && -1 < t.groupAtType.indexOf(R.CONV_AT_ALL) && (e.atTypeArray = [R.CONV_AT_ALL_AT_ME]), -1 < e.atTypeArray.indexOf(R.CONV_AT_ALL) && -1 < t.groupAtType.indexOf(R.CONV_AT_ME) && (e.atTypeArray = [R.CONV_AT_ALL_AT_ME], e.__random = t.__random, e.__sequence = t.__sequence), n = !0);
                }), n);
              }
            }, {
              key: "clearGroupAtInfoList",
              value: function value() {
                this.groupAtInfoList.length = 0;
              }
            }, {
              key: "reduceUnreadCount",
              value: function value() {
                return 1 <= this.unreadCount && (--this.unreadCount, !0);
              }
            }, {
              key: "isLastMessageRevoked",
              value: function value(e) {
                var t = e.sequence,
                  e = e.time;
                return this.type === R.CONV_C2C && t === this.lastMessage.lastSequence && e === this.lastMessage.lastTime || this.type === R.CONV_GROUP && t === this.lastMessage.lastSequence;
              }
            }, {
              key: "setLastMessageRevoked",
              value: function value(e) {
                this.lastMessage.isRevoked = e;
              }
            }, {
              key: "setLastMessageRevoker",
              value: function value(e) {
                this.lastMessage.revoker = e;
              }
            }, {
              key: "setDraftText",
              value: function value(e) {
                this.draftText = e;
              }
            }]),
            Vo = q(q(q({}, R.MSG_REMIND_ACPT_AND_NOTE, 0), R.MSG_REMIND_DISCARD, 1), R.MSG_REMIND_ACPT_NOT_NOTE, 2),
            Bo = e(function e(t) {
              p(this, e), this._convM = t, this._n = "MsgRemindHandler";
            }, [{
              key: "onAllRcvMsgOptNotify",
              value: function value(e) {
                e = this._handleResult(e);
                this._convM.emitOEvt(h.ALL_RECEIVE_MESSAGE_OPT_UPDATED, e);
              }
            }, {
              key: "getC2CMsgRemindType",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".getC2CMsgRemindType");
                return this._convM.req({
                  P: G.GET_C2C_PEER_MUTE_NOTIFICATIONS,
                  data: {
                    toAccount: this._convM.getMyUserID(),
                    userIDList: t
                  }
                }).then(function (e) {
                  M.l("".concat(o, " ok. userIDList:").concat(t));
                  e = e.data.muteFlagList;
                  n._convM.onC2CMsgRemindTypeFetched(e);
                })["catch"](function (e) {
                  M.e("".concat(o, " failed. error:"), e);
                });
              }
            }, {
              key: "set",
              value: function value(e) {
                return e.groupID ? this._setGroupMsgRemindType(e) : O(e.userIDList) ? this._setC2CMsgRemindType(e) : void 0;
              }
            }, {
              key: "_setGroupMsgRemindType",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".").concat("_setGroupMsgRemindType"),
                  e = t.groupID,
                  i = t.messageRemindType,
                  a = "groupID:".concat(e, " messageRemindType:").concat(i),
                  s = new P("_setGroupMsgRemindType"),
                  r = (s.setMessage(a), this._get(7));
                return r ? r.modifyGroupMemberInfo({
                  groupID: e,
                  messageRemindType: i,
                  userID: this._convM.getMyUserID()
                }).then(function () {
                  s.end(), M.l("".concat(o, " ok. ").concat(a));
                  var e = n.onGroupMsgRemindTypeUpdated(t);
                  return n._convM.onTotalUnreadCountUpdate(), T(e);
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                }) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "onGroupMsgRemindTypeUpdated",
              value: function value(e) {
                var t,
                  n,
                  o = e.groupID,
                  e = e.messageRemindType,
                  i = (M.l("".concat(this._n, ".onGroupMsgRemindTypeUpdated groupID:").concat(o, " messageRemindType:").concat(e)), this._get(7).getLocalGroupProfile(o));
                return i && (i.selfInfo.messageRemindType = e), Nt(o) ? (t = jt(n = o), (n = this._get(10).getLocalTopic(t, n)) && n.updateSelfInfo({
                  messageRemindType: e
                }) && this._convM.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: t,
                  topic: n
                }), {
                  topic: n
                }) : (this._convM.patchMsgRemindType({
                  ID: o,
                  isC2CConversation: !1,
                  messageRemindType: e
                }) && this._emitConvUpdate(), {
                  group: i
                });
              }
            }, {
              key: "_setC2CMsgRemindType",
              value: function value(e) {
                var i = this,
                  a = "".concat(this._n, ".").concat("_setC2CMsgRemindType"),
                  t = e.userIDList,
                  s = e.messageRemindType,
                  r = t.slice(0, 30),
                  e = Vo[s] || 0,
                  c = "userIDList:".concat(r, " messageRemindType:").concat(s),
                  u = new P("_setC2CMsgRemindType");
                return u.setMessage(c), this._convM.req({
                  P: G.SET_C2C_PEER_MUTE_NOTIFICATIONS,
                  data: {
                    userIDList: r,
                    muteFlag: e
                  }
                }).then(function (e) {
                  u.end();
                  var e = e.data.errorList,
                    t = [],
                    n = [],
                    e = (O(e) && e.forEach(function (e) {
                      t.push(e.userID), n.push({
                        userID: e.userID,
                        code: e.errorCode
                      });
                    }), r.filter(function (e) {
                      return -1 === t.indexOf(e);
                    })),
                    o = (M.l("".concat(a, " ok. ").concat(c, " successUserIDList:").concat(e, " failureUserIDList:").concat(JSON.stringify(n))), 0);
                  return e.forEach(function (e) {
                    i._convM.patchMsgRemindType({
                      ID: e,
                      isC2CConversation: !0,
                      messageRemindType: s
                    }) && (o += 1);
                  }), 1 <= o && i._emitConvUpdate(), r.length = t.length = 0, i._convM.onTotalUnreadCountUpdate(), D({
                    successUserIDList: e.map(function (e) {
                      return {
                        userID: e
                      };
                    }),
                    failureUserIDList: n
                  });
                })["catch"](function (e) {
                  return u.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_get",
              value: function value(e) {
                return this._convM.get(e);
              }
            }, {
              key: "_emitConvUpdate",
              value: function value() {
                this._convM.emitConvUpdate(!0, !1);
              }
            }, {
              key: "setAllRcvMsgOpt",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("setAllRcvMsgOpt"),
                  n = e.messageRemindType,
                  n = void 0 === n ? R.MSG_REMIND_ACPT_NOT_NOTE : n,
                  o = e.isRepeated,
                  o = void 0 === o || o,
                  i = this._calcStartAndEndTime(e),
                  a = i.startTime,
                  a = void 0 === a ? 0 : a,
                  i = i.endTime,
                  i = void 0 === i ? 0 : i,
                  e = JSON.stringify(e),
                  s = new P("setAllRcvMsgOpt");
                return s.setMessage(e), M.l("".concat(t, " options:").concat(e)), this._convM.req({
                  P: G.SET_ALL_RECEIVE_MSG_OPT,
                  data: {
                    messageRemindType: Vo[n],
                    startTime: a,
                    endTime: i,
                    isRepeated: o ? 1 : 0
                  }
                }).then(function (e) {
                  return s.end(), M.l("".concat(t, " ok.")), T(e);
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_calcStartAndEndTime",
              value: function value(e) {
                var t = e.startHour,
                  t = void 0 === t ? 0 : t,
                  n = e.startMinute,
                  n = void 0 === n ? 0 : n,
                  o = e.startSecond,
                  o = void 0 === o ? 0 : o,
                  i = e.duration,
                  i = void 0 === i ? 0 : i,
                  e = e.isRepeated,
                  e = void 0 === e || e,
                  a = new Date(),
                  s = a.getFullYear(),
                  r = a.getMonth(),
                  a = a.getDate(),
                  s = Math.round(new Date(s, r, a, t, n, o).getTime() / 1e3);
                return {
                  startTime: s,
                  endTime: e && 86400 <= i ? s + 86400 : s + i
                };
              }
            }, {
              key: "getAllRcvMsgOpt",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".").concat("getAllRcvMsgOpt"),
                  o = new P("getAllRcvMsgOpt");
                return this._convM.req({
                  P: G.GET_ALL_RECEIVE_MSG_OPT,
                  data: {
                    toAccount: this._convM.getMyUserID()
                  }
                }).then(function (e) {
                  e = e.data, o.setMessage(JSON.stringify(e)).end(), M.l("".concat(n, " ok. data:").concat(JSON.stringify(e))), e = t._handleResult(e);
                  return T(e);
                })["catch"](function (e) {
                  return o.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_handleResult",
              value: function value(e) {
                var t = e.messageRemindType,
                  n = e.startTime,
                  o = e.endTime,
                  e = e.isRepeated,
                  i = R.MSG_REMIND_ACPT_AND_NOTE;
                return 1 === t && (i = R.MSG_REMIND_DISCARD), {
                  messageRemindType: i = 2 === t ? R.MSG_REMIND_ACPT_NOT_NOTE : i,
                  startTime: n,
                  endTime: o,
                  isRepeated: 1 === e
                };
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }]),
            Ho = e(function e(t) {
              p(this, e), this._convM = t, this._n = "ConvGroupHandler", this._convGroupMap = new Map(), this._startIndex = 0, this._pagingStatus = Gn;
            }, [{
              key: "setConvCustomData",
              value: function value(e) {
                var i = this,
                  a = "".concat(this._n, ".").concat("setConvCustomData"),
                  t = e.conversationIDList,
                  s = e.customData,
                  r = (M.l("".concat(a, " options:"), e), new P("setConvCustomData")),
                  n = (r.setMessage(JSON.stringify(e)), {
                    fromAccount: this._getMyUserID(),
                    itemList: []
                  }),
                  c = [],
                  u = [];
                return t.forEach(function (e) {
                  var t;
                  return i._hasLocalConv(e) ? Gt(e) || Pt(e) ? (t = {
                    operationType: 2,
                    contactItem: void 0,
                    customMark: s
                  }, Gt(e) ? t.contactItem = {
                    type: 1,
                    toAccount: e.replace(R.CONV_C2C, "")
                  } : Pt(e) && (t.contactItem = {
                    type: 2,
                    groupID: e.replace(R.CONV_GROUP, "")
                  }), void n.itemList.push(t)) : (i._onConvIDInvalid(u, e), !0) : (i._onConvNotFound(u, e), !0);
                }), u.length === t.length ? D({
                  successConversationIDList: c,
                  failureConversationIDList: u
                }) : this._convM.req({
                  P: G.SET_CONV_CUSTOM_DATA,
                  data: n
                }).then(function (e) {
                  r.end(), M.l("".concat(a, " ok"));
                  var t,
                    n,
                    o,
                    e = e.data.resultItem;
                  return O(e) && (o = !1, e.forEach(function (e) {
                    t = i._concatConvID(e.contactItem), 0 === e.resultCode ? (c.push(t), (n = i._getLocalConv(t)) && n.customData !== s && (n.customData = s, o = !0)) : u.push({
                      conversationID: t,
                      code: e.resultCode,
                      message: e.resultInfo
                    });
                  }), !0 === o) && i._emitConvUpdate(), T({
                    successConversationIDList: c,
                    failureConversationIDList: u
                  });
                })["catch"](function (e) {
                  return r.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "markConv",
              value: function value(e) {
                var t,
                  n,
                  a,
                  s,
                  r,
                  o,
                  i,
                  c,
                  u,
                  l,
                  d = this;
                return this._convM.canIUse(g.CONV_MARK) ? (t = "".concat(this._n, ".").concat("markConv"), n = e.conversationIDList, a = e.markType, s = e.enableMark, M.l("".concat(t, " options:"), e), r = new P("markConv"), o = void r.setMessage(JSON.stringify(e)), i = void 0, e = this._getFlagBit(a), !0 === s ? i = [e] : o = [e], c = {
                  fromAccount: this._getMyUserID(),
                  itemList: []
                }, u = [], l = [], n.forEach(function (e) {
                  var t;
                  return d._hasLocalConv(e) ? Gt(e) || Pt(e) ? (t = {
                    operationType: 1,
                    contactItem: void 0,
                    clearMark: o,
                    setMark: i
                  }, Gt(e) ? t.contactItem = {
                    type: 1,
                    toAccount: e.replace(R.CONV_C2C, "")
                  } : Pt(e) && (t.contactItem = {
                    type: 2,
                    groupID: e.replace(R.CONV_GROUP, "")
                  }), void c.itemList.push(t)) : (d._onConvIDInvalid(l, e), !0) : (d._onConvNotFound(l, e), !0);
                }), l.length === n.length ? D({
                  successConversationIDList: u,
                  failureConversationIDList: l
                }) : this._convM.req({
                  P: G.MARK_CONV,
                  data: c
                }).then(function (e) {
                  r.end(), M.l("".concat(t, " ok"));
                  var n,
                    o,
                    i,
                    e = e.data.resultItem;
                  return O(e) && (i = !1, e.forEach(function (e) {
                    var t;
                    n = d._concatConvID(e.contactItem), 0 === e.resultCode ? (u.push(n), (o = d._getLocalConv(n)) && (t = o.markList.indexOf(a), !0 === s ? -1 === t && (o.markList.push(a), i = !0) : -1 !== t && (o.markList.splice(t, 1), i = !0))) : l.push({
                      conversationID: n,
                      code: e.resultCode,
                      message: e.resultInfo
                    });
                  }), !0 === i) && d._emitConvUpdate(), T({
                    successConversationIDList: u,
                    failureConversationIDList: l
                  });
                })["catch"](function (e) {
                  return r.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._convM.noUse("markConv");
              }
            }, {
              key: "getLocalConvGroupList",
              value: function value() {
                var e = this;
                return M.l("".concat(this._n, ".getLocalConvGroupList pagingStatus:").concat(this._pagingStatus)), this._pagingStatus === bn ? this.getRemoteConvGroupList().then(function () {
                  return T(d(e._convGroupMap.values()));
                }) : D(d(this._convGroupMap.values()));
              }
            }, {
              key: "searchConvGroupAndMark",
              value: function value(e, t) {
                var n = this,
                  o = "".concat(this._n, ".searchConvGroupAndMark"),
                  i = [];
                return e.forEach(function (e) {
                  1 === t ? i.push({
                    type: 1,
                    toAccount: e
                  }) : 2 === t && i.push({
                    type: 2,
                    groupID: e
                  });
                }), M.l("".concat(o, " type:").concat(t, " list:"), e), this._convM.req({
                  P: G.SEARCH_CONV_GRP_MARK,
                  data: {
                    fromAccount: this._getMyUserID(),
                    contactItem: i
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.contactItem,
                    e = e.groupItem;
                  M.l("".concat(o, " ok. contactItem:"), t, "groupItem:", e), n._fillConvGroupMap(e), n._handleContactItem(t), n._emitConvUpdate();
                })["catch"](function (e) {
                  M.w("".concat(o, " failed. error:"), e);
                });
              }
            }, {
              key: "_fillConvGroupMap",
              value: function value(e) {
                var n = this;
                O(e) && e.forEach(function (e) {
                  var t = e.convGroupID,
                    e = e.groupName;
                  n._convGroupMap.set(t, e);
                });
              }
            }, {
              key: "_handleContactItem",
              value: function value(e) {
                var a,
                  s = this;
                O(e) && e.forEach(function (e) {
                  var t = [],
                    n = e.standardMark,
                    o = e.customData,
                    i = e.convGroupIDList;
                  O(i) && i.forEach(function (e) {
                    s._convGroupMap.has(e) && t.push(s._convGroupMap.get(e));
                  }), a = s._concatConvID(e), (a = s._getLocalConv(a)) && (a.markList = Xt(n), a.customData = o || "", a.conversationGroupList = [].concat(t));
                });
              }
            }, {
              key: "getRemoteConvGroupList",
              value: function value() {
                var i = this,
                  a = "".concat(this._n, ".getRemoteConvGroupList");
                return this._pagingStatus = Pn, this._convM.req({
                  P: G.GET_CONV_GRP_LIST,
                  data: {
                    fromAccount: this._getMyUserID(),
                    startIndex: this._startIndex
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.completeFlag,
                    n = e.contactItem,
                    o = e.nextStartIndex,
                    o = void 0 === o ? 0 : o,
                    e = e.groupItem;
                  if (i._startIndex = o, M.l("".concat(a, " completeFlag:").concat(t, " nextStartIndex:").concat(o, ", groupItem:"), e, "contactItem:", n), i._fillConvGroupMap(e), i._handleContactItem(n), 0 === t) return i.getRemoteConvGroupList();
                  1 === t && (i._pagingStatus = Un, i._emitConvUpdate(), i._emitConvGroupListUpdate());
                })["catch"](function (e) {
                  i._pagingStatus = bn, M.w("".concat(a, " failed. error:"), e);
                });
              }
            }, {
              key: "createConvGroup",
              value: function value(e) {
                var a,
                  s,
                  r,
                  t,
                  c,
                  u,
                  l = this;
                return this._convM.canIUse(g.CONV_GROUP) ? (a = "".concat(this._n, ".").concat("createConvGroup"), M.l("".concat(a, " options:"), e), (s = new P("createConvGroup")).setMessage(JSON.stringify(e)), r = e.groupName, e = e.conversationIDList, t = {
                  fromAccount: this._getMyUserID(),
                  itemList: [{
                    groupName: r,
                    contactItem: []
                  }]
                }, c = [], u = [], e.forEach(function (e) {
                  return l._hasLocalConv(e) ? Gt(e) || Pt(e) ? void (Gt(e) ? t.itemList[0].contactItem.push({
                    type: 1,
                    toAccount: e.replace(R.CONV_C2C, "")
                  }) : Pt(e) && t.itemList[0].contactItem.push({
                    type: 2,
                    groupID: e.replace(R.CONV_GROUP, "")
                  })) : (l._onConvIDInvalid(u, e), !0) : (l._onConvNotFound(u, e), !0);
                }), u.length === e.length ? D({
                  successConversationIDList: c,
                  failureConversationIDList: u
                }) : this._convM.req({
                  P: G.CREATE_CONV_GRP,
                  data: t
                }).then(function (e) {
                  s.end(), M.l("".concat(a, " ok"));
                  var t,
                    n,
                    o,
                    e = e.data.groupResultItem[0],
                    i = e.groupItem,
                    e = e.resultItem;
                  return m(i) && (l._convGroupMap.set(i.convGroupID, i.groupName), l._emitConvGroupListUpdate()), O(e) && (o = !1, e.forEach(function (e) {
                    t = l._concatConvID(e.contactItem), 0 === e.resultCode ? (c.push(t), (n = l._getLocalConv(t)) && -1 === n.conversationGroupList.indexOf(r) && (n.conversationGroupList.push(r), o = !0)) : u.push({
                      conversationID: t,
                      code: e.resultCode,
                      message: e.resultInfo
                    });
                  }), !0 === o) && (l._emitConvUpdate(), l._emitConvGroupListUpdate()), T({
                    successConversationIDList: c,
                    failureConversationIDList: u
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e);
                })) : this._convM.noUse("createConvGroup");
              }
            }, {
              key: "deleteConvGroup",
              value: function value(n) {
                var o,
                  i,
                  a = this;
                return this._convM.canIUse(g.CONV_GROUP) ? (o = "".concat(this._n, ".").concat("deleteConvGroup"), M.l("".concat(o, " groupName:").concat(n)), (i = new P("deleteConvGroup")).setMessage(n), this._convM.req({
                  P: G.DEL_CONV_GRP,
                  data: {
                    fromAccount: this._getMyUserID(),
                    groupName: [n]
                  }
                }).then(function (e) {
                  i.end(), M.l("".concat(o, " ok"));
                  var t,
                    e = e.data.groupItem;
                  O(e) && (t = !1, e.forEach(function (e) {
                    a._convGroupMap.has(e.convGroupID) && (a._convGroupMap["delete"](e.convGroupID), t = !0);
                  }), !0 === t) && a._emitConvGroupListUpdate(), a._eraseFromConversationGroupList([n]);
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                })) : this._convM.noUse("deleteConvGroup");
              }
            }, {
              key: "renameConvGroup",
              value: function value(e) {
                var i,
                  a,
                  s,
                  r,
                  c = this;
                return this._convM.canIUse(g.CONV_GROUP) ? (i = "".concat(this._n, ".").concat("renameConvGroup"), M.l("".concat(i, " options:"), e), (a = new P("renameConvGroup")).setMessage(JSON.stringify(e)), s = e.oldName, r = e.newName, this._convM.req({
                  P: G.RENAME_CONV_GRP,
                  data: {
                    fromAccount: this._getMyUserID(),
                    updateType: 1,
                    updateGroup: {
                      updateGroupType: 1,
                      oldName: s,
                      newName: r
                    }
                  }
                }).then(function (e) {
                  a.end(), M.l("".concat(i, " ok"));
                  e = e.data.updateGroupResult.convGroupID;
                  c._convGroupMap.set(e, r), c._emitConvGroupListUpdate();
                  var t,
                    n,
                    e = c._convM.getLocalConvList(),
                    o = !1;
                  e.forEach(function (e) {
                    t = e.conversationGroupList, -1 !== (n = t.indexOf(s)) && (t.splice(n, 1, r), o = !0);
                  }), !0 === o && c._emitConvUpdate();
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                })) : this._convM.noUse("renameConvGroup");
              }
            }, {
              key: "addConvsToGroup",
              value: function value(e) {
                var i,
                  a,
                  t,
                  s,
                  n,
                  r,
                  c,
                  u = this;
                return this._convM.canIUse(g.CONV_GROUP) ? (i = "".concat(this._n, ".").concat("addConvsToGroup"), M.l("".concat(i, " options:"), e), (a = new P("addConvsToGroup")).setMessage(JSON.stringify(e)), t = e.conversationIDList, s = e.groupName, n = {
                  fromAccount: this._getMyUserID(),
                  updateType: 1,
                  updateGroup: {
                    updateGroupType: 2,
                    groupName: s,
                    updateItem: []
                  }
                }, r = [], c = [], t.forEach(function (e) {
                  return u._hasLocalConv(e) ? Gt(e) || Pt(e) ? void (Gt(e) ? n.updateGroup.updateItem.push({
                    operationType: 1,
                    contactItem: {
                      type: 1,
                      toAccount: e.replace(R.CONV_C2C, "")
                    }
                  }) : Pt(e) && n.updateGroup.updateItem.push({
                    operationType: 1,
                    contactItem: {
                      type: 2,
                      groupID: e.replace(R.CONV_GROUP, "")
                    }
                  })) : (u._onConvIDInvalid(c, e), !0) : (u._onConvNotFound(c, e), !0);
                }), c.length === t.length ? D({
                  successConversationIDList: r,
                  failureConversationIDList: c
                }) : this._convM.req({
                  P: G.ADD_CONV_TO_GRP,
                  data: n
                }).then(function (e) {
                  a.end(), M.l("".concat(i, " ok"));
                  var t,
                    n,
                    o,
                    e = e.data.updateGroupResult.contactResultItem;
                  return O(e) && (o = !1, e.forEach(function (e) {
                    t = u._concatConvID(e.contactItem), 0 === e.resultCode ? (n = u._getLocalConv(t)) && -1 === n.conversationGroupList.indexOf(s) && (n.conversationGroupList.push(s), r.push(t), o = !0) : c.push({
                      conversationID: t,
                      code: e.resultCode,
                      message: e.resultInfo
                    });
                  }), !0 === o) && (u._emitConvUpdate(), u._emitConvInGroupUpdate(s)), T({
                    successConversationIDList: r,
                    failureConversationIDList: c
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                })) : this._convM.noUse("addConvsToGroup");
              }
            }, {
              key: "deleteConvsFromGroup",
              value: function value(e) {
                var t,
                  a,
                  n,
                  s,
                  o,
                  r,
                  c,
                  u = this,
                  i = "deleteConvsFromGroup";
                return this._convM.canIUse(g.CONV_GROUP) ? (t = "".concat(this._n, ".").concat(i), M.l("".concat(t, " options:"), e), (a = new P(i)).setMessage(JSON.stringify(e)), n = e.conversationIDList, s = e.groupName, o = {
                  fromAccount: this._getMyUserID(),
                  updateType: 1,
                  updateGroup: {
                    updateGroupType: 2,
                    groupName: s,
                    updateItem: []
                  }
                }, r = [], c = [], n.forEach(function (e) {
                  return u._hasLocalConv(e) ? Gt(e) || Pt(e) ? void (Gt(e) ? o.updateGroup.updateItem.push({
                    operationType: 2,
                    contactItem: {
                      type: 1,
                      toAccount: e.replace(R.CONV_C2C, "")
                    }
                  }) : Pt(e) && o.updateGroup.updateItem.push({
                    operationType: 2,
                    contactItem: {
                      type: 2,
                      groupID: e.replace(R.CONV_GROUP, "")
                    }
                  })) : (u._onConvIDInvalid(c, e), !0) : (u._onConvNotFound(c, e), !0);
                }), c.length === n.length ? D({
                  successConversationIDList: r,
                  failureConversationIDList: c
                }) : this._convM.req({
                  P: G.DEL_CONV_FROM_GRP,
                  data: o
                }).then(function (e) {
                  a.end(), M.l("".concat(t, " ok"));
                  var n,
                    o,
                    i,
                    e = e.data.updateGroupResult.contactResultItem;
                  return O(e) && (i = !1, e.forEach(function (e) {
                    var t;
                    n = u._concatConvID(e.contactItem), 0 === e.resultCode ? (o = u._getLocalConv(n)) && -1 !== (t = o.conversationGroupList.indexOf(s)) && (o.conversationGroupList.splice(t, 1), r.push(n), i = !0) : c.push({
                      conversationID: n,
                      code: e.resultCode,
                      message: e.resultInfo
                    });
                  }), !0 === i) && (u._emitConvUpdate(), u._emitConvInGroupUpdate(s)), T({
                    successConversationIDList: r,
                    failureConversationIDList: c
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._convM.noUse(i);
              }
            }, {
              key: "onConvMarkUpdated",
              value: function value(e) {
                var i,
                  a,
                  s = this;
                S(e) || (M.l("".concat(this._n, ".onConvMarkUpdated markItemList:"), e), a = !1, e.forEach(function (e) {
                  var t = e.recentContactItem,
                    n = e.optType,
                    o = e.standardMark,
                    e = e.customMark;
                  i = s._concatConvID(t), (i = s._getLocalConv(i)) && (1 === n ? a = s._diffStandardMark(i, o) : 2 === n ? a = s._diffCustomMark(i, e) : 3 === n && (t = s._diffStandardMark(i, o), n = s._diffCustomMark(i, e), a = t || n));
                }), !0 === a && this._emitConvUpdate());
              }
            }, {
              key: "_diffStandardMark",
              value: function value(e, t) {
                var t = Xt(t),
                  n = !1;
                return !0 !== function (e, t) {
                  if (e !== t) {
                    if (!e || !t) return !1;
                    if (e.length !== t.length) return !1;
                    for (var n = 0, o = e.length; n < o; n++) if (e[n] !== t[n]) return !1;
                  }
                  return !0;
                }(e.markList, t) && (e.markList = t, n = !0), n;
              }
            }, {
              key: "_diffCustomMark",
              value: function value(e, t) {
                var n = !1;
                return e.customData !== t && void 0 !== t && (e.customData = t, n = !0), n;
              }
            }, {
              key: "onConvGroupCreated",
              value: function value(e) {
                var a = this,
                  s = (M.l("".concat(this._n, ".onConvGroupCreated resultList:"), e), !1),
                  r = !1;
                O(e) && (e.forEach(function (e) {
                  var t = e.msgGroupItem,
                    n = t.groupID,
                    o = t.groupName;
                  a._convGroupMap.get(n) !== o && (a._convGroupMap.set(n, o), r = !0);
                  var i,
                    t = e.msgRecentContactItem;
                  O(t) && t.forEach(function (e) {
                    i = a._concatConvID(e), (i = a._getLocalConv(i)) && -1 === i.conversationGroupList.indexOf(o) && (i.conversationGroupList.push(o), s = !0);
                  });
                }), !0 === s && this._emitConvUpdate(), !0 === r) && this._emitConvGroupListUpdate();
              }
            }, {
              key: "onConvGroupDeleted",
              value: function value(e) {
                var n,
                  o = this,
                  i = (M.l("".concat(this._n, ".onConvGroupDeleted groupItemList:"), e), []);
                O(e) && (n = !1, e.forEach(function (e) {
                  var t = e.groupID,
                    e = e.groupName;
                  o._convGroupMap.has(t) && (o._convGroupMap["delete"](t), n = !0, i.push(e));
                }), !0 === n) && this._emitConvGroupListUpdate(), this._eraseFromConversationGroupList(i);
              }
            }, {
              key: "_eraseFromConversationGroupList",
              value: function value(t) {
                S(t) || (this._convM.getLocalConvList().forEach(function (e) {
                  e.conversationGroupList = e.conversationGroupList.filter(function (e) {
                    return !t.includes(e);
                  });
                }), this._emitConvUpdate());
              }
            }, {
              key: "onConvGroupNameUpdated",
              value: function value(e) {
                M.l("".concat(this._n, ".onConvGroupNameUpdated options:"), e);
                var t,
                  n,
                  o,
                  i = e.groupID,
                  a = e.groupName,
                  s = e.oldGroupName;
                this._convGroupMap.get(i) !== a && (this._convGroupMap.set(i, a), this._emitConvGroupListUpdate(), e = this._convM.getLocalConvList(), o = !1, e.forEach(function (e) {
                  t = e.conversationGroupList, -1 !== (n = t.indexOf(s)) && (t.splice(n, 1, a), o = !0);
                }), !0 === o) && this._emitConvUpdate();
              }
            }, {
              key: "onConvInGroupUpdated",
              value: function value(e) {
                var n,
                  o,
                  i,
                  a = this,
                  s = (M.l("".concat(this._n, ".onConvInGroupUpdated options:"), e), e.oldGroupName),
                  e = e.recentContactUpdateGroupItem;
                O(e) && (i = !1, e.forEach(function (e) {
                  var t = e.contactOptType,
                    e = e.recentContactItem;
                  n = a._concatConvID(e), (n = a._getLocalConv(n)) && (o = n.conversationGroupList.indexOf(s), 1 === t ? -1 === o && (n.conversationGroupList.push(s), i = !0) : 2 === t && -1 !== o && (n.conversationGroupList.splice(o, 1), i = !0));
                }), !0 === i) && (this._emitConvUpdate(), this._emitConvInGroupUpdate(s));
              }
            }, {
              key: "onConvAddedToOrDeletedFromGroup",
              value: function value(e) {
                var n,
                  o,
                  i = this,
                  t = (M.l("".concat(this._n, ".onConvAddedToOrDeletedFromGroup options:"), e), e.msgRecentContactItem),
                  e = e.msgRecentContactUpdateContactItem,
                  t = this._concatConvID(t),
                  a = this._getLocalConv(t);
                a && O(e) && (o = !1, e.forEach(function (e) {
                  var t = e.groupOptType,
                    e = e.recentContactGroupItem.groupName;
                  n = a.conversationGroupList.indexOf(e), 1 === t ? -1 === n && (a.conversationGroupList.push(e), o = !0) : 2 === t && -1 !== n && (a.conversationGroupList.splice(n, 1), o = !0), !0 === o && i._emitConvInGroupUpdate(e);
                }), !0 === o) && this._emitConvUpdate();
              }
            }, {
              key: "onConvGroupListSynced",
              value: function value(e) {
                O(e) && 0 !== e.length && (M.l("".concat(this._n, ".onConvGroupListSynced groupItem:"), e), this._fillConvGroupMap(e));
              }
            }, {
              key: "getConvGroupListByID",
              value: function value(e) {
                var t,
                  n = this;
                if (!S(e)) return t = [], e.forEach(function (e) {
                  n._convGroupMap.has(e) && t.push(n._convGroupMap.get(e));
                }), t;
              }
            }, {
              key: "_onConvNotFound",
              value: function value(e, t) {
                e.push({
                  conversationID: t,
                  code: k.CONV_NOT_FOUND,
                  message: this._convM.getErrMsg(k.CONV_NOT_FOUND)
                });
              }
            }, {
              key: "_onConvIDInvalid",
              value: function value(e, t) {
                e.push({
                  conversationID: t,
                  code: k.INVALID_CONV_ID,
                  message: this._convM.getErrMsg(k.INVALID_CONV_ID)
                });
              }
            }, {
              key: "_getFlagBit",
              value: function value(e) {
                for (var t = e.toString(2), n = t.length, o = n - 1; 0 <= o; o--) if ("1" === t[o]) return n - o - 1;
              }
            }, {
              key: "_concatConvID",
              value: function value(e) {
                var t,
                  n = e.type,
                  o = e.to,
                  i = e.groupID,
                  e = e.userID;
                return 1 === n ? N(e) ? N(o) || (t = "".concat(R.CONV_C2C).concat(o)) : t = "".concat(R.CONV_C2C).concat(e) : 2 === n && (t = "".concat(R.CONV_GROUP).concat(i)), t;
              }
            }, {
              key: "_getMyUserID",
              value: function value() {
                return this._convM.getMyUserID();
              }
            }, {
              key: "_getLocalConv",
              value: function value(e) {
                return this._convM.getLocalConversation(e);
              }
            }, {
              key: "_hasLocalConv",
              value: function value(e) {
                return this._convM.hasLocalConversation(e);
              }
            }, {
              key: "_emitConvUpdate",
              value: function value() {
                this._convM.emitConvUpdate(!0, !1);
              }
            }, {
              key: "_emitConvGroupListUpdate",
              value: function value() {
                this._convM.emitOEvt(h.CONVERSATION_GROUP_LIST_UPDATED, d(this._convGroupMap.values()));
              }
            }, {
              key: "_emitConvInGroupUpdate",
              value: function value(t) {
                var e = {
                    groupName: t,
                    conversationList: []
                  },
                  n = this._convM.getLocalConvList();
                e.conversationList = n.filter(function (e) {
                  return e.conversationGroupList.includes(t);
                }), this._convM.emitOEvt(h.CONVERSATION_IN_GROUP_UPDATED, e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._convGroupMap.clear(), this._startIndex = 0, this._pagingStatus = Gn;
              }
            }]),
            Ko = (t(Ii, c), e(Ii, [{
              key: "_initListeners",
              value: function value() {
                var e = this.getIEmitInst();
                e.on(U.A2KEY_AND_TINYID_UPDATED, this._init, this), e.on(U.PROFILE_UPDATED, this._onProfileUpdated, this), e.on(U.CLOUD_CONFIG, this._onCloudConfig, this);
              }
            }, {
              key: "_init",
              value: function value() {
                var e = this,
                  t = (M.l("".concat(this._n, "._init")), this.get(13).getItem("conversationMap")),
                  n = this.isIntl(),
                  o = this.isUsingChatCore();
                if (t) {
                  for (var i = t.length, a = 0; a < i; a++) {
                    var s = t[a];
                    if (s) {
                      if (this._isNonExistentAccount(s.conversationID)) continue;
                      if (s.groupProfile && At(s.groupProfile.type)) continue;
                    }
                    this._convMap.set(s.conversationID, new xo(t[a], n, o));
                  }
                  this.emitConvUpdate(!0, !1);
                }
                this.ready(function () {
                  0 < e._tmpGroupList.length && (e.updateConvGroupProfile(e._tmpGroupList), e._tmpGroupList.length = 0);
                }), this.syncConvList();
              }
            }, {
              key: "_isNonExistentAccount",
              value: function value(e) {
                var t;
                return "@TLS#ERROR" === (t = e.startsWith(R.CONV_C2C) ? e.replace(R.CONV_C2C, "") : t) || "@TLS#NOT_FOUND" === t;
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                this.isLoggedIn() && this._msgListHandler.onCheckTimer(e);
              }
            }, {
              key: "onMessageSent",
              value: function value(e) {
                this._onSendOrRcvMsg({
                  conversationOptionsList: e.conversationOptionsList,
                  isInstantMessage: !0
                });
              }
            }, {
              key: "onNewMessage",
              value: function value(e) {
                this._onSendOrRcvMsg(e);
              }
            }, {
              key: "_onSendOrRcvMsg",
              value: function value(e) {
                var t = this,
                  n = e.conversationOptionsList,
                  o = e.isInstantMessage,
                  o = void 0 === o || o,
                  i = e.isUnreadC2CMessage,
                  i = void 0 !== i && i,
                  a = e.updateUnreadCount,
                  a = void 0 === a || a,
                  s = e.isSyncingEnded,
                  s = void 0 !== s && s;
                this._isReady ? 0 !== n.length ? (!0 === o && this._checkNewConv(n), this._updateLocalConvList({
                  conversationOptionsList: n,
                  isInstantMessage: o,
                  isUnreadC2CMessage: i,
                  isFromGetConversations: !1,
                  updateUnreadCount: a
                }), o || (this._convIDFromUnreadDBMap = new Map([].concat(d(this._convIDFromUnreadDBMap), d(n.map(function (e) {
                  return [e.conversationID, 1];
                })))), this._diffAndDeleteConv(), s && this.emitIEvt(U.C2C_UNREAD_HANDLE_COMPLETED)), 0 < n.filter(function (e) {
                  return !t._isConvNeedShow(e.conversationID);
                }).length || this.emitConvUpdate()) : s && this.emitIEvt(U.C2C_UNREAD_HANDLE_COMPLETED) : this.ready(function () {
                  t._onSendOrRcvMsg(e);
                });
              }
            }, {
              key: "updateConvGroupProfile",
              value: function value(e) {
                var n,
                  o = this;
                O(e) && 0 === e.length || (0 !== this._convMap.size ? (n = !1, e.forEach(function (e) {
                  var t = "".concat(R.CONV_GROUP).concat(e.groupID);
                  o._convMap.has(t) && (n = !0, (t = o._convMap.get(t)).groupProfile = JSON.parse(JSON.stringify(e)), t.lastMessage.lastSequence < e.nextMessageSeq && (t.lastMessage.lastSequence = e.nextMessageSeq - 1), t.subType || (t.subType = e.type));
                }), n && this.emitConvUpdate(!0, !1)) : this._tmpGroupList = e);
              }
            }, {
              key: "onMessageRevoked",
              value: function value(e, t) {
                var n,
                  o,
                  i,
                  a = this;
                0 !== e.length && (n = null, o = !1, i = [], e.forEach(function (e) {
                  (n = a._convMap.get(e.conversationID)) && (t && n.reduceUnreadCount() && (o = n.type !== R.CONV_TOPIC), n.type === R.CONV_TOPIC ? i.push(e) : n.isLastMessageRevoked({
                    sequence: e.sequence,
                    time: e.time
                  }) && (n.setLastMessageRevoked(!0), n.setLastMessageRevoker(e.revoker), o = !0));
                }), this.get(10).onMessageRevoked(i), o) && this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "updateRevokerInfo",
              value: function value(u) {
                for (var e = new Set(), t = 0; t < u.length; t++) {
                  var n = u[t].revoker;
                  e.add(n);
                }
                var o = d(e),
                  i = this.get(4);
                return new Promise(function (c) {
                  i.getUserProfile({
                    userIDList: o
                  }).then(function (e) {
                    e = e.data;
                    if (!O(e) || 0 === e.length) return c(u);
                    var t,
                      n = {},
                      o = F(e);
                    try {
                      for (o.s(); !(t = o.n()).done;) {
                        var i = t.value,
                          a = i.userID,
                          s = i.nick,
                          r = i.avatar;
                        n[a] = {
                          nick: s,
                          avatar: r
                        };
                      }
                    } catch (e) {
                      o.e(e);
                    } finally {
                      o.f();
                    }
                    u.forEach(function (e) {
                      var t = e.revoker;
                      n[t] && (e.revokerInfo.nick = n[t].nick || "", e.revokerInfo.avatar = n[t].avatar || "");
                    }), c(u);
                  })["catch"](function () {
                    c(u);
                  });
                });
              }
            }, {
              key: "isLastMessageRevoked",
              value: function value(e) {
                var t = !1,
                  n = e.conversationID,
                  o = e.sequence,
                  i = e.time,
                  a = this._convMap.get(n);
                return a && (t = a.type === R.CONV_TOPIC ? this.get(10).isLastMessageRevoked({
                  topicID: n.replace(R.CONV_GROUP, ""),
                  sequence: o
                }) : a.isLastMessageRevoked({
                  sequence: o,
                  time: i
                })), M.l("".concat(this._n, ".isLastMessageRevoked options:"), e, "ret:".concat(t)), t;
              }
            }, {
              key: "onMessageDeleted",
              value: function value(e) {
                var t = this;
                if (0 !== e.length) {
                  var n = null;
                  e.forEach(function (e) {
                    (n = t._msgListHandler.getLocalMsg(e.conversationID, e.ID)) && (n.isDeleted = !0), e !== n && (e.isDeleted = !0);
                  });
                  for (var e = e[0].conversationID, o = this._msgListHandler.getLocalMsgList(e), i = {}, a = o.length - 1; 0 <= a; a--) if (!o[a].isDeleted) {
                    i = o[a];
                    break;
                  }
                  var s,
                    r = this._convMap.get(e);
                  r && (s = !1, r.lastMessage.lastSequence === i.sequence && r.lastMessage.lastTime === i.time || (S(i) && (i = void 0), r.updateLastMessage(i), r.type !== R.CONV_TOPIC && (s = !0), M.l("".concat(this._n, ".onMessageDeleted. update convID:").concat(e, " with lastMessage:"), r.lastMessage)), e.startsWith(R.CONV_C2C) && this.updateUnreadCount(e), s) && this.emitConvUpdate(!0, !1);
                }
              }
            }, {
              key: "onMessageModified",
              value: function value(e) {
                var t = "".concat(this._n, ".onMessageModified"),
                  n = e.conversationType,
                  o = e.from,
                  i = e.to,
                  a = e.time,
                  s = e.sequence,
                  r = e.elements,
                  c = e.cloudCustomData,
                  u = e.messageVersion,
                  l = this.getMyUserID(),
                  d = "".concat(n).concat(i),
                  l = (i === l && n === R.CONV_C2C && (d = "".concat(n).concat(o)), this._msgListHandler.onMsgModified(d, e)),
                  n = l.isUpdated,
                  l = l.message,
                  p = (!0 === n && this.emitOEvt(h.MESSAGE_MODIFIED, [l]), this._isTopicConv(d));
                return null === l ? M.l("".concat(t, " message is null! options:"), e) : M.l("".concat(t, " isUpdated:").concat(n, " isTopicMessage:").concat(p, " from:").concat(o, " to:").concat(i, " sequence:").concat(l.sequence, " time:").concat(l.time)), p ? this.get(10).onMessageModified(e) : (n = this._convMap.get(d)) && (o = n.lastMessage) && o.lastTime === a && o.lastSequence === s && o.version !== u && (M.l("".concat(t, " convID:").concat(d, " lastMessage updated")), o.type = r[0].type, o.payload = r[0].content, o.messageForShow = Jt(o.type, o.payload, this.isIntl()), o.cloudCustomData = c, o.version = u, this.emitConvUpdate(!0, !1)), l;
              }
            }, {
              key: "onNewGroupAtTips",
              value: function value(e) {
                var t = this,
                  e = e.dataList,
                  n = null;
                e.forEach(function (e) {
                  e.groupAtTips ? n = e.groupAtTips : e.elements ? n = y(y({}, e.elements), {}, {
                    sync: !0
                  }) : e.groupAtType && (n = y(y({}, e), {}, {
                    sync: !0
                  })), n.__random = e.random, n.__sequence = e.clientSequence, t._tmpGroupAtTipsList.push(n);
                }), M.l("".concat(this._n, ".onNewGroupAtTips isReady:").concat(this._isReady), this._tmpGroupAtTipsList), this._isReady && this._handleGroupAtTipsList();
              }
            }, {
              key: "_handleGroupAtTipsList",
              value: function value() {
                var a,
                  s = this;
                0 !== this._tmpGroupAtTipsList.length && (a = !1, this._tmpGroupAtTipsList.forEach(function (e) {
                  var t = e.groupID,
                    n = e.from,
                    o = e.topicID,
                    o = void 0 === o ? void 0 : o,
                    i = e.sync,
                    i = void 0 !== i && i;
                  n !== s.getMyUserID() && (N(o) ? (n = s._convMap.get("".concat(R.CONV_GROUP).concat(t))) && (n.updateGroupAtInfoList(e), a = !0) : ((t = s._convMap.get("".concat(R.CONV_GROUP).concat(o))) && (t.updateGroupAtInfoList(e), s.get(10).onAtInfoUpdated({
                    topicID: o,
                    groupAtInfoList: t.groupAtInfoList
                  })), S(t) && i && (s.updateTopicConversation([{
                    conversationID: "".concat(R.CONV_GROUP).concat(o),
                    type: R.CONV_TOPIC
                  }]), s._convMap.get("".concat(R.CONV_GROUP).concat(o)).updateGroupAtInfoList(e))));
                }), a && this.emitConvUpdate(!0, !1), this._tmpGroupAtTipsList.length = 0);
              }
            }, {
              key: "_checkNewConv",
              value: function value(e) {
                var t = this,
                  n = [],
                  o = [];
                e.forEach(function (e) {
                  t._convMap.has(e.conversationID) || (e.type === R.CONV_C2C ? n.push(e.conversationID.replace(R.CONV_C2C, "")) : e.type === R.CONV_GROUP && o.push(e.conversationID.replace(R.CONV_GROUP, "")));
                }), 0 < n.length && (this._onNewC2CConv(n), n = null), 0 < o.length && (this._onNewGroupConv(o), o = null);
              }
            }, {
              key: "_onNewC2CConv",
              value: function value(e) {
                var t = this.get(6);
                return Promise.all([t.getRemotePeerReadTime(e), this._msgRemindHandler.getC2CMsgRemindType(e), this._convGroupHandler.searchConvGroupAndMark(e, 1)]);
              }
            }, {
              key: "_onNewGroupConv",
              value: function value(e) {
                var t = this.get(7);
                return t ? Promise.all([t.getMsgRemindType(e), this._convGroupHandler.searchConvGroupAndMark(e, 2)]) : Promise.resolve();
              }
            }, {
              key: "_setStorageConvList",
              value: function value() {
                var e = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],
                  t = this.getLocalConvList().filter(function (e) {
                    return e.type === R.CONV_C2C || e.type === R.CONV_GROUP && e.lastMessage.type !== R.MSG_GRP_TIP;
                  }).slice(0, 20).map(function (e) {
                    return {
                      conversationID: e.conversationID,
                      type: e.type,
                      subType: e.subType,
                      lastMessage: e.lastMessage,
                      groupProfile: e.groupProfile,
                      userProfile: e.userProfile
                    };
                  });
                this.get(13).setItem("conversationMap", t, e);
              }
            }, {
              key: "emitConvUpdate",
              value: function value() {
                var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                  t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1],
                  n = this.getLocalConvList();
                t && (t = this.get(7)) && t.updateGroupLastMessage(n), e && (this.get(12).isPartialUpdatedConvs() ? (this._diffConvMap(this._convMapForDiff, this._convMap), 0 < this._partialUpdatedConvMap.size && (this.emitOEvt(h.CONVERSATION_LIST_UPDATED), this.onTotalUnreadCountUpdate(), this._convMapForDiff.clear(), this._convMapForDiff = pt(this._convMap, !0)), 0 === this._convMapForDiff.size && (this._convMapForDiff = pt(this._convMap, !0))) : (this.emitOEvt(h.CONVERSATION_LIST_UPDATED), this.onTotalUnreadCountUpdate()));
              }
            }, {
              key: "_diffConvMap",
              value: function value(e, t) {
                var n,
                  o = F(t);
                try {
                  for (o.s(); !(n = o.n()).done;) {
                    var i = j(n.value, 2),
                      a = i[0],
                      s = i[1];
                    e.has(a) && JSON.stringify(s) === e.get(a) || this._partialUpdatedConvMap.set(a, s);
                  }
                } catch (e) {
                  o.e(e);
                } finally {
                  o.f();
                }
              }
            }, {
              key: "getPartialUpdatedConvs",
              value: function value() {
                var e = d(pt(this._partialUpdatedConvMap, !1).values());
                return this._partialUpdatedConvMap.clear(), e;
              }
            }, {
              key: "getLocalConvList",
              value: function value() {
                var t = this;
                return d(this._convMap.values()).filter(function (e) {
                  return t._isConvNeedShow(e.conversationID);
                });
              }
            }, {
              key: "getLocalConversation",
              value: function value(e) {
                return this._convMap.get(e);
              }
            }, {
              key: "hasLocalConversation",
              value: function value(e) {
                return this._convMap.has(e);
              }
            }, {
              key: "getLocalOldestMessage",
              value: function value(e) {
                return this._msgListHandler.getLocalOldestMsg(e);
              }
            }, {
              key: "syncConvList",
              value: function value() {
                var o = this,
                  e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                  i = "syncConvList",
                  a = new P(i);
                return this._pagingStatus === Gn && this._convMap.clear(), this._pagingGetConvList(e).then(function (e) {
                  var t = en(o._pagingGetCostList),
                    n = $t(o._pagingGetCostList),
                    n = (o._pagingGetCostList.length = 0, o._pagingStatus = Un, o._diffAndDeleteConv(), o.emitConvUpdate(!0, !1), o._setStorageConvList(), o._handleC2CPeerReadTime(), o.emitIEvt(U.CONV_SYNC_COMPLETED), "count:".concat(o._convMap.size, " sum:").concat(n, " avg:").concat(t));
                  return M.l("".concat(o._n, ".").concat(i, ". ").concat(n)), a.setMessage(n).end(), e;
                })["catch"](function (e) {
                  return o._pagingStatus = bn, a.setMessage(o._pagingTs).setError(e).end(), E(e);
                });
              }
            }, {
              key: "_diffAndDeleteConv",
              value: function value() {
                var n,
                  o = this;
                this._isSyncCompleted() && (n = [], this._convMap.forEach(function (e, t) {
                  !o._pagingConvIDMap.has(t) && o._convIDFromUnreadDBMap.has(t) && (o._convMap["delete"](t), n.push(t));
                }), M.l("".concat(this._n, "._diffAndDeleteConv list:").concat(n)), n = null);
              }
            }, {
              key: "_pagingGetConvList",
              value: function value() {
                var r = this,
                  e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                  c = "".concat(this._n, "._pagingGetConvList"),
                  u = (M.l("".concat(c, " incrementalPullFlag:").concat(e, " ts:").concat(this._pagingTs, " startIdx:").concat(this._pagingStartIdx) + " pinnedTs:".concat(this._pagingPinnedTs, " pinnedStartIdx:").concat(this._pagingPinnedStartIdx)), Date.now());
                return this._pagingStatus = Pn, this.req({
                  P: G.PAGING_GET_CONV_LIST,
                  data: {
                    fromAccount: this.getMyUserID(),
                    timeStamp: e ? this._pagingTs : 0,
                    startIndex: e ? this._pagingStartIdx : 0,
                    pinnedTimeStamp: e ? this._pagingPinnedTs : 0,
                    pinnedStartIndex: e ? this._pagingPinnedStartIdx : 0,
                    orderType: 1
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.completeFlag,
                    n = e.conversations,
                    n = void 0 === n ? [] : n,
                    o = e.timeStamp,
                    i = e.startIndex,
                    a = e.pinnedTimeStamp,
                    s = e.pinnedStartIndex,
                    e = e.groupItem;
                  if (r._pagingGetCostList.push(tn(u, !1)), M.l("".concat(c, " ok. completeFlag:").concat(t, " count:").concat(n.length, " cost:").concat(tn(u))), r._convGroupHandler.onConvGroupListSynced(e), 0 < n.length && (e = r._getConvOptions(n), r._pagingConvIDMap = new Map([].concat(d(r._pagingConvIDMap), d(e.map(function (e) {
                    return [e.conversationID, 1];
                  })))), r._updateLocalConvList({
                    conversationOptionsList: e,
                    isFromGetConversations: !0,
                    updateUnreadCount: !0
                  }), r.isLoggedIn()) && r.emitConvUpdate(), !r._isReady) {
                    if (!r.isLoggedIn()) return D();
                    r.triggerReady();
                  }
                  return r._pagingTs = o, r._pagingStartIdx = i, r._pagingPinnedTs = a, r._pagingPinnedStartIdx = s, 1 !== t ? r._pagingGetConvList() : (r._handleGroupAtTipsList(), r._convGroupHandler.getRemoteConvGroupList(), D());
                })["catch"](function (e) {
                  throw !r.isLoggedIn() || r._isReady || (M.w("".concat(c, " failed. error:"), e), r.triggerReady()), e;
                });
              }
            }, {
              key: "_updateLocalConvList",
              value: function value(e) {
                var t = e.isFromGetConversations,
                  n = Date.now(),
                  e = this._getTmpConvListMapping(e).newConvList;
                this._convMap = new Map(this._sortConvList(d(this._convMap))), t || this._updateUserOrGroupProfile(e), M.l("".concat(this._n, "._updateLocalConvList cost:").concat(tn(n)));
              }
            }, {
              key: "_getTmpConvListMapping",
              value: function value(e) {
                for (var t = e.conversationOptionsList, n = e.isFromGetConversations, o = e.isInstantMessage, i = e.isUnreadC2CMessage, a = void 0 !== i && i, s = e.updateUnreadCount, r = [], c = [], u = this.get(7), l = this.get(8), d = this.isIntl(), p = this.isUsingChatCore(), _ = 0, h = t.length; _ < h; _++) {
                  var g = new xo(t[_], d, p),
                    f = g.conversationID,
                    m = g.type;
                  if (!this._isNonExistentAccount(f)) {
                    if (this._convMap.has(f)) {
                      var v = this._convMap.get(f);
                      if (n && m !== R.CONV_TOPIC) {
                        this._convMap.set(f, g), m === R.CONV_C2C ? g.unreadCount = v.unreadCount : m === R.CONV_GROUP && (g.groupProfile = JSON.parse(JSON.stringify(v.groupProfile)));
                        continue;
                      }
                      var I = ["unreadCount", "allowType", "adminForbidType", "payload"],
                        M = (!1 === o && I.push("lastMessage"), "boolean" == typeof o && I.push("isPinned"), t[_].lastMessage),
                        y = !N(M);
                      y || t[_].type === R.CONV_TOPIC || this._onLastMsgNotExist(t[_]), N(o) && y && null === v.lastMessage.payload && (v.lastMessage.payload = M.payload), S(v.lastMessage.revoker) || (v.lastMessage.revoker = null), dt(v, g, I, [null, void 0, "", 0, NaN]), !0 === s && v.updateUnreadCount({
                        nextUnreadCount: g.unreadCount,
                        isFromGetConversations: n,
                        isUnreadC2CMessage: a
                      }), o && y && (M.payload && (v.lastMessage.payload = M.payload), v.type === R.CONV_GROUP) && (v.lastMessage.nameCard = M.nameCard, v.lastMessage.nick = M.nick), y && v.lastMessage.cloudCustomData !== M.cloudCustomData && (v.lastMessage.cloudCustomData = M.cloudCustomData || "");
                    } else m === R.CONV_GROUP && u ? (I = g.groupProfile.groupID, (y = u.getLocalGroupProfile(I)) && (g.groupProfile = y, !0 === s) && g.updateUnreadCount({
                      nextUnreadCount: 0
                    })) : m === R.CONV_C2C && (v = f.replace(R.CONV_C2C, ""), l) && l.isMyFriend(v) && (g.remark = l.getFriendRemark(v)), r.push(g), this._convMap.set(f, g);
                    this._convMap.get(f).type === R.CONV_TOPIC && c.push(this._convMap.get(f));
                  }
                }
                for (var C = this.get(10), T = 0, D = c.length; T < D; T++) {
                  var E = c[T],
                    L = E.conversationID,
                    E = E.groupAtInfoList;
                  S(E) || C.onAtInfoUpdated({
                    topicID: L.replace(R.CONV_GROUP, ""),
                    groupAtInfoList: E
                  });
                }
                return {
                  newConvList: r
                };
              }
            }, {
              key: "_onLastMsgNotExist",
              value: function value(e) {
                new P("lastMsgNotExist").setMessage(JSON.stringify(e)).end();
              }
            }, {
              key: "_sortConvList",
              value: function value(e) {
                var t = [],
                  n = [],
                  o = [],
                  i = [];
                return e.forEach(function (e) {
                  (!0 === e[1].isPinned ? S(e[1].lastMessage.lastTime) ? n : t : S(e[1].lastMessage.lastTime) ? i : o).push(e);
                }), t.sort(function (e, t) {
                  return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
                }).concat(n).concat(o.sort(function (e, t) {
                  return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
                })).concat(i);
              }
            }, {
              key: "_sortConvListAndEmitEvent",
              value: function value() {
                this._convMap = new Map(this._sortConvList(d(this._convMap))), this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "_updateUserOrGroupProfile",
              value: function value(e) {
                var n,
                  o,
                  t,
                  i,
                  a = this;
                0 !== e.length && (n = [], o = [], t = this.get(4), i = this.get(7), e.forEach(function (e) {
                  var t;
                  e.type === R.CONV_C2C ? n.push(e.toAccount) : e.type === R.CONV_GROUP && (t = e.toAccount, i.hasLocalGroup(t) ? e.groupProfile = i.getLocalGroupProfile(t) : o.push(t));
                }), M.l("".concat(this._n, "._updateUserOrGroupProfile userIDList:").concat(n, " groupIDList:").concat(o)), 0 < n.length && t.getUserProfile({
                  userIDList: n
                }).then(function (e) {
                  e = e.data;
                  O(e) ? e.forEach(function (e) {
                    a._doUpdateUserProfile("".concat(R.CONV_C2C).concat(e.userID), e);
                  }) : a._doUpdateUserProfile("".concat(R.CONV_C2C).concat(e.userID), e);
                }), 0 < o.length) && i.getGroupProfileAdvance({
                  groupIDList: o,
                  responseFilter: {
                    groupBaseInfoFilter: ["Type", "Name", "FaceUrl"]
                  }
                }).then(function (e) {
                  var e = e.data.successGroupList,
                    n = !1;
                  e.forEach(function (e) {
                    var t = "".concat(R.CONV_GROUP).concat(e.groupID);
                    a._convMap.has(t) && (t = a._convMap.get(t), dt(t.groupProfile, e, [], [null, void 0, "", 0, NaN]), !t.subType && e.type && (t.subType = e.type), n = !0);
                  }), n && a.emitConvUpdate();
                });
              }
            }, {
              key: "_doUpdateUserProfile",
              value: function value(e, t) {
                this.hasLocalConversation(e) && (this.getLocalConversation(e).userProfile = t, this.emitConvUpdate());
              }
            }, {
              key: "_getConvOptions",
              value: function value(e) {
                var n = this,
                  o = [],
                  e = e.filter(function (e) {
                    var t = e.type,
                      e = e.userID;
                    return 1 === t && !n._isNonExistentAccount(e) || 2 === t;
                  }),
                  i = this.getMyUserID(),
                  e = e.map(function (e) {
                    var t;
                    return N(e.lastMsg) && (e.lastMsg = {
                      elements: []
                    }), 1 === e.type ? (t = {
                      userID: e.userID,
                      nick: e.peerNick,
                      avatar: e.peerAvatar
                    }, o.push(t), {
                      conversationID: "".concat(R.CONV_C2C).concat(e.userID),
                      type: R.CONV_C2C,
                      lastMessage: {
                        lastTime: e.time,
                        lastSequence: e.sequence,
                        fromAccount: e.lastC2CMsgFromAccount,
                        type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : null,
                        payload: e.lastMsg.elements[0] ? n._amendLayersOverLimitProp(e.lastMsg.elements[0].content) : null,
                        cloudCustomData: e.lastMsg.cloudCustomData || "",
                        isRevoked: 8 === e.lastMessageFlag,
                        onlineOnlyFlag: !1,
                        nick: "",
                        nameCard: "",
                        version: 0,
                        isPeerRead: e.lastC2CMsgFromAccount === i && e.time <= e.c2cPeerReadTime,
                        revoker: e.lastMsg.revokerInfo ? e.lastMsg.revokerInfo.revoker : null
                      },
                      unreadCount: 0,
                      userProfile: new bo(t),
                      peerReadTime: e.c2cPeerReadTime,
                      isPinned: 1 === e.isPinned,
                      customData: e.customMark || "",
                      markList: Xt(e.standardMark),
                      conversationGroupList: n._convGroupHandler.getConvGroupListByID(e.contactGroupId),
                      remark: e.friendRemark || "",
                      messageRemindType: n._transMsgRemindType(e.messageRemindType)
                    }) : {
                      conversationID: "".concat(R.CONV_GROUP).concat(e.groupID),
                      type: R.CONV_GROUP,
                      lastMessage: y(y({
                        lastTime: e.time,
                        lastSequence: e.sequence,
                        fromAccount: e.msgGroupFromAccount
                      }, n._patchTypeAndPayload(e)), {}, {
                        cloudCustomData: e.lastMsg.cloudCustomData || "",
                        isRevoked: 2 === e.lastMessageFlag,
                        onlineOnlyFlag: !1,
                        nick: e.senderNick || "",
                        nameCard: e.senderNameCard || "",
                        revoker: e.lastMsg.revokerInfo ? e.lastMsg.revokerInfo.revoker : null
                      }),
                      groupProfile: new qo({
                        groupID: e.groupID,
                        name: e.groupNick,
                        avatar: e.groupImage,
                        type: e.groupType,
                        nextMessageSeq: e.nextMessageSeq
                      }),
                      unreadCount: n._computeGroupUnreadCount(e),
                      peerReadTime: 0,
                      isPinned: 1 === e.isPinned,
                      version: 0,
                      customData: e.customMark || "",
                      markList: Xt(e.standardMark),
                      conversationGroupList: n._convGroupHandler.getConvGroupListByID(e.contactGroupId),
                      messageRemindType: n._transMsgRemindType(e.messageRemindType)
                    };
                  });
                return 0 < o.length && this.get(4).onConvProfileUpdated(o), e;
              }
            }, {
              key: "_transMsgRemindType",
              value: function value(e) {
                var t = "";
                return 0 === e ? t = R.MSG_REMIND_ACPT_AND_NOTE : 1 === e ? t = R.MSG_REMIND_DISCARD : 2 === e ? t = R.MSG_REMIND_ACPT_NOT_NOTE : 3 === e && (t = R.NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT), t;
              }
            }, {
              key: "_computeGroupUnreadCount",
              value: function value(e) {
                var t = e.unreadCount,
                  e = e.noUnreadCount,
                  t = (void 0 === t ? 0 : t) - (void 0 === e ? 0 : e);
                return 0 < t ? t : 0;
              }
            }, {
              key: "_patchTypeAndPayload",
              value: function value(e) {
                var e = e.lastMsg,
                  t = e.event,
                  n = e.elements,
                  n = void 0 === n ? [] : n,
                  e = e.groupTips,
                  e = void 0 === e ? {} : e;
                return N(void 0 === t ? void 0 : t) || S(e) ? {
                  type: n[0] ? n[0].type : null,
                  payload: n[0] ? this._amendLayersOverLimitProp(n[0].content) : null
                } : ((t = new Do(e)).setElement({
                  type: R.MSG_GRP_TIP,
                  content: y(y({}, e.elements), {}, {
                    groupProfile: e.groupProfile
                  })
                }), n = JSON.parse(JSON.stringify(t.payload)), t = null, {
                  type: R.MSG_GRP_TIP,
                  payload: n
                });
              }
            }, {
              key: "_amendLayersOverLimitProp",
              value: function value(e) {
                var t = e.layersOverLimit;
                return 0 === t ? e.layersOverLimit = !1 : 1 === t && (e.layersOverLimit = !0), e;
              }
            }, {
              key: "getLocalMessageList",
              value: function value(e) {
                return this._msgListHandler.getLocalMsgList(e);
              }
            }, {
              key: "deleteLocalMessage",
              value: function value(e) {
                e instanceof Do && this._msgListHandler.remove(e);
              }
            }, {
              key: "onConvDeleted",
              value: function value(e) {
                O(e) && (e = e.map(function (e) {
                  var t = e.type,
                    n = e.userID,
                    e = e.groupID;
                  return 1 === t ? "".concat(R.CONV_C2C).concat(n) : 2 === t ? "".concat(R.CONV_GROUP).concat(e) : void 0;
                }), M.l("".concat(this._n, ".onConvDeleted convIDList:").concat(e)), this.deleteLocalConvList(e));
              }
            }, {
              key: "onConvPinnedStatus",
              value: function value(e, i) {
                var a,
                  s = this;
                O(e) && (a = !1, e.forEach(function (e) {
                  var t,
                    n = e.type,
                    o = e.userID,
                    e = e.groupID;
                  1 === n ? t = s.getLocalConversation("".concat(R.CONV_C2C).concat(o)) : 2 === n && (t = s.getLocalConversation("".concat(R.CONV_GROUP).concat(e))), t && (M.l("".concat(s._n, ".onConvPinnedStatus convID:").concat(t.conversationID, " localPinned:").concat(t.isPinned, " remotePinned:").concat(i)), i ? t.isPinned || (t.isPinned = !0, a = !0) : t.isPinned && (t.isPinned = !1, a = !0));
                }), a) && this._sortConvListAndEmitEvent();
              }
            }, {
              key: "getMessageList",
              value: function value(e) {
                var r = this,
                  c = e.conversationID,
                  t = e.nextReqMessageID,
                  e = e.count,
                  u = "".concat(this._n, ".getMessageList"),
                  n = this.getLocalConversation(c),
                  o = "";
                if (n && n.groupProfile && (o = n.groupProfile.type), At(o)) return M.l("".concat(u, " not available in ").concat(o, ". convID:").concat(c)), D({
                  messageList: [],
                  nextReqMessageID: "",
                  isCompleted: !0
                });
                (N(e) || 15 < e) && (e = 15), t || this._isMeInCommunity(c) || this.clearMemMsg(c);
                var l = this._computeRemainingCount({
                    conversationID: c,
                    nextReqMessageID: t
                  }),
                  n = this._completedMap.has(c);
                if (M.l("".concat(u, " convID:").concat(c, " isEverCleared:").concat(this._isEverCleared(c), " nextReqMessageID:").concat(t) + " remainingCount:".concat(l, " count:").concat(e, " isCompleted:").concat(n)), this._needGetHistory({
                  conversationID: c,
                  remainingCount: l,
                  count: e
                })) return this.getHistoryMessages({
                  conversationID: c,
                  nextReqMessageID: t,
                  count: 20
                }).then(function (e) {
                  var t = e.nextReqID,
                    n = e.storedMessageList,
                    o = e.assembledMessageList,
                    e = e.isPullingCompleted,
                    i = r._completedMap.has(c),
                    a = n,
                    s = (0 < l && (a = r._msgListHandler.getLocalMsgList(c).slice(0, n.length + l)), {
                      nextReqMessageID: void 0,
                      messageList: void 0,
                      isCompleted: void 0
                    }),
                    n = (r._isEverCleared(c) ? (s.nextReqMessageID = t, s.messageList = o, s.isCompleted = e) : (s.nextReqMessageID = i ? "" : t, s.messageList = a, s.isCompleted = i), s.messageList.filter(function (e) {
                      return e.isRevoked;
                    }) || []),
                    o = s.messageList.map(function (e) {
                      return e.sequence;
                    });
                  return M.l("".concat(u, " ret.nextReqMessageID:").concat(s.nextReqMessageID, " ret.isCompleted:").concat(s.isCompleted, " sequenceList:"), o), O(n) && 0 !== n.length ? r.updateRevokerInfo(n).then(function (e) {
                    return e.forEach(function (t) {
                      var n = t.revokerInfo;
                      s.messageList = s.messageList.map(function (e) {
                        return e.ID === t.ID && n && (e.revokeReason = n.reason || "", e.revokerInfo = {
                          userID: n.revoker || e.revoker,
                          nick: n.nick,
                          avatar: n.avatar
                        }), e;
                      });
                    }), T(s);
                  }) : T(s);
                });
                this.modifyMessageList(c);
                o = this._getMsgListFromMem({
                  conversationID: c,
                  nextReqMessageID: t,
                  count: e
                });
                return D(o);
              }
            }, {
              key: "_isEverCleared",
              value: function value(e) {
                return this._everClearedMap.has(e);
              }
            }, {
              key: "_getMsgListFromMem",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.nextReqMessageID,
                  e = e.count,
                  o = "".concat(this._n, "._getMsgListFromMem"),
                  i = this._msgListHandler.getLocalMsgList(t),
                  a = i.length,
                  s = Gt(t),
                  r = 0,
                  c = {
                    isCompleted: !1,
                    nextReqMessageID: "",
                    messageList: []
                  },
                  e = (n ? (r = s ? i.findIndex(function (e) {
                    return e.ID === n;
                  }) : i.findIndex(function (e) {
                    return e.sequence + "" === n;
                  })) > e ? (c.messageList = i.slice(r - e, r), c.nextReqMessageID = s ? i[r - e].ID : i[r - e].sequence + "") : (c.messageList = i.slice(0, r), c.isCompleted = !0) : e < a ? (c.messageList = i.slice(r = a - e, a), c.nextReqMessageID = s ? i[r].ID : i[r].sequence + "") : (c.messageList = i.slice(0, a), c.isCompleted = !0), c.messageList.map(function (e) {
                    return e.sequence;
                  }));
                return M.l("".concat(o, " convID:").concat(t) + " ret.nextReqMessageID:".concat(c.nextReqMessageID, " ret.isCompleted:").concat(c.isCompleted, " sequenceList:").concat(e)), c;
              }
            }, {
              key: "getMessageListHopping",
              value: function value(e) {
                var t,
                  n,
                  o = e.conversationID,
                  i = e.sequence,
                  a = e.time,
                  s = e.count,
                  e = e.direction,
                  e = void 0 === e ? 0 : e;
                return (N(s) || 15 < s) && (s = 15), o.startsWith(R.CONV_C2C) ? (t = this.get(6), n = o.replace(R.CONV_C2C, ""), t.getRoamingMessagesHopping({
                  peerAccount: n,
                  time: a,
                  count: s,
                  direction: e
                })) : o.startsWith(R.CONV_GROUP) ? (t = this.get(7), n = o.replace(R.CONV_GROUP, ""), t.getRoamingMessagesHopping({
                  groupID: n,
                  sequence: i,
                  count: s,
                  direction: e
                })) : void 0;
              }
            }, {
              key: "_computeRemainingCount",
              value: function value(e) {
                var t,
                  n = e.conversationID,
                  o = e.nextReqMessageID,
                  e = this._msgListHandler.getLocalMsgList(n),
                  i = e.length;
                return M.l("".concat(this._n, "._computeRemainingCount convID:").concat(n, " nextReqMessageID:").concat(o, " length:").concat(i)), o ? (t = 0, Gt(n) ? t = e.findIndex(function (e) {
                  return e.ID === o;
                }) : Pt(n) && (t = -1 !== o.indexOf("-") ? e.findIndex(function (e) {
                  return e.ID === o;
                }) : e.findIndex(function (e) {
                  return e.sequence + "" === o;
                })), -1 === t ? 0 : t) : i;
              }
            }, {
              key: "_needGetHistory",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.remainingCount,
                  e = e.count,
                  o = this.getLocalConversation(t),
                  i = "";
                return o && o.groupProfile && (i = o.groupProfile.type), !(Ut(t) || At(i) || !this._isEverCleared(t) && (o = n <= e && !this._completedMap.has(t), M.l("".concat(this._n, "._needGetHistory convID:").concat(t, " ret:").concat(o)), !o));
              }
            }, {
              key: "_isTopicConv",
              value: function value(e) {
                e = e.replace(R.CONV_GROUP, "");
                return Nt(e);
              }
            }, {
              key: "getHistoryMessages",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r = e.conversationID,
                  c = e.count,
                  e = e.nextReqMessageID;
                return r === R.CONV_SYSTEM ? D() : (c = 20 < c ? 20 : 15, t = null, Gt(r) ? (s = 0, n = "", o = !1, a = this._roamingMsgKeyAndTimeMap.has(r), e && (o = !0, a ? (s = this._roamingMsgKeyAndTimeMap.get(r).lastMessageTime, n = this._roamingMsgKeyAndTimeMap.get(r).messageKey) : (i = this._msgListHandler.findMessage(e)) && (s = i.time, M.l("".concat(this._n, ".getHistoryMessages convID:").concat(r, " isRelayInfoExisted:").concat(a, " lastMessageTime:").concat(s)))), (t = this.get(6)).getRoamingMessage({
                  conversationID: r,
                  peerAccount: r.replace(R.CONV_C2C, ""),
                  count: c,
                  lastMessageTime: o ? s : 0,
                  messageKey: o ? n : ""
                })) : Pt(r) ? (t = this.get(7)) ? (i = r.replace(R.CONV_GROUP, ""), a = null, this._convMap.has(r) && !Nt(i) && (a = this._convMap.get(r).lastMessage), s = 0, e ? s = Number(e) : a && (s = a.lastSequence), t.getRoamingMessage({
                  conversationID: r,
                  groupID: i,
                  count: c,
                  sequence: s
                })) : E({
                  code: k.NO_MODULE
                }) : D());
              }
            }, {
              key: "patchConvLastMessage",
              value: function value(e) {
                var t,
                  n,
                  o = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
                  i = this.getLocalConversation(e);
                i && (t = (n = i.lastMessage).messageForShow, n = n.payload, S(t) || S(n) || o) && 0 !== (t = this._msgListHandler.getLocalMsgList(e)).length && (n = t[t.length - 1], M.l("".concat(this._n, ".patchConvLastMessage bForceUpdate:").concat(o, " convID:").concat(e, " payload:"), n.payload), i.updateLastMessage(n));
              }
            }, {
              key: "onRoamingMessage",
              value: function value() {
                for (var e, t, n = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], o = 1 < arguments.length ? arguments[1] : void 0, i = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2], a = 3 < arguments.length ? arguments[3] : void 0, s = o.startsWith(R.CONV_C2C) ? R.CONV_C2C : R.CONV_GROUP, r = null, c = [], o = [], u = 0, l = n.length, d = s === R.CONV_GROUP, p = this.getFileDownloadProxy(), _ = this.getDownloadFileAuthKey(), h = O(a), g = this.get(17).getFileDNList(), f = function f() {
                    d ? --u : ++u;
                  }, m = function m() {
                    return d ? l <= u : u < l;
                  }, u = d ? n.length - 1 : 0, l = d ? 0 : n.length; m(); f()) 1 !== n[u].isPlaceMessage && ((r = new Do(n[u])).to = n[u].to, s !== R.CONV_GROUP || N(n[u].topicID) || (r.to = n[u].topicID), r.isSystemMessage = !!n[u].isSystemMessage, r.conversationType = s, e = 4 === n[u].event ? {
                  type: R.MSG_GRP_TIP,
                  content: y(y({}, n[u].elements), {}, {
                    groupProfile: n[u].groupProfile
                  })
                } : n[u].elements, d || r.setNickAndAvatar({
                  nick: n[u].nick,
                  avatar: n[u].avatar
                }), S(e) ? ((t = new P("emptyMessageBody")).setMessage("from:".concat(r.from, " to:").concat(r.to, " sequence:").concat(r.sequence, " event:").concat(n[u].event)), t.setLevel("warning").end()) : (r.setElement(e, p, _, g), r.reInitialize(this.getMyUserID()), c.push(r), h && a.push(r)));
                return f = m = null, i ? (this._msgListHandler.unshift(c, o), c = null, o) : c;
              }
            }, {
              key: "findMessage",
              value: function value(e) {
                return this._msgListHandler.findMessage(e);
              }
            }, {
              key: "_isMeInCommunity",
              value: function value(e) {
                var t = !0;
                return this._isTopicConv(e) && (e = jt(e.replace(R.CONV_GROUP, "")), this.get(7).hasLocalGroup(e) || (t = !1, M.l("".concat(this._n, "._isMeInCommunity groupID:").concat(e, " ret:").concat(t)))), t;
              }
            }, {
              key: "deleteTopicRoamingInfo",
              value: function value(e) {
                var t = this;
                Ot({
                  groupID: e
                }) && this._msgListHandler.getTopicConvIDList(e).forEach(function (e) {
                  t.clearMemMsg(e);
                });
              }
            }, {
              key: "deleteGroupRoamingInfo",
              value: function value(e) {
                e = "".concat(R.CONV_GROUP).concat(e);
                0 < this._msgListHandler.getLocalMsgList(e).length && this.clearMemMsg(e);
              }
            }, {
              key: "setMessageRead",
              value: function value(e) {
                var t = e.conversationID,
                  n = this.getLocalConversation(t),
                  e = "".concat(this._n, ".setMessageRead");
                if (M.l("".concat(e, " convID:").concat(t, " unreadCount:").concat(n ? n.unreadCount : 0)), !n) return D();
                if (n.type !== R.CONV_GROUP && n.type !== R.CONV_TOPIC || S(n.groupAtInfoList) || this.deleteGroupAtTips(t), 0 === n.unreadCount) return D();
                var o = this._msgListHandler.getLocalLastMsg(t),
                  i = n.lastMessage.lastTime,
                  a = this._msgListHandler.getLocalMaxTime(t),
                  a = (i < a && (M.l("".concat(e, " update lastMessageTime from ").concat(i, " to ").concat(a)), i = a), this._msgListHandler.getLocalMaxSeq(t)),
                  s = n.lastMessage.lastSequence,
                  r = (s < a && (M.l("".concat(e, " update lastMessageSeq from ").concat(s, " to ").concat(a)), s = a), n.type === R.CONV_TOPIC && N(o) && (e = this.get(10), o = jt(a = t.replace(R.CONV_GROUP, "")), e = e.getLocalTopic(o, a)) && (s = e.nextMessageSeq - 1), null);
                switch (n.type) {
                  case R.CONV_C2C:
                    return (r = this.get(6)) ? r.setMessageRead({
                      conversationID: t,
                      lastMessageTime: i
                    }) : E({
                      code: k.NO_MODULE
                    });
                  case R.CONV_GROUP:
                  case R.CONV_TOPIC:
                    return (r = this.get(7)) ? r.setMessageRead({
                      conversationID: t,
                      lastMessageSeq: s
                    }) : E({
                      code: k.NO_MODULE
                    });
                  case R.CONV_SYSTEM:
                    return n.unreadCount = 0, this.emitConvUpdate(!0, !1), D();
                  default:
                    return D();
                }
              }
            }, {
              key: "setAllMessageRead",
              value: function value() {
                var t,
                  n = this,
                  o = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                  e = "setAllMessageRead",
                  i = "".concat(this._n, ".").concat(e),
                  a = (o.scope || (o.scope = R.READ_ALL_MSG), M.l("".concat(i, " options:"), o), this._createSetAllMessageReadPack(o));
                return 0 === a.readAllC2CMessage && 0 === a.groupMessageReadInfoList.length ? D() : (t = new P(e), this.req({
                  P: G.SET_ALL_MSG_READ,
                  data: a
                }).then(function (e) {
                  e = e.data, e = n._handleAllMsgRead(e);
                  return t.setMessage("scope:".concat(o.scope, " failureGroups:").concat(JSON.stringify(e))).end(), D();
                })["catch"](function (e) {
                  return t.setError(e).end(), M.w("".concat(i, " failed. error:"), e), E({
                    code: e && e.code ? e.code : k.MSG_UNREAD_ALL_FAIL,
                    message: e && e.message ? e.message : void 0
                  });
                }));
              }
            }, {
              key: "setConvCustomData",
              value: function value(e) {
                return this._convGroupHandler.setConvCustomData(e);
              }
            }, {
              key: "markConv",
              value: function value(e) {
                return this._convGroupHandler.markConv(e);
              }
            }, {
              key: "getConvGroupList",
              value: function value() {
                return this._convGroupHandler.getLocalConvGroupList();
              }
            }, {
              key: "createConvGroup",
              value: function value(e) {
                return this._convGroupHandler.createConvGroup(e);
              }
            }, {
              key: "deleteConvGroup",
              value: function value(e) {
                return this._convGroupHandler.deleteConvGroup(e);
              }
            }, {
              key: "renameConvGroup",
              value: function value(e) {
                return this._convGroupHandler.renameConvGroup(e);
              }
            }, {
              key: "addConvsToGroup",
              value: function value(e) {
                return this._convGroupHandler.addConvsToGroup(e);
              }
            }, {
              key: "deleteConvsFromGroup",
              value: function value(e) {
                return this._convGroupHandler.deleteConvsFromGroup(e);
              }
            }, {
              key: "onConvMarkUpdated",
              value: function value(e) {
                this._convGroupHandler.onConvMarkUpdated(e);
              }
            }, {
              key: "onConvGroupCreated",
              value: function value(e) {
                this._convGroupHandler.onConvGroupCreated(e);
              }
            }, {
              key: "onConvGroupDeleted",
              value: function value(e) {
                this._convGroupHandler.onConvGroupDeleted(e);
              }
            }, {
              key: "onConvGroupNameUpdated",
              value: function value(e) {
                this._convGroupHandler.onConvGroupNameUpdated(e);
              }
            }, {
              key: "onConvInGroupUpdated",
              value: function value(e) {
                this._convGroupHandler.onConvInGroupUpdated(e);
              }
            }, {
              key: "onConvAddedToOrDeletedFromGroup",
              value: function value(e) {
                this._convGroupHandler.onConvAddedToOrDeletedFromGroup(e);
              }
            }, {
              key: "_getConvLastMessageSeq",
              value: function value(e) {
                var t = this._msgListHandler.getLocalLastMsg(e.conversationID),
                  e = e.lastMessage.lastSequence;
                return e = t && e < t.sequence ? t.sequence : e;
              }
            }, {
              key: "_getConvLastMessageTime",
              value: function value(e) {
                var t = this._msgListHandler.getLocalLastMsg(e.conversationID),
                  e = e.lastMessage.lastTime;
                return e = t && e < t.time ? t.time : e;
              }
            }, {
              key: "_createSetAllMessageReadPack",
              value: function value(e) {
                var t,
                  n = {
                    readAllC2CMessage: 0,
                    groupMessageReadInfoList: []
                  },
                  o = e.scope,
                  i = F(this._convMap);
                try {
                  for (i.s(); !(t = i.n()).done;) {
                    var a,
                      s = j(t.value, 2)[1];
                    if (0 < s.unreadCount) if (s.type === R.CONV_C2C && 0 === n.readAllC2CMessage) {
                      if (o === R.READ_ALL_MSG) n.readAllC2CMessage = 1;else if (o === R.READ_ALL_C2C_MSG) {
                        n.readAllC2CMessage = 1;
                        break;
                      }
                    } else s.type !== R.CONV_GROUP || o !== R.READ_ALL_GROUP_MSG && o !== R.READ_ALL_MSG || (a = this._getConvLastMessageSeq(s), n.groupMessageReadInfoList.push({
                      groupID: s.groupProfile.groupID,
                      messageSequence: a
                    }));
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return n;
              }
            }, {
              key: "onPushedAllMessageRead",
              value: function value(e) {
                this._handleAllMsgRead(e);
              }
            }, {
              key: "_handleAllMsgRead",
              value: function value(e) {
                var t = e.groupMessageReadInfoList,
                  e = e.readAllC2CMessage,
                  t = this._parseGroupReadInfo(t);
                return 1 <= this._updateAllConvUnreadCount({
                  readAllC2CMessage: e
                }) && this.emitConvUpdate(!0, !1), t;
              }
            }, {
              key: "_parseGroupReadInfo",
              value: function value(e) {
                var t = [];
                if (e && e.length) for (var n = 0, o = e.length; n < o; n++) {
                  var i = e[n],
                    a = i.groupID,
                    s = i.sequence,
                    r = i.retCode,
                    i = i.lastMessageSeq;
                  N(r) ? this._remoteGroupReadSeqMap.set(a, i) : (this._remoteGroupReadSeqMap.set(a, s), 0 !== r && t.push("".concat(a, "-").concat(s, "-").concat(r)));
                }
                return t;
              }
            }, {
              key: "_updateAllConvUnreadCount",
              value: function value(e) {
                var t,
                  n = e.readAllC2CMessage,
                  o = 0,
                  i = F(this._convMap);
                try {
                  for (i.s(); !(t = i.n()).done;) {
                    var a,
                      s,
                      r,
                      c,
                      u = j(t.value, 2),
                      l = u[0],
                      d = u[1];
                    1 <= d.unreadCount && (1 === n && d.type === R.CONV_C2C ? (a = this._getConvLastMessageTime(d), this.updateIsReadAfterReadReport({
                      conversationID: l,
                      lastMessageTime: a
                    })) : d.type === R.CONV_GROUP && (s = l.replace(R.CONV_GROUP, ""), this._remoteGroupReadSeqMap.has(s)) && (r = this._remoteGroupReadSeqMap.get(s), c = this._getConvLastMessageSeq(d), this.updateIsReadAfterReadReport({
                      conversationID: l,
                      remoteReadSequence: r
                    }), r <= c) && this._remoteGroupReadSeqMap["delete"](s), this.updateUnreadCount(l, !1)) && (o += 1);
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return o;
              }
            }, {
              key: "isRemoteRead",
              value: function value(e) {
                var t,
                  n = e.conversationID,
                  e = e.sequence,
                  o = n.replace(R.CONV_GROUP, ""),
                  i = !1;
                return this._remoteGroupReadSeqMap.has(o) && (e <= (t = this._remoteGroupReadSeqMap.get(o)) && (i = !0, M.l("".concat(this._n, ".isRemoteRead convID:").concat(n, " msgSeq:").concat(e, " remoteReadSeq:").concat(t))), t + 10 <= e) && this._remoteGroupReadSeqMap["delete"](o), i;
              }
            }, {
              key: "updateIsReadAfterReadReport",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.lastMessageSeq,
                  o = e.lastMessageTime,
                  i = this._msgListHandler.getLocalMsgList(t);
                if (0 !== i.length) for (var a, s = i.length - 1; 0 <= s; s--) if (a = i[s], !(o && a.time > o || n && a.sequence > n)) {
                  if ("in" === a.flow && a.isRead) break;
                  a.setIsRead(!0);
                }
              }
            }, {
              key: "updateUnreadCount",
              value: function value(e) {
                var t,
                  n = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1],
                  o = !1,
                  i = this.getLocalConversation(e),
                  a = this._msgListHandler.getLocalMsgList(e);
                if (i) return (t = i.unreadCount) !== (a = a.filter(function (e) {
                  return !e.isRead && !e._onlineOnlyFlag && !e.isDeleted;
                }).length) && (i.unreadCount = a, o = !0, M.l("".concat(this._n, ".updateUnreadCount from ").concat(t, " to ").concat(a, ", convID:").concat(e)), !0 === n) && this.emitConvUpdate(!0, !1), o && i.type === R.CONV_TOPIC && (t = i.unreadCount, a = this.get(10), n = e.replace(R.CONV_GROUP, ""), a.onUnreadCountUpdatedFromConv(n, t)), o;
              }
            }, {
              key: "clearGroupAtInfoList",
              value: function value(e) {
                var t,
                  n = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1],
                  o = this.getLocalConversation(e);
                o && 0 < o.groupAtInfoList.length && (o.clearGroupAtInfoList(), M.l("".concat(this._n, ".clearGroupAtInfoList convID:").concat(e)), o.type === R.CONV_TOPIC && (o = o.groupAtInfoList, t = this.get(10), e = e.replace(R.CONV_GROUP, ""), t.onAtInfoUpdated({
                  topicID: e,
                  groupAtInfoList: o
                })), !0 === n) && this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "updateReadReceiptInfo",
              value: function value(e) {
                var a,
                  s,
                  o,
                  r = this,
                  t = e.userID,
                  i = void 0 === t ? void 0 : t,
                  t = e.groupID,
                  c = void 0 === t ? void 0 : t,
                  t = e.readReceiptList,
                  e = e.timestamp,
                  u = void 0 === e ? 0 : e;
                S(t) || (a = [], N(i) ? N(c) || (s = "".concat(R.CONV_GROUP).concat(c), t.forEach(function (e) {
                  var t = e.tinyID,
                    n = e.clientTime,
                    o = e.random,
                    i = e.readCount,
                    e = e.unreadCount,
                    t = "".concat(t, "-").concat(n, "-").concat(o),
                    n = r._msgListHandler.getLocalMsg(s, t) || r._msgListHandler.getHoppingMsg(s, t),
                    o = {
                      groupID: c,
                      messageID: t,
                      readCount: 0,
                      unreadCount: 0
                    };
                  n && (A(i) && (n.readReceiptInfo.readCount = i, o.readCount = i), A(e) && (n.readReceiptInfo.unreadCount = e, o.unreadCount = e), a.push(o));
                })) : (o = "".concat(R.CONV_C2C).concat(i), t.forEach(function (e) {
                  var t = e.tinyID,
                    n = e.clientTime,
                    e = e.random,
                    t = "".concat(t, "-").concat(n, "-").concat(e),
                    n = r._msgListHandler.getLocalMsg(o, t) || r._msgListHandler.getHoppingMsg(o, t);
                  n && !n.readReceiptInfo.isPeerRead && (n.readReceiptInfo.isPeerRead = !0, n.readReceiptInfo.timestamp = u, a.push({
                    userID: i,
                    messageID: t,
                    isPeerRead: !0,
                    timestamp: u
                  }));
                })), 0 < a.length && this.emitOEvt(h.MESSAGE_READ_RECEIPT_RECEIVED, a));
              }
            }, {
              key: "updateIsRead",
              value: function value(e) {
                var t = this.getLocalConversation(e),
                  n = this.getLocalMessageList(e);
                if (t && 0 !== n.length && !Ut(t.type)) {
                  for (var o = [], i = 0, a = n.length; i < a; i++) "in" !== n[i].flow ? "out" !== n[i].flow || n[i].isRead || n[i].setIsRead(!0) : o.push(n[i]);
                  var s = 0;
                  s = t.type === R.CONV_C2C ? (e = o.slice(-t.unreadCount).filter(function (e) {
                    return e.isRevoked;
                  }).length, o.length - t.unreadCount - e) : o.length - t.unreadCount;
                  for (var r = 0; r < s && !o[r].isRead; r++) o[r].setIsRead(!0);
                }
              }
            }, {
              key: "deleteGroupAtTips",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i = this,
                  a = "".concat(this._n, ".deleteGroupAtTips"),
                  s = (M.l("".concat(a)), this._convMap.get(e));
                return !s || 0 === (t = s.groupAtInfoList).length ? Promise.resolve() : (s = void 0, e.startsWith(R.CONV_GROUP) && (s = e.replace(R.CONV_GROUP, "")), n = d(t), (Ot({
                  groupID: s
                }) || Nt(s)) && 0 === (n = t.filter(function (e) {
                  return !e.atTypeArray.includes(R.CONV_AT_ALL);
                })).length ? (this.clearGroupAtInfoList(e, !1), Promise.resolve()) : (o = this.getMyUserID(), this.req({
                  P: G.DEL_GROUP_AT_TIPS,
                  data: {
                    messageListToDelete: n.map(function (e) {
                      return {
                        from: e.from,
                        to: o,
                        messageSeq: e.__sequence,
                        messageRandom: e.__random,
                        groupID: N(e.topicID) ? e.groupID : e.topicID
                      };
                    })
                  }
                }).then(function () {
                  return M.l("".concat(a, " ok. count:").concat(t.length)), i.clearGroupAtInfoList(e, !1), Promise.resolve();
                })["catch"](function (e) {
                  return M.e("".concat(a, " failed. error:"), e), E(e);
                })));
              }
            }, {
              key: "appendToMessageList",
              value: function value(e) {
                return this._msgListHandler.pushIn(e);
              }
            }, {
              key: "setMessageRandom",
              value: function value(e) {
                this._sll.set(e.random);
              }
            }, {
              key: "deleteMessageRandom",
              value: function value(e) {
                this._sll["delete"](e.random);
              }
            }, {
              key: "pushIntoMessageList",
              value: function value(e, t, n) {
                return !(!this._msgListHandler.pushIn(t, n) || this._sll.has(t.random) && !n || (e.push(t), 0));
              }
            }, {
              key: "revoke",
              value: function value(e, t, n) {
                return this._msgListHandler.revoke(e, t, n);
              }
            }, {
              key: "getPeerReadTime",
              value: function value(e) {
                return this._peerReadTimeMap.get(e);
              }
            }, {
              key: "recordPeerReadTime",
              value: function value(e, t) {
                (!this._peerReadTimeMap.has(e) || this._peerReadTimeMap.get(e) < t) && this._peerReadTimeMap.set(e, t);
              }
            }, {
              key: "updateMsgIsPeerReadProp",
              value: function value(e, t) {
                var n;
                e.startsWith(R.CONV_C2C) && 0 < t && (0 < (n = this._msgListHandler.updateMsgIsPeerReadProp(e, t)).length && this.emitOEvt(h.MESSAGE_READ_BY_PEER, n), this._convMap.has(e)) && !S(n = this._convMap.get(e).lastMessage) && n.fromAccount === this.getMyUserID() && n.lastTime <= t && !n.isPeerRead && (n.isPeerRead = !0, this.emitConvUpdate(!0, !1));
              }
            }, {
              key: "updateMsgIsModifiedProp",
              value: function value(e) {
                this._msgListHandler.updateMsgIsModifiedProp(e);
              }
            }, {
              key: "setCompleted",
              value: function value(e) {
                M.l("".concat(this._n, ".setCompleted convID:").concat(e)), this._completedMap.set(e, !0);
              }
            }, {
              key: "updateRoamingMsgKeyAndTime",
              value: function value(e, t, n) {
                this._roamingMsgKeyAndTimeMap.set(e, {
                  messageKey: t,
                  lastMessageTime: n
                });
              }
            }, {
              key: "getConvList",
              value: function value(t) {
                var n,
                  o = this,
                  i = "".concat(this._n, ".").concat("getConvList"),
                  e = "pagingStatus:".concat(this._pagingStatus, ", local conversation count:").concat(this._convMap.size, ", options:").concat(JSON.stringify(t));
                return M.l("".concat(i, ". ").concat(e)), this._pagingStatus === bn ? ((n = new P("getConvList")).setMessage(e), this.syncConvList().then(function () {
                  n.end();
                  var e = o._getConvList(t);
                  return T({
                    conversationList: e,
                    isSyncCompleted: o._isSyncCompleted()
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                })) : (e = this._getConvList(t), M.l("".concat(i, ". returned conversation count:").concat(e.length)), D({
                  conversationList: e,
                  isSyncCompleted: this._isSyncCompleted()
                }));
              }
            }, {
              key: "_getConvList",
              value: function value(t) {
                var n,
                  o,
                  i,
                  a,
                  s,
                  r = this;
                return N(t) ? this.getLocalConvList() : O(t) ? 0 === t.length ? [] : this.getLocalConvList().filter(function (e) {
                  return t.includes(e.conversationID);
                }) : m(t) ? (n = t.type, o = t.markType, i = t.groupName, a = t.hasUnreadCount, s = t.hasGroupAtInfo, this.getLocalConvList().filter(function (e) {
                  return r._filterType(e, n) && r._filterMarkType(e, o) && r._filterGroupName(e, i) && r._filterUnreadCount(e, a) && r._filterGroupAtInfo(e, s);
                })) : [];
              }
            }, {
              key: "_filterType",
              value: function value(e, t) {
                return t !== R.CONV_C2C && t !== R.CONV_GROUP || e.type === t;
              }
            }, {
              key: "_filterGroupName",
              value: function value(e, t) {
                return !C(t) || ("" === t ? 0 === e.conversationGroupList.length : e.conversationGroupList.includes(t));
              }
            }, {
              key: "_filterMarkType",
              value: function value(e, t) {
                return !A(t) || (0 === t ? 0 === e.markList.length : e.markList.includes(t));
              }
            }, {
              key: "_filterUnreadCount",
              value: function value(e, t) {
                var n = !0;
                return !0 === t ? n = 1 <= e.unreadCount : !1 === t && (n = 0 === e.unreadCount), n;
              }
            }, {
              key: "_filterGroupAtInfo",
              value: function value(e, t) {
                var n = !0;
                return !0 === t ? n = 1 <= e.groupAtInfoList.length : !1 === t && (n = 0 === e.groupAtInfoList.length), n;
              }
            }, {
              key: "_handleC2CPeerReadTime",
              value: function value() {
                var e,
                  t = F(this._convMap);
                try {
                  for (t.s(); !(e = t.n()).done;) {
                    var n = j(e.value, 2),
                      o = n[0],
                      i = n[1];
                    i.type === R.CONV_C2C && this.recordPeerReadTime(o, i.peerReadTime);
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
              }
            }, {
              key: "_isPagingGetGroupListCompleted",
              value: function value() {
                var e = this.get(7);
                return !e || e.isPagingGetCompleted();
              }
            }, {
              key: "_getLocalGroupCount",
              value: function value() {
                var e = this.get(7);
                return e ? e.getLocalGroupList().length : 0;
              }
            }, {
              key: "_hasLocalGroup",
              value: function value(e) {
                var t = this.get(7);
                return !!t && t.hasLocalGroup(e.replace(R.CONV_GROUP, ""));
              }
            }, {
              key: "getConversationProfile",
              value: function value(o) {
                var i,
                  a = this,
                  s = !1;
                if (this._convMap.has(o) ? i = this._convMap.get(o) : (i = new xo({
                  conversationID: o,
                  type: Gt(o) ? R.CONV_C2C : R.CONV_GROUP
                }, this.isIntl(), this.isUsingChatCore()), s = !0), i._isInfoCompleted || i.type === R.CONV_SYSTEM) return D({
                  conversation: i
                });
                if (Pt(o)) {
                  if (!this.get(7)) return E({
                    code: k.NO_MODULE
                  });
                  if (!this._hasLocalGroup(o)) return D({
                    conversation: i
                  });
                }
                var r = "".concat(this._n, ".").concat("getConversationProfile"),
                  c = new P("getConversationProfile");
                return M.l("".concat(r, ". convID:").concat(o, " remark:").concat(i.remark, " lastMessage:"), i.lastMessage), this._getUserOrGroupProfile(i).then(function (e) {
                  c.setMessage("convID:".concat(o, " unreadCount:").concat(e.data.conversation.unreadCount)).end();
                  var t,
                    n = a.get(8);
                  if (n && i.type === R.CONV_C2C && (t = o.replace(R.CONV_C2C, ""), n.isMyFriend(t)) && (n = n.getFriendRemark(t), i.remark !== n) && (i.remark = n, M.l("".concat(r, ". convID:").concat(o, " patch remark:").concat(i.remark))), M.l("".concat(r, " ok. isNewConv:").concat(s, " convID:").concat(o)), s) {
                    if (i.type === R.CONV_C2C) return a._onNewC2CConv([o.replace(R.CONV_C2C, "")]).then(function () {
                      return D({
                        conversation: i
                      });
                    });
                    if (i.type === R.CONV_GROUP) return a._onNewGroupConv([o.replace(R.CONV_GROUP, "")]).then(function () {
                      return D({
                        conversation: i
                      });
                    });
                  }
                  return e;
                })["catch"](function (e) {
                  return c.setError(e).setMessage("convID:".concat(o)).end(), M.e("".concat(r, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getUserOrGroupProfile",
              value: function value(t) {
                var n = this;
                return t.type === R.CONV_C2C ? this.get(4).getUserProfile({
                  userIDList: [t.toAccount]
                }).then(function (e) {
                  e = e.data;
                  return 0 === e.length ? E({
                    code: k.USER_OR_GRP_NOT_FOUND
                  }) : (t.userProfile = e[0], t._isInfoCompleted = !0, n._insertConvAfterTopmost(t), D({
                    conversation: t
                  }));
                }) : this.get(7).getGroupProfile({
                  groupID: t.toAccount
                }).then(function (e) {
                  return t.groupProfile = e.data.group, t._isInfoCompleted = !0, n._insertConvAfterTopmost(t), D({
                    conversation: t
                  });
                });
              }
            }, {
              key: "_insertConvAfterTopmost",
              value: function value(e) {
                var t, n;
                e instanceof xo && !this._convMap.has(e.conversationID) && (n = (t = d(this._convMap)).findIndex(function (e) {
                  return !1 === e[1].isPinned;
                }), t.splice(n, 0, [e.conversationID, e]), this._convMap = new Map(t), this._setStorageConvList(), this.emitConvUpdate(!0, !1));
              }
            }, {
              key: "_onProfileUpdated",
              value: function value(e) {
                var n = this;
                e.data.forEach(function (e) {
                  var t = e.userID;
                  t === n.getMyUserID() ? n._onMyProfileModified({
                    latestNick: e.nick,
                    latestAvatar: e.avatar
                  }) : (t = n._convMap.get("".concat(R.CONV_C2C).concat(t))) && (t.userProfile = e);
                });
              }
            }, {
              key: "_onCloudConfig",
              value: function value(e) {
                "0" === this.getCloudConfig("pull_on_invite") && (this._bPullOnInvite = !1), M.l("".concat(this._n, "._onCloudConfig bPullOnInvite:").concat(this._bPullOnInvite));
              }
            }, {
              key: "disableMsgPullOnInvite",
              value: function value() {
                this._bPullOnInvite = !1;
              }
            }, {
              key: "_isSyncCompleted",
              value: function value() {
                return this._pagingStatus === Un;
              }
            }, {
              key: "_errorLog",
              value: function value(e, t, n, o) {
                var i = new Error("Params validate failed."),
                  a = "".concat(this.getErrMsg("API_REFER")).concat(e);
                throw M.w("[".concat(e, "] | ").concat(t, " | ").concat(this.getErrMsg(n, o), ", ").concat(a)), M.e("[".concat(e, "] Invalid ").concat(t, ": type check failed for ").concat(t, ".")), i;
              }
            }, {
              key: "_isValidConvID",
              value: function value(e) {
                return Gt(e) || Pt(e) || Ut(e);
              }
            }, {
              key: "deleteConversation",
              value: function value(e) {
                var t = this,
                  n = "deleteConversation";
                return C(e) || st(e) || this._errorLog(n, "options", "StringOrObjectRequiredLog"), C(e) ? (this._isValidConvID(e) || this._errorLog(n, "options", "InvalidConversationID", e), M.l("".concat(this._n, ".").concat(n, " convID:").concat(e)), this.deleteConvList({
                  conversationIDList: [e],
                  flag: 1
                })) : (O(e.conversationIDList) || this._errorLog(n, "conversationIDList", "ArrayRequiredLog"), 0 === e.conversationIDList.length && this._errorLog(n, "conversationIDList", "NonEmptyArrayLog"), e.conversationIDList.forEach(function (e) {
                  t._isValidConvID(e) || t._errorLog(n, "conversationIDList", "InvalidConversationID", e);
                }), "clearHistoryMessage" in e && "boolean" != typeof e.clearHistoryMessage && this._errorLog(n, "clearHistoryMessage", "BooleanRequiredLog"), 100 < e.conversationIDList.length && (e.conversationIDList = e.conversationIDList.slice(0, 100)), this.deleteConvList(e));
              }
            }, {
              key: "deleteConvList",
              value: function value(e) {
                var t = e.conversationIDList,
                  t = void 0 === t ? [] : t,
                  n = e.clearHistoryMessage,
                  n = void 0 === n || n,
                  e = e.flag,
                  o = void 0 === e ? 0 : e,
                  i = "".concat(this._n, ".").concat("deleteConvList"),
                  e = "convIDList:".concat(t, " clearHistoryMessage:").concat(n),
                  a = (M.l("".concat(i, " ").concat(e)), new P("deleteConvList"));
                return a.setMessage(e), Promise.all([this.rmLocalOnlyConvList(t), this.rmLocalAndRemoteConvList(t, n)]).then(function (e) {
                  a.end();
                  e = [].concat(d(e[0]), d(e[1]));
                  return 0 === e.length ? E(new L({
                    code: k.CONV_NOT_FOUND
                  })) : (M.l("".concat(i, " ok")), D(1 === o ? {
                    conversationID: e[0]
                  } : {
                    conversationIDList: e
                  }));
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "rmLocalOnlyConvList",
              value: function value(e) {
                var n = this;
                return e.filter(function (e) {
                  var t;
                  return !!n._convMap.has(e) && ((t = n.getLocalConversation(e).type) !== R.CONV_GROUP || n._hasLocalGroup(e) ? t === R.CONV_SYSTEM && (n.get(7).deleteGroupSystemNotice({
                    messageList: n._msgListHandler.getLocalMsgList(e)
                  }), n.deleteLocalConv(e), !0) : (n.deleteLocalConv(e), !0));
                });
              }
            }, {
              key: "rmLocalAndRemoteConvList",
              value: function value(e, t) {
                var n = this,
                  o = {
                    fromAccount: this.getMyUserID(),
                    conversationList: [],
                    clearHistoryMessage: t ? 1 : 0
                  };
                return e.forEach(function (e) {
                  var t;
                  n._convMap.has(e) && ((t = n.getLocalConversation(e).type) === R.CONV_C2C ? o.conversationList.push({
                    toAccount: e.replace(t, ""),
                    type: 1
                  }) : t === R.CONV_GROUP && n._hasLocalGroup(e) && o.conversationList.push({
                    toGroupID: e.replace(t, ""),
                    type: 2
                  }));
                }), 0 === o.conversationList.length ? [] : this.req({
                  P: G.DEL_CONV,
                  data: o
                }).then(function (e) {
                  var t = [];
                  return 0 < e.data.resultList.length && e.data.resultList.map(function (e) {
                    0 === e.code && (e = 1 === e.type ? "".concat(R.CONV_C2C).concat(e.to) : "".concat(R.CONV_GROUP).concat(e.groupID), t.push(e));
                  }), n.deleteLocalConvList(t), t;
                });
              }
            }, {
              key: "setConvDraft",
              value: function value(e) {
                var t = e.conversationID,
                  e = e.draftText,
                  n = "".concat(this._n, ".").concat("setConvDraft");
                return M.l("".concat(n, " convID:").concat(t, " draftText:").concat(e)), this._convMap.has(t) ? ((n = this._convMap.get(t)).setDraftText(e), this.emitConvUpdate(), D({
                  code: 0,
                  conversation: n
                })) : E({
                  code: k.CONV_NOT_FOUND
                });
              }
            }, {
              key: "clearHistoryMessage",
              value: function value(t) {
                var n = this,
                  e = {
                    fromAccount: this.getMyUserID(),
                    toAccount: void 0,
                    type: void 0,
                    toGroupID: void 0
                  };
                if (!this._convMap.has(t)) return E({
                  code: k.CONV_NOT_FOUND
                });
                var o = this._convMap.get(t).type;
                if (o === R.CONV_C2C) e.type = 1, e.toAccount = t.replace(R.CONV_C2C, "");else {
                  if (o !== R.CONV_GROUP) return o === R.CONV_SYSTEM ? (this.get(7).deleteGroupSystemNotice({
                    messageList: this._msgListHandler.getLocalMsgList(t)
                  }), D({
                    conversationID: t
                  })) : E({
                    code: k.CONV_UN_RECORDED_TYPE
                  });
                  e.type = 2, e.toGroupID = t.replace(R.CONV_GROUP, "");
                }
                var i = "".concat(this._n, ".").concat("clearHistoryMessage"),
                  a = new P("clearHistoryMessage");
                return a.setMessage("convID:".concat(t)), M.l("".concat(i, ". convID:").concat(t)), this.setMessageRead({
                  conversationID: t
                }).then(function () {
                  return n.req({
                    P: G.CLEAR_HISTORY_MSG,
                    data: e
                  });
                }).then(function () {
                  a.end(), M.l("".concat(i, " ok")), n.clearMemMsg(t);
                  var e = n.getLocalConversation(t);
                  return e && (e.updateLastMessage(), n._sortConvListAndEmitEvent()), D({
                    conversationID: t
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "pinConversation",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i = this,
                  a = e.conversationID,
                  s = e.isPinned,
                  r = this.getLocalConversation(a);
                return r && r.isPinned === s ? D({
                  conversationID: a
                }) : Ut(a) ? (r && (r.isPinned = s), this._sortConvListAndEmitEvent(), D({
                  conversationID: a
                })) : (e = null, Gt(a) ? e = {
                  type: 1,
                  toAccount: a.replace(R.CONV_C2C, "")
                } : Pt(a) && (e = {
                  type: 2,
                  groupID: a.replace(R.CONV_GROUP, "")
                }), null === e ? E({
                  code: k.INVALID_CONV_ID
                }) : (t = "".concat(this._n, ".").concat("pinConversation"), n = "convID:".concat(a, " isPinned:").concat(s), (o = new P("pinConversation")).setMessage(n), M.l("".concat(t, ". ").concat(n)), this.req({
                  P: G.PIN_CONV,
                  data: {
                    fromAccount: this.getMyUserID(),
                    operationType: !0 === s ? 1 : 2,
                    itemList: [e]
                  }
                }).then(function () {
                  return o.end(), M.l("".concat(t, " ok")), r ? r.isPinned !== s && (r.isPinned = s) : i._convMap.set(a, new xo({
                    conversationID: a,
                    type: Gt(a) ? R.CONV_C2C : R.CONV_GROUP,
                    isPinned: s
                  }, i.isIntl(), i.isUsingChatCore())), i._sortConvListAndEmitEvent(), T({
                    conversationID: a
                  });
                })["catch"](function (e) {
                  return o.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })));
              }
            }, {
              key: "setMessageRemindType",
              value: function value(e) {
                return this._msgRemindHandler.set(e);
              }
            }, {
              key: "patchMsgRemindType",
              value: function value(e) {
                var t = e.ID,
                  n = e.isC2CConversation,
                  o = e.messageRemindType,
                  i = !1,
                  n = this.getLocalConversation("".concat(n ? R.CONV_C2C : R.CONV_GROUP).concat(t));
                return n && n.messageRemindType !== o && (n.messageRemindType = o, i = !0), M.l("".concat(this._n, ".patchMsgRemindType options:"), e, "ret:".concat(i)), i;
              }
            }, {
              key: "onC2CMsgRemindTypeFetched",
              value: function value(e) {
                var n,
                  o = this;
                O(e) && 0 < e.length && (n = 0, e.forEach(function (e) {
                  var t = e.userID,
                    e = e.muteFlag,
                    e = o._transMsgRemindType(e);
                  !0 === o.patchMsgRemindType({
                    ID: t,
                    isC2CConversation: !0,
                    messageRemindType: e
                  }) && (n += 1);
                }), M.l("".concat(this._n, ".onC2CMsgRemindTypeFetched updateCount:").concat(n)), 1 <= n) && this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "onC2CMsgRemindTypeSynced",
              value: function value(e) {
                var n = this,
                  o = "".concat(this._n, ".onC2CMsgRemindTypeSynced");
                e.dataList.forEach(function (e) {
                  var t;
                  S(e.muteNotificationsSync) || (t = (e = e.muteNotificationsSync).to, e = e.muteFlag, e = n._transMsgRemindType(e), n.patchMsgRemindType({
                    ID: t,
                    isC2CConversation: !(t = 0),
                    messageRemindType: e
                  }) && (t += 1), M.l("".concat(o, " updateCount:").concat(t)), 1 <= t && n.emitConvUpdate(!0, !1));
                });
              }
            }, {
              key: "onGroupMsgRemindTypeUpdated",
              value: function value(e) {
                this._msgRemindHandler.onGroupMsgRemindTypeUpdated(e);
              }
            }, {
              key: "deleteLocalConv",
              value: function value(e) {
                var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1],
                  n = this._convMap.has(e);
                M.l("".concat(this._n, ".deleteLocalConv convID:").concat(e, " has:").concat(n)), n && (this._convMap["delete"](e), this._convMapForDiff["delete"](e), this.clearMemMsg(e), this._setStorageConvList(!0), t) && (n = !this._isTopicConv(e), this.emitConvUpdate(n, !1));
              }
            }, {
              key: "pullMsgOnInvite",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s = this.get(7);
                s && (t = "".concat(this._n, ".pullMsgOnInvite"), M.l("".concat(t, " flag:").concat(this._bPullOnInvite)), this._bPullOnInvite) && (a = this.getLocalLastMessage(e), n = this.getLocalSecondLastMessage(e), i = o = 1, a && (o = a.sequence), n && (i = n.sequence), a = s.getGroupRemoteLastSeq(e.replace(R.CONV_GROUP, "")), M.l("".concat(t, " convID:").concat(e, " localLastSeq:").concat(o, " localSecondLastSeq:").concat(i, " remoteLastSeq:").concat(a)), this.clearMemMsg(e), 1 < o - i ? this._recursiveGetMsgList([], e, !1, o, i) : 1 < a - o && this._recursiveGetMsgList([], e, !0, a, o));
              }
            }, {
              key: "_recursiveGetMsgList",
              value: function value(i, a, s, r, c, e) {
                var u = this;
                this.getMessageList({
                  conversationID: a,
                  nextReqMessageID: e
                }).then(function (e) {
                  var e = e.data,
                    t = e.messageList,
                    n = e.isCompleted,
                    e = e.nextReqMessageID,
                    o = t.filter(function (e) {
                      return s ? e.sequence > c && e.sequence <= r : e.sequence > c && e.sequence < r;
                    });
                  i.unshift.apply(i, d(o)), !n && 0 < t.length && t[0].sequence > c && i.length < 60 ? u._recursiveGetMsgList(i, a, s, r, c, e) : u._emitMsgReceived(a, i);
                });
              }
            }, {
              key: "_emitMsgReceived",
              value: function value(e, t) {
                var n,
                  o,
                  i = this;
                0 < t.length && (t = t.filter(function (t, e, n) {
                  return e === n.findIndex(function (e) {
                    return e.sequence === t.sequence;
                  });
                }), n = this.hasLocalConversation(e), o = t.map(function (e) {
                  return e.sequence;
                }), M.l("".concat(this._n, "._emitMsgReceived convID:").concat(e, " has:").concat(n, " count:").concat(o.length, " sequenceList:"), o), this.emitOEvt(h.MESSAGE_RECEIVED, t), n ? this.patchConvLastMessage(e, !0) : this.getConversationProfile(e).then(function () {
                  i.patchConvLastMessage(e, !0);
                }));
              }
            }, {
              key: "deleteLocalConvList",
              value: function value(e) {
                var t = this,
                  n = !1;
                e.forEach(function (e) {
                  t._convMap.has(e) && (t.deleteLocalConv(e, !1), n = !0);
                }), M.l("".concat(this._n, ".deleteLocalConvList convID:").concat(e, " isConvIDExisted:").concat(n)), n && this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "isMessageSentByCurrentInstance",
              value: function value(e) {
                return !(!this._msgListHandler.hasLocalMsg(e.conversationID, e.ID) && !this._sll.has(e.random));
              }
            }, {
              key: "modifyMessageList",
              value: function value(e) {
                var t, n;
                e.startsWith(R.CONV_C2C) && this._convMap.has(e) && (n = this._convMap.get(e), t = Date.now(), this._msgListHandler.modifyMsgSentByPeer({
                  conversationID: e,
                  latestNick: n.userProfile.nick,
                  latestAvatar: n.userProfile.avatar
                }), n = this.get(4).getNickAndAvatarByUserID(this.getMyUserID()), this._msgListHandler.modifyMsgSentByMe({
                  conversationID: e,
                  latestNick: n.nick,
                  latestAvatar: n.avatar
                }), M.l("".concat(this._n, ".modifyMessageList convID:").concat(e, " cost:").concat(tn(t))));
              }
            }, {
              key: "updateUserProfileSpecifiedKey",
              value: function value(e) {
                M.l("".concat(this._n, ".updateUserProfileSpecifiedKey options:"), e);
                var t = e.conversationID,
                  n = e.nick,
                  e = e.avatar;
                this._convMap.has(t) && (t = this._convMap.get(t).userProfile, C(n) && t.nick !== n && (t.nick = n), C(e) && t.avatar !== e && (t.avatar = e), this.emitConvUpdate(!0, !1));
              }
            }, {
              key: "_onMyProfileModified",
              value: function value(t) {
                var n = this,
                  e = this.getLocalConvList(),
                  o = Date.now();
                e.forEach(function (e) {
                  n.modifyMessageSentByMe(y({
                    conversationID: e.conversationID
                  }, t));
                }), M.l("".concat(this._n, "._onMyProfileModified. modify all messages sent by me, cost:").concat(tn(o)));
              }
            }, {
              key: "modifyMessageSentByMe",
              value: function value(e) {
                this._msgListHandler.modifyMsgSentByMe(e);
              }
            }, {
              key: "getLatestMessageSentByMe",
              value: function value(e) {
                return this._msgListHandler.getLatestMsgSentByMe(e);
              }
            }, {
              key: "modifyMessageSentByPeer",
              value: function value(e) {
                this._msgListHandler.modifyMsgSentByPeer(e);
              }
            }, {
              key: "getLatestMessageSentByPeer",
              value: function value(e) {
                return this._msgListHandler.getLatestMsgSentByPeer(e);
              }
            }, {
              key: "pushIntoNoticeResult",
              value: function value(e, t) {
                return !(!this._msgListHandler.pushIn(t) || this._sll.has(t.random) || (e.push(t), 0));
              }
            }, {
              key: "getLocalLastMessage",
              value: function value(e) {
                return this._msgListHandler.getLocalLastMsg(e);
              }
            }, {
              key: "getLocalSecondLastMessage",
              value: function value(e) {
                return this._msgListHandler.getLocalSecondLastMsg(e);
              }
            }, {
              key: "checkAndPatchRemark",
              value: function value() {
                var e,
                  n,
                  o = this.get(8);
                0 !== this._convMap.size && o && 0 !== (e = d(this._convMap.values()).filter(function (e) {
                  return e.type === R.CONV_C2C;
                })).length && (n = 0, e.forEach(function (e) {
                  var t = e.conversationID.replace(R.CONV_C2C, "");
                  o.isMyFriend(t) && (t = o.getFriendRemark(t), e.remark !== t) && (e.remark = t, n += 1);
                }), M.l("".concat(this._n, ".checkAndPatchRemark. c2cConvCount:").concat(e.length, " patchedCount:").concat(n)), 0 < n) && this.emitConvUpdate(!0, !1);
              }
            }, {
              key: "updateTopicConversation",
              value: function value(e) {
                this._updateLocalConvList({
                  conversationOptionsList: e,
                  isFromGetConversations: !0,
                  updateUnreadCount: !0
                });
              }
            }, {
              key: "sendReadReceipt",
              value: function value(e) {
                var t = e[0],
                  n = null;
                return t.conversationType === R.CONV_C2C ? n = this._m.get(6) : t.conversationType === R.CONV_GROUP && (n = this._m.get(7)), n ? n.sendReadReceipt(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getReadReceiptList",
              value: function value(e) {
                var t = e[0],
                  n = null;
                return t.conversationType === R.CONV_C2C ? n = this._m.get(6) : t.conversationType === R.CONV_GROUP && (n = this._m.get(7)), n ? n.getReadReceiptList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getLastMessageTime",
              value: function value(e) {
                e = this.getLocalConversation(e);
                return e ? e.lastMessage.lastTime : 0;
              }
            }, {
              key: "getTotalUnreadCount",
              value: function value() {
                var e = this.getLocalConvList(),
                  t = 0;
                return e.forEach(function (e) {
                  e.type === R.CONV_SYSTEM || "" !== e.messageRemindType && e.messageRemindType !== R.MSG_REMIND_ACPT_AND_NOTE || (t += e.unreadCount);
                }), t;
              }
            }, {
              key: "onTotalUnreadCountUpdate",
              value: function value() {
                var e = this.getTotalUnreadCount();
                this._convTotalUnreadCount !== e && (M.l("".concat(this._n, ".onTotalUnreadCountUpdate from ").concat(this._convTotalUnreadCount, " to ").concat(e)), this._convTotalUnreadCount = e, this.emitOEvt(h.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED));
              }
            }, {
              key: "_isConvNeedShow",
              value: function value(e) {
                var t,
                  n,
                  e = this.getLocalConversation(e);
                return !(!N(e) && (t = e.type === R.CONV_TOPIC, n = e.type === R.CONV_GROUP && e.groupProfile.type === R.GRP_ROOM, e = e.type === R.CONV_GROUP && e.groupProfile.type === R.GRP_LIVE, t || n || e));
              }
            }, {
              key: "setAllRcvMsgOpt",
              value: function value(e) {
                return this._msgRemindHandler.setAllRcvMsgOpt(e);
              }
            }, {
              key: "getAllRcvMsgOpt",
              value: function value() {
                return this._msgRemindHandler.getAllRcvMsgOpt();
              }
            }, {
              key: "onAllRcvMsgOptNotify",
              value: function value(e) {
                this._msgRemindHandler.onAllRcvMsgOptNotify(e);
              }
            }, {
              key: "clearUnreadCount",
              value: function value(e) {
                e = this.getLocalConversation(e);
                e && 0 < e.unreadCount && (e.unreadCount = 0, this.emitConvUpdate(!0, !1));
              }
            }, {
              key: "storeHoppingMessageList",
              value: function value(e) {
                this._msgListHandler.storeHoppingMsgList(e);
              }
            }, {
              key: "clearMemMsg",
              value: function value(e) {
                var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
                M.l("".concat(this._n, ".clearMemMsg convID:").concat(e, " isOverLimit:").concat(t)), this._msgListHandler.removeByConvID(e), this._completedMap["delete"](e), this._roamingMsgKeyAndTimeMap["delete"](e), this._everClearedMap.set(e, 1);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._setStorageConvList(!0), this._pagingStatus = Gn, this._msgListHandler.reset(), this._msgRemindHandler.reset(), this._roamingMsgKeyAndTimeMap.clear(), this._sll.reset(), this._peerReadTimeMap.clear(), this._completedMap.clear(), this._convMap.clear(), this._pagingTs = 0, this._pagingStartIdx = 0, this._pagingPinnedTs = 0, this._pagingPinnedStartIdx = 0, this._remoteGroupReadSeqMap.clear(), this._convTotalUnreadCount = 0, this._pagingGetCostList.length = 0, this._pagingConvIDMap.clear(), this._convIDFromUnreadDBMap.clear(), this._pagingGetCostList.length = 0, this._convMapForDiff.clear(), this._partialUpdatedConvMap.clear(), this._everClearedMap.clear(), this._bPullOnInvite = !0, this._convGroupHandler.reset(), this.resetReady();
              }
            }])),
            Wo = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "GroupTipsHandler", this._cachedGroupTipsMap = new Map(), this._checkCountMap = new Map(), this.MAX_CHECK_COUNT = 4;
            }, [{
              key: "onCheckTimer",
              value: function value(e) {
                e % 1 == 0 && 0 < this._cachedGroupTipsMap.size && this._check();
              }
            }, {
              key: "_check",
              value: function value() {
                var i = this;
                this._cachedGroupTipsMap.forEach(function (e, t) {
                  var n = i._checkCountMap.get(t),
                    o = i._grpM.hasLocalGroup(t);
                  M.l("".concat(i._n, "._check groupID:").concat(t, " hasLocalGroup:").concat(o, " checkCount:").concat(n)), o ? (i._notifyCachedGroupTips(t), i._checkCountMap["delete"](t), i._grpM.deleteUnjoinedAVChatRoom(t)) : n >= i.MAX_CHECK_COUNT ? (i._deleteCachedGroupTips(t), i._checkCountMap["delete"](t)) : i._checkCountMap.set(t, ++n);
                });
              }
            }, {
              key: "onNewGroupTips",
              value: function value(e) {
                M.l("".concat(this._n, ".onNewGroupTips options:").concat(JSON.stringify(e.dataList)));
                var e = this._assembly(e),
                  t = e.eventDataList,
                  n = e.result,
                  e = e.AVChatRoomMessageList;
                0 < e.length && this._grpM.onAVChatRoomMessage(e), 0 < n.length && (this._grpM.emitOEvt(h.MESSAGE_RECEIVED, n), this._handleTips(n)), 0 < t.length && (this._grpM.updateNextMessageSeq(t), this._grpM.get(11).onNewMessage({
                  conversationOptionsList: t,
                  isInstantMessage: !0
                }));
              }
            }, {
              key: "_assembly",
              value: function value(e) {
                for (var t = e.event, n = e.dataList, o = null, i = [], a = [], s = {}, r = [], c = 0, u = n.length; c < u; c++) {
                  var l = vt(n[c]);
                  if (6 === t) {
                    if (this._grpM.isGroupAttributesUpdatedNotice(l)) continue;
                    if (this._grpM.isGroupCountersNotice(l)) continue;
                  }
                  var d = l.groupProfile,
                    p = d.groupID,
                    _ = d.communityType,
                    _ = void 0 === _ ? 0 : _,
                    h = d.topicID,
                    h = void 0 === h ? void 0 : h,
                    g = d.invisible,
                    d = d.groupType,
                    d = void 0 === d ? void 0 : d,
                    f = void 0,
                    m = this._grpM.isMessageFromTopic(_, h),
                    v = (m && (f = R.CONV_TOPIC, l.to = h), this._grpM.hasLocalGroup(p));
                  if (v || !this._grpM.isUnjoinedAVChatRoom(p)) if (v || m) {
                    if (this._grpM.isMessageFromOrToAVChatroom(p)) l.event = t, r.push(l);else if (l.currentUser = this._grpM.getMyUserID(), l.conversationType = R.CONV_GROUP, (o = new Do(l)).setElement({
                      type: R.MSG_GRP_TIP,
                      content: y(y({}, l.elements), {}, {
                        groupProfile: l.groupProfile
                      })
                    }), o.isSystemMessage = !1, 1 !== g) {
                      var v = this._grpM.get(11),
                        m = o,
                        g = m.conversationID,
                        m = m.sequence;
                      if (6 === t) o._onlineOnlyFlag = !0, a.push(o);else if (!v.pushIntoNoticeResult(a, o)) continue;
                      this._grpM.isMessageFromCommunityOfTopic(_, h) || 6 === t && v.getLocalConversation(g) || (6 !== t && this._qualityStat(o), _ = v.isRemoteRead({
                        conversationID: g,
                        sequence: m
                      }), N(s[g]) ? (h = 0, "in" !== o.flow || o._isExcludedFromUnreadCount || o._onlineOnlyFlag || _ || (h = 1), s[g] = i.push({
                        conversationID: g,
                        unreadCount: h,
                        type: N(f) ? o.conversationType : f,
                        subType: o.conversationSubType,
                        lastMessage: o._isExcludedFromLastMessage ? "" : o
                      }) - 1) : (i[v = s[g]].type = o.conversationType, i[v].subType = o.conversationSubType, i[v].lastMessage = o._isExcludedFromLastMessage ? "" : o, "in" !== o.flow || o._isExcludedFromUnreadCount || o._onlineOnlyFlag || _ || i[v].unreadCount++));
                    } else this._qualityStat(o);
                  } else this._cacheAndCompare({
                    groupID: p,
                    event: t,
                    item: l,
                    groupType: d
                  });
                }
                return {
                  eventDataList: i,
                  result: a,
                  AVChatRoomMessageList: r
                };
              }
            }, {
              key: "_qualityStat",
              value: function value(e) {
                this._grpM.get(26).addMessageSequence({
                  key: zn,
                  message: e
                });
              }
            }, {
              key: "_handleTips",
              value: function value(e) {
                var t = this;
                e.forEach(function (e) {
                  switch (e.payload.operationType) {
                    case 1:
                      t._onNewMemberComeIn(e);
                      break;
                    case 2:
                      t._onMemberQuit(e);
                      break;
                    case 3:
                      t._onMemberKickedOut(e);
                      break;
                    case 4:
                      t._onMemberSetAdmin(e);
                      break;
                    case 5:
                      t._onMemberCancelledAdmin(e);
                      break;
                    case 6:
                      t._onGroupProfileModified(e);
                      break;
                    case 7:
                      t._onMemberInfoModified(e);
                      break;
                    case 8:
                      t._onTopicProfileUpdated(e);
                      break;
                    default:
                      M.w("".concat(t._n, "._handleTips unknown operationType:").concat(e.payload.operationType));
                  }
                });
              }
            }, {
              key: "_onNewMemberComeIn",
              value: function value(e) {
                var e = e.payload,
                  t = e.memberNum,
                  e = e.groupProfile.groupID,
                  e = this._grpM.getLocalGroupProfile(e);
                e && A(t) && e.memberCount !== t && (e.memberCount = t, this._updateConvGroupProfile(e));
              }
            }, {
              key: "_onMemberQuit",
              value: function value(e) {
                var t = e.payload,
                  n = t.memberNum,
                  t = t.groupProfile.groupID,
                  o = this._grpM.getLocalGroupProfile(t);
                o && A(n) && o.memberCount !== n && (o.memberCount = n, this._updateConvGroupProfile(o)), this._grpM.getGroupMemberHandler().deleteLocalGroupMembers(t, e.payload.userIDList);
              }
            }, {
              key: "_onMemberKickedOut",
              value: function value(e) {
                var t = e.payload,
                  n = t.memberNum,
                  t = t.groupProfile.groupID,
                  o = this._grpM.getLocalGroupProfile(t);
                o && A(n) && o.memberCount !== n && (o.memberCount = n, this._updateConvGroupProfile(o)), this._grpM.getGroupMemberHandler().deleteLocalGroupMembers(t, e.payload.userIDList);
              }
            }, {
              key: "_updateConvGroupProfile",
              value: function value(e) {
                this._grpM.get(11).updateConvGroupProfile([e]);
              }
            }, {
              key: "_onMemberSetAdmin",
              value: function value(e) {
                var t = e.payload.groupProfile.groupID,
                  e = e.payload.userIDList,
                  n = this._grpM.getGroupMemberHandler();
                e.forEach(function (e) {
                  e = n.getLocalGroupMemberInfo(t, e);
                  e && e.updateRole(R.GRP_MBR_ROLE_ADMIN);
                });
              }
            }, {
              key: "_onMemberCancelledAdmin",
              value: function value(e) {
                var t = e.payload.groupProfile.groupID,
                  e = e.payload.userIDList,
                  n = this._grpM.getGroupMemberHandler();
                e.forEach(function (e) {
                  e = n.getLocalGroupMemberInfo(t, e);
                  e && e.updateRole(R.GRP_MBR_ROLE_MEMBER);
                });
              }
            }, {
              key: "_onGroupProfileModified",
              value: function value(e) {
                var t = this,
                  e = e.payload,
                  n = e.newGroupProfile,
                  o = e.groupProfile,
                  i = e.operatorInfo,
                  e = o.groupID,
                  a = this._grpM.getLocalGroupProfile(e),
                  o = (Object.keys(n).forEach(function (e) {
                    switch (e) {
                      case "ownerID":
                        t._ownerChanged(a, n);
                        break;
                      case "groupName":
                        a.name = n[e];
                        break;
                      default:
                        a[e] = n[e];
                    }
                  }), N(i) || Object.keys(i).forEach(function (e) {
                    var t;
                    "nameCard" === e ? a.updateSelfInfo({
                      nameCard: i[e]
                    }) : "role" === e && (t = "", 400 === i[e] ? t = R.GRP_MBR_ROLE_OWNER : 300 === i[e] ? t = R.GRP_MBR_ROLE_ADMIN : 200 === i[e] && (t = R.GRP_MBR_ROLE_MEMBER), a.updateSelfInfo({
                      role: t
                    }));
                  }), !a.isSupportTopic);
                this._grpM.emitGroupListUpdate(!0, o);
              }
            }, {
              key: "_ownerChanged",
              value: function value(e, t) {
                var e = e.groupID,
                  n = this._grpM.getLocalGroupProfile(e),
                  o = this._grpM.getMyUserID();
                o === t.ownerID && (n.updateGroup({
                  selfInfo: {
                    role: R.GRP_MBR_ROLE_OWNER
                  }
                }), n = (t = this._grpM.getGroupMemberHandler()).getLocalGroupMemberInfo(e, o), o = this._grpM.getLocalGroupProfile(e).ownerID, t = t.getLocalGroupMemberInfo(e, o), n && n.updateRole(R.GRP_MBR_ROLE_OWNER), t) && t.updateRole(R.GRP_MBR_ROLE_MEMBER);
              }
            }, {
              key: "_onMemberInfoModified",
              value: function value(e) {
                var t = e.to,
                  n = e.payload,
                  o = n.groupProfile,
                  n = n.memberList,
                  i = o.groupID,
                  a = (Nt(t) && this._updateTopicMuteTime(e), this._grpM.getGroupMemberHandler());
                n.forEach(function (e) {
                  var t = a.getLocalGroupMemberInfo(i, e.userID);
                  t && A(e.muteTime) && t.updateMuteUntil(e.muteTime);
                });
              }
            }, {
              key: "_updateTopicMuteTime",
              value: function value(e) {
                var t = e.to,
                  e = e.payload,
                  n = e.groupProfile,
                  e = e.memberList,
                  o = void 0 === e ? [] : e,
                  e = this._grpM.get(10),
                  n = n.groupID,
                  i = e.getLocalTopic(n, t);
                if (i) {
                  for (var a = !1, s = 0; s < o.length; s++) {
                    var r = o[s];
                    if (r.userID === this._grpM.getMyUserID() && 0 <= r.muteTime) {
                      i.updateSelfInfo({
                        muteTime: r.muteTime
                      }), a = !0;
                      break;
                    }
                  }
                  a && this._grpM.emitOEvt(h.TOPIC_UPDATED, {
                    groupID: n,
                    topic: i
                  });
                }
              }
            }, {
              key: "_onTopicProfileUpdated",
              value: function value(e) {
                var t = e.payload,
                  n = t.groupProfile.groupID,
                  t = t.newTopicInfo;
                this._grpM.get(10).onTopicProfileUpdated(y({
                  groupID: n,
                  topicID: e.to
                }, t));
              }
            }, {
              key: "_cacheGroupTips",
              value: function value(e, t) {
                this._cachedGroupTipsMap.has(e) || this._cachedGroupTipsMap.set(e, []), this._cachedGroupTipsMap.get(e).push(t);
              }
            }, {
              key: "_deleteCachedGroupTips",
              value: function value(e) {
                this._cachedGroupTipsMap.has(e) && this._cachedGroupTipsMap["delete"](e);
              }
            }, {
              key: "_notifyCachedGroupTips",
              value: function value(e, t) {
                var n = this,
                  o = this._cachedGroupTipsMap.get(e) || [];
                M.l("".concat(this._n, "._notifyCachedGroupTips groupID:").concat(e, " groupType:").concat(t, " count:").concat(o.length)), o.forEach(function (e) {
                  n.onNewGroupTips(e);
                }), this._deleteCachedGroupTips(e);
              }
            }, {
              key: "_cacheAndCompare",
              value: function value(e) {
                var t = e.groupID,
                  n = e.event,
                  o = e.item,
                  e = e.groupType,
                  n = (M.l("".concat(this._n, "._cacheAndCompare groupID:").concat(t, " groupType:").concat(e)), this._cacheGroupTips(t, {
                    event: n,
                    dataList: [o]
                  }), {
                    groupID: t,
                    type: e
                  });
                e === R.GRP_AVCHATROOM ? this._grpM.hasLocalGroup(t) ? this._notifyCachedGroupTips(t, e) : this._grpM.setUnjoinedAVChatRoom(t) : (this._grpM.updateGroupMap([n]), this._notifyCachedGroupTips(t, e)), this._checkCountMap.has(t) || this._checkCountMap.set(t, 0);
              }
            }, {
              key: "reset",
              value: function value() {
                this._cachedGroupTipsMap.clear(), this._checkCountMap.clear();
              }
            }]),
            Yo = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "CommonGroupHandler", this.tempConversationList = null, this._cachedGroupMessageMap = new Map(), this._checkCountMap = new Map(), this.MAX_CHECK_COUNT = 4, this.PAGING_GRP_COUNT_LIMIT = 200, this._pagingStatus = Gn, this._pagingGetCostList = [], t.getIEmitInst().on(U.A2KEY_AND_TINYID_UPDATED, this.syncGroupList, this);
            }, [{
              key: "onCheckTimer",
              value: function value(e) {
                e % 1 == 0 && 0 < this._cachedGroupMessageMap.size && this._check();
              }
            }, {
              key: "_check",
              value: function value() {
                var i = this;
                this._cachedGroupMessageMap.forEach(function (e, t) {
                  var n = i._checkCountMap.get(t),
                    o = i._grpM.hasLocalGroup(t);
                  M.l("".concat(i._n, "._check groupID:").concat(t, " hasLocalGroup:").concat(o, " checkCount:").concat(n)), o ? (i._notifyCachedGroupMessage(t), i._checkCountMap["delete"](t), i._grpM.deleteUnjoinedAVChatRoom(t)) : n >= i.MAX_CHECK_COUNT ? (i._deleteCachedGroupMessage(t), i._checkCountMap["delete"](t)) : i._checkCountMap.set(t, ++n);
                });
              }
            }, {
              key: "updateLastMsg",
              value: function value(e) {
                var t = "".concat(this._n, ".updateLastMsg");
                if (0 !== this._grpM.getGroupMap().size) {
                  for (var n, o, i, a, s = !1, r = e.length, c = 0; c < r; c++) (n = e[c]).type === R.CONV_GROUP && 0 !== n.lastMessage.lastSequence && null !== n.lastMessage.payload && (o = n.conversationID.split(/^GROUP/)[1], o = this._grpM.getLocalGroupProfile(o)) && (i = o.lastMessage, a = n.lastMessage, JSON.stringify(i) !== JSON.stringify(a)) && (o.lastMessage = y({}, n.lastMessage), s = !0);
                  M.l("".concat(t, " convCount:").concat(r, " groupCount:").concat(this._grpM.getLocalGroupList().length, " isUpdated:").concat(s)), s && (this._grpM.sortLocalGroupList(), this._grpM.emitGroupListUpdate(!0, !1));
                } else this.tempConversationList = e;
              }
            }, {
              key: "onNewMessage",
              value: function value(e) {
                var t = this._assembly(e),
                  n = t.conversationOptionsList,
                  o = t.messageList,
                  t = t.AVChatRoomMessageList,
                  t = (0 < t.length && this._grpM.onAVChatRoomMessage(t), St(o)),
                  t = (0 < t.length && this._grpM.emitOEvt(h.MESSAGE_MODIFIED, t), 0 < n.length && (this._grpM.get(11).onNewMessage({
                    conversationOptionsList: n,
                    isInstantMessage: !1 !== e.isInstantMessage,
                    updateUnreadCount: !1 !== e.updateUnreadCount
                  }), this._grpM.updateNextMessageSeq(n)), Rt(o));
                0 < t.length && this._grpM.emitOEvt(h.MESSAGE_RECEIVED, t), o.length = 0;
              }
            }, {
              key: "_assembly",
              value: function value(e) {
                var t = e.dataList,
                  n = e.event,
                  o = e.isInstantMessage,
                  i = null,
                  a = [],
                  s = [],
                  r = [],
                  c = {},
                  u = this._grpM.getFileDownloadProxy(),
                  l = this._grpM.getDownloadFileAuthKey(),
                  d = this._grpM.get(17).getFileDNList(),
                  p = t.length;
                1 < p && t.sort(function (e, t) {
                  return e.sequence - t.sequence;
                });
                for (var _ = this._grpM.get(11), h = this._grpM.get(4), g = 0; g < p; g++) {
                  var f,
                    m = vt(t[g]),
                    v = m.groupProfile,
                    I = v.groupID,
                    M = v.communityType,
                    M = void 0 === M ? 0 : M,
                    y = v.topicID,
                    y = void 0 === y ? void 0 : y,
                    C = v.invisible,
                    v = v.groupType,
                    v = void 0 === v ? void 0 : v,
                    T = void 0,
                    D = this._grpM.isMessageFromTopic(M, y),
                    E = (D && (T = R.CONV_TOPIC, m.to = y), this._grpM.hasLocalGroup(I));
                  !E && this._grpM.isUnjoinedAVChatRoom(I) || (E || D ? this._grpM.isMessageFromOrToAVChatroom(I) ? (m.event = n, r.push(m)) : (m.currentUser = this._grpM.getMyUserID(), m.conversationType = R.CONV_GROUP, m.isSystemMessage = !!m.isSystemMessage, (i = new Do(m)).setElement(m.elements, u, l, d), 1 !== C ? (E = 1 === t[g].isModified, _.isMessageSentByCurrentInstance(i) ? i.isModified = E : E = !1, 1 === m.onlineOnlyFlag ? (i._onlineOnlyFlag = !0, _.isMessageSentByCurrentInstance(i) || s.push(i)) : this._grpM.isMessageFromCommunityOfTopic(M, y) ? s.push(i) : (i.from === this._grpM.getMyUserID() && (D = _.getLatestMessageSentByMe(i.conversationID)) && (C = D.nick, M = D.avatar, C === i.nick && M === i.avatar || (_.modifyMessageSentByMe({
                    conversationID: f,
                    latestNick: i.nick,
                    latestAvatar: i.avatar
                  }), h.mockOnNickAvatarModified(i.nick, i.avatar))), _.pushIntoMessageList(s, i, E) && (this._qualityStat(o, i), f = (y = i).conversationID, D = y.sequence, C = _.isRemoteRead({
                    conversationID: f,
                    sequence: D
                  }), N(c[f]) ? (M = 0, "in" !== i.flow || i._isExcludedFromUnreadCount || C || (M = 1), c[f] = a.push({
                    conversationID: f,
                    unreadCount: M,
                    type: N(T) ? i.conversationType : T,
                    subType: i.conversationSubType,
                    lastMessage: i._isExcludedFromLastMessage ? "" : i
                  }) - 1) : (a[E = c[f]].type = N(T) ? i.conversationType : T, a[E].subType = i.conversationSubType, a[E].lastMessage = i._isExcludedFromLastMessage ? "" : i, "in" !== i.flow || i._isExcludedFromUnreadCount || C || a[E].unreadCount++)))) : this._qualityStat(o, i)) : this._cacheAndCompare({
                    groupID: I,
                    event: n,
                    item: m,
                    groupType: v
                  }));
                }
                return {
                  conversationOptionsList: a,
                  messageList: s,
                  AVChatRoomMessageList: r
                };
              }
            }, {
              key: "_qualityStat",
              value: function value(e, t) {
                var n = this._grpM.get(26);
                n.addMessageSequence({
                  key: zn,
                  message: t
                }), e && 0 < t.clientTime && n.addMessageDelay(t.clientTime);
              }
            }, {
              key: "onMsgRevoked",
              value: function value(e, t) {
                var n = this,
                  u = this._grpM.get(11),
                  l = [],
                  d = [];
                e.dataList.forEach(function (e) {
                  var t = e.elements.revokedInfos,
                    s = e.revokerInfo,
                    r = e.groupProfile,
                    c = !1;
                  r && (c = Ot({
                    groupID: r.groupID
                  }) || !S(r.topicID)), N(t) || t.forEach(function (e) {
                    var t,
                      n = S(e.topicID) ? "GROUP".concat(e.groupID) : "GROUP".concat(e.topicID),
                      o = u.getLocalConversation(n),
                      i = e.revokerInfo && e.revokerInfo.revoker || s && s.revoker,
                      a = s && s.reason || "";
                    o && At(o.type) ? t = {
                      conversationID: n,
                      sequence: e.sequence,
                      ID: "".concat(e.tinyID, "-").concat(e.clientTime, "-").concat(e.random)
                    } : (o = u.revoke(n, e.sequence, e.random)) ? t = o : (t = {
                      conversationID: n,
                      sequence: e.sequence
                    }, e.tinyID && e.clientTime && e.random && (t.ID = "".concat(e.tinyID, "-").concat(e.clientTime, "-").concat(e.random)), e.time && (t.time = e.time)), t && (t.revoker = i, t.revokeReason = a, t.revokerInfo = {
                      userID: i,
                      nick: "",
                      avatar: ""
                    }, (c ? (t.revokerInfo.nick = r.nick, t.revokerInfo.avatar = r.avatar, l) : d).push(t));
                  });
                }), 0 === d.length && 0 === l.length || (u.onMessageRevoked([].concat(l, d), t), 0 < l.length && this._grpM.emitOEvt(h.MESSAGE_REVOKED, l), 0 < d.length && u.updateRevokerInfo(d).then(function (e) {
                  n._grpM.emitOEvt(h.MESSAGE_REVOKED, e);
                }));
              }
            }, {
              key: "_groupListTreeShaking",
              value: function value(e) {
                for (var n = new Map(d(this._grpM.getGroupMap())), t = 0, o = e.length; t < o; t++) n["delete"](e[t].groupID);
                this._grpM.hasJoinedAVChatRoom() && this._grpM.getJoinedAVChatRoom().forEach(function (e) {
                  n["delete"](e);
                }), this._grpM.getGroupMap().forEach(function (e, t) {
                  e.isSupportTopic && n["delete"](t);
                });
                for (var i = d(n.keys()), a = 0, s = i.length; a < s; a++) this._grpM.deleteGroup(i[a]);
              }
            }, {
              key: "syncGroupList",
              value: function value() {
                var o,
                  i,
                  a = this,
                  e = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],
                  t = (this._pagingStatus === Gn && this._grpM.clearGroupMap(), d(re)),
                  n = this.PAGING_GRP_COUNT_LIMIT,
                  s = [];
                return !0 === e ? this._pagingGetGroupListWithTopic({
                  limit: n,
                  offset: 0,
                  groupBaseInfoFilter: t,
                  groupList: s
                }) : (e = "syncGroupList", o = "".concat(this._n, ".").concat(e), i = new P(e), this._pagingGetGroupList({
                  limit: n,
                  offset: 0,
                  groupBaseInfoFilter: t,
                  groupList: s
                }).then(function () {
                  var e = en(a._pagingGetCostList),
                    t = $t(a._pagingGetCostList),
                    n = (a._pagingGetCostList.length = 0, a._pagingStatus = Un, a._groupListTreeShaking(s), a._grpM.updateGroupMap(s), a._grpM.getLocalGroupList().length),
                    n = "count:".concat(n, " sum:").concat(t, " avg:").concat(e);
                  return M.l("".concat(o, " ok. ").concat(n)), i.setMessage(n).end(), a.tempConversationList && (a.updateLastMsg(a.tempConversationList), a.tempConversationList = null), a._grpM.emitGroupListUpdate(!0, !0), T({
                    groupList: a._grpM.getLocalGroupList()
                  });
                })["catch"](function (e) {
                  return a._pagingStatus = bn, i.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getGroupList",
              value: function value() {
                var e,
                  t = this,
                  n = "".concat(this._n, ".").concat("getGroupList");
                return M.l("".concat(n, " pagingStatus:").concat(this._pagingStatus)), this._pagingStatus === bn || this._pagingStatus === Gn ? this.syncGroupList().then(function () {
                  var e = t._grpM.getLocalGroupList();
                  return T({
                    groupList: e,
                    isSyncCompleted: t.isPagingGetCompleted()
                  });
                })["catch"](function (e) {
                  return M.e("".concat(n, " failed. error:"), e), E(e);
                }) : (e = this._grpM.getLocalGroupList(), M.l("".concat(n, ". returned group count:").concat(e.length)), D({
                  groupList: e,
                  isSyncCompleted: this.isPagingGetCompleted()
                }));
              }
            }, {
              key: "isPagingGetCompleted",
              value: function value() {
                return this._pagingStatus === Un;
              }
            }, {
              key: "_pagingGetGroupList",
              value: function value(e) {
                var o = this,
                  i = "".concat(this._n, ".").concat("_pagingGetGroupList"),
                  t = e.isCommunityRelay,
                  a = void 0 !== t && t,
                  s = e.limit,
                  r = e.offset,
                  c = e.groupBaseInfoFilter,
                  u = e.groupList,
                  l = Date.now();
                return this._grpM.req({
                  P: G.GET_GRP_LIST,
                  data: {
                    type: a ? R.GRP_COMMUNITY : void 0,
                    memberAccount: this._grpM.getMyUserID(),
                    limit: s,
                    offset: r,
                    responseFilter: {
                      groupBaseInfoFilter: c,
                      selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"]
                    }
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.groups,
                    t = void 0 === t ? [] : t,
                    e = e.totalCount,
                    t = (u.push.apply(u, d(t)), o._handleGroupAtInfoWithoutTopic(a, t), r + s),
                    n = !(t < e),
                    e = "offset:".concat(r, " limit:").concat(s, " total:").concat(e, " isCompleted:").concat(n, " ") + "current:".concat(u.length, " isCommunityRelay:").concat(a);
                  return o._pagingGetCostList.push(tn(l, !1)), M.l("".concat(i, " ok. ").concat(e, " cost:").concat(tn(l))), a || n ? !a && n ? (M.l("".concat(i, " start to get community list")), r = 0, o._pagingGetGroupList({
                    limit: s,
                    offset: r,
                    groupBaseInfoFilter: c,
                    groupList: u,
                    isCommunityRelay: !0
                  })) : a && !n ? (r = t, o._pagingGetGroupList({
                    limit: s,
                    offset: r,
                    groupBaseInfoFilter: c,
                    groupList: u,
                    isCommunityRelay: !0
                  })) : T({
                    groupList: u
                  }) : (r = t, o._pagingGetGroupList({
                    limit: s,
                    offset: r,
                    groupBaseInfoFilter: c,
                    groupList: u
                  }));
                })["catch"](function (e) {
                  return 10018 === e.code ? (M.w("".concat(o.logPrefix, " response size exceeds the limit, request count:").concat(s)), s = 50, o._pagingGetGroupList({
                    limit: s,
                    offset: r,
                    groupBaseInfoFilter: c,
                    groupList: u,
                    isCommunityRelay: a
                  })) : a ? (11e3 === e.code && M.l("".concat(i, " ok. community unavailable")), D({
                    groupList: u
                  })) : E(e);
                });
              }
            }, {
              key: "_pagingGetGroupListWithTopic",
              value: function value(e) {
                var o = this,
                  i = "".concat(this._n, "._pagingGetGroupListWithTopic"),
                  a = e.limit,
                  s = e.offset,
                  r = e.groupBaseInfoFilter,
                  c = e.groupList,
                  u = Date.now();
                return this._grpM.req({
                  P: G.GET_GRP_LIST,
                  data: {
                    type: R.GRP_COMMUNITY,
                    memberAccount: this._grpM.getMyUserID(),
                    limit: a,
                    offset: s,
                    responseFilter: {
                      groupBaseInfoFilter: r,
                      selfInfoFilter: d(ce)
                    },
                    isSupportTopic: 1,
                    needAppDefineData: 1
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.groups,
                    e = e.totalCount,
                    t = (c.push.apply(c, d(void 0 === t ? [] : t)), s + a),
                    n = !(t < e);
                  if (M.l("".concat(i, " ok. offset:").concat(s, " limit:").concat(a, " totalCount:").concat(e, " isCompleted:").concat(n, " currentCount:").concat(c.length, " cost:").concat(tn(u))), !n) return s = t, o._pagingGetGroupListWithTopic({
                    limit: a,
                    offset: s,
                    groupBaseInfoFilter: r,
                    groupList: c
                  });
                  o._grpM.updateGroupMap(c), o._grpM.emitGroupListUpdate(!0, !1);
                  e = o._grpM.getLocalGroupList().filter(function (e) {
                    return !0 === e.isSupportTopic;
                  });
                  return T({
                    groupList: e
                  });
                })["catch"](function (e) {
                  return 10018 === e.code ? (M.w("".concat(o.logPrefix, " response size exceeds the limit, request count:").concat(a)), a = 50, o._pagingGetGroupListWithTopic({
                    limit: a,
                    offset: s,
                    groupBaseInfoFilter: r,
                    groupList: c
                  })) : E(e);
                });
              }
            }, {
              key: "_cacheGroupMessage",
              value: function value(e, t) {
                this._cachedGroupMessageMap.has(e) || this._cachedGroupMessageMap.set(e, []), this._cachedGroupMessageMap.get(e).push(t);
              }
            }, {
              key: "_deleteCachedGroupMessage",
              value: function value(e) {
                this._cachedGroupMessageMap.has(e) && this._cachedGroupMessageMap["delete"](e);
              }
            }, {
              key: "_notifyCachedGroupMessage",
              value: function value(e, t) {
                var n = this,
                  o = this._cachedGroupMessageMap.get(e) || [];
                M.l("".concat(this._n, "._notifyCachedGroupMessage groupID:").concat(e, " groupType:").concat(t, " count:").concat(o.length)), o.forEach(function (e) {
                  n.onNewMessage(e);
                }), this._deleteCachedGroupMessage(e);
              }
            }, {
              key: "_cacheAndCompare",
              value: function value(e) {
                var t = e.groupID,
                  n = e.event,
                  o = e.item,
                  e = e.groupType,
                  n = (M.l("".concat(this._n, "._cacheAndCompare groupID:").concat(t, " groupType:").concat(e)), this._cacheGroupMessage(t, {
                    event: n,
                    dataList: [o]
                  }), {
                    groupID: t,
                    type: e
                  });
                e === R.GRP_AVCHATROOM ? this._grpM.hasLocalGroup(t) ? this._notifyCachedGroupMessage(t, e) : this._grpM.setUnjoinedAVChatRoom(t) : (this._grpM.updateGroupMap([n]), this._notifyCachedGroupMessage(t, e)), this._checkCountMap.has(t) || this._checkCountMap.set(t, 0);
              }
            }, {
              key: "_handleGroupAtInfoWithoutTopic",
              value: function value(e, t) {
                var o = this;
                e && 0 !== t.length && t.forEach(function (e) {
                  var t = e.groupID,
                    e = e.groupAtInfoList,
                    n = [];
                  N(e) || (e.forEach(function (e) {
                    n.push(y(y({}, e), {}, {
                      groupID: t
                    }));
                  }), o._grpM.get(11).onNewGroupAtTips({
                    dataList: n
                  }));
                });
              }
            }, {
              key: "setPagingGroupCount",
              value: function value(e) {
                N(e) || (this.PAGING_GRP_COUNT_LIMIT = parseInt(e, 10));
              }
            }, {
              key: "reset",
              value: function value() {
                this.PAGING_GRP_COUNT_LIMIT = 200, this._cachedGroupMessageMap.clear(), this._checkCountMap.clear(), this._pagingStatus = Gn, this._pagingGetCostList = [];
              }
            }]),
            jo = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "GroupAttributesHandler", this._groupAttributesMap = new Map(), this._groupAttributesCopy = {}, this.CACHE_EXPIRE_TIME = 3e4, this._grpM.getIEmitInst().on(U.CLOUD_CONFIG, this._onCloudConfig, this);
            }, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this._grpM.getCloudConfig("grp_attr_cache_time");
                N(e) || (this.CACHE_EXPIRE_TIME = Number(e));
              }
            }, {
              key: "updateLocalMainSequenceOnReconnected",
              value: function value() {
                this._groupAttributesMap.forEach(function (e) {
                  e.localMainSequence = 0;
                });
              }
            }, {
              key: "isGroupAttributesUpdatedNotice",
              value: function value(e) {
                var t = e.to,
                  e = e.elements.newGroupProfile,
                  n = !N(e) && !S(e.groupAttributeOption);
                return n && this._onGroupAttributesUpdated({
                  groupID: t,
                  groupAttributeOption: e.groupAttributeOption
                }), n;
              }
            }, {
              key: "_onGroupAttributesUpdated",
              value: function value(e) {
                var t,
                  n = this,
                  o = e.groupID,
                  e = e.groupAttributeOption,
                  i = e.mainSequence,
                  a = e.isWithChangedAttributeInfo,
                  s = e.groupAttributeList,
                  s = void 0 === s ? [] : s,
                  e = e.operationType;
                M.l("".concat(this._n, ".onGroupAttributesUpdated. ") + "groupID:".concat(o, " isWithChangedAttributeInfo:").concat(a, " operationType:").concat(e)), N(e) || (this._groupAttributesCopy = this._getCachedAttributes({
                  groupID: o
                }), 0 != (t = i - this._getLocalGroupAttributes(o).localMainSequence) && (1 === a && 1 == t ? (this._refreshCachedGroupAttributes({
                  groupID: o,
                  remoteMainSequence: i,
                  groupAttributeList: s,
                  operationType: e
                }), this._emitGroupAttributesUpdated(o)) : this._hasLocalGroupAttributes(o) && (a = this._getLocalGroupAttributes(o).avChatRoomKey, this._getGroupAttributes({
                  groupID: o,
                  avChatRoomKey: a
                }).then(function () {
                  n._emitGroupAttributesUpdated(o);
                }))));
              }
            }, {
              key: "initGroupAttributesCache",
              value: function value(e) {
                var t = e.groupID,
                  e = e.avChatRoomKey,
                  e = void 0 === e ? void 0 : e;
                this._groupAttributesMap.set(t, {
                  lastUpdateTime: 0,
                  localMainSequence: 0,
                  remoteMainSequence: 0,
                  attributes: new Map(),
                  avChatRoomKey: e
                }), M.l("".concat(this._n, ".initGroupAttributesCache groupID:").concat(t, " avChatRoomKey:").concat(e));
              }
            }, {
              key: "initGroupAttributes",
              value: function value(e) {
                var n = this,
                  o = e.groupID,
                  i = e.groupAttributes,
                  e = this._getLocalGroupAttributes(o),
                  t = e.remoteMainSequence,
                  e = e.avChatRoomKey,
                  a = new P("initGroupAttributes");
                return a.setMessage("groupID:".concat(o, " avChatRoomKey:").concat(e, " mainSequence:").concat(t)), this._grpM.req({
                  P: G.SET_GRP_ATTR,
                  data: {
                    groupID: o,
                    avChatRoomKey: e,
                    mainSequence: t,
                    groupAttributeList: this._transformGroupAttributes(i)
                  }
                }).then(function (e) {
                  M.l("".concat(n._n, ".").concat("initGroupAttributes", " ok. groupID:").concat(o));
                  var e = e.data,
                    t = e.mainSequence,
                    e = d(e.groupAttributeList);
                  return e.forEach(function (e) {
                    e.value = i[e.key];
                  }), n._groupAttributesCopy = n._getCachedAttributes({
                    groupID: o
                  }), n._refreshCachedGroupAttributes({
                    groupID: o,
                    remoteMainSequence: t,
                    groupAttributeList: e,
                    operationType: 1
                  }), n._emitGroupAttributesUpdated(o), a.end(), T({
                    groupAttributes: i
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), E(e);
                });
              }
            }, {
              key: "setGroupAttributes",
              value: function value(e) {
                var n = this,
                  o = "".concat(this._n, ".").concat("setGroupAttributes"),
                  i = e.groupID,
                  a = e.groupAttributes,
                  e = this._getLocalGroupAttributes(i),
                  t = e.remoteMainSequence,
                  s = e.avChatRoomKey,
                  r = e.attributes,
                  e = this._transformGroupAttributes(a),
                  c = (e.forEach(function (e) {
                    var t = e.key;
                    e.sequence = 0, r.has(t) && (e.sequence = r.get(t).sequence);
                  }), new P("setGroupAttributes"));
                return c.setMessage("groupID:".concat(i, " groupAttributes:").concat(JSON.stringify(a))), M.l("".concat(o, ". groupID:").concat(i, " mainSequence:").concat(t)), this._grpM.req({
                  P: G.MODIFY_GRP_ATTR,
                  data: {
                    groupID: i,
                    avChatRoomKey: s,
                    mainSequence: t,
                    groupAttributeList: e
                  }
                }).then(function (e) {
                  M.l("".concat(o, " ok."));
                  var e = e.data,
                    t = e.mainSequence,
                    e = d(e.groupAttributeList);
                  return e.forEach(function (e) {
                    e.value = a[e.key];
                  }), n._groupAttributesCopy = n._getCachedAttributes({
                    groupID: i
                  }), n._refreshCachedGroupAttributes({
                    groupID: i,
                    remoteMainSequence: t,
                    groupAttributeList: e,
                    operationType: 2
                  }), n._emitGroupAttributesUpdated(i), c.end(), T({
                    groupAttributes: a
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), E(e);
                });
              }
            }, {
              key: "deleteGroupAttributes",
              value: function value(e) {
                var t = this,
                  n = e.groupID,
                  e = e.keyList,
                  e = void 0 === e ? [] : e,
                  o = this._getLocalGroupAttributes(n),
                  i = o.remoteMainSequence,
                  a = o.avChatRoomKey,
                  s = o.attributes,
                  r = d(s.keys()),
                  o = G.CLEAR_GRP_ATTR,
                  c = 3,
                  a = {
                    groupID: n,
                    avChatRoomKey: a,
                    mainSequence: i
                  },
                  u = [],
                  l = (0 < e.length && (r = [], o = G.DEL_GRP_ATTR, c = 4, e.forEach(function (e) {
                    var t = 0;
                    s.has(e) && (t = s.get(e).sequence, r.push(e)), u.push({
                      key: e,
                      sequence: t
                    });
                  }), a.groupAttributeList = u), new P("deleteGroupAttributes"));
                return l.setMessage("groupID:".concat(n, " mainSequence:").concat(i, " keyList:").concat(e, " proto:").concat(o)), this._grpM.req({
                  P: o,
                  data: a
                }).then(function (e) {
                  M.l("".concat(t._n, ".").concat("deleteGroupAttributes", " ok. groupID:").concat(n));
                  e = e.data.mainSequence;
                  return t._groupAttributesCopy = t._getCachedAttributes({
                    groupID: n
                  }), t._refreshCachedGroupAttributes({
                    groupID: n,
                    remoteMainSequence: e,
                    groupAttributeList: u,
                    operationType: c
                  }), t._emitGroupAttributesUpdated(n), l.end(), T({
                    keyList: r
                  });
                })["catch"](function (e) {
                  return l.setError(e).end(), E(e);
                });
              }
            }, {
              key: "getGroupAttributes",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".").concat("getGroupAttributes"),
                  i = t.groupID,
                  e = this._getLocalGroupAttributes(i),
                  a = e.avChatRoomKey,
                  s = e.lastUpdateTime,
                  r = e.localMainSequence,
                  e = e.remoteMainSequence,
                  c = new P("getGroupAttributes");
                if (c.setMessage("groupID:".concat(i, " localMainSequence:").concat(r, " remoteMainSequence:").concat(e, " keyList:").concat(t.keyList)), Date.now() - s >= this.CACHE_EXPIRE_TIME || r < e) return this._getGroupAttributes({
                  groupID: i,
                  avChatRoomKey: a
                }).then(function (e) {
                  c.setMoreMessage("get attributes from remote. count:".concat(e.length)).end(), M.l("".concat(o, " from remote. groupID:").concat(i));
                  e = n._getCachedAttributes(t);
                  return T({
                    groupAttributes: e
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), E(e);
                });
                c.setMoreMessage("get attributes from cache").end(), M.l("".concat(o, " from cache. groupID:").concat(i));
                s = this._getCachedAttributes(t);
                return D({
                  groupAttributes: s
                });
              }
            }, {
              key: "_getGroupAttributes",
              value: function value(o) {
                var i = this,
                  e = 0;
                return N(o.avChatRoomKey) || (e = 1), this._grpM.req({
                  P: G.GET_GRP_ATTR,
                  data: y(y({}, o), {}, {
                    groupType: e
                  })
                }).then(function (e) {
                  M.l("".concat(i._n, "._getGroupAttributes ok. groupID:").concat(o.groupID));
                  var e = e.data,
                    t = e.mainSequence,
                    e = e.groupAttributeList,
                    n = d(e);
                  return N(t) || i._refreshCachedGroupAttributes({
                    groupID: o.groupID,
                    remoteMainSequence: t,
                    groupAttributeList: n,
                    operationType: 5
                  }), e;
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "_refreshCachedGroupAttributes",
              value: function value(e) {
                var t = e.groupID,
                  n = e.remoteMainSequence,
                  o = e.groupAttributeList,
                  e = e.operationType;
                if (this._hasLocalGroupAttributes(t)) {
                  var i = this._getLocalGroupAttributes(t),
                    a = i.localMainSequence;
                  if (5 === e || n - a == 1) i.remoteMainSequence = n, i.localMainSequence = n, i.lastUpdateTime = Date.now(), this._updateCachedAttributes({
                    groupAttributes: i,
                    groupAttributeList: o,
                    operationType: e
                  });else {
                    if (a === n) return;
                    i.remoteMainSequence = n;
                  }
                  this._groupAttributesMap.set(t, i);
                  o = "operationType:".concat(e, " localMainSequence:").concat(a, " remoteMainSequence:").concat(n);
                  M.l("".concat(this._n, "._refreshCachedGroupAttributes. ").concat(o));
                }
              }
            }, {
              key: "_getCachedAttributes",
              value: function value(e) {
                var t = e.groupID,
                  e = e.keyList,
                  e = void 0 === e ? [] : e,
                  n = {};
                if (this._hasLocalGroupAttributes(t)) {
                  var o = this._getLocalGroupAttributes(t).attributes;
                  if (0 < e.length) e.forEach(function (e) {
                    o.has(e) && (n[e] = o.get(e).value);
                  });else {
                    var i,
                      a = F(o.keys());
                    try {
                      for (a.s(); !(i = a.n()).done;) {
                        var s = i.value;
                        n[s] = o.get(s).value;
                      }
                    } catch (e) {
                      a.e(e);
                    } finally {
                      a.f();
                    }
                  }
                }
                return n;
              }
            }, {
              key: "_updateCachedAttributes",
              value: function value(e) {
                var o = e.groupAttributes,
                  t = e.groupAttributeList,
                  e = e.operationType;
                3 !== e ? 4 !== e ? (1 === e && o.attributes.clear(), t.forEach(function (e) {
                  var t = e.key,
                    n = e.value,
                    e = e.sequence;
                  o.attributes.set(t, {
                    value: n,
                    sequence: e
                  });
                })) : t.forEach(function (e) {
                  o.attributes["delete"](e.key);
                }) : o.attributes.clear();
              }
            }, {
              key: "_hasLocalGroupAttributes",
              value: function value(e) {
                return this._groupAttributesMap.has(e);
              }
            }, {
              key: "_getLocalGroupAttributes",
              value: function value(e) {
                return this._hasLocalGroupAttributes(e) || this.initGroupAttributesCache({
                  groupID: e
                }), this._groupAttributesMap.get(e);
              }
            }, {
              key: "_transformGroupAttributes",
              value: function value(t) {
                var n = [];
                return Object.keys(t).forEach(function (e) {
                  n.push({
                    key: e,
                    value: t[e]
                  });
                }), n;
              }
            }, {
              key: "_emitGroupAttributesUpdated",
              value: function value(e) {
                var t = this._getCachedAttributes({
                    groupID: e
                  }),
                  n = this._computeAttrChangedInfo(t),
                  o = n.updatedKeyList,
                  n = n.deletedKeyList;
                M.l("".concat(this._n, "._emitGroupAttributesUpdated update:").concat(o.length, ", delete:").concat(n.length)), 0 === o.length && 0 === n.length || this._grpM.emitOEvt(h.GROUP_ATTRIBUTES_UPDATED, {
                  groupID: e,
                  groupAttributes: t,
                  updatedKeyList: o,
                  deletedKeyList: n
                });
              }
            }, {
              key: "_computeAttrChangedInfo",
              value: function value(t) {
                var n = this,
                  o = [],
                  i = [];
                return Object.keys(t).forEach(function (e) {
                  t[e] !== n._groupAttributesCopy[e] && o.push(e);
                }), Object.keys(this._groupAttributesCopy).forEach(function (e) {
                  N(t[e]) && i.push(e);
                }), this._groupAttributesCopy = {}, {
                  updatedKeyList: o,
                  deletedKeyList: i
                };
              }
            }, {
              key: "deleteLocalGroupAttributes",
              value: function value(e) {
                this._hasLocalGroupAttributes(e) && this._groupAttributesMap["delete"](e);
              }
            }, {
              key: "reset",
              value: function value() {
                this._groupAttributesMap.clear(), this._groupAttributesCopy = {}, this.CACHE_EXPIRE_TIME = 3e4;
              }
            }]),
            Jo = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "GroupCountersHandler", this._groupCountersMap = new Map(), this.EXPIRE_TIME = 3e4, this._grpM.getIEmitInst().on(U.CLOUD_CONFIG, this._onCloudConfig, this);
            }, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this._grpM.getCloudConfig("grp_counter_expire_time");
                N(e) || (this.EXPIRE_TIME = Number(e));
              }
            }, {
              key: "isGroupCountersNotice",
              value: function value(e) {
                var t = e.to,
                  e = e.elements.groupCounterInfo,
                  n = !1;
                return S(e) || (this._onGroupCountersUpdated({
                  groupID: t,
                  groupCounterInfo: e
                }), n = !0), n;
              }
            }, {
              key: "_onGroupCountersUpdated",
              value: function value(e) {
                var o = this,
                  i = e.groupID;
                e.groupCounterInfo.forEach(function (e) {
                  var t = e.type,
                    n = e.groupCounterSeq,
                    e = e.counterList,
                    e = void 0 === e ? [] : e;
                  0 !== t && 2 !== t || (o._updateLocalGroupCounters({
                    groupID: i,
                    groupCounterSeq: n,
                    counterList: e
                  }), e.forEach(function (e) {
                    o._grpM.emitOEvt(h.GROUP_COUNTER_UPDATED, {
                      groupID: i,
                      key: e.key,
                      value: e.value
                    });
                  })), 1 === t && o._deleteLocalGroupCounters({
                    groupID: i,
                    groupCounterSeq: n,
                    counterList: e
                  });
                }), M.l("".concat(this._n, "._onGroupCountersUpdated groupID:").concat(i));
              }
            }, {
              key: "initGroupCountersCache",
              value: function value(e) {
                var t = e.groupID,
                  e = e.avChatRoomKey;
                this._groupCountersMap.set(t, {
                  lastUpdateTime: 0,
                  groupCounterSeq: 0,
                  counters: new Map(),
                  avChatRoomKey: e
                }), M.l("".concat(this._n, ".initGroupCountersCache groupID:").concat(t, " avChatRoomKey:").concat(e));
              }
            }, {
              key: "setGroupCounters",
              value: function value(e) {
                var t, n, o, i, a;
                return this._grpM.canIUse(g.GRP_COUNTER) ? (t = "".concat(this._n, ".").concat("setGroupCounters"), n = e.groupID, e = e.counters, e = this._convertObjectToList(e), o = this._getLocalGroupCounters(n).avChatRoomKey, i = "groupID:".concat(n, " count:").concat(e.length), (a = new P("setGroupCounters")).setMessage("".concat(i)), M.l("".concat(t, ". ").concat(i)), this._updateGroupCounters({
                  groupID: n,
                  counterList: e,
                  avChatRoomKey: o,
                  mode: "Set"
                }).then(function (e) {
                  return a.end(), M.l("".concat(t, " ok.")), T({
                    counters: e
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._grpM.noUse("setGroupCounters");
              }
            }, {
              key: "increaseGroupCounter",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r = "increaseGroupCounter";
                return this._grpM.canIUse(g.GRP_COUNTER) ? (t = "".concat(this._n, ".").concat(r), n = e.groupID, o = e.key, e = e.value, i = this._getLocalGroupCounters(n).avChatRoomKey, a = "groupID:".concat(n, " key:").concat(o, " value:").concat(e), (s = new P(r)).setMessage("".concat(a)), M.l("".concat(t, ". ").concat(a)), this._updateGroupCounters({
                  groupID: n,
                  counterList: [{
                    key: o,
                    value: e
                  }],
                  avChatRoomKey: i,
                  mode: "Increase"
                }).then(function (e) {
                  return s.end(), M.l("".concat(t, " ok.")), T({
                    counters: e
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._grpM.noUse(r);
              }
            }, {
              key: "decreaseGroupCounter",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r = "decreaseGroupCounter";
                return this._grpM.canIUse(g.GRP_COUNTER) ? (t = "".concat(this._n, ".").concat(r), n = e.groupID, o = e.key, e = e.value, i = this._getLocalGroupCounters(n).avChatRoomKey, a = "groupID:".concat(n, " key:").concat(o, " value:").concat(e), (s = new P(r)).setMessage("".concat(a)), M.l("".concat(t, ". ").concat(a)), this._updateGroupCounters({
                  groupID: n,
                  counterList: [{
                    key: o,
                    value: e
                  }],
                  avChatRoomKey: i,
                  mode: "Decrease"
                }).then(function (e) {
                  return s.end(), M.l("".concat(t, " ok.")), T({
                    counters: e
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._grpM.noUse(r);
              }
            }, {
              key: "getGroupCounters",
              value: function value(e) {
                var t = this;
                if (!this._grpM.canIUse(g.GRP_COUNTER)) return this._grpM.noUse("getGroupCounters");
                var n = "".concat(this._n, ".").concat("getGroupCounters"),
                  o = e.groupID,
                  e = e.keyList,
                  i = void 0 === e ? [] : e,
                  e = this._getLocalGroupCounters(o),
                  a = e.avChatRoomKey,
                  e = e.lastUpdateTime,
                  s = new P("getGroupCounters");
                if (s.setMessage("groupID:".concat(o)), Date.now() - e >= this.EXPIRE_TIME) return this._getRemoteGroupCounters({
                  groupID: o,
                  avChatRoomKey: a
                }).then(function (e) {
                  s.setMoreMessage("from remote. count:".concat(e.length)).end(), M.l("".concat(n, " from remote. groupID:").concat(o));
                  e = t._getLocalCounters(o, i);
                  return T({
                    counters: e
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), E(e);
                });
                s.setMoreMessage("from cache").end(), M.l("".concat(n, " from cache. groupID:").concat(o));
                e = this._getLocalCounters(o, i);
                return D({
                  counters: e
                });
              }
            }, {
              key: "_getRemoteGroupCounters",
              value: function value(n) {
                var o = this;
                return this._grpM.req({
                  P: G.GET_GRP_COUNTER,
                  data: y({}, n)
                }).then(function (e) {
                  var e = e.data,
                    t = e.counterList,
                    t = void 0 === t ? [] : t,
                    e = e.groupCounterSeq;
                  return o._updateLocalGroupCounters({
                    groupID: n.groupID,
                    counterList: t,
                    groupCounterSeq: e
                  }), M.l("".concat(o._n, "._getRemoteGroupCounters ok. groupID:").concat(n.groupID)), t;
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "_convertObjectToList",
              value: function value(t) {
                var n = [];
                return Object.keys(t).forEach(function (e) {
                  n.push({
                    key: e,
                    value: t[e]
                  });
                }), n;
              }
            }, {
              key: "_updateGroupCounters",
              value: function value(e) {
                var t = "".concat(this._n, "._updateGroupCounters"),
                  n = e.groupID,
                  o = e.avChatRoomKey,
                  i = e.mode;
                return M.l("".concat(t, ". groupID:").concat(n, " avChatRoomKey:").concat(o, " mode:").concat(i)), this._grpM.req({
                  P: G.UPDATE_GRP_COUNTER,
                  data: y({}, e)
                }).then(function (e) {
                  M.l("".concat(t, " ok."));
                  var e = e.data.counterList,
                    n = {};
                  return (void 0 === e ? [] : e).forEach(function (e) {
                    var t = e.key,
                      e = e.value;
                    n[t] = e;
                  }), n;
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "_hasLocalGroupCounters",
              value: function value(e) {
                return this._groupCountersMap.has(e);
              }
            }, {
              key: "_getLocalGroupCounters",
              value: function value(e) {
                return this._hasLocalGroupCounters(e) || this.initGroupCountersCache({
                  groupID: e
                }), this._groupCountersMap.get(e);
              }
            }, {
              key: "_updateLocalGroupCounters",
              value: function value(e) {
                var n,
                  t,
                  o,
                  i = e.groupID,
                  a = e.counterList,
                  a = void 0 === a ? [] : a,
                  e = e.groupCounterSeq;
                this._hasLocalGroupCounters(i) && (o = this._getLocalGroupCounters(i), n = o.counters, t = o.avChatRoomKey, o = o.groupCounterSeq, 0 < e && e < o || (a.forEach(function (e) {
                  var t = e.key,
                    e = e.value;
                  n.set(t, e);
                }), this._groupCountersMap.set(i, {
                  lastUpdateTime: Date.now(),
                  groupCounterSeq: e,
                  counters: n,
                  avChatRoomKey: t
                })));
              }
            }, {
              key: "_deleteLocalGroupCounters",
              value: function value(e) {
                var t,
                  n,
                  o = e.groupID,
                  i = e.counterList,
                  i = void 0 === i ? [] : i,
                  e = e.groupCounterSeq;
                this._hasLocalGroupCounters(o) && (n = this._getLocalGroupCounters(o), t = n.counters, n = n.avChatRoomKey, i.forEach(function (e) {
                  t["delete"](e.key);
                }), this._groupCountersMap.set(o, {
                  lastUpdateTime: Date.now(),
                  groupCounterSeq: e,
                  counters: t,
                  avChatRoomKey: n
                }));
              }
            }, {
              key: "_getLocalCounters",
              value: function value(e, t) {
                var n = {};
                if (this._hasLocalGroupCounters(e)) {
                  var o = this._getLocalGroupCounters(e).counters;
                  if (0 < t.length) t.forEach(function (e) {
                    o.has(e) && (n[e] = o.get(e));
                  });else {
                    var i,
                      a = F(o.keys());
                    try {
                      for (a.s(); !(i = a.n()).done;) {
                        var s = i.value;
                        n[s] = o.get(s);
                      }
                    } catch (e) {
                      a.e(e);
                    } finally {
                      a.f();
                    }
                  }
                }
                return n;
              }
            }, {
              key: "reset",
              value: function value() {
                this._groupCountersMap.clear(), this.EXPIRE_TIME = 3e4;
              }
            }]),
            zo = e(function e(t) {
              p(this, e);
              var n = t.manager,
                o = t.groupID,
                i = t.onInit,
                a = t.onSuccess,
                t = t.onFail;
              this._n = "Polling", this._manager = n, this._grpM = n._grpM, this._onInit = i, this._onSuccess = a, this._onFail = t, this._groupID = o, this._timeoutID = -1, this._isRunning = !1, this._proto = G.AV_POLLING;
            }, [{
              key: "start",
              value: function value() {
                var e = this._grpM.isLoggedIn();
                e || (this._proto = G.AV_NOAUTH_POLLING), M.l("".concat(this._n, ".start pollingInterval:").concat(this._manager.getPollingInterval(), " isLoggedIn:").concat(e)), this._isRunning = !0, this._request();
              }
            }, {
              key: "isRunning",
              value: function value() {
                return this._isRunning;
              }
            }, {
              key: "_request",
              value: function value() {
                var t = this,
                  e = this._onInit(this._groupID);
                this._grpM.req({
                  P: this._proto,
                  data: e
                }).then(function (e) {
                  t._onSuccess(t._groupID, e), t.isRunning() && (-1 < t._timeoutID && clearTimeout(t._timeoutID), t._timeoutID = setTimeout(t._request.bind(t), t._manager.getPollingInterval()));
                })["catch"](function (e) {
                  t._onFail(t._groupID, e), t.isRunning() && (-1 < t._timeoutID && clearTimeout(t._timeoutID), t._timeoutID = setTimeout(t._request.bind(t), t._manager.MAX_POLLING_INTERVAL));
                });
              }
            }, {
              key: "stop",
              value: function value() {
                M.l("".concat(this._n, ".stop")), -1 < this._timeoutID && (clearTimeout(this._timeoutID), this._timeoutID = -1), this._isRunning = !1;
              }
            }, {
              key: "getPollingTimerID",
              value: function value() {
                return this._timeoutID;
              }
            }]),
            Xo = {
              3: !0,
              4: !0,
              5: !0,
              6: !0,
              17: !0,
              20: !0,
              21: !0,
              100: !0
            },
            Zo = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "AVChatRoomHandler", this._joinedGroupMap = new Map(), this._pollingRequestInfoMap = new Map(), this._pollingInstanceMap = new Map(), this._seqSll = new wo(200), this._IDSll = new wo(100), this._reportMessageStackedCount = 0, this._onlineMemberCountMap = new Map(), this.DEFAULT_EXPIRE_TIME = 60, this.DEFAULT_POLLING_INTERVAL = 300, this.MAX_POLLING_INTERVAL = 2e3, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0, this._startBroadcastSeq = 1, this._broadcastMessageIDMap = new Map(), this.DEFAULT_POLLING_SIMPLIFIED_MSG = 0;
            }, [{
              key: "hasJoinedAVChatRoom",
              value: function value() {
                var e = [];
                return 0 < (e = 0 < this._joinedGroupMap.size ? d(this._joinedGroupMap.values()).filter(function (e) {
                  return e.type === R.GRP_AVCHATROOM;
                }) : e).length;
              }
            }, {
              key: "getJoinedLiveList",
              value: function value() {
                var e = [];
                return e = 0 < this._joinedGroupMap.size ? d(this._joinedGroupMap.values()).filter(function (e) {
                  return e.type === R.GRP_LIVE;
                }) : e;
              }
            }, {
              key: "checkJoinedAVChatRoomByID",
              value: function value(e) {
                return this._joinedGroupMap.has(e);
              }
            }, {
              key: "getJoinedAVChatRoom",
              value: function value() {
                return 0 < this._joinedGroupMap.size ? d(this._joinedGroupMap.keys()) : [];
              }
            }, {
              key: "_updatedata",
              value: function value(e) {
                var t = this._pollingRequestInfoMap.get(e);
                return e === d(this._pollingInstanceMap.keys())[0] ? y(y({}, t), {}, {
                  startBroadcastSeq: this._startBroadcastSeq,
                  simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG
                }) : y(y({}, t), {}, {
                  simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG
                });
              }
            }, {
              key: "_handleSuccess",
              value: function value(e, t) {
                var n,
                  o = t.data,
                  i = o.key,
                  a = o.nextSeq,
                  s = o.rspMsgList,
                  r = o.errorCode,
                  c = o.nextBroadcastSeq,
                  o = o.broadcastMessageList;
                0 !== r ? (r = this._pollingRequestInfoMap.get(e), n = new P("longPollingAVError"), r = r ? "".concat(r.key, "-").concat(r.startSeq) : "requestInfo is undefined", n.setMessage("".concat(e, "-").concat(r, "-").concat(t.errorInfo)).setCode(t.errorCode).end(!0)) : this.checkJoinedAVChatRoomByID(e) && (C(i) && A(a) && this._pollingRequestInfoMap.set(e, {
                  key: i,
                  startSeq: a
                }), A(c) && c > this._startBroadcastSeq && (this._startBroadcastSeq = c), O(s) && 0 < s.length ? (s.forEach(function (e) {
                  e.to = e.groupID;
                }), this.onMessage(s, e)) : (this._pollingNoMessageCount += 1, this._pollingNoMessageCount === this.DEFAULT_POLLING_NO_MESSAGE_COUNT && (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL + this.DEFAULT_POLLING_INTERVAL_PLUS)), this._onBroadcastMessage(o));
              }
            }, {
              key: "_handleFailure",
              value: function value(e, t) {}
            }, {
              key: "onMessage",
              value: function value(e, t) {
                if (O(e) && 0 !== e.length) {
                  var n = "".concat(this._n, ".onMessage"),
                    o = (t && (n += " groupID:".concat(t)), 0 !== this._pollingNoMessageCount && (this._pollingNoMessageCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL), null),
                    i = [],
                    a = this._get(11),
                    s = this._get(26),
                    r = e.length,
                    c = (1 < r && e.sort(function (e, t) {
                      return e.sequence - t.sequence;
                    }), this._get(12).isUnlimitedAVChatRoom()),
                    u = !1;
                  M.getLevel() <= 0 && (t = e.map(function (e) {
                    return e.sequence;
                  }), M.l("".concat(n, " count:").concat(t.length, " sequenceList:").concat(t)), t.length = 0);
                  for (var l = 0; l < r; l++) {
                    var d = this.restoreMessageFromSimplified(e[l]);
                    if (Xo[d.event]) {
                      if (6 === d.event) {
                        if (this._grpM.isGroupAttributesUpdatedNotice(d)) continue;
                        if (this._grpM.isGroupCountersNotice(d)) continue;
                      }
                      if (20 !== d.event) {
                        if (21 !== d.event) {
                          if (100 !== d.event) {
                            var o = this.packMessage(d, d.event),
                              p = 1 === d.isModified,
                              u = 1 === d.isHistoryMessage;
                            if (!c) {
                              if (this._seqSll.has(o.sequence)) continue;
                              this._seqSll.set(o.sequence);
                            }
                            var _ = this._IDSll.has(o.ID);
                            _ ? M.w("".concat(n, " ID:").concat(o.ID, " has:").concat(_)) : (this._IDSll.set(o.ID), _ = !1, !u && this._isMessageSentByCurrentInstance(o) ? p && (_ = !0, o.isModified = p, a.updateMsgIsModifiedProp(o)) : _ = !0, _ && (o.conversationType === R.CONV_SYSTEM && 5 === o.payload.operationType && this._onGroupDismissed(o.payload.groupProfile.groupID), u || o.conversationType === R.CONV_SYSTEM || (p = o.conversationID.replace(R.CONV_GROUP, ""), this._pollingInstanceMap.has(p) ? this._grpM.isLoggedIn() && s.addMessageSequence({
                              key: Zn,
                              message: o
                            }) : (o.type !== R.MSG_GRP_TIP && 0 < o.clientTime && s.addMessageDelay(o.clientTime), s.addMessageSequence({
                              key: Xn,
                              message: o
                            }))), i.push(o)));
                          } else this.onRoomCustomData(d);
                        } else this._get(34).onMessageReactionNotify({
                          event: 21,
                          dataList: d.elements.messageReactionNotifyList
                        });
                      } else this.handleMessageRevokedNotice(d);
                    } else M.w("".concat(n, ". unknown event:").concat(d.event));
                  }
                  0 !== i.length && (0 < (t = St(i)).length && this._grpM.emitOEvt(h.MESSAGE_MODIFIED, t), u || 0 < (t = this.packConversationOption(i)).length && a.onNewMessage({
                    conversationOptionsList: t,
                    isInstantMessage: !0
                  }), this._checkMessageStacked(i), 0 < (t = Rt(i)).length && this._grpM.emitOEvt(h.MESSAGE_RECEIVED, t), i.length = 0);
                }
              }
            }, {
              key: "handleMessageRevokedNotice",
              value: function value(e) {
                var t = this,
                  i = e.groupID,
                  n = e.elements.revokeMsgList,
                  a = e.revokerInfo,
                  s = [];
                n.forEach(function (e) {
                  var t = e.tinyID,
                    n = e.clientTime,
                    o = e.random,
                    e = e.sequence,
                    t = {
                      conversationID: "".concat(R.CONV_GROUP).concat(i),
                      ID: "".concat(t, "-").concat(n, "-").concat(o),
                      revoker: a.revoker,
                      revokeReason: a.reason || "",
                      revokerInfo: {
                        userID: a.revoker,
                        nick: "",
                        avatar: ""
                      },
                      sequence: e
                    };
                  s.push(t);
                }), 0 !== s.length && this._get(11).updateRevokerInfo(s).then(function (e) {
                  t._grpM.emitOEvt(h.MESSAGE_REVOKED, e);
                });
              }
            }, {
              key: "isBroadcastOrNormal",
              value: function value(e) {
                return 3 === e || 17 === e;
              }
            }, {
              key: "isGroupTip",
              value: function value(e) {
                return 4 === e || 6 === e;
              }
            }, {
              key: "isGroupSystemNotice",
              value: function value(e) {
                return 5 === e;
              }
            }, {
              key: "restoreGroupTipElements",
              value: function value() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                  t = e.operatorInfo,
                  t = void 0 === t ? {} : t,
                  n = e.operatorID,
                  o = e.userIDList,
                  o = void 0 === o ? [] : o,
                  i = e.operationType,
                  i = (A(e.groupJoinType) || 1 !== i && 2 !== i || (e.groupJoinType = 2 === i ? 0 : 1), t.userID),
                  a = t.avatar,
                  t = t.nick,
                  n = (e.operatorInfo = {
                    userID: void 0 === i ? n : i,
                    avatar: void 0 === a ? "" : a,
                    nick: void 0 === t ? "" : t
                  }, o.map(function (e) {
                    return {
                      userID: e
                    };
                  }));
                return e.memberInfoList = e.memberInfoList || n, e;
              }
            }, {
              key: "restoreMessageFromSimplified",
              value: function value(n) {
                var e,
                  t,
                  o,
                  i = n.event;
                return this.isBroadcastOrNormal(i) && (n.cloudCustomData = n.cloudCustomData || "", n.elements = n.elements.map(function (e) {
                  var t;
                  return e.type === R.MSG_CUSTOM && (t = e.content, e.content = y({
                    data: "",
                    description: "",
                    extension: ""
                  }, void 0 === t ? {} : t)), e;
                })), (this.isGroupTip(i) || this.isGroupSystemNotice(i)) && (n.from = n.from || "@TIM#SYSTEM"), this.isGroupTip(i) && (n.elements = this.restoreGroupTipElements(n.elements), t = (o = void 0 === (o = n.elements) ? {} : o).operationType, e = o.operatorInfo, 1 === t) && (t = [{
                  userID: (void 0 === e ? {} : e).userID
                }], o.memberInfoList = o.memberInfoList || t), this.isGroupSystemNotice(i) && (o = (e = n.elements).memberInfoList, t = e.operatorInfo, n.elements.memberInfoList = y({
                  userID: n.elements.operatorID,
                  avatar: "",
                  nick: ""
                }, o = o || (void 0 === t ? {} : t)), n.elements = y({
                  authentication: "",
                  remarkInfo: "",
                  messageKey: 1e3 * n.time
                }, n.elements), i = Object.keys(n.elements).filter(function (e) {
                  return "operatorInfo" !== e;
                }).reduce(function (e, t) {
                  return y(y({}, e), {}, q({}, t, n.elements[t]));
                }, {}), n.elements = i), n;
              }
            }, {
              key: "_onGroupDismissed",
              value: function value(e) {
                M.l("".concat(this._n, "._onGroupDismissed groupID:").concat(e)), this._grpM.deleteLocalGroupAndConversation(e), this.reset(e);
              }
            }, {
              key: "_checkMessageStacked",
              value: function value(e) {
                var t = "MessageStacked",
                  e = e.length;
                100 <= e && (this._grpM.warn(t, e), this._reportMessageStackedCount < 5) && (new P(t).setMessage("count:".concat(e, " groupID:").concat(d(this._joinedGroupMap.keys()))).setLevel("warning").end(), this._reportMessageStackedCount += 1);
              }
            }, {
              key: "_isMessageSentByCurrentInstance",
              value: function value(e) {
                return !!this._get(11).isMessageSentByCurrentInstance(e);
              }
            }, {
              key: "packMessage",
              value: function value(e, t) {
                e.currentUser = this._grpM.getMyUserID(), e.conversationType = 5 === t ? R.CONV_SYSTEM : R.CONV_GROUP, e.isSystemMessage = !!e.isSystemMessage;
                var n = new Do(e),
                  e = this.packElements(e, t),
                  t = this._grpM.getFileDownloadProxy(),
                  o = this._grpM.getDownloadFileAuthKey(),
                  i = this._get(17).getFileDNList();
                return n.setElement(e, t, o, i), n;
              }
            }, {
              key: "packElements",
              value: function value(e, t) {
                return 4 === t || 6 === t ? (this._updateMemberCountByGroupTips(e), {
                  type: R.MSG_GRP_TIP,
                  content: y(y({}, e.elements), {}, {
                    groupProfile: e.groupProfile
                  })
                }) : 5 === t ? {
                  type: R.MSG_GRP_SYS_NOTICE,
                  content: y(y({}, e.elements), {}, {
                    groupProfile: y(y({}, e.groupProfile), {}, {
                      groupID: e.groupID
                    })
                  })
                } : e.elements;
              }
            }, {
              key: "packConversationOption",
              value: function value(e) {
                for (var t = new Map(), n = 0; n < e.length; n++) {
                  var o,
                    i = e[n],
                    a = i.conversationID;
                  t.has(a) ? "in" === ((o = t.get(a)).lastMessage = i).flow && o.unreadCount++ : t.set(a, {
                    conversationID: i.conversationID,
                    unreadCount: "out" === i.flow ? 0 : 1,
                    type: i.conversationType,
                    subType: i.conversationSubType,
                    lastMessage: i
                  });
                }
                return d(t.values());
              }
            }, {
              key: "_updateMemberCountByGroupTips",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i = e.groupProfile.groupID,
                  e = e.elements.onlineMemberInfo,
                  e = void 0 === e ? void 0 : e;
                S(e) || (t = void 0 === (t = e.onlineMemberNum) ? 0 : t, e = void 0 === (e = e.expireTime) ? this.DEFAULT_EXPIRE_TIME : e, n = this._onlineMemberCountMap.get(i) || {}, o = Date.now(), S(n) ? Object.assign(n, {
                  lastReqTime: 0,
                  lastSyncTime: 0,
                  latestUpdateTime: o,
                  memberCount: t,
                  expireTime: e
                }) : (n.latestUpdateTime = o, n.memberCount = t), this._onlineMemberCountMap.set(i, n));
              }
            }, {
              key: "_onBroadcastMessage",
              value: function value(e) {
                if (!S(e)) {
                  for (var t = [], n = e.length, o = null, i = 0; i < n; i++) {
                    var a = this.restoreMessageFromSimplified(e[i]);
                    Xo[a.event] ? ((o = this.packMessage(a, a.event)).isBroadcastMessage = !0, this._broadcastMessageIDMap.has(o.ID) || (t.push(o), this._broadcastMessageIDMap.set(o.ID, 1))) : M.w("".concat(this._n, "._onBroadcastMessage unknown event:").concat(a.event));
                  }
                  0 < t.length && this._grpM.emitOEvt(h.MESSAGE_RECEIVED, t);
                }
              }
            }, {
              key: "start",
              value: function value(e) {
                var t;
                this._pollingInstanceMap.has(e) ? (t = this._pollingInstanceMap.get(e)).isRunning() || t.start() : ((t = new zo({
                  manager: this,
                  groupID: e,
                  onInit: this._updatedata.bind(this),
                  onSuccess: this._handleSuccess.bind(this),
                  onFail: this._handleFailure.bind(this)
                })).start(), this._pollingInstanceMap.set(e, t), M.l("".concat(this._n, ".start groupID:").concat(e)));
              }
            }, {
              key: "handleJoinResult",
              value: function value(o) {
                var i = this;
                return this._preCheck(o.group).then(function () {
                  var e = o.longPollingKey,
                    t = o.group,
                    n = t.groupID;
                  return i._joinedGroupMap.set(n, t), i._grpM.updateGroupMap([t]), i._grpM.deleteUnjoinedAVChatRoom(n), i._grpM.emitGroupListUpdate(!0, !1), N(e) ? D({
                    status: Qe,
                    group: t
                  }) : Promise.resolve();
                });
              }
            }, {
              key: "startRunLoop",
              value: function value(i) {
                var a = this;
                return this.handleJoinResult(i).then(function () {
                  var e = i.longPollingKey,
                    t = i.group,
                    n = i.startSeq,
                    o = t.groupID;
                  return a._pollingRequestInfoMap.set(o, {
                    key: e,
                    startSeq: void 0 === n ? 0 : n
                  }), a.start(o), a._grpM.isLoggedIn() ? D({
                    status: Qe,
                    group: t
                  }) : D({
                    status: Qe
                  });
                });
              }
            }, {
              key: "_preCheck",
              value: function value(e) {
                if (!this._get(12).isUnlimitedAVChatRoom() && this.hasJoinedAVChatRoom() && e.type !== R.GRP_LIVE) {
                  var e = j(this._joinedGroupMap.entries().next().value, 2),
                    t = e[0],
                    e = e[1];
                  if (this._grpM.isLoggedIn() && e.selfInfo.role !== R.GRP_MBR_ROLE_OWNER && e.ownerID !== this._grpM.getMyUserID()) return this._grpM.quitGroup(t);
                  this._grpM.deleteLocalGroupAndConversation(t), this.reset(t);
                }
                return Promise.resolve();
              }
            }, {
              key: "joinWithoutAuth",
              value: function value(e) {
                var n = this,
                  o = e.groupID,
                  i = "".concat(this._n, ".").concat("joinWithoutAuth"),
                  a = new P("joinWithoutAuth");
                return this._grpM.req({
                  P: G.APPLY_JOIN_GRP_NOAUTH,
                  data: e
                }).then(function (e) {
                  e = e.data.longPollingKey;
                  if (a.setMessage("groupID:".concat(o, " longPollingKey:").concat(e)).end(!0), N(e)) return E({
                    code: k.CANNOT_JOIN_NON_AV_WITHOUT_LOGIN
                  });
                  M.l("".concat(i, " ok. groupID:").concat(o)), n._get(11).setCompleted("".concat(R.CONV_GROUP).concat(o));
                  var t = new qo({
                    groupID: o
                  });
                  return n.startRunLoop({
                    group: t,
                    longPollingKey: e
                  }), T({
                    status: Qe
                  });
                })["catch"](function (e) {
                  return M.e("".concat(i, " failed. groupID:").concat(o, " error:"), e), a.setError(e).setMessage("groupID:".concat(o)).end(!0), E(e);
                })["finally"](function () {
                  n._grpM.get(14).reportAtOnce();
                });
              }
            }, {
              key: "getGroupOnlineMemberCount",
              value: function value(e) {
                var t = this._onlineMemberCountMap.get(e) || {},
                  n = Date.now();
                return S(t) || n - t.lastSyncTime > 1e3 * t.expireTime && 1e4 < n - t.latestUpdateTime && 3e3 < n - t.lastReqTime ? (t.lastReqTime = n, this._onlineMemberCountMap.set(e, t), this._getGroupOnlineMemberCount(e).then(function (e) {
                  return T({
                    memberCount: e.memberCount
                  });
                })["catch"](function (e) {
                  return E(e);
                })) : D({
                  memberCount: t.memberCount
                });
              }
            }, {
              key: "_getGroupOnlineMemberCount",
              value: function value(i) {
                var a = this,
                  s = "".concat(this._n, ".").concat("_getGroupOnlineMemberCount"),
                  t = new P("_getGroupOnlineMemberCount");
                return this._grpM.requestOnlineCount(i).then(function (e) {
                  var t = a._onlineMemberCountMap.get(i) || {},
                    e = e.data,
                    n = e.memberCount,
                    n = void 0 === n ? 0 : n,
                    e = e.expireTime,
                    e = void 0 === e ? a.DEFAULT_EXPIRE_TIME : e,
                    o = (M.l("".concat(s, " ok. groupID:").concat(i, " memberCount:").concat(n, " expireTime:").concat(e)), Date.now());
                  return S(t) && (t.lastReqTime = o), a._onlineMemberCountMap.set(i, Object.assign(t, {
                    lastSyncTime: o,
                    latestUpdateTime: o,
                    memberCount: n,
                    expireTime: e
                  })), {
                    memberCount: n
                  };
                })["catch"](function (e) {
                  return M.w("".concat(s, " failed. error:"), e), t.setCode(e.code).setMessage("groupID:".concat(i, " error:").concat(JSON.stringify(e))).end(), Promise.reject(e);
                });
              }
            }, {
              key: "_get",
              value: function value(e) {
                return this._grpM.get(e);
              }
            }, {
              key: "setPollingInterval",
              value: function value(e) {
                N(e) || (A(e) ? this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = e : this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = parseInt(e, 10));
              }
            }, {
              key: "setPollingIntervalPlus",
              value: function value(e) {
                N(e) || (A(e) ? this.DEFAULT_POLLING_INTERVAL_PLUS = e : this.DEFAULT_POLLING_INTERVAL_PLUS = parseInt(e, 10));
              }
            }, {
              key: "setPollingNoMessageCount",
              value: function value(e) {
                N(e) || (A(e) ? this.DEFAULT_POLLING_NO_MESSAGE_COUNT = e : this.DEFAULT_POLLING_NO_MESSAGE_COUNT = parseInt(e, 10));
              }
            }, {
              key: "setPollingSimplifiedMessage",
              value: function value(e) {
                N(e) || "0" !== e && "1" !== e || (this.DEFAULT_POLLING_SIMPLIFIED_MSG = parseInt(e, 10));
              }
            }, {
              key: "getPollingInterval",
              value: function value() {
                return this._pollingInterval;
              }
            }, {
              key: "onAVChatRoomMemberBanned",
              value: function value(e) {
                e = e.payload.groupProfile.groupID;
                M.l("".concat(this._n, ".onAVChatRoomMemberBanned groupID:").concat(e)), this._grpM.deleteLocalGroupAndConversation(e), this.reset(e);
              }
            }, {
              key: "restartPolling",
              value: function value() {
                M.l("".concat(this._n, ".restartPolling count:").concat(this._pollingInstanceMap.size));
                var e,
                  t = F(this._pollingInstanceMap.values());
                try {
                  for (t.s(); !(e = t.n()).done;) {
                    var n = e.value;
                    n.stop(), n.start();
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
              }
            }, {
              key: "getPollingTimerID",
              value: function value(e) {
                var t;
                return this._pollingInstanceMap.has(e) ? (t = this._pollingInstanceMap.get(e).getPollingTimerID(), M.l("".concat(this._n, ".getPollingTimerID groupID:").concat(e, " timerID:").concat(t)), t) : -1;
              }
            }, {
              key: "hasPollingInstance",
              value: function value(e) {
                return this._pollingInstanceMap.has(e);
              }
            }, {
              key: "onRoomCustomData",
              value: function value(e) {
                var t = e.groupID,
                  n = e.sequence,
                  o = e.time,
                  e = e.elements,
                  e = e && e.content;
                this._get(30).onRoomCustomDataReceived(e), M.l("".concat(this._n, ".onRoomCustomData groupID:").concat(t, " sequence:").concat(n, " time:").concat(o, " data:").concat(e));
              }
            }, {
              key: "reset",
              value: function value(e) {
                if (e) {
                  M.l("".concat(this._n, ".reset groupID:").concat(e));
                  var t = this._pollingInstanceMap.get(e);
                  t && t.stop(), this._pollingInstanceMap["delete"](e), this._joinedGroupMap["delete"](e), this._pollingRequestInfoMap["delete"](e), this._onlineMemberCountMap["delete"](e);
                } else {
                  M.l("".concat(this._n, ".reset all"));
                  var n,
                    o = F(this._pollingInstanceMap.values());
                  try {
                    for (o.s(); !(n = o.n()).done;) n.value.stop();
                  } catch (e) {
                    o.e(e);
                  } finally {
                    o.f();
                  }
                  this._pollingInstanceMap.clear(), this._joinedGroupMap.clear(), this._pollingRequestInfoMap.clear(), this._onlineMemberCountMap.clear(), this._broadcastMessageIDMap.clear();
                }
                this._seqSll.reset(), this._IDSll.reset(), this._reportMessageStackedCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = 300, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0;
              }
            }]),
            Qo = e(function e(t) {
              p(this, e), this.userID = "", this.avatar = "", this.nick = "", this.role = "", this.joinTime = "", this.lastSendMsgTime = "", this.nameCard = "", this.muteUntil = 0, this.memberCustomField = [], this.isOnline = !1, this.updateMember(t);
            }, [{
              key: "updateMember",
              value: function value(e) {
                N(e.onlineStatus) || (this.isOnline = "Online" === e.onlineStatus);
                var t = [null, void 0, "", 0, NaN];
                e.memberCustomField && Lt(this.memberCustomField, e.memberCustomField), dt(this, e, ["memberCustomField", "marks", "onlineStatus"], t);
              }
            }, {
              key: "updateRole",
              value: function value(e) {
                ["Owner", "Admin", "Member"].indexOf(e) < 0 || (this.role = e);
              }
            }, {
              key: "updateMuteUntil",
              value: function value(e) {
                N(e) || (this.muteUntil = Math.floor((Date.now() + 1e3 * e) / 1e3));
              }
            }, {
              key: "updateNameCard",
              value: function value(e) {
                N(e) || (this.nameCard = e);
              }
            }, {
              key: "updateMemberCustomField",
              value: function value(e) {
                e && Lt(this.memberCustomField, e);
              }
            }]),
            $o = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "GroupMemberHandler", this.groupMemberListMap = new Map(), this.DEFAULT_MEMBER_INFO_FILTER = ["Role", "JoinTime", "NameCard", "ShutUpUntil", "OnlineStatus"], this._grpM.getIEmitInst().on(U.PROFILE_UPDATED, this._onProfileUpdated, this);
            }, [{
              key: "_onProfileUpdated",
              value: function value(e) {
                for (var n = this, o = e.data, i = 0; i < o.length; i++) !function () {
                  var t = o[i];
                  n.groupMemberListMap.forEach(function (e) {
                    e.has(t.userID) && e.get(t.userID).updateMember({
                      nick: t.nick,
                      avatar: t.avatar
                    });
                  });
                }();
              }
            }, {
              key: "deleteGroupMemberList",
              value: function value(e) {
                this.groupMemberListMap["delete"](e);
              }
            }, {
              key: "getGroupMemberList",
              value: function value(e) {
                var t,
                  o = this,
                  i = e.groupID,
                  n = e.role,
                  n = void 0 === n ? void 0 : n,
                  a = e.offset,
                  s = void 0 === a ? 0 : a,
                  a = e.count,
                  r = void 0 === a ? 15 : a,
                  a = e.filter,
                  e = void 0 === a ? void 0 : a,
                  c = "".concat(this._n, ".").concat("getGroupMemberList"),
                  a = this._grpM.hasLocalGroup(i);
                if (M.l("".concat(c, " groupID:").concat(i, " role:").concat(n, " offset:").concat(s, " count:").concat(r, " hasLocalGroup:").concat(a)), !a) return D({
                  memberList: [],
                  offset: 0
                });
                if (this._grpM.getLocalGroupProfile(i).type === R.GRP_AVCHATROOM) {
                  if (this._grpM.canIUse(g.AV_MBR_LIST)) return this._getAVChatRoomMemberList({
                    groupID: i,
                    offset: s,
                    filter: e
                  });
                  this._grpM.warn("LiveOnlineMember");
                }
                n !== R.GRP_MBR_ROLE_ADMIN && n !== R.GRP_MBR_ROLE_OWNER && n !== R.GRP_MBR_ROLE_MEMBER || (t = n);
                var u = new P("getGroupMemberList"),
                  l = 0,
                  a = {
                    groupID: i,
                    limit: 100 < r ? 100 : r,
                    memberRoleFilter: t ? [t] : void 0,
                    memberInfoFilter: this.DEFAULT_MEMBER_INFO_FILTER
                  },
                  d = (Ot({
                    groupID: i
                  }) ? a.next = "".concat(s) : l = (a.offset = s) + r, []);
                return this._grpM.req({
                  P: G.GET_GRP_MBR_LIST,
                  data: a
                }).then(function (e) {
                  var e = e.data,
                    t = e.members,
                    n = e.memberNum,
                    e = e.next,
                    e = void 0 === e ? void 0 : e;
                  return N(e) || (l = S(e) ? 0 : e), O(t) && 0 !== t.length ? (o._grpM.hasLocalGroup(i) && (o._grpM.getLocalGroupProfile(i).memberNum = n), d = o._updateLocalGroupMemberMap(i, t), o._grpM.get(4).getUserProfile({
                    userIDList: t.map(function (e) {
                      return e.userID;
                    }),
                    tagList: [f.NICK, f.AVATAR]
                  })) : (l = 0, Promise.resolve([]));
                }).then(function (e) {
                  var e = e.data;
                  return O(e) && 0 !== e.length ? (e = e.map(function (e) {
                    return {
                      userID: e.userID,
                      nick: e.nick,
                      avatar: e.avatar
                    };
                  }), o._updateLocalGroupMemberMap(i, e), d.length < r && (l = 0), u.setMessage("groupID:".concat(i, " offset:").concat(s, " count:").concat(r)).end(), M.l("".concat(c, " ok.")), T({
                    memberList: d,
                    offset: l
                  })) : D({
                    memberList: [],
                    offset: l
                  });
                })["catch"](function (e) {
                  return u.setError(e).end(), M.e("".concat(c, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getAVChatRoomMemberList",
              value: function value(e) {
                var n = this,
                  o = e.groupID,
                  t = e.offset,
                  e = e.filter,
                  i = "".concat(this._n, ".").concat("_getAVChatRoomMemberList"),
                  a = new P("_getAVChatRoomMemberList");
                return a.setMessage("groupID:".concat(o, " offset:").concat(t, " filter:").concat(e)), this._grpM.req({
                  P: G.GET_AV_MBR_LIST,
                  data: {
                    groupID: o,
                    offset: t,
                    filter: e
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.memberList,
                    t = void 0 === t ? [] : t,
                    e = e.offset,
                    e = void 0 === e ? 0 : e,
                    t = (a.end(), M.l("".concat(i, " ok. member count:").concat(t.length, ", next request timestamp:").concat(e)), t.map(function (e) {
                      return y(y({}, e), {}, {
                        onlineStatus: "Online"
                      });
                    })),
                    t = n._updateLocalGroupMemberMap(o, t);
                  return T({
                    memberList: t,
                    offset: e
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getGroupMemberProfile",
              value: function value(e) {
                var t,
                  n = this,
                  o = "getGroupMemberProfile",
                  i = "".concat(this._n, ".").concat(o),
                  a = "groupID:".concat(e.groupID),
                  s = (5 < e.userIDList.length ? a += " userIDList.length:".concat(e.userIDList.length) : a += " userIDList:".concat(e.userIDList), M.l("".concat(i, " ").concat(a)), 50 < e.userIDList.length && (e.userIDList = e.userIDList.slice(0, 50)), e.groupID),
                  r = e.userIDList,
                  i = this._grpM.getLocalGroupProfile(s);
                return i && At(i.type) ? E({
                  code: i = k.OPERATION_NOT_SUPPORTED_IN_AV,
                  message: this._grpM.getErrMsg(i, o)
                }) : ((t = new P(o)).setMessage(a), this._getGroupMemberProfileAdvance(y(y({}, e), {}, {
                  userIDList: r
                })).then(function (e) {
                  e = e.data.members;
                  return O(e) && 0 !== e.length ? (n._updateLocalGroupMemberMap(s, e), n._grpM.get(4).getUserProfile({
                    userIDList: e.map(function (e) {
                      return e.userID;
                    }),
                    tagList: [f.NICK, f.AVATAR]
                  })) : D([]);
                }).then(function (e) {
                  e = e.data.map(function (e) {
                    return {
                      userID: e.userID,
                      nick: e.nick,
                      avatar: e.avatar
                    };
                  }), n._updateLocalGroupMemberMap(s, e), e = r.filter(function (e) {
                    return n.hasLocalGroupMember(s, e);
                  }).map(function (e) {
                    return n.getLocalGroupMemberInfo(s, e);
                  });
                  return t.end(), T({
                    memberList: e
                  });
                }));
              }
            }, {
              key: "addGroupMember",
              value: function value(a) {
                var s = this,
                  r = "".concat(this._n, ".").concat("addGroupMember"),
                  e = a.groupID,
                  c = this._grpM.getLocalGroupProfile(e),
                  t = c.type,
                  u = new P("addGroupMember");
                return u.setMessage("groupID:".concat(e, " groupType:").concat(t)), At(t) ? (t = new L({
                  code: k.CANNOT_ADD_MEMBER_IN_AV
                }), u.setError(t).end(), E(t)) : (a.userIDList = a.userIDList.map(function (e) {
                  return {
                    userID: e
                  };
                }), M.l("".concat(r, " groupID:").concat(e)), this._grpM.req({
                  P: G.ADD_GRP_MBR,
                  data: a
                }).then(function (e) {
                  var e = e.data.members,
                    t = (M.l("".concat(r, " ok")), e.filter(function (e) {
                      return 1 === e.result;
                    }).map(function (e) {
                      return e.userID;
                    })),
                    n = e.filter(function (e) {
                      return 0 === e.result;
                    }).map(function (e) {
                      return e.userID;
                    }),
                    o = e.filter(function (e) {
                      return 2 === e.result;
                    }).map(function (e) {
                      return e.userID;
                    }),
                    e = e.filter(function (e) {
                      return 4 === e.result;
                    }).map(function (e) {
                      return e.userID;
                    }),
                    i = "groupID:".concat(a.groupID, ", ") + "successUserIDList:".concat(t, ", ") + "failureUserIDList:".concat(n, ", ") + "existedUserIDList:".concat(o, ", ") + "overLimitUserIDList:".concat(e);
                  return u.setMoreMessage(i).end(), 0 === t.length ? T({
                    successUserIDList: t,
                    failureUserIDList: n,
                    existedUserIDList: o,
                    overLimitUserIDList: e
                  }) : (s._updateConvGroupProfile(c), T({
                    successUserIDList: t,
                    failureUserIDList: n,
                    existedUserIDList: o,
                    overLimitUserIDList: e,
                    group: c
                  }));
                })["catch"](function (e) {
                  return u.setError(e).end(), M.e("".concat(r, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "deleteGroupMember",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".").concat("deleteGroupMember"),
                  a = e.groupID,
                  s = e.userIDList,
                  r = this._grpM.getLocalGroupProfile(a);
                return N(r) ? E({
                  code: k.CANNOT_FIND_GRP
                }) : At(r.type) ? this._grpM.canIUse(g.AV_BAN_MBR) ? this._banAVChatRoomMember(e) : this._grpM.noUse("deleteGroupMember") : (t = "groupID:".concat(a, " ").concat(5 < s.length ? "userIDList.length:".concat(s.length) : "userIDList:".concat(s)), M.l("".concat(i, " groupID:").concat(a, " userIDList:"), s), (n = new P("deleteGroupMember")).setMessage(t), this._grpM.req({
                  P: G.DEL_GRP_MBR,
                  data: e
                }).then(function () {
                  return n.end(), M.l("".concat(i, " ok")), o._updateConvGroupProfile(r), o.deleteLocalGroupMembers(a, s), T({
                    group: r,
                    userIDList: s
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "_updateConvGroupProfile",
              value: function value(e) {
                this._grpM.get(11).updateConvGroupProfile([e]);
              }
            }, {
              key: "_banAVChatRoomMember",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("_banAVChatRoomMember"),
                  o = e.groupID,
                  i = e.userIDList,
                  a = "groupID:".concat(o, " ").concat(5 < i.length ? "userIDList.length:".concat(i.length) : "userIDList:".concat(i)),
                  s = new P("_banAVChatRoomMember"),
                  r = (s.setMessage(a), M.l("".concat(n, " groupID:").concat(o, " userIDList:"), i), this._grpM.getLocalGroupProfile(o));
                return N(e.duration) || 0 === e.duration ? E({
                  code: k.BAN_DURATION_INVALID
                }) : this._grpM.req({
                  P: G.BAN_AV_MBR,
                  data: e
                }).then(function () {
                  return s.end(), M.l("".concat(n, " ok")), t.deleteLocalGroupMembers(o, i), T({
                    group: r,
                    userIDList: i
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "setGroupMemberMuteTime",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = e.groupID,
                  a = e.userID,
                  e = e.muteTime,
                  s = "".concat(this._n, ".").concat("setGroupMemberMuteTime");
                return a === this._grpM.getMyUserID() ? E({
                  code: k.CANNOT_MUTE_SELF
                }) : (t = "groupID:".concat(i, " userID:").concat(a, " muteTime:").concat(e), M.l("".concat(s, " ").concat(t)), (n = new P("setGroupMemberMuteTime")).setMessage(t), this.modifyGroupMemberInfo({
                  groupID: i,
                  userID: a,
                  muteTime: e
                }).then(function (e) {
                  n.end(), M.l("".concat(s, " ok"));
                  var t = o._grpM.getLocalGroupProfile(i);
                  return T({
                    group: t,
                    member: e
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(s, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "setGroupMemberRole",
              value: function value(e) {
                var t,
                  n,
                  o = "".concat(this._n, ".").concat("setGroupMemberRole"),
                  i = e.groupID,
                  a = e.userID,
                  e = e.role,
                  s = "groupID:".concat(i, " userID:").concat(a, " role:").concat(e),
                  r = this._grpM.getLocalGroupProfile(i);
                return r && r.selfInfo.role !== R.GRP_MBR_ROLE_OWNER ? E({
                  code: k.NOT_OWNER
                }) : (t = [R.GRP_MBR_ROLE_ADMIN, R.GRP_MBR_ROLE_MEMBER], Ot({
                  groupID: i
                }) && t.push(R.GRP_MBR_ROLE_CUSTOM), t.indexOf(e) < 0 ? E({
                  code: k.INVALID_MEMBER_ROLE
                }) : a === this._grpM.getMyUserID() ? E({
                  code: k.CANNOT_SET_SELF_MEMBER_ROLE
                }) : ((n = new P("setGroupMemberRole")).setMessage(s), M.l("".concat(o, " ").concat(s)), this.modifyGroupMemberInfo({
                  groupID: i,
                  userID: a,
                  role: e
                }).then(function (e) {
                  return n.end(), M.l("".concat(o, " ok")), T({
                    group: r,
                    member: e
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                })));
              }
            }, {
              key: "_filterProfanity",
              value: function value(e, t) {
                var n,
                  o = this._grpM.get(29);
                return !o || (n = (o = o.filterText(t[e], "group_member_profile")).isAllowedToSend, o = o.modifiedText, !0 === n && (t[e] = o, !0));
              }
            }, {
              key: "setGroupMemberNameCard",
              value: function value(e) {
                var n,
                  o,
                  i,
                  t,
                  a,
                  s = this,
                  r = "setGroupMemberNameCard",
                  c = "".concat(this._n, ".").concat(r);
                return e.nameCard && !1 === this._filterProfanity("nameCard", e) ? E({
                  code: k.PROFANITY_FOUND
                }) : (n = e.groupID, t = e.userID, o = void 0 === t ? this._grpM.getMyUserID() : t, i = e.nameCard, t = "groupID:".concat(n, " userID:").concat(o, " nameCard:").concat(i), M.l("".concat(c, " ").concat(t)), (e = this._grpM.getLocalGroupProfile(n)) && At(e.type) ? E({
                  code: e = k.OPERATION_NOT_SUPPORTED_IN_AV,
                  message: this._grpM.getErrMsg(e, r)
                }) : ((a = new P(r)).setMessage(t), this.modifyGroupMemberInfo({
                  groupID: n,
                  userID: o,
                  nameCard: i
                }).then(function (e) {
                  M.l("".concat(c, " ok")), a.end();
                  var t = s._grpM.getLocalGroupProfile(n);
                  return o === s._grpM.getMyUserID() && t && t.setSelfNameCard(i), T({
                    group: t,
                    member: e
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(c, " failed. error:"), e), E(e);
                })));
              }
            }, {
              key: "setGroupMemberCustomField",
              value: function value(e) {
                var n,
                  o = this,
                  t = "setGroupMemberCustomField",
                  i = "".concat(this._n, ".").concat(t),
                  a = e.groupID,
                  s = e.userID,
                  s = void 0 === s ? this._grpM.getMyUserID() : s,
                  e = e.memberCustomField,
                  r = "groupID:".concat(a, " userID:").concat(s, " memberCustomField:").concat(JSON.stringify(e)),
                  c = (M.l("".concat(i, " ").concat(r)), this._grpM.getLocalGroupProfile(a));
                return c && At(c.type) ? E({
                  code: c = k.OPERATION_NOT_SUPPORTED_IN_AV,
                  message: this._grpM.getErrMsg(c, t)
                }) : ((n = new P(t)).setMessage(r), this.modifyGroupMemberInfo({
                  groupID: a,
                  userID: s,
                  memberCustomField: e
                }).then(function (e) {
                  n.end(), M.l("".concat(i, " ok"));
                  var t = o._grpM.getLocalGroupProfile(a);
                  return T({
                    group: t,
                    member: e
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "modifyGroupMemberInfo",
              value: function value(t) {
                var n = this,
                  o = t.groupID,
                  i = t.userID,
                  e = void 0;
                return Nt(o) && (o = jt(e = o)), this._grpM.req({
                  P: G.MODIFY_GRP_MBR_INFO,
                  data: y(y({}, t), {}, {
                    groupID: o,
                    topicID: e
                  })
                }).then(function () {
                  var e;
                  return n.hasLocalGroupMember(o, i) ? (e = n.getLocalGroupMemberInfo(o, i), N(t.muteTime) || e.updateMuteUntil(t.muteTime), N(t.role) || e.updateRole(t.role), N(t.nameCard) || e.updateNameCard(t.nameCard), N(t.memberCustomField) || e.updateMemberCustomField(t.memberCustomField), e) : (e = n._grpM.getLocalGroupProfile(o)) && !At(e.type) ? n.getGroupMemberProfile({
                    groupID: o,
                    userIDList: [i]
                  }).then(function (e) {
                    return j(e.data.memberList, 1)[0];
                  }) : void 0;
                });
              }
            }, {
              key: "markGroupMemberList",
              value: function value(e) {
                var o = "".concat(this._n, ".").concat("markGroupMemberList"),
                  t = e.groupID,
                  n = e.markType,
                  i = e.enableMark,
                  e = e.userIDList,
                  a = void 0 === e ? [] : e,
                  e = "groupID:".concat(t, " markType:").concat(n, " enableMark:").concat(i, " userIDList count:").concat(a.length),
                  s = (M.l("".concat(o, " ").concat(e)), 2),
                  r = [],
                  i = (!0 === i && (s = 1), d(a)),
                  c = (500 < a.length && (i = a.slice(0, 500), M.w("".concat(o, " ").concat(Qt(500)))), i.forEach(function (e) {
                    r.push({
                      userID: e,
                      markType: [n]
                    });
                  }), i = null, new P("markGroupMemberList"));
                return c.setMessage(e), this._grpM.req({
                  P: G.MARK_AV_MBR_INFO,
                  data: {
                    groupID: t,
                    operationType: s,
                    memberList: r
                  }
                }).then(function (e) {
                  var e = e.data.memberList,
                    e = void 0 === e ? [] : e,
                    t = [],
                    n = [],
                    e = (e.length === a.length ? t.push.apply(t, d(a)) : (e.forEach(function (e) {
                      t.push(e.userID);
                    }), a.forEach(function (e) {
                      t.includes(e) || n.push(e);
                    })), "success count:".concat(t.length, " fail count:").concat(n.length));
                  return c.setMessage(e).end(), M.l("".concat(o, " ok. ").concat(e)), T({
                    successUserIDList: t,
                    failureUserIDList: n
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getGroupMemberProfileAdvance",
              value: function value(e) {
                return this._grpM.req({
                  P: G.GET_GRP_MBR_PROFILE,
                  data: y(y({}, e), {}, {
                    memberInfoFilter: e.memberInfoFilter || this.DEFAULT_MEMBER_INFO_FILTER
                  })
                });
              }
            }, {
              key: "_updateLocalGroupMemberMap",
              value: function value(t, e) {
                var n = this;
                return O(e) && 0 !== e.length ? e.map(function (e) {
                  return n.hasLocalGroupMember(t, e.userID) ? n.getLocalGroupMemberInfo(t, e.userID).updateMember(e) : n.setLocalGroupMember(t, new Qo(e)), n.getLocalGroupMemberInfo(t, e.userID);
                }) : [];
              }
            }, {
              key: "deleteLocalGroupMembers",
              value: function value(e, t) {
                var n = this.groupMemberListMap.get(e);
                n && t.forEach(function (e) {
                  n["delete"](e);
                });
              }
            }, {
              key: "getLocalGroupMemberInfo",
              value: function value(e, t) {
                return this.groupMemberListMap.has(e) ? this.groupMemberListMap.get(e).get(t) : null;
              }
            }, {
              key: "setLocalGroupMember",
              value: function value(e, t) {
                this.groupMemberListMap.has(e) ? this.groupMemberListMap.get(e).set(t.userID, t) : (t = new Map().set(t.userID, t), this.groupMemberListMap.set(e, t));
              }
            }, {
              key: "getLocalGroupMemberList",
              value: function value(e) {
                return this.groupMemberListMap.get(e);
              }
            }, {
              key: "hasLocalGroupMember",
              value: function value(e, t) {
                return this.groupMemberListMap.has(e) && this.groupMemberListMap.get(e).has(t);
              }
            }, {
              key: "hasLocalGroupMemberMap",
              value: function value(e) {
                return this.groupMemberListMap.has(e);
              }
            }, {
              key: "reset",
              value: function value() {
                this.groupMemberListMap.clear();
              }
            }]),
            ei = [17, 18, 20],
            ti = e(function e(t) {
              p(this, e), this._grpM = t, this._n = "GroupSystemNoticeHandler", this.pendencyMap = new Map();
            }, [{
              key: "onNewGroupSystemNotice",
              value: function value(e) {
                var t = e.dataList,
                  n = e.isSyncingEnded,
                  e = e.isInstantMessage,
                  t = (M.d("".concat(this._n, ".onReceiveSystemNotice count:").concat(t.length)), this._assembly({
                    notifiesList: t,
                    isInstantMessage: e
                  })),
                  o = t.eventDataList,
                  t = t.result;
                0 < o.length && (this._grpM.get(11).onNewMessage({
                  conversationOptionsList: o,
                  isInstantMessage: e
                }), this._onReceivedGroupSystemNotice({
                  result: t,
                  isInstantMessage: e
                })), e ? 0 < t.length && this._grpM.emitOEvt(h.MESSAGE_RECEIVED, t) : !0 === n && this._clearGroupSystemNotice();
              }
            }, {
              key: "_assembly",
              value: function value(e) {
                for (var t = e.notifiesList, n = e.isInstantMessage, o = null, i = t.length, a = 0, s = [], r = {
                    conversationID: R.CONV_SYSTEM,
                    unreadCount: 0,
                    type: R.CONV_SYSTEM,
                    subType: null,
                    lastMessage: null
                  }, a = 0; a < i; a++) {
                  var c = t[a],
                    u = c.groupProfile,
                    l = u.communityType,
                    u = u.topicID,
                    u = void 0 === u ? void 0 : u,
                    d = c.elements,
                    p = d.topicIDList,
                    p = void 0 === p ? void 0 : p,
                    d = d.operationType;
                  if (!(2 !== (void 0 === l ? 0 : l) || S(u) && S(p))) {
                    if (ei.includes(d)) {
                      this._handleTopicSystemNotice(c);
                      continue;
                    }
                    S(u) || (c.to = u);
                  }
                  15 !== c.elements.operationType && (c.currentUser = this._grpM.getMyUserID(), c.conversationType = R.CONV_SYSTEM, c.conversationID = R.CONV_SYSTEM, (o = new Do(c)).setElement({
                    type: R.MSG_GRP_SYS_NOTICE,
                    content: y(y({}, c.elements), {}, {
                      groupProfile: y({}, c.groupProfile)
                    })
                  }), o.isSystemMessage = !0, (1 === o.sequence && 1 === o.random || 2 === o.sequence && 2 === o.random) && (o.sequence = ht(), o.random = ht(), o.generateMessageID(), M.l("".concat(this._n, "._assembly regenerate ID:").concat(o.ID))), this._grpM.get(11).pushIntoNoticeResult(s, o)) && (n ? r.unreadCount++ : o.setIsRead(!0), r.subType = o.conversationSubType);
                }
                return r.lastMessage = s[s.length - 1], {
                  eventDataList: 0 < s.length ? [r] : [],
                  result: s
                };
              }
            }, {
              key: "_clearGroupSystemNotice",
              value: function value() {
                var a = this;
                this._getPendencyList().then(function (e) {
                  e.forEach(function (e) {
                    a.pendencyMap.set("".concat(e.from, "_").concat(e.groupID, "_").concat(e.to), e);
                  });
                  var e = a._grpM.get(11).getLocalMessageList(R.CONV_SYSTEM),
                    i = [];
                  e.forEach(function (e) {
                    var t = e.payload,
                      n = t.operatorID,
                      o = t.operationType,
                      t = t.groupProfile;
                    1 === o && (o = "".concat(n, "_").concat(t.groupID, "_").concat(t.to), n = a.pendencyMap.get(o)) && A(n.handled) && 0 !== n.handled && i.push(e);
                  }), a.deleteGroupSystemNotice({
                    messageList: i
                  });
                });
              }
            }, {
              key: "deleteGroupSystemNotice",
              value: function value(e) {
                var n = this,
                  o = "".concat(this._n, ".deleteGroupSystemNotice");
                return O(e.messageList) && 0 !== e.messageList.length ? (M.l("".concat(o, " ") + e.messageList.map(function (e) {
                  return e.ID;
                })), this._grpM.req({
                  P: G.DEL_GRP_SYSTEM_NOTICE,
                  data: {
                    messageListToDelete: e.messageList.map(function (e) {
                      return {
                        from: R.CONV_SYSTEM,
                        messageSeq: e.clientSequence,
                        messageRandom: e.random
                      };
                    })
                  }
                }).then(function () {
                  M.l("".concat(o, " ok"));
                  var t = n._grpM.get(11);
                  return e.messageList.forEach(function (e) {
                    t.deleteLocalMessage(e);
                  }), T();
                })["catch"](function (e) {
                  return M.e("".concat(o, " error:"), e), E(e);
                })) : D();
              }
            }, {
              key: "_getPendencyList",
              value: function value() {
                var n = this,
                  e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                  t = e.type,
                  o = e.startTime,
                  e = e.limit;
                return this._grpM.req({
                  P: G.GET_GRP_PENDENCY,
                  data: {
                    type: void 0 === t ? void 0 : t,
                    startTime: void 0 === o ? 0 : o,
                    limit: void 0 === e ? 20 : e,
                    handleAccount: this._grpM.getMyUserID()
                  }
                }).then(function (e) {
                  var t = e.data.pendencyList;
                  return 0 !== e.data.nextStartTime ? n._getPendencyList({
                    startTime: e.data.nextStartTime
                  }).then(function (e) {
                    return [].concat(d(t), d(e));
                  }) : t;
                });
              }
            }, {
              key: "getGroupApplicationList",
              value: function value() {
                var n = this;
                return this._getPendencyList().then(function (t) {
                  return n._getPendencyList({
                    type: R.GRP_COMMUNITY
                  }).then(function (e) {
                    return t.push.apply(t, d(e)), n._handlePendencyResult(t);
                  })["catch"](function (e) {
                    return n._handlePendencyResult(t);
                  });
                });
              }
            }, {
              key: "_handlePendencyResult",
              value: function value(e) {
                var t = this,
                  n = [];
                return e.forEach(function (e) {
                  t.pendencyMap.set("".concat(e.from, "_").concat(e.groupID, "_").concat(e.to), e), 0 === e.handled && n.push({
                    applicant: e.from,
                    applicantNick: e.fromUserNickName,
                    groupName: e.groupName,
                    groupID: e.groupID,
                    authentication: e.authentication,
                    messageKey: e.time,
                    applicationType: e.applicationType,
                    userID: e.userID,
                    note: e.note
                  });
                }), D({
                  applicationList: n
                });
              }
            }, {
              key: "_onReceivedGroupSystemNotice",
              value: function value(e) {
                var t = this,
                  n = e.result;
                e.isInstantMessage && n.forEach(function (e) {
                  switch (e.payload.operationType) {
                    case 1:
                      break;
                    case 2:
                      t._onApplyJoinGroup(e);
                      break;
                    case 3:
                      break;
                    case 4:
                      t._onMemberKicked(e);
                      break;
                    case 5:
                      t._onGroupDismissed(e);
                      break;
                    case 6:
                      break;
                    case 7:
                      t._onInviteGroup(e);
                      break;
                    case 8:
                      t._onQuitGroup(e);
                      break;
                    case 9:
                      t._onSetManager(e);
                      break;
                    case 10:
                      t._onDeleteManager(e);
                      break;
                    case 11:
                    case 12:
                    case 15:
                      break;
                    case 20:
                      t._onMessageRemindTypeSynced(e);
                      break;
                    case 21:
                      t._grpM.onAVChatRoomMemberBanned(e);
                  }
                });
              }
            }, {
              key: "_onApplyJoinGroup",
              value: function value(e) {
                var t = this,
                  e = e.payload.groupProfile,
                  n = e.groupID,
                  e = e.groupType,
                  o = this._grpM.hasLocalGroup(n);
                M.l("".concat(this._n, "._onApplyJoinGroup groupID:").concat(n, " groupType:").concat(e, " hasGroup:").concat(o)), o || At(e) || this._grpM.getGroupProfile({
                  groupID: n
                }).then(function (e) {
                  var e = e.data.group;
                  e && (t._grpM.updateGroupMap([e]), e = !e.isSupportTopic, t._grpM.emitGroupListUpdate(!0, e));
                });
              }
            }, {
              key: "_onMemberKicked",
              value: function value(e) {
                e = e.payload.groupProfile.groupID;
                this._grpM.hasLocalGroup(e) && this._grpM.deleteLocalGroupAndConversation(e);
              }
            }, {
              key: "_onGroupDismissed",
              value: function value(e) {
                var e = e.payload.groupProfile.groupID,
                  t = (this._grpM.hasLocalGroup(e) && this._grpM.deleteLocalGroupAndConversation(e), this._grpM._AVChatRoomHandler);
                t && t.checkJoinedAVChatRoomByID(e) && t.reset(e);
              }
            }, {
              key: "_onInviteGroup",
              value: function value(e) {
                var t = this,
                  n = e.payload.groupProfile.groupID,
                  e = this._grpM.hasLocalGroup(n);
                M.l("".concat(this._n, "._onInviteGroup groupID:").concat(n, " hasGroup:").concat(e)), this._grpM.getGroupProfile({
                  groupID: n
                }).then(function () {
                  t._grpM.emitGroupListUpdate(), t._grpM.get(11).pullMsgOnInvite("".concat(R.CONV_GROUP).concat(n));
                });
              }
            }, {
              key: "_onQuitGroup",
              value: function value(e) {
                var e = e.payload.groupProfile,
                  t = e.groupID,
                  e = e.groupType,
                  n = this._grpM.hasLocalGroup(t);
                M.l("".concat(this._n, "._onQuitGroup groupID:").concat(t, " groupType:").concat(e, " hasGroup:").concat(n)), n && this._grpM.deleteLocalGroupAndConversation(t);
              }
            }, {
              key: "_onSetManager",
              value: function value(e) {
                var e = e.payload.groupProfile,
                  t = e.to,
                  e = e.groupID,
                  e = this._grpM.getGroupMemberHandler().getLocalGroupMemberInfo(e, t);
                e && e.updateRole(R.GRP_MBR_ROLE_ADMIN);
              }
            }, {
              key: "_onDeleteManager",
              value: function value(e) {
                var e = e.payload.groupProfile,
                  t = e.to,
                  e = e.groupID,
                  e = this._grpM.getGroupMemberHandler().getLocalGroupMemberInfo(e, t);
                e && e.updateRole(R.GRP_MBR_ROLE_MEMBER);
              }
            }, {
              key: "_onMessageRemindTypeSynced",
              value: function value(e) {
                var t = e.payload.groupProfile.groupID,
                  e = e.payload.messageRemindType;
                this._grpM.get(11).onGroupMsgRemindTypeUpdated({
                  groupID: t,
                  messageRemindType: e
                });
              }
            }, {
              key: "_handleTopicSystemNotice",
              value: function value(e) {
                var t = e.groupProfile,
                  n = t.groupID,
                  t = t.topicID,
                  e = e.elements,
                  o = e.operationType,
                  i = e.topicIDList,
                  e = e.messageRemindType,
                  a = this._grpM.get(10);
                17 === o ? a.onTopicCreated({
                  groupID: n,
                  topicID: t
                }) : 18 === o ? a.onTopicDeleted({
                  groupID: n,
                  topicIDList: i
                }) : 20 === o && a.onMessageRemindTypeUpdated({
                  groupID: n,
                  topicID: t,
                  messageRemindType: e
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this.pendencyMap.clear();
              }
            }]),
            ni = ["relayFlag"],
            oi = (t(vi, c), e(vi, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("polling_interval"),
                  t = this.getCloudConfig("polling_interval_plus"),
                  n = this.getCloudConfig("polling_no_msg_count"),
                  o = this.getCloudConfig("polling_simplified_msg"),
                  i = this.getCloudConfig("paging_grp_count");
                M.l("".concat(this._n, "._onCloudConfig pollingInterval:").concat(e) + " pollingIntervalPlus:".concat(t, " pollingNoMessageCount:").concat(n) + " pollingSimplifiedMessage:".concat(o, " pagingGroupCount:").concat(i)), this._AVChatRoomHandler.setPollingInterval(e), this._AVChatRoomHandler.setPollingIntervalPlus(t), this._AVChatRoomHandler.setPollingNoMessageCount(n), this._AVChatRoomHandler.setPollingSimplifiedMessage(o), this._commonGroupHandler.setPagingGroupCount(i);
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                this.isLoggedIn() && (this._commonGroupHandler.onCheckTimer(e), this._groupTipsHandler.onCheckTimer(e));
              }
            }, {
              key: "guardForAVChatRoom",
              value: function value(t) {
                var n,
                  o = this;
                return t.conversationType !== R.CONV_GROUP || (n = Nt(t.to) ? jt(t.to) : t.to, this.hasLocalGroup(n)) ? D() : this.getGroupProfile({
                  groupID: n
                }).then(function (e) {
                  var e = e.data.group.type;
                  return M.l("".concat(o._n, ".guardForAVChatRoom. groupID:").concat(n, " type:").concat(e)), e === R.GRP_AVCHATROOM ? E(new L({
                    code: e = k.MSG_SEND_FAIL_NOT_IN_AV,
                    message: o.getErrMsg(e, t.from, n),
                    data: {
                      message: t
                    }
                  })) : D();
                });
              }
            }, {
              key: "checkJoinedAVChatRoomByID",
              value: function value(e) {
                return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
              }
            }, {
              key: "onNewMessage",
              value: function value(e) {
                this._commonGroupHandler.onNewMessage(e);
              }
            }, {
              key: "updateNextMessageSeq",
              value: function value(e) {
                var n,
                  o = this;
                O(e) && (n = this.get(10), e.forEach(function (e) {
                  var t = e.conversationID.replace(R.CONV_GROUP, "");
                  Nt(t) && n.updateUnreadCountAndLastMsg(t, e.lastMessage), o.groupMap.has(t) && (o.groupMap.get(t).nextMessageSeq = e.lastMessage.sequence + 1);
                }));
              }
            }, {
              key: "onNewGroupTips",
              value: function value(e) {
                this._groupTipsHandler.onNewGroupTips(e);
              }
            }, {
              key: "onMsgRevoked",
              value: function value(e) {
                this._commonGroupHandler.onMsgRevoked(e, !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1]);
              }
            }, {
              key: "onNewGroupSystemNotice",
              value: function value(e) {
                this._groupSystemNoticeHandler.onNewGroupSystemNotice(e);
              }
            }, {
              key: "onMsgReadNotice",
              value: function value(e) {
                var a = this;
                e.dataList.forEach(function (e) {
                  var i,
                    e = e.elements.groupMessageReadNotice;
                  N(e) || (i = a.get(11), e.forEach(function (e) {
                    var t = e.groupID,
                      n = e.topicID,
                      n = void 0 === n ? void 0 : n,
                      e = e.lastMessageSeq,
                      t = (M.l("".concat(a._n, ".onMsgReadNotice groupID:").concat(t, " lastMessageSeq:").concat(e)), "".concat(R.CONV_GROUP).concat(t)),
                      o = !0;
                    S(n) || (t = "".concat(R.CONV_GROUP).concat(n), o = !1), i.updateIsReadAfterReadReport({
                      conversationID: t,
                      lastMessageSeq: e
                    }), i.updateUnreadCount(t, o), i.clearGroupAtInfoList(t, o);
                  }));
                });
              }
            }, {
              key: "onReadReceiptList",
              value: function value(e) {
                var o = this;
                M.l("".concat(this._n, ".onReadReceiptList options:"), e), e.dataList.forEach(function (e) {
                  var t = e.groupProfile,
                    e = e.elements,
                    t = t.groupID,
                    n = o.get(11),
                    e = e.readReceiptList;
                  n.updateReadReceiptInfo({
                    groupID: t,
                    readReceiptList: e
                  });
                });
              }
            }, {
              key: "onMsgModified",
              value: function value(e) {
                M.l("".concat(this._n, ".onMsgModified options:"), e);
                var t = this.get(11);
                e.dataList.forEach(function (e) {
                  t.onMessageModified(y(y({}, e), {}, {
                    conversationType: R.CONV_GROUP,
                    to: e.topicID || e.groupID
                  }));
                });
              }
            }, {
              key: "deleteGroupSystemNotice",
              value: function value(e) {
                this._groupSystemNoticeHandler.deleteGroupSystemNotice(e);
              }
            }, {
              key: "initGroupMap",
              value: function value(e) {
                this.groupMap.set(e.groupID, new qo(e));
              }
            }, {
              key: "clearGroupMap",
              value: function value() {
                this.groupMap.clear();
              }
            }, {
              key: "deleteGroup",
              value: function value(e) {
                this.groupMap["delete"](e);
              }
            }, {
              key: "updateGroupMap",
              value: function value(e) {
                var t,
                  n = this,
                  o = this.get(11);
                e.forEach(function (e) {
                  t = e.groupID, n.groupMap.has(t) ? n.groupMap.get(t).updateGroup(e) : (n.groupMap.set(t, new qo(e)), o.deleteGroupRoamingInfo(t));
                });
                var i,
                  a = this.getMyUserID(),
                  s = F(this.groupMap);
                try {
                  for (s.s(); !(i = s.n()).done;) {
                    var r = j(i.value, 2)[1];
                    r.selfInfo.userID = a, "Owner" === r.selfInfo.role && (r.ownerID = a);
                  }
                } catch (e) {
                  s.e(e);
                } finally {
                  s.f();
                }
              }
            }, {
              key: "getGroupMap",
              value: function value() {
                return this.groupMap;
              }
            }, {
              key: "getLocalGroupList",
              value: function value() {
                return d(this.groupMap.values()).filter(function (e) {
                  return e.type !== R.GRP_ROOM && e.type !== R.GRP_LIVE;
                });
              }
            }, {
              key: "getLocalGroupProfile",
              value: function value(e) {
                return this.groupMap.get(e);
              }
            }, {
              key: "sortLocalGroupList",
              value: function value() {
                var e = d(this.groupMap).filter(function (e) {
                  e = j(e, 2);
                  return e[0], !S(e[1].lastMessage);
                });
                e.sort(function (e, t) {
                  return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
                }), this.groupMap = new Map(d(e));
              }
            }, {
              key: "updateGroupLastMessage",
              value: function value(e) {
                this._commonGroupHandler.updateLastMsg(e);
              }
            }, {
              key: "emitGroupListUpdate",
              value: function value() {
                var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                  t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1],
                  n = this.getLocalGroupList();
                e && this.emitOEvt(h.GROUP_LIST_UPDATED), t && (e = JSON.parse(JSON.stringify(n)), this.get(11).updateConvGroupProfile(e));
              }
            }, {
              key: "getMyNameCardByGroupID",
              value: function value(e) {
                e = this.getLocalGroupProfile(e);
                return e ? e.selfInfo.nameCard : "";
              }
            }, {
              key: "isPagingGetCompleted",
              value: function value() {
                return this._commonGroupHandler.isPagingGetCompleted();
              }
            }, {
              key: "getMsgRemindType",
              value: function value(e) {
                var n = this;
                return !O(e) || 0 === e.length || 0 === (e = e.filter(function (e) {
                  return !At(n.getLocalGroupProfile(e).type);
                })).length ? Promise.resolve() : (M.l("".concat(this._n, ".getMsgRemindType groupIDList:").concat(e)), this.getGroupProfileAdvance({
                  groupIDList: e,
                  responseFilter: {
                    memberInfoFilter: ["MsgFlag"]
                  }
                }).then(function (e) {
                  var e = e.data.successGroupList,
                    t = n.get(11);
                  e.forEach(function (e) {
                    t.onGroupMsgRemindTypeUpdated({
                      groupID: e.groupID,
                      messageRemindType: O(e.members) ? e.members[0].messageRemindType : ""
                    });
                  });
                }));
              }
            }, {
              key: "getGroupList",
              value: function value() {
                return this._commonGroupHandler.getGroupList();
              }
            }, {
              key: "syncCommunityWithTopic",
              value: function value() {
                return this._commonGroupHandler.syncGroupList(!0);
              }
            }, {
              key: "getGroupProfile",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".").concat("getGroupProfile"),
                  i = new P("getGroupProfile"),
                  a = t.groupID,
                  e = t.groupCustomFieldFilter,
                  e = (M.l("".concat(o, " groupID:").concat(a)), {
                    groupIDList: [a],
                    responseFilter: {
                      groupBaseInfoFilter: d(re),
                      groupCustomFieldFilter: e,
                      memberInfoFilter: [].concat(d(ce), ["NameCard"])
                    }
                  });
                return this.getGroupProfileAdvance(e).then(function (e) {
                  var e = e.data,
                    t = e.successGroupList,
                    e = e.failureGroupList;
                  return M.l("".concat(o, " ok")), 0 < e.length ? E(e[0]) : ((e = At(t[0].type) && !n.hasLocalGroup(a) ? new qo(t[0]) : (n.updateGroupMap(t), n.getLocalGroupProfile(a))).isSupportTopic || n.get(11).updateConvGroupProfile([e]), i.setMessage("groupID:".concat(a, " type:").concat(e.type, " muteAllMembers:").concat(e.muteAllMembers, " ownerID:").concat(e.ownerID)).end(), T({
                    group: e
                  }));
                })["catch"](function (e) {
                  return i.setError(e).setMessage("groupID:".concat(t.groupID)).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getGroupProfileAdvance",
              value: function value(e) {
                var t,
                  n = "".concat(this._n, ".getGroupProfileAdvance"),
                  o = e.groupIDList,
                  i = (O(o) && 50 < o.length && (this.warn("GetGroupProfileLimit"), o.length = 50), []),
                  a = [],
                  o = (o.forEach(function (e) {
                    (Ot({
                      groupID: e
                    }) ? a : i).push(e);
                  }), []);
                return 0 < i.length && (t = this._getGroupProfileAdvance(y(y({}, e), {}, {
                  groupIDList: i
                })), o.push(t)), 0 < a.length && (t = this._getGroupProfileAdvance(y(y({}, e), {}, {
                  groupIDList: a,
                  relayFlag: 0 < i.length
                })), o.push(t)), Promise.all(o).then(function (e) {
                  var t = [],
                    n = [];
                  return e.forEach(function (e) {
                    t.push.apply(t, d(e.successGroupList)), n.push.apply(n, d(e.failureGroupList));
                  }), T({
                    successGroupList: t,
                    failureGroupList: n
                  });
                })["catch"](function (e) {
                  return M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getGroupProfileAdvance",
              value: function value(t) {
                var n = this,
                  e = t.relayFlag,
                  o = void 0 !== e && e,
                  i = W(t, ni);
                return this.req({
                  P: G.GET_GRP_PROFILE,
                  data: i
                }).then(function (e) {
                  M.l("".concat(n._n, "._getGroupProfileAdvance ok. options:"), i);
                  e = e.data.groups;
                  return {
                    successGroupList: e.filter(function (e) {
                      return N(e.errorCode) || 0 === e.errorCode;
                    }),
                    failureGroupList: e.filter(function (e) {
                      return e.errorCode && 0 !== e.errorCode;
                    }).map(function (e) {
                      return new L({
                        code: e.errorCode,
                        message: e.errorInfo,
                        data: {
                          groupID: e.groupID
                        }
                      });
                    })
                  };
                })["catch"](function (e) {
                  return o && Ot({
                    groupID: t.groupIDList[0]
                  }) ? {
                    successGroupList: [],
                    failureGroupList: []
                  } : E(e);
                });
              }
            }, {
              key: "createGroup",
              value: function value(s) {
                var r = this,
                  e = [R.GRP_PUBLIC, R.GRP_WORK, R.GRP_MEETING, R.GRP_AVCHATROOM, R.GRP_COMMUNITY],
                  c = "".concat(this._n, ".").concat("createGroup"),
                  t = s.type,
                  n = s.groupID;
                if (s.name && !1 === this._filterProfanity("name", s)) return E({
                  code: k.PROFANITY_FOUND
                });
                if (s.introduction && !1 === this._filterProfanity("introduction", s)) return E({
                  code: k.PROFANITY_FOUND
                });
                if (s.notification && !1 === this._filterProfanity("notification", s)) return E({
                  code: k.PROFANITY_FOUND
                });
                if (!e.includes(t)) return E({
                  code: k.ILLEGAL_GRP_TYPE
                });
                if (!Ot({
                  type: t
                })) {
                  if (!S(n) && Ot({
                    groupID: n
                  })) return E({
                    code: k.ILLEGAL_GRP_ID
                  });
                  s.isSupportTopic = void 0;
                }
                if (At(t) && !N(s.memberList) && 0 < s.memberList.length && (s.memberList = void 0), this._canIUseJoinOption(t) || N(s.joinOption) || (s.joinOption = void 0), Ot({
                  type: t
                })) {
                  if (!S(n) && !Ot({
                    groupID: n
                  })) return E({
                    code: k.ILLEGAL_GRP_ID
                  });
                  s.isSupportTopic = !0 === s.isSupportTopic ? 1 : 0;
                }
                var u = new P("createGroup"),
                  l = (M.l("".concat(c, " options:"), s), null),
                  d = [];
                return this.req({
                  P: G.CREATE_GRP,
                  data: y(y({}, s), {}, {
                    ownerID: this.getMyUserID(),
                    webPushFlag: 1
                  })
                }).then(function (e) {
                  var t,
                    n,
                    o,
                    e = e.data,
                    i = e.groupID,
                    e = e.overLimitUserIDList,
                    a = void 0 === e ? [] : e,
                    e = (l = i, d = a, "groupType:".concat(s.type, " groupID:").concat(i, " overLimitUserIDList:").concat(a));
                  return u.setMessage(e).end(), M.l("".concat(c, " ok. ").concat(e)), s.type === R.GRP_AVCHATROOM || s.type === R.GRP_COMMUNITY && 1 === s.isSupportTopic || (S(s.memberList) || S(a) || (s.memberList = s.memberList.filter(function (e) {
                    return -1 === a.indexOf(e.userID);
                  })), r.updateGroupMap([y(y({}, s), {}, {
                    groupID: i
                  })]), e = r.get(2), o = "", t = 0, s.type === R.GRP_COMMUNITY ? (o = r.isIntl() ? "Create Community" : "创建社群", t = 1) : o = r.isIntl() ? "Create Group" : "创建群组", n = r.get(4).getMyNick(), o = e.createCustomMessage({
                    to: i,
                    conversationType: R.CONV_GROUP,
                    payload: {
                      data: JSON.stringify({
                        businessID: "group_create",
                        content: o,
                        cmd: t,
                        opUser: n || r.getMyUserID(),
                        version: 4
                      })
                    }
                  }), e.sendMessageInstance(o), r.emitGroupListUpdate()), r.getGroupProfile({
                    groupID: i
                  });
                }).then(function (e) {
                  var e = e.data.group,
                    t = e.selfInfo,
                    n = t.nameCard,
                    t = t.joinTime;
                  return e.updateSelfInfo({
                    nameCard: n,
                    joinTime: t,
                    messageRemindType: R.MSG_REMIND_ACPT_AND_NOTE,
                    role: R.GRP_MBR_ROLE_OWNER
                  }), T({
                    group: e,
                    overLimitUserIDList: d
                  });
                })["catch"](function (e) {
                  var t;
                  return u.setMessage("groupType:".concat(s.type)).setError(e).end(), 10010 === e.code || 10007 === e.code ? (r._silentlyGetGroupProfile(e.code, l), r.updateGroupMap([y(y({}, s), {}, {
                    groupID: l
                  })]), (t = r.getLocalGroupProfile(l)).selfInfo.role = R.GRP_MBR_ROLE_OWNER, T({
                    group: t,
                    overLimitUserIDList: d
                  })) : (M.e("".concat(c, " failed. error:"), e), E(e));
                });
              }
            }, {
              key: "dismissGroup",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("dismissGroup"),
                  o = "groupID:".concat(e),
                  i = new P("dismissGroup");
                return i.setMessage(o), M.l("".concat(n, " ").concat(o)), this.req({
                  P: G.DISMISS_GRP,
                  data: {
                    groupID: e
                  }
                }).then(function () {
                  return i.end(), M.l("".concat(n, " ok")), t.deleteLocalGroupAndConversation(e), t.checkJoinedAVChatRoomByID(e) && t._AVChatRoomHandler.reset(e), t._groupAttributesHandler.deleteLocalGroupAttributes(e), T({
                    groupID: e
                  });
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "updateGroupProfile",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".").concat("updateGroupProfile");
                return this.hasLocalGroup(e.groupID) && (t = this.getLocalGroupProfile(e.groupID).type, this._canIUseJoinOption(t) || N(e.joinOption) || (M.w("".concat(i, " joinOption is unavailable for Work/Meeting/AVChatRoom")), e.joinOption = void 0)), N(e.muteAllMembers) || (e.muteAllMembers ? e.muteAllMembers = "On" : e.muteAllMembers = "Off"), e.name && !1 === this._filterProfanity("name", e) || e.introduction && !1 === this._filterProfanity("introduction", e) || e.notification && !1 === this._filterProfanity("notification", e) ? E({
                  code: k.PROFANITY_FOUND
                }) : ((n = new P("updateGroupProfile")).setMessage(JSON.stringify(e)), M.l("".concat(i, " groupID:").concat(e.groupID)), this.req({
                  P: G.UPDATE_GRP_PROFILE,
                  data: e
                }).then(function () {
                  return n.end(), M.l("".concat(i, " ok")), o.hasLocalGroup(e.groupID) && o.groupMap.get(e.groupID).updateGroup(e), T({
                    group: o.groupMap.get(e.groupID)
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.l("".concat(i, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "_filterProfanity",
              value: function value(e, t) {
                var n,
                  o = this.get(29);
                return !o || (n = (o = o.filterText(t[e], se)).isAllowedToSend, o = o.modifiedText, !0 === n && (t[e] = o, !0));
              }
            }, {
              key: "joinGroup",
              value: function value(t) {
                var n,
                  o = this,
                  i = t.groupID,
                  a = "".concat(this._n, ".joinGroup");
                return this.deleteUnjoinedAVChatRoom(i), this.hasLocalGroup(i) ? this.isLoggedIn() ? (n = new P("applyJoinGroup"), this.getGroupProfile({
                  groupID: i
                }).then(function () {
                  return n.setMessage("groupID:".concat(i, " joinedStatus:").concat(R.JOIN_STATUS_ALREADY_IN_GROUP)).end(), D({
                    status: R.JOIN_STATUS_ALREADY_IN_GROUP
                  });
                })["catch"](function (e) {
                  return n.setMessage("groupID:".concat(i, " unjoined")).end(), M.w("".concat(a, " ").concat(i, " was unjoined, now join!")), o.groupMap["delete"](i), o.applyJoinGroup(t);
                })) : D({
                  status: R.JOIN_STATUS_ALREADY_IN_GROUP
                }) : (M.l("".concat(a, " groupID:").concat(i)), this.isLoggedIn() ? this.applyJoinGroup(t) : this._AVChatRoomHandler.joinWithoutAuth(t));
              }
            }, {
              key: "applyJoinGroup",
              value: function value(e) {
                var c,
                  u,
                  l = this,
                  d = "".concat(this._n, ".").concat("applyJoinGroup"),
                  p = e.groupID;
                return S(e.applyMessage) || !1 !== this._filterProfanity("applyMessage", e) ? (c = new P("applyJoinGroup"), e = y({}, e), (u = this.canIUse(g.AV_HISTORY_MSG)) && (e.historyMessageFlag = 1), this.get(11).deleteTopicRoamingInfo(p), this.req({
                  P: G.APPLY_JOIN_GRP,
                  data: e
                }).then(function (e) {
                  var e = e.data,
                    t = e.joinedStatus,
                    n = e.longPollingKey,
                    o = e.startSeq,
                    i = e.avChatRoomFlag,
                    a = e.avChatRoomKey,
                    s = e.messageList,
                    e = "groupID:".concat(p, " joinedStatus:").concat(t, " longPollingKey:").concat(n, " startSeq:").concat(o) + " avChatRoomFlag:".concat(i, " canGetAVChatRoomHistoryMsg:").concat(u, ",") + " historyMsgCount:".concat(S(s) ? 0 : s.length);
                  switch (c.setMessage(e).end(), M.l("".concat(d, " ok. ").concat(e)), t) {
                    case $e:
                      return T({
                        status: $e
                      });
                    case Qe:
                      return l.getGroupProfile({
                        groupID: p
                      }).then(function (e) {
                        e = e.data.group;
                        return l._handleJoinResult({
                          group: e,
                          avChatRoomFlag: i,
                          longPollingKey: n,
                          startSeq: o,
                          avChatRoomKey: a,
                          messageList: s
                        });
                      })["catch"](function (e) {
                        var t;
                        return 10010 === e.code || 10007 === e.code ? (l._silentlyGetGroupProfile(e.code, p), t = new qo({
                          groupID: p
                        }), l.updateGroupMap([t]), l._handleJoinResult({
                          group: t,
                          avChatRoomFlag: i,
                          longPollingKey: n,
                          startSeq: o,
                          avChatRoomKey: a,
                          messageList: s
                        })) : (M.e("".concat(d, " failed. error:"), e), E(e));
                      });
                    default:
                      var r = new L({
                        code: k.JOIN_GRP_FAIL
                      });
                      return M.e("".concat(d, " failed. error:"), r), E(r);
                  }
                })["catch"](function (e) {
                  return c.setMessage("groupID:".concat(p)).setError(e).end(), M.e("".concat(d, " failed. error:"), e), E(e);
                })) : E({
                  code: k.PROFANITY_FOUND
                });
              }
            }, {
              key: "_handleJoinResult",
              value: function value(e) {
                var t = this,
                  n = e.group,
                  o = e.avChatRoomFlag,
                  i = e.longPollingKey,
                  a = e.startSeq,
                  s = e.avChatRoomKey,
                  r = e.messageList,
                  c = n.groupID;
                return 1 === o ? (this.get(11).setCompleted("".concat(R.CONV_GROUP).concat(c)), this._groupAttributesHandler.initGroupAttributesCache({
                  groupID: c,
                  avChatRoomKey: s
                }), this._groupCountersHandler.initGroupCountersCache({
                  groupID: c,
                  avChatRoomKey: s
                }), (e = N(i) ? this._AVChatRoomHandler.handleJoinResult({
                  group: n
                }) : this._AVChatRoomHandler.startRunLoop({
                  group: n,
                  longPollingKey: i,
                  startSeq: a
                })).then(function () {
                  t._onAVChatRoomHistoryMessage(r, c);
                }), e) : (this.emitGroupListUpdate(!0, !1), T({
                  status: Qe,
                  group: n
                }));
              }
            }, {
              key: "quitGroup",
              value: function value(e) {
                var t,
                  n = this,
                  o = "".concat(this._n, ".").concat("quitGroup"),
                  i = "groupID:".concat(e),
                  a = (M.l("".concat(o, " ").concat(i)), this.checkJoinedAVChatRoomByID(e));
                return a || this.hasLocalGroup(e) ? a && !this.isLoggedIn() ? (M.l("".concat(o, " anonymously ok. ").concat(i)), this.deleteLocalGroupAndConversation(e), this._AVChatRoomHandler.reset(e), D({
                  groupID: e
                })) : ((t = new P("quitGroup")).setMessage(i), this.req({
                  P: G.QUIT_GRP,
                  data: {
                    groupID: e
                  }
                }).then(function () {
                  return t.end(), M.l("".concat(o, " ok")), n.deleteLocalGroupAndConversation(e), a && n._AVChatRoomHandler.reset(e), n._groupAttributesHandler.deleteLocalGroupAttributes(e), T({
                    groupID: e
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                })) : E({
                  code: k.MEMBER_NOT_IN_GRP
                });
              }
            }, {
              key: "searchGroupByID",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("searchGroupByID"),
                  n = {
                    groupIDList: [e]
                  },
                  o = new P("searchGroupByID");
                return o.setMessage("groupID:".concat(e)), M.l("".concat(t, " groupID:").concat(e)), this.req({
                  P: G.SEARCH_GRP,
                  data: n
                }).then(function (e) {
                  e = e.data.groupProfile;
                  if (0 !== e[0].errorCode) throw new L({
                    code: e[0].errorCode,
                    message: e[0].errorInfo
                  });
                  return o.end(), M.l("".concat(t, " ok")), T({
                    group: new qo(e[0])
                  });
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "changeGroupOwner",
              value: function value(i) {
                var a,
                  s = this,
                  r = "".concat(this._n, ".").concat("changeGroupOwner");
                return this.hasLocalGroup(i.groupID) && this.getLocalGroupProfile(i.groupID).type === R.GRP_AVCHATROOM ? E({
                  code: k.CANNOT_CHANGE_OWNER_IN_AV
                }) : i.newOwnerID === this.getMyUserID() ? E({
                  code: k.CANNOT_CHANGE_OWNER_TO_SELF
                }) : ((a = new P("changeGroupOwner")).setMessage("groupID:".concat(i.groupID, " newOwnerID:").concat(i.newOwnerID)), M.l("".concat(r, " groupID:").concat(i.groupID)), this.req({
                  P: G.CHANGE_GRP_OWNER,
                  data: i
                }).then(function () {
                  a.end(), M.l("".concat(r, " ok"));
                  var e,
                    t = i.groupID,
                    n = i.newOwnerID,
                    o = (s.groupMap.get(t).ownerID = n, s._groupMemberHandler.getLocalGroupMemberList(t));
                  return o instanceof Map && (e = o.get(s.getMyUserID()), N(e) || (e.updateRole("Member"), s.groupMap.get(t).selfInfo.role = "Member"), e = o.get(n), N(e) || e.updateRole("Owner")), s.emitGroupListUpdate(!0, !1), T({
                    group: s.groupMap.get(t)
                  });
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(r, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getGroupApplicationList",
              value: function value() {
                return this._groupSystemNoticeHandler.getGroupApplicationList();
              }
            }, {
              key: "handleGroupApplication",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s = this,
                  r = "".concat(this._n, ".").concat("handleGroupApplication"),
                  c = e.handleAction,
                  u = e.handleMessage,
                  l = e.message,
                  d = e.application,
                  p = (l ? (t = l.payload.operatorID, n = l.payload.groupProfile.groupID, o = l.payload.authentication, i = l.payload.messageKey) : d && (t = d.applicant, n = d.groupID, o = d.authentication, i = d.messageKey), G.HANDLE_GRP_APPLICATION),
                  _ = (d && 2 === d.applicationType && (p = G.HANDLE_INVITE_JOIN_GRP, a = d.userID), new P("handleGroupApplication"));
                return _.setMessage("groupID:".concat(n)), M.l("".concat(r, " groupID:").concat(n)), this.req({
                  P: p,
                  data: {
                    handleAction: c,
                    handleMessage: u,
                    applicant: t,
                    invitee: a,
                    groupID: n,
                    authentication: o,
                    messageKey: i
                  }
                }).then(function () {
                  return _.end(), M.l("".concat(r, " ok")), l && s._groupSystemNoticeHandler.deleteGroupSystemNotice({
                    messageList: [e.message]
                  }), T({
                    group: s.getLocalGroupProfile(n)
                  });
                })["catch"](function (e) {
                  return _.setError(e).end(), M.e("".concat(r, " failed. error"), e), E(e);
                });
              }
            }, {
              key: "handleGroupInvitation",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("handleGroupInvitation"),
                  o = e.message.payload,
                  i = o.groupProfile.groupID,
                  a = o.authentication,
                  s = o.messageKey,
                  o = o.operatorID,
                  r = e.handleAction,
                  c = new P("handleGroupInvitation");
                return c.setMessage("groupID:".concat(i, " inviter:").concat(o, " handleAction:").concat(r)), M.l("".concat(n, " groupID:").concat(i, " inviter:").concat(o, " handleAction:").concat(r)), this.req({
                  P: G.HANDLE_GRP_INVITATION,
                  data: y(y({}, e), {}, {
                    inviter: o,
                    groupID: i,
                    authentication: a,
                    messageKey: s
                  })
                }).then(function () {
                  return c.end(), M.l("".concat(n, " ok")), t._groupSystemNoticeHandler.deleteGroupSystemNotice({
                    messageList: [e.message]
                  }), T({
                    group: t.getLocalGroupProfile(i)
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), M.e("".concat(n, " failed. error"), e), E(e);
                });
              }
            }, {
              key: "getGroupOnlineMemberCount",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".getGroupOnlineMemberCount"),
                  e = this._AVChatRoomHandler.checkJoinedAVChatRoomByID(t),
                  i = this.hasLocalGroup(t);
                if (M.l("".concat(o, " groupID:").concat(t, " isAVChatRoom:").concat(e, " has:").concat(i)), e) return this._AVChatRoomHandler.getGroupOnlineMemberCount(t);
                if (!i) return D({
                  memberCount: 0
                });
                e = Date.now();
                if (this._onlineMemberCountMap.has(t)) {
                  i = this._onlineMemberCountMap.get(t);
                  if (e - i.lastReqTime <= 6e4) return D({
                    memberCount: i.memberCount
                  });
                  i.lastReqTime = e;
                }
                return this.requestOnlineCount(t).then(function (e) {
                  e = e.data.memberCount, e = void 0 === e ? 0 : e;
                  return n._onlineMemberCountMap.set(t, {
                    lastReqTime: Date.now(),
                    memberCount: e
                  }), M.l("".concat(o, " ok. groupID:").concat(t, " memberCount:").concat(e)), D({
                    memberCount: e
                  });
                })["catch"](function (e) {
                  return M.w("".concat(o, " failed. error:"), e), Promise.reject(e);
                });
              }
            }, {
              key: "requestOnlineCount",
              value: function value(e) {
                return this.req({
                  P: G.GET_ONLINE_MBR_NUM,
                  data: {
                    groupID: e
                  }
                });
              }
            }, {
              key: "hasLocalGroup",
              value: function value(e) {
                return this.groupMap.has(e);
              }
            }, {
              key: "deleteLocalGroupAndConversation",
              value: function value(e) {
                var t = this.checkJoinedAVChatRoomByID(e),
                  n = (M.l("".concat(this._n, ".deleteLocalGroupAndConversation groupID:").concat(e, " isJoinedAVChatRoom:").concat(t)), this.get(11)),
                  o = "".concat(R.CONV_GROUP).concat(e);
                t && (this.stopMessageLongPolling({
                  groupID: e
                }), n.deleteLocalConv(o)), Ot({
                  groupID: e
                }) && (t = this.getLocalGroupProfile(e)) && !0 === t.isSupportTopic && this.get(10).deleteTopicListInCommunity(e), n.clearUnreadCount(o), n.setCompleted(o), this._deleteLocalGroup(e), this._onlineMemberCountMap["delete"](e), this.emitGroupListUpdate(!0, !1);
              }
            }, {
              key: "_deleteLocalGroup",
              value: function value(e) {
                this.groupMap["delete"](e), this._groupMemberHandler.deleteGroupMemberList(e);
              }
            }, {
              key: "sendMessage",
              value: function value(e, t) {
                return O(e._receiverList) && 0 < e._receiverList.length && !this.canIUse(g.MSG_TO_SPECIFIED_GRP_MBR) ? this.noUse("Targeted Group Message") : (e = this.createGroupMessagePack(e, t), this.req(e));
              }
            }, {
              key: "createGroupMessagePack",
              value: function value(e, t) {
                var n = null,
                  o = (t && t.offlinePushInfo && (n = t.offlinePushInfo), ""),
                  i = (C(e.cloudCustomData) && 0 < e.cloudCustomData.length && (o = e.cloudCustomData), []),
                  a = (m(t) && m(t.messageControlInfo) && (a = (r = t.messageControlInfo).excludedFromUnreadCount, s = r.excludedFromLastMessage, r = r.excludedFromContentModeration, !0 === a && i.push("NoUnread"), !0 === s && i.push("NoLastMsg"), !0 === r) && i.push("NoMsgCheck"), void 0),
                  s = (O(e._receiverList) && 0 < e._receiverList.length && (a = e._receiverList, 50 < e._receiverList.length) && (a = e._receiverList.slice(0, 50), this.warn("ReceiverListLimit")), this.isOnlineMessage(e, t) ? 1 : 0),
                  r = JSON.parse(JSON.stringify(e.getElements())),
                  c = this.get(17).getFileDNList(),
                  u = e.getGroupAtInfoList(),
                  r = {
                    fromAccount: this.getMyUserID(),
                    groupID: e.to,
                    msgBody: so(e.type, r, c),
                    cloudCustomData: o,
                    random: e.random,
                    priority: e.priority,
                    clientSequence: e.clientSequence,
                    groupAtInfo: e.type !== R.MSG_TEXT || S(u) ? void 0 : u,
                    onlineOnlyFlag: s,
                    clientTime: e.clientTime,
                    offlinePushInfo: Lo(n),
                    messageControlInfo: 0 == s ? i : void 0,
                    needReadReceipt: !0 !== e.needReadReceipt || this.isMessageFromOrToAVChatroom(e.to) ? 0 : 1,
                    receiverList: a,
                    isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                    isRelayMessage: !0 === e._relayFlag ? 1 : 0,
                    cmConfigID: e._cmConfigID,
                    forbidCallbackControl: kt(t)
                  };
                return Nt(e.to) && (r.groupID = jt(e.to), r.topicID = e.to), {
                  P: G.SEND_GRP_MSG,
                  data: r
                };
              }
            }, {
              key: "revokeMessage",
              value: function value(e) {
                var t = {
                  groupID: e.to,
                  msgSeqList: [{
                    msgSeq: e.sequence
                  }]
                };
                return Nt(e.to) && (t.groupID = jt(e.to), t.topicID = e.to), this.req({
                  P: G.REVOKE_GRP_MSG,
                  data: t
                });
              }
            }, {
              key: "deleteMessage",
              value: function value(e) {
                var t = e.to,
                  e = e.keyList,
                  e = (M.l("".concat(this._n, ".deleteMessage groupID:").concat(t, " count:").concat(e.length)), {
                    groupID: t,
                    deleter: this.getMyUserID(),
                    keyList: e
                  });
                return Nt(t) && (e.groupID = jt(t), e.topicID = t), this.req({
                  P: G.DEL_GRP_MSG,
                  data: e
                });
              }
            }, {
              key: "modifyRemoteMessage",
              value: function value(e) {
                var t = e.to,
                  n = e.sequence,
                  o = e.payload,
                  i = e.type,
                  a = e.version,
                  a = void 0 === a ? 0 : a,
                  s = e.cloudCustomData,
                  e = e._elements,
                  r = t,
                  c = void 0,
                  t = (Nt(t) && (r = jt(t), c = t), void 0);
                return zt(i) && (1 < e.length && e.splice(0, 1, {
                  type: i,
                  content: o
                }), t = e), this.req({
                  P: G.MODIFY_GRP_MSG,
                  data: {
                    groupID: r,
                    topicID: c,
                    sequence: n,
                    version: a,
                    elements: t,
                    cloudCustomData: s
                  }
                });
              }
            }, {
              key: "getRoamingMessage",
              value: function value(e) {
                var r = this,
                  c = "".concat(this._n, ".").concat("getRoamingMessage"),
                  u = e.conversationID,
                  l = e.groupID,
                  e = e.sequence,
                  d = new P("getRoamingMessage"),
                  p = 0,
                  _ = void 0;
                return Nt(l) && (l = jt(_ = l)), this._computeLastSequence({
                  groupID: l,
                  topicID: _,
                  sequence: e
                }).then(function (e) {
                  return p = e, M.l("".concat(c, " groupID:").concat(l, " startSequence:").concat(p)), r.req({
                    P: G.GET_GRP_ROAMING_MSG,
                    data: {
                      groupID: l,
                      count: 21,
                      sequence: p,
                      topicID: _
                    }
                  });
                }).then(function (e) {
                  var t = e.data,
                    n = t.messageList,
                    o = t.complete,
                    t = t.invisibleSequenceList,
                    t = void 0 === t ? [] : t,
                    e = e.data.nextSequence,
                    e = void 0 === e ? 0 : e,
                    i = (N(n) ? M.l("".concat(c, " ok. complete:").concat(o, " nextSequence:").concat(e, " but messageList is undefined!")) : M.l("".concat(c, " ok. complete:").concat(o, " nextSequence:").concat(e, " count:").concat(n.length)), d.setMessage("groupID:".concat(l, " topicID:").concat(_, " startSequence:").concat(p, " complete:").concat(o, " nextSequence:").concat(e)).end(), r.get(11)),
                    a = [],
                    s = [],
                    n = (S(n) || (a = i.onRoamingMessage(n, u, !0, s), i.updateIsRead(u), i.patchConvLastMessage(u)), 2 === o || e < 1);
                  return n && (i.setCompleted(u), e = ""), M.l("".concat(c, " isPullingCompleted:").concat(n, " nextReqID:").concat(e, " storedMsgCount:").concat(a.length) + " invisibleSeqCount:".concat(t.length)), {
                    nextReqID: e + "",
                    storedMessageList: a,
                    assembledMessageList: s,
                    isPullingCompleted: n
                  };
                })["catch"](function (e) {
                  return d.setError(e).setMessage("groupID:".concat(l, " topicID:").concat(_, " startSequence:").concat(p)).end(), M.w("".concat(c, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getGroupIDOfMessage",
              value: function value(e) {
                return e.conversationID.replace(R.CONV_GROUP, "");
              }
            }, {
              key: "getReadReceiptList",
              value: function value(n) {
                var t,
                  o = "".concat(this._n, ".").concat("getReadReceiptList"),
                  e = this._getGroupIDOfMessage(n[0]),
                  i = this.getMyUserID(),
                  a = n.filter(function (e) {
                    return e.from === i && !0 === e.needReadReceipt;
                  }).map(function (e) {
                    return {
                      sequence: e.sequence
                    };
                  });
                return M.l("".concat(o, " groupID:").concat(e, " sequenceList:").concat(JSON.stringify(a))), 0 === a.length ? D({
                  messageList: n
                }) : ((t = new P("getReadReceiptList")).setMessage("groupID:".concat(e)), this.req({
                  P: G.GET_READ_RECEIPT,
                  data: {
                    groupID: e,
                    sequenceList: a
                  }
                }).then(function (e) {
                  t.end(), M.l("".concat(o, " ok"));
                  e = e.data.readReceiptList;
                  return O(e) && e.forEach(function (t) {
                    n.forEach(function (e) {
                      0 === t.code && t.sequence === e.sequence && (e.readReceiptInfo.readCount = t.readCount, e.readReceiptInfo.unreadCount = t.unreadCount);
                    });
                  }), T({
                    messageList: n
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.w("".concat(o, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "sendReadReceipt",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("sendReadReceipt"),
                  n = this._getGroupIDOfMessage(e[0]),
                  o = new P("sendReadReceipt"),
                  i = (o.setMessage("groupID:".concat(n)), this.getMyUserID()),
                  e = e.filter(function (e) {
                    return e.from !== i && !0 === e.needReadReceipt;
                  }).map(function (e) {
                    return {
                      sequence: e.sequence
                    };
                  });
                return 0 === e.length ? E({
                  code: k.READ_RECEIPT_MSG_LIST_EMPTY
                }) : (M.l("".concat(t, ". sequenceList:").concat(JSON.stringify(e))), this.req({
                  P: G.SEND_READ_RECEIPT,
                  data: {
                    groupID: n,
                    sequenceList: e
                  }
                }).then(function (e) {
                  return o.end(), M.l("".concat(t, " ok")), T();
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(t, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getReadReceiptDetail",
              value: function value(e) {
                var i = this,
                  t = e.message,
                  n = e.filter,
                  o = e.cursor,
                  e = e.count,
                  a = this._getGroupIDOfMessage(t),
                  s = t.ID,
                  t = t.sequence,
                  r = "".concat(this._n, ".").concat("getReadReceiptDetail"),
                  c = this._receiptDetailCompleteMap.get(s) || !1,
                  u = 0 !== n && 1 !== n ? 0 : n,
                  n = C(o) ? o : "",
                  o = !A(e) || e <= 0 || 100 <= e ? 100 : e,
                  e = "groupID:".concat(a, " sequence:").concat(t, " cursor:").concat(n, " filter:").concat(u, " completeFlag:").concat(c),
                  l = (M.l("".concat(r, " ").concat(e)), {
                    cursor: "",
                    isCompleted: !1,
                    messageID: s,
                    unreadUserIDList: [],
                    readUserIDList: []
                  }),
                  d = new P("getReadReceiptDetail");
                return d.setMessage(e), this.req({
                  P: G.GET_READ_RECEIPT_DETAIL,
                  data: {
                    groupID: a,
                    sequence: t,
                    flag: u,
                    cursor: n,
                    count: o
                  }
                }).then(function (e) {
                  d.end();
                  var e = e.data,
                    t = e.cursor,
                    n = e.isCompleted,
                    o = e.unreadUserIDList,
                    e = e.readUserIDList;
                  return l.cursor = t, 1 === n && (l.isCompleted = !0, i._receiptDetailCompleteMap.set(s, !0)), 0 === u ? l.readUserIDList = e.map(function (e) {
                    return e.userID;
                  }) : 1 === u && (l.unreadUserIDList = o.map(function (e) {
                    return e.userID;
                  })), M.l("".concat(r, " ok")), T(l);
                })["catch"](function (e) {
                  return d.setError(e).end(), M.w("".concat(r, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getGroupReceiptsByUsers",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("getGroupReceiptsByUsers"),
                  n = e.groupID,
                  e = e.dataList,
                  e = void 0 === e ? [] : e,
                  o = "groupID:".concat(n, " dataList length:").concat(e.length);
                return M.l("".concat(t, " ").concat(o)), 0 === e.length && M.w("".concat(t, " dataList is empty.")), this.req({
                  P: G.GET_GRP_RECEIPTS_BY_USERS,
                  data: {
                    groupID: n,
                    dataList: e
                  }
                }).then(function (e) {
                  e = e.data.dataList, e = void 0 === e ? [] : e;
                  return M.l("".concat(t, " ok.")), T({
                    dataList: e
                  });
                })["catch"](function (e) {
                  return M.w("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getRoamingMessagesHopping",
              value: function value(c) {
                var u = this,
                  l = "".concat(this._n, ".").concat("getRoamingMessagesHopping"),
                  t = c.groupID,
                  n = c.count,
                  d = c.sequence,
                  p = c.direction,
                  o = void 0;
                return N(d) && 1 === p ? D({
                  messageList: [],
                  isCompleted: !0,
                  nextMessageSeq: ""
                }) : (Nt(t) && (t = jt(o = t)), this._computeReqSeqHopping({
                  groupID: t,
                  topicID: o,
                  sequence: d
                }).then(function (e) {
                  N(d) || 1 !== p || (e = d + n - 1);
                  var s = "".concat(o ? "topicID:".concat(o) : "groupID:".concat(t), " sequence:").concat(d, " reqSeq:").concat(e, " direction:").concat(p),
                    r = (M.l("".concat(l, " ").concat(s)), new P("getRoamingMessagesHopping"));
                  return u.req({
                    P: G.GET_GRP_ROAMING_MSG,
                    data: {
                      groupID: t,
                      topicID: o,
                      count: n,
                      sequence: e
                    }
                  }).then(function (e) {
                    var e = e.data,
                      t = e.messageList,
                      t = void 0 === t ? [] : t,
                      n = e.complete,
                      o = e.nextSequence,
                      o = void 0 === o ? 0 : o,
                      e = e.invisibleSequenceList,
                      e = void 0 === e ? [] : e,
                      i = "complete:".concat(n, " nextSequence:").concat(o, " remoteMsgCount:").concat(t.length, " invisibleSequenceList:").concat(e),
                      i = (r.setMessage("".concat(s, " ").concat(i)).end(), M.l("".concat(l, " ok. ").concat(i)), "".concat(R.CONV_GROUP).concat(c.groupID)),
                      a = u.get(11),
                      i = a.onRoamingMessage(t, i, !1),
                      t = u._computeResult({
                        groupID: c.groupID,
                        direction: p,
                        sequence: d,
                        remoteMessageList: t,
                        processedMessageList: i,
                        complete: n,
                        nextSequence: o,
                        invisibleSequenceList: e
                      });
                    return a.storeHoppingMessageList(t.messageList), T(t);
                  })["catch"](function (e) {
                    return r.setError(e).setMessage("groupID:".concat(t, " sequence:").concat(d, " count:").concat(n)).end(), M.w("".concat(l, " failed. error:"), e), E(e);
                  });
                }));
              }
            }, {
              key: "_computeReqSeqHopping",
              value: function value(e) {
                var n = this,
                  o = e.groupID,
                  t = e.topicID,
                  t = void 0 === t ? void 0 : t,
                  e = e.sequence,
                  e = void 0 === e ? void 0 : e;
                return 0 < e ? Promise.resolve(e) : N(t) ? this.getGroupProfileAdvance({
                  groupIDList: [o],
                  responseFilter: {
                    groupBaseInfoFilter: ["NextMsgSeq"]
                  }
                }).then(function (e) {
                  var e = e.data.successGroupList,
                    t = 0;
                  return S(e) || (t = e[0].nextMessageSeq - 1), M.l("".concat(n._n, "._computeReqSeqHopping groupID:").concat(o, " lastSequence:").concat(t, " from remote")), t;
                })["catch"](function (e) {
                  return E(e);
                }) : Promise.resolve(0);
              }
            }, {
              key: "_computeResult",
              value: function value(e) {
                var t = {
                    messageList: [],
                    isCompleted: !1,
                    nextMessageSeq: ""
                  },
                  n = e.groupID,
                  o = e.direction,
                  i = e.sequence,
                  a = e.remoteMessageList,
                  a = void 0 === a ? [] : a,
                  s = e.processedMessageList,
                  s = void 0 === s ? [] : s,
                  r = e.complete,
                  c = e.nextSequence,
                  e = e.invisibleSequenceList;
                if (0 === o) return t.nextMessageSeq = c, (2 === r || c < 1) && (t.isCompleted = !0, t.nextMessageSeq = ""), t.messageList = s, t;
                if (1 === o) {
                  if (S(a)) {
                    if (S(e)) return t.isCompleted = !0, t.nextMessageSeq = "", t;
                    t.nextMessageSeq = e[0] + 1;
                  } else {
                    r = a[0].sequence, c = e[0] || 0;
                    t.nextMessageSeq = c < r ? r + 1 : c + 1;
                  }
                  return s.forEach(function (e) {
                    e.sequence >= i && t.messageList.push(e);
                  }), (Ot({
                    groupID: n
                  }) || Nt(n)) && 0 === t.messageList.length && a[0].sequence < i && (t.isCompleted = !0, t.nextMessageSeq = ""), t;
                }
              }
            }, {
              key: "setMessageRead",
              value: function value(e) {
                var o = this,
                  i = e.conversationID,
                  a = e.lastMessageSeq,
                  s = "".concat(this._n, ".").concat("setMessageRead"),
                  e = "convID:".concat(i, " lastMessageSeq:").concat(a),
                  r = (M.l("".concat(s, " ").concat(e)), A(a) || this.warn("DoNotModifyLastSeq"), new P("setMessageRead")),
                  c = (r.setMessage(e), i.replace(R.CONV_GROUP, "")),
                  u = void 0;
                return Nt(c) && (c = jt(u = c)), this.req({
                  P: G.SET_GRP_MSG_READ,
                  data: {
                    groupID: c,
                    topicID: u,
                    messageReadSeq: a
                  }
                }).then(function () {
                  r.end(), M.l("".concat(s, " ok"));
                  var e,
                    t = o.get(11),
                    n = (t.updateIsReadAfterReadReport({
                      conversationID: i,
                      lastMessageSeq: a
                    }), !0);
                  return !N(u) && (n = !1, e = o.get(10).getLocalTopic(c, u)) && e.updateSelfInfo({
                    readedSequence: a
                  }), t.updateUnreadCount(i, n), T();
                })["catch"](function (e) {
                  return r.setError(e).end(), M.l("".concat(s, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_computeLastSequence",
              value: function value(e) {
                var t = e.groupID,
                  n = e.topicID,
                  n = void 0 === n ? void 0 : n,
                  e = e.sequence;
                return 0 < e ? Promise.resolve(e) : N(n) ? this.getGroupLastSequence(t) : Promise.resolve(0);
              }
            }, {
              key: "getGroupLastSequence",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("getGroupLastSequence"),
                  n = new P("getGroupLastSequence"),
                  o = 0,
                  i = "",
                  a = "groupID:".concat(e);
                if (this.hasLocalGroup(e)) {
                  var s = this.getLocalGroupProfile(e),
                    r = s.lastMessage;
                  if (0 < r.lastSequence && !1 === r.onlineOnlyFlag) return o = r.lastSequence, i = "".concat(a, ", ").concat(o, " from group.lastMessage.lastSequence"), M.l("".concat(t, " ").concat(i)), n.setMessage(i).end(), Promise.resolve(o);
                  if (1 < s.nextMessageSeq) return o = s.nextMessageSeq - 1, i = "".concat(a, ", ").concat(o, " from group.nextMessageSeq"), M.l("".concat(t, " ").concat(i)), n.setMessage(i).end(), Promise.resolve(o);
                }
                r = this.get(11).getLocalConversation("GROUP".concat(e));
                return r && r.lastMessage.lastSequence && !1 === r.lastMessage.onlineOnlyFlag ? (o = r.lastMessage.lastSequence, i = "".concat(a, ", ").concat(o, " from conversation.lastMessage.lastSequence"), M.l("".concat(t, " ").concat(i)), n.setMessage(i).end(), Promise.resolve(o)) : this.getGroupProfileAdvance({
                  groupIDList: [e],
                  responseFilter: {
                    groupBaseInfoFilter: ["NextMsgSeq"]
                  }
                }).then(function (e) {
                  e = e.data.successGroupList;
                  return S(e) ? M.w("".concat(t, " ").concat(a, ", empty successGroupList")) : (o = e[0].nextMessageSeq - 1, i = "".concat(a, ", ").concat(o, " from remote"), M.l("".concat(t, " ").concat(i))), n.setMessage(i).end(), o;
                })["catch"](function (e) {
                  return n.setError(e).setMessage(a).end(), M.w("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "isMessageFromOrToAVChatroom",
              value: function value(e) {
                return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
              }
            }, {
              key: "hasJoinedAVChatRoom",
              value: function value() {
                return this._AVChatRoomHandler.hasJoinedAVChatRoom();
              }
            }, {
              key: "getJoinedAVChatRoom",
              value: function value() {
                return this._AVChatRoomHandler.getJoinedAVChatRoom();
              }
            }, {
              key: "getGroupRemoteLastSeq",
              value: function value(e) {
                e = this.getLocalGroupProfile(e);
                return e ? e.nextMessageSeq - 1 : 1;
              }
            }, {
              key: "isOnlineMessage",
              value: function value(e, t) {
                return !(!this._canIUseOnlineOnlyFlag(e) || !t || !0 !== t.onlineUserOnly);
              }
            }, {
              key: "_canIUseOnlineOnlyFlag",
              value: function value(e) {
                var t = this.getJoinedAVChatRoom();
                return !t || !t.includes(e.to) || e.conversationType !== R.CONV_GROUP;
              }
            }, {
              key: "_onAVChatRoomHistoryMessage",
              value: function value(e, t) {
                var n;
                S(e) || (M.l("".concat(this._n, "._onAVChatRoomHistoryMessage groupID:").concat(t, " count:").concat(e.length)), n = [], e.forEach(function (e) {
                  n.push(y(y({}, e), {}, {
                    isHistoryMessage: 1
                  }));
                }), this.onAVChatRoomMessage(n, t));
              }
            }, {
              key: "onAVChatRoomMessage",
              value: function value(e) {
                this._AVChatRoomHandler.onMessage(e, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "");
              }
            }, {
              key: "onAVChatRoomMemberBanned",
              value: function value(e) {
                this._AVChatRoomHandler.onAVChatRoomMemberBanned(e);
              }
            }, {
              key: "setUnjoinedAVChatRoom",
              value: function value(e) {
                this._unjoinedAVChatRoomList.set(e, 1);
              }
            }, {
              key: "deleteUnjoinedAVChatRoom",
              value: function value(e) {
                this._unjoinedAVChatRoomList.has(e) && this._unjoinedAVChatRoomList["delete"](e);
              }
            }, {
              key: "isUnjoinedAVChatRoom",
              value: function value(e) {
                return this._unjoinedAVChatRoomList.has(e);
              }
            }, {
              key: "isGroupAttributesUpdatedNotice",
              value: function value(e) {
                return this._groupAttributesHandler.isGroupAttributesUpdatedNotice(e);
              }
            }, {
              key: "updateLocalMainSequenceOnReconnected",
              value: function value() {
                this._groupAttributesHandler.updateLocalMainSequenceOnReconnected();
              }
            }, {
              key: "initGroupAttributes",
              value: function value(e) {
                return this._groupAttributesHandler.initGroupAttributes(e);
              }
            }, {
              key: "setGroupAttributes",
              value: function value(e) {
                return this._groupAttributesHandler.setGroupAttributes(e);
              }
            }, {
              key: "deleteGroupAttributes",
              value: function value(e) {
                return this._groupAttributesHandler.deleteGroupAttributes(e);
              }
            }, {
              key: "getGroupAttributes",
              value: function value(e) {
                return this._groupAttributesHandler.getGroupAttributes(e);
              }
            }, {
              key: "isMessageFromTopic",
              value: function value(e, t) {
                return 2 === e && !S(t);
              }
            }, {
              key: "isMessageFromCommunityOfTopic",
              value: function value(e, t) {
                return 2 === e && S(t);
              }
            }, {
              key: "getMessageExtensions",
              value: function value(e, t) {
                return M.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t)), this.req({
                  P: G.GET_GRP_MSG_EXT,
                  data: {
                    groupID: e.to,
                    messageSequence: e.sequence,
                    startSequence: t
                  }
                });
              }
            }, {
              key: "modifyMsgExts",
              value: function value(e, t) {
                var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
                return M.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n)), this.req({
                  P: G.MODIFY_GRP_MSG_EXT,
                  data: {
                    groupID: e.to,
                    messageSequence: e.sequence,
                    extensionList: t,
                    operateType: n
                  }
                });
              }
            }, {
              key: "_genNotifyReqList",
              value: function value(e) {
                for (var t, n, o, i, a = [], s = 0, r = e.length; s < r; s++) t = e[s], i = this.getLocalGroupProfile(t).type, n = this._getGroupLastRevokedTime(t), o = 1e3 * He(), i = {
                  notifyType: 1,
                  limit: 20,
                  type: Ot({
                    type: i,
                    groupID: t
                  }) ? R.GRP_COMMUNITY : void 0,
                  groupID: t,
                  beginTime: n,
                  endTime: o
                }, a.push(i);
                return a;
              }
            }, {
              key: "getNotice",
              value: function value(e) {
                var r = this,
                  t = "".concat(this._n, ".getNotice"),
                  e = e.filter(function (e) {
                    var t;
                    return !!r.hasLocalGroup(e) && (t = (e = r.getLocalGroupProfile(e)).type, e = e.isSupportTopic, !At(t)) && !e;
                  });
                0 !== e.length && (M.l("".concat(t, " list:").concat(e)), this.req({
                  P: G.GET_GRP_NOTIFY,
                  data: {
                    notifyReqList: this._genNotifyReqList(e)
                  }
                }).then(function (e) {
                  var i,
                    a,
                    e = e.data.notifyRspList,
                    s = [];
                  O(e) && (i = {
                    dataList: []
                  }, a = "".concat(t, " ok."), e.forEach(function (e) {
                    var t = e.nextRevokedTime,
                      n = e.groupID,
                      o = e.notifyList;
                    a += " groupID:".concat(n, " nextRevokedTime:").concat(t, " count:").concat(o.length, "\n"), i.dataList.push({
                      elements: {
                        revokedInfos: r._genRevokedInfos(e)
                      }
                    }), 0 !== t ? (r._setGroupLastRevokedTime(n, t), s.push(n)) : r._setGroupLastRevokedTime(n, 1e3 * He());
                  }), M.l(a), r.onMsgRevoked(i, !1)), 0 < s.length && r.getNotice(s);
                })["catch"](function (e) {
                  M.e("".concat(t, " failed. error:"), e);
                }));
              }
            }, {
              key: "_genRevokedInfos",
              value: function value(e) {
                var t = e.notifyList,
                  n = e.groupID,
                  o = [];
                return O(t) && t.forEach(function (e) {
                  o.push({
                    groupID: n,
                    sequence: e.sequence,
                    random: e.random,
                    revokerInfo: y({}, e.revokerInfo)
                  });
                }), o;
              }
            }, {
              key: "_getGroupLastRevokedTime",
              value: function value(e) {
                return this.hasLocalGroup(e) ? this.getLocalGroupProfile(e)._lastRevokedTime : 0;
              }
            }, {
              key: "_setGroupLastRevokedTime",
              value: function value(e, t) {
                this.hasLocalGroup(e) && (this.getLocalGroupProfile(e)._lastRevokedTime = t);
              }
            }, {
              key: "isGroupCountersNotice",
              value: function value(e) {
                return this._groupCountersHandler.isGroupCountersNotice(e);
              }
            }, {
              key: "setGroupCounters",
              value: function value(e) {
                return this._groupCountersHandler.setGroupCounters(e);
              }
            }, {
              key: "increaseGroupCounter",
              value: function value(e) {
                return this._groupCountersHandler.increaseGroupCounter(e);
              }
            }, {
              key: "decreaseGroupCounter",
              value: function value(e) {
                return this._groupCountersHandler.decreaseGroupCounter(e);
              }
            }, {
              key: "getGroupCounters",
              value: function value(e) {
                return this._groupCountersHandler.getGroupCounters(e);
              }
            }, {
              key: "getGroupMemberHandler",
              value: function value() {
                return this._groupMemberHandler;
              }
            }, {
              key: "getGroupMemberList",
              value: function value(e) {
                return this._groupMemberHandler.getGroupMemberList(e);
              }
            }, {
              key: "getGroupMemberProfile",
              value: function value(e) {
                return this._groupMemberHandler.getGroupMemberProfile(e);
              }
            }, {
              key: "addGroupMember",
              value: function value(e) {
                return this._groupMemberHandler.addGroupMember(e);
              }
            }, {
              key: "deleteGroupMember",
              value: function value(e) {
                return this._groupMemberHandler.deleteGroupMember(e);
              }
            }, {
              key: "setGroupMemberMuteTime",
              value: function value(e) {
                return this._groupMemberHandler.setGroupMemberMuteTime(e);
              }
            }, {
              key: "setGroupMemberRole",
              value: function value(e) {
                return this._groupMemberHandler.setGroupMemberRole(e);
              }
            }, {
              key: "setGroupMemberNameCard",
              value: function value(e) {
                return this._groupMemberHandler.setGroupMemberNameCard(e);
              }
            }, {
              key: "setGroupMemberCustomField",
              value: function value(e) {
                return this._groupMemberHandler.setGroupMemberCustomField(e);
              }
            }, {
              key: "markGroupMemberList",
              value: function value(e) {
                return this._groupMemberHandler.markGroupMemberList(e);
              }
            }, {
              key: "modifyGroupMemberInfo",
              value: function value(e) {
                return this._groupMemberHandler.modifyGroupMemberInfo(e);
              }
            }, {
              key: "restartPolling",
              value: function value() {
                this._AVChatRoomHandler.restartPolling();
              }
            }, {
              key: "getPollingTimerID",
              value: function value(e) {
                var t;
                return e && (t = this.getLocalGroupProfile(e)) && At(t.type) ? this._AVChatRoomHandler.getPollingTimerID(e) : -1;
              }
            }, {
              key: "_canIUseJoinOption",
              value: function value(e) {
                return e === R.GRP_PUBLIC || Ot({
                  type: e
                });
              }
            }, {
              key: "_silentlyGetGroupProfile",
              value: function value(e, t) {
                var n = setTimeout(this.getGroupProfile.bind(this, {
                  groupID: t
                }), 3e3);
                this._timeoutIDs.push(n), M.l("".concat(this._n, "._silentlyGetGroupProfile errorCode:").concat(e, " groupID:").concat(t, " timeoutIDs:").concat(this._timeoutIDs));
              }
            }, {
              key: "_clearTimeoutIDs",
              value: function value() {
                this._timeoutIDs.forEach(function (e) {
                  e && clearTimeout(e);
                }), this._timeoutIDs = [];
              }
            }, {
              key: "startMessageLongPolling",
              value: function value(e) {
                var t,
                  n = e.groupID,
                  o = e.longPollingKey,
                  e = e.longPollingSequence,
                  e = void 0 === e ? 1 : e,
                  i = this.get(12).isUnlimitedAVChatRoom();
                if (!S(o)) return this._AVChatRoomHandler.hasPollingInstance(n) && this.stopMessageLongPolling({
                  groupID: n
                }), t = this._AVChatRoomHandler.getJoinedLiveList(), !i && 0 < t.length && this.stopMessageLongPolling({
                  groupID: t[0]
                }), i = new qo({
                  groupID: n,
                  type: R.GRP_LIVE
                }), M.l("".concat(this._n, ".startMessageLongPolling groupID:").concat(n, " longPollingKey:").concat(o, " longPollingSequence:").concat(e)), this._AVChatRoomHandler.startRunLoop({
                  group: i,
                  longPollingKey: o,
                  startSeq: e
                });
                console.warn("".concat(this._n, ".startMessageLongPolling longPollingKey is empty."));
              }
            }, {
              key: "stopMessageLongPolling",
              value: function value(e) {
                var e = e.groupID,
                  t = this.get(11);
                return this._AVChatRoomHandler.reset(e), this._deleteLocalGroup(e), t.deleteLocalConv("".concat(R.CONV_GROUP).concat(e)), M.l("".concat(this._n, ".stopMessageLongPolling ok, groupID:").concat(e)), D({
                  groupID: e
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this.groupMap.clear(), this._unjoinedAVChatRoomList.clear(), this._receiptDetailCompleteMap.clear(), this._onlineMemberCountMap.clear(), this._commonGroupHandler.reset(), this._groupSystemNoticeHandler.reset(), this._groupTipsHandler.reset(), this._groupAttributesHandler.reset(), this._groupCountersHandler.reset(), this._AVChatRoomHandler.reset(), this._groupMemberHandler.reset(), this._clearTimeoutIDs();
              }
            }])),
            ii = ["topicID", "topicName", "avatar", "introduction", "notification", "unreadCount", "muteAllMembers", "customData", "groupAtInfoList", "nextMessageSeq", "selfInfo"],
            ai = e(function e(t, n) {
              p(this, e), this.topicID = "", this.topicName = "", this.avatar = "", this.introduction = "", this.notification = "", this.unreadCount = 0, this.muteAllMembers = !1, this.customData = "", this.groupAtInfoList = [], this.nextMessageSeq = 0, this.lastMessage = No(t.lastMessage, n), this.selfInfo = {
                muteTime: 0,
                readedSequence: 0,
                messageRemindType: "",
                excludedUnreadSequenceList: void 0
              }, this._initTopic(t);
            }, [{
              key: "_initTopic",
              value: function value(e) {
                for (var t in e) ii.indexOf(t) < 0 || ("selfInfo" === t ? this.updateSelfInfo(e[t]) : this[t] = "muteAllMembers" === t ? 1 === e[t] : e[t]);
              }
            }, {
              key: "updateUnreadCount",
              value: function value() {
                this.unreadCount = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0;
              }
            }, {
              key: "updateNextMessageSeq",
              value: function value(e) {
                this.nextMessageSeq = e;
              }
            }, {
              key: "updateLastMessage",
              value: function value(e) {
                this.lastMessage = No(e);
              }
            }, {
              key: "updateGroupAtInfoList",
              value: function value(e) {
                this.groupAtInfoList = JSON.parse(JSON.stringify(e));
              }
            }, {
              key: "updateTopic",
              value: function value(e) {
                N(e.selfInfo) || this.updateSelfInfo(e.selfInfo), N(e.muteAllMembers) || (this.muteAllMembers = 1 === e.muteAllMembers), dt(this, e, ["groupID", "lastMessageTime", "selfInfo", "muteAllMembers", "lastMsg"]);
              }
            }, {
              key: "updateSelfInfo",
              value: function value(e) {
                return 0 === dt(this.selfInfo, e, [], [""]);
              }
            }, {
              key: "reduceUnreadCount",
              value: function value() {
                return 1 <= this.unreadCount && (--this.unreadCount, !0);
              }
            }, {
              key: "isLastMessageRevoked",
              value: function value(e) {
                return e.sequence === this.lastMessage.lastSequence;
              }
            }, {
              key: "setLastMessageRevoked",
              value: function value(e) {
                this.lastMessage.isRevoked = e;
              }
            }, {
              key: "setLastMessageRevoker",
              value: function value(e) {
                this.lastMessage.revoker = e;
              }
            }]),
            si = (t(mi, c), e(mi, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("topic_cache_time"),
                  t = this.getCloudConfig("topic_last_active_time");
                N(e) || (this.TOPIC_CACHE_TIME = Number(e)), N(t) || (this.TOPIC_LAST_ACTIVE_TIME = Number(t));
              }
            }, {
              key: "onTopicCreated",
              value: function value(e) {
                var t = e.groupID;
                this.resetGetTopicTime(t), this.emitOEvt(h.TOPIC_CREATED, e);
              }
            }, {
              key: "onTopicDeleted",
              value: function value(e) {
                var t = this,
                  n = e.groupID,
                  o = e.topicIDList;
                (void 0 === o ? [] : o).forEach(function (e) {
                  t._deleteLocalTopic(n, e);
                }), this.emitOEvt(h.TOPIC_DELETED, e);
              }
            }, {
              key: "onTopicProfileUpdated",
              value: function value(e) {
                var t = e.groupID,
                  n = e.topicID,
                  n = this.getLocalTopic(t, n);
                n && (n.updateTopic(e), this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: t,
                  topic: n
                }));
              }
            }, {
              key: "onTopicLatestMsg",
              value: function value(e) {
                var t,
                  n,
                  e = e || {},
                  o = e.topicLatestMessage,
                  e = e.excludedUnreadSequenceList;
                S(o) || (t = o.groupProfile.topicID, o.conversationType = R.CONV_GROUP, o.to = t, (n = new Do(o)).setElement(o.elements), this.updateUnreadCountAndLastMsg(t, n, e));
              }
            }, {
              key: "onMessageRemindTypeUpdated",
              value: function value(e) {
                var t,
                  n = e.groupID,
                  o = e.topicID,
                  e = e.messageRemindType,
                  i = this.getLocalTopic(n, o);
                i && ((t = i.updateSelfInfo({
                  messageRemindType: e
                })) && this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: n,
                  topic: i
                }), M.l("".concat(this._n, ".onMessageRemindTypeUpdated topicID:").concat(o, " messageRemindType:").concat(e, " isUpdated:").concat(t)));
              }
            }, {
              key: "onAtInfoUpdated",
              value: function value(e) {
                var t = e.topicID,
                  e = e.groupAtInfoList,
                  n = jt(t),
                  t = this.getLocalTopic(n, t);
                t && !N(e) && (t.updateGroupAtInfoList(e), this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: n,
                  topic: t
                }));
              }
            }, {
              key: "onUnreadCountUpdatedFromConv",
              value: function value(e) {
                var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,
                  n = jt(e),
                  e = this.getLocalTopic(n, e);
                e && e.unreadCount !== t && (e.updateUnreadCount(t), 0 === t && e.updateSelfInfo({
                  readedSequence: e.lastMessage.lastSequence
                }), this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: n,
                  topic: e
                }));
              }
            }, {
              key: "onMessageSent",
              value: function value(e) {
                var t,
                  n,
                  o = e.groupID,
                  i = e.topicID,
                  e = e.lastMessage,
                  i = this.getLocalTopic(o, i);
                i && (n = (t = void 0 === (t = e.sequence) ? 0 : t) + 1) > i.nextMessageSeq && (i.updateNextMessageSeq(n), i.updateLastMessage(e), i.updateSelfInfo({
                  readedSequence: t
                }), i.updateUnreadCount(0), this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: o,
                  topic: i
                }));
              }
            }, {
              key: "onMessageModified",
              value: function value(e) {
                var t,
                  n = e.to,
                  o = e.time,
                  i = e.sequence,
                  a = e.elements,
                  s = e.cloudCustomData,
                  r = e.messageVersion,
                  c = jt(n),
                  u = this.getLocalTopic(c, n);
                u && (t = u.lastMessage, M.d("".concat(this._n, ".onMessageModified topicID:").concat(n, " lastMessage:"), JSON.stringify(t), "options:", JSON.stringify(e)), t) && (null === t.payload || t.lastTime === o && t.lastSequence === i && t.version !== r) && (t.type = a[0].type, t.payload = a[0].content, t.messageForShow = Jt(t.type, t.payload, this.isIntl()), t.cloudCustomData = s, t.version = r, t.lastSequence = i, t.lastTime = o, this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: c,
                  topic: u
                }));
              }
            }, {
              key: "onMessageRevoked",
              value: function value(e) {
                var n,
                  o,
                  i,
                  a = this;
                0 !== e.length && (o = n = null, i = !1, e.forEach(function (e) {
                  var t = e.to;
                  o = jt(t), (n = a.getLocalTopic(o, t)) && (n.reduceUnreadCount() && (i = !0), n.isLastMessageRevoked(e) && (n.setLastMessageRevoked(!0), n.setLastMessageRevoker(e.revoker), i = !0), (t = n.selfInfo.excludedUnreadSequenceList || []).push(e.sequence), n.updateSelfInfo({
                    excludedUnreadSequenceList: t
                  }));
                }), i) && this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: o,
                  topic: n
                });
              }
            }, {
              key: "isLastMessageRevoked",
              value: function value(e) {
                var t = e.topicID,
                  e = e.sequence,
                  n = jt(t),
                  n = this.getLocalTopic(n, t),
                  t = !1;
                return t = n ? n.isLastMessageRevoked({
                  sequence: e
                }) : t;
              }
            }, {
              key: "updateUnreadCountAndLastMsg",
              value: function value(e, t, n) {
                var o,
                  i = jt(e),
                  a = this.getLocalTopic(i, e);
                a && (o = a.selfInfo.excludedUnreadSequenceList || [], N(n) || (o = n), t._isExcludedFromUnreadCount && o.push(t.sequence), a.updateSelfInfo({
                  excludedUnreadSequenceList: o
                }), M.l("".concat(this._n, ".updateUnreadCountAndLastMsg seq:").concat(t.sequence, " lastSeq:").concat(a.lastMessage.lastSequence)), t.sequence > a.lastMessage.lastSequence) && (a.updateLastMessage(t), n = t.sequence + 1, a.updateNextMessageSeq(n), o = this._computeUnreadCount(a), a.updateUnreadCount(o), (t = this.get(11).getLocalConversation("".concat(R.CONV_GROUP).concat(e))) && t.updateUnreadCount({
                  nextUnreadCount: o,
                  isFromGetConversations: !0
                }), this.emitOEvt(h.TOPIC_UPDATED, {
                  groupID: i,
                  topic: a
                }));
              }
            }, {
              key: "getJoinedCommunityList",
              value: function value() {
                return this.get(7).syncCommunityWithTopic();
              }
            }, {
              key: "createTopicInCommunity",
              value: function value(t) {
                var n,
                  o = this,
                  i = "".concat(this._n, ".").concat("createTopicInCommunity"),
                  e = t.topicID;
                return N(e) || Nt(e) ? t.topicName && !1 === this._filterProfanity("topicName", t) || t.introduction && !1 === this._filterProfanity("introduction", t) || t.notification && !1 === this._filterProfanity("notification", t) ? E({
                  code: k.PROFANITY_FOUND
                }) : (n = new P("createTopicInCommunity"), this.req({
                  P: G.CREATE_TOPIC,
                  data: y({}, t)
                }).then(function (e) {
                  e = e.data.topicID;
                  return n.setMessage("topicID:".concat(e)).end(), M.l("".concat(i, " ok. topicID:").concat(e)), o._updateTopicMap([y(y({}, t), {}, {
                    topicID: e
                  })]), T({
                    topicID: e
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                })) : E({
                  code: k.ILLEGAL_TOPIC_ID
                });
              }
            }, {
              key: "deleteTopicFromCommunity",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("deleteTopicFromCommunity"),
                  a = e.groupID,
                  e = e.topicIDList,
                  e = void 0 === e ? [] : e,
                  s = new P("deleteTopicFromCommunity");
                return s.setMessage("groupID:".concat(a, " topicIDList:").concat(e)), this.req({
                  P: G.DEL_TOPIC,
                  data: {
                    groupID: a,
                    topicIDList: e
                  }
                }).then(function (e) {
                  var e = e.data.resultList,
                    o = [],
                    i = [],
                    e = ((void 0 === e ? [] : e).forEach(function (e) {
                      var t = e.topicID,
                        n = e.errorCode,
                        e = e.errorInfo;
                      0 === n ? o.push({
                        topicID: t
                      }) : i.push({
                        topicID: t,
                        code: n,
                        message: e
                      });
                    }), "success count:".concat(o.length, ", fail count:").concat(i.length));
                  return s.setMoreMessage(e).end(), M.l("".concat(n, " ok. ").concat(e)), o.forEach(function (e) {
                    t._deleteLocalTopic(a, e.topicID);
                  }), T({
                    successTopicList: o,
                    failureTopicList: i
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "updateTopicProfile",
              value: function value(e) {
                var t,
                  n = this,
                  o = "".concat(this._n, ".").concat("updateTopicProfile");
                return M.l("".concat(o, " options:"), e), e.topicName && !1 === this._filterProfanity("topicName", e) || e.introduction && !1 === this._filterProfanity("introduction", e) || e.notification && !1 === this._filterProfanity("notification", e) ? E({
                  code: k.PROFANITY_FOUND
                }) : ((t = new P("updateTopicProfile")).setMessage("groupID:".concat(e.groupID, " topicID:").concat(e.topicID)), N(e.muteAllMembers) || (e.muteAllMembers = !0 === e.muteAllMembers ? "On" : "Off"), this.req({
                  P: G.UPDATE_TOPIC_PROFILE,
                  data: y({}, e)
                }).then(function () {
                  return t.end(), M.l("".concat(o, " ok")), n._updateTopicMap([e]), T({
                    topic: n.getLocalTopic(e.groupID, e.topicID)
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getTopicList",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("getTopicList"),
                  o = e.groupID,
                  e = e.topicIDList,
                  e = void 0 === e ? [] : e,
                  i = 0 === e.length,
                  c = new P("getTopicList");
                if (c.setMessage("groupID:".concat(o)), this._getTopicTimeMap.has(o)) {
                  var a = this._getTopicTimeMap.get(o),
                    s = a.isGetAll,
                    a = a.time;
                  if ((s || !s && !i) && Date.now() - a < 1e3 * this.TOPIC_CACHE_TIME) {
                    s = this._getLocalTopicList(o, e);
                    if (i || s.length === e.length) return c.setMoreMessage("from cache, topic count:".concat(s.length)).end(), M.l("".concat(n, " groupID:").concat(o, " from cache, topic count:").concat(s.length)), D({
                      successTopicList: s,
                      failureTopicList: []
                    });
                  }
                }
                return this.req({
                  P: G.GET_TOPIC_LIST,
                  data: {
                    groupID: o,
                    topicIDList: e
                  }
                }).then(function (e) {
                  var e = e.data.topicInfoList,
                    a = [],
                    s = [],
                    r = [],
                    e = ((void 0 === e ? [] : e).forEach(function (e) {
                      var t = e.topic,
                        n = e.selfInfo,
                        o = e.errorCode,
                        e = e.errorInfo,
                        i = t.topicID;
                      0 === o ? (a.push(y(y({}, t), {}, {
                        selfInfo: n
                      })), s.push(i)) : r.push({
                        topicID: i,
                        code: o,
                        message: e
                      });
                    }), t._updateTopicMap(a), t._handleTopicAtInfo(a), "success count:".concat(s.length, ", fail count:").concat(r.length)),
                    e = (c.setMoreMessage(e).end(), M.l("".concat(n, " groupID:").concat(o, " from remote, ").concat(e)), []);
                  return S(s) || (t._getTopicTimeMap.set(o, {
                    time: Date.now(),
                    isGetAll: i
                  }), e = t._getLocalTopicList(o, s)), T({
                    successTopicList: e,
                    failureTopicList: r
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "hasLocalTopic",
              value: function value(e, t) {
                return !!this._topicMap.has(e) && this._topicMap.get(e).has(t);
              }
            }, {
              key: "getLocalTopic",
              value: function value(e, t) {
                var n = null;
                return n = this._topicMap.has(e) ? this._topicMap.get(e).get(t) : n;
              }
            }, {
              key: "_getLocalTopicList",
              value: function value(e) {
                var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [],
                  e = this._topicMap.get(e),
                  n = [];
                return e && (n = d(e.values())), 0 === t.length ? n : n.filter(function (e) {
                  return t.includes(e.topicID);
                });
              }
            }, {
              key: "_deleteLocalTopic",
              value: function value(e, t) {
                this._topicMap.has(e) && this._topicMap.get(e).has(t) && (this._topicMap.get(e)["delete"](t), M.l("".concat(this._n, "._deleteLocalTopic groupID:").concat(e, " topicID:").concat(t)));
              }
            }, {
              key: "_updateTopicMap",
              value: function value(e) {
                var i = this,
                  a = [];
                e.forEach(function (e) {
                  var t = e.groupID,
                    n = e.topicID,
                    o = null,
                    e = (i._topicMap.has(t) || i._topicMap.set(t, new Map()), i._topicMap.get(t).has(n) ? (o = i._topicMap.get(t).get(n)).updateTopic(e) : (i._getTopicLastMessage(e), o = new ai(e, i.isIntl()), i._topicMap.get(t).set(n, o)), i._computeUnreadCount(o));
                  o.updateUnreadCount(e), a.push({
                    conversationID: "".concat(R.CONV_GROUP).concat(n),
                    type: R.CONV_TOPIC,
                    unreadCount: e
                  });
                }), 0 < a.length && this.get(11).updateTopicConversation(a);
              }
            }, {
              key: "resetGetTopicTime",
              value: function value(e) {
                var t = this;
                N(e) ? d(this._getTopicTimeMap.keys()).forEach(function (e) {
                  t._getTopicTimeMap.set(e, 0);
                }) : this._getTopicTimeMap.set(e, 0);
              }
            }, {
              key: "getTopicListOnReconnected",
              value: function value() {
                var o = this,
                  e = d(this._topicMap.keys()),
                  i = [],
                  a = this.get(11);
                e.forEach(function (e) {
                  var n = [],
                    t = o._getLocalTopicList(e);
                  a.deleteTopicRoamingInfo(e), t.forEach(function (e) {
                    var t = e.lastMessage.lastTime,
                      t = void 0 === t ? 0 : t;
                    Date.now() - 1e3 * t < 1e3 * o.TOPIC_LAST_ACTIVE_TIME && n.push(e.topicID);
                  }), 0 < n.length && i.push({
                    groupID: e,
                    topicIDList: n
                  });
                }), M.l("".concat(this._n, ".getTopicListOnReconnected. active community count:").concat(i.length)), this._relayGetTopicList(i);
              }
            }, {
              key: "_relayGetTopicList",
              value: function value(t) {
                var e,
                  n,
                  o,
                  i = this;
                0 !== t.length && (n = 5 < (e = t.shift()).topicIDList.length ? "topicIDList.length:".concat(e.topicIDList.length) : "topicIDList:".concat(e.topicIDList), (o = new P("relayGetTopicList")).setMessage(n), M.l("".concat(this._n, "._relayGetTopicList. ").concat(n)), this.getTopicList(e).then(function () {
                  o.end(), i._relayGetTopicList(t);
                })["catch"](function (e) {
                  o.setError(e).end(), i._relayGetTopicList(t);
                }));
              }
            }, {
              key: "_handleTopicAtInfo",
              value: function value(e) {
                var i = this;
                0 !== e.length && e.forEach(function (e) {
                  var t = e.groupID,
                    n = e.topicID,
                    e = e.groupAtInfoList,
                    o = [];
                  N(e) || (e.forEach(function (e) {
                    o.push(y(y({}, e), {}, {
                      groupID: t,
                      topicID: n
                    }));
                  }), i.get(11).onNewGroupAtTips({
                    dataList: o
                  }));
                });
              }
            }, {
              key: "_getTopicLastMessage",
              value: function value(e) {
                var t;
                N(e.lastMsg) || (t = {
                  time: e.lastMsg.time,
                  sequence: e.lastMsg.sequence,
                  from: e.lastMsg.from,
                  payload: e.lastMsg.elements[0] ? e.lastMsg.elements[0].content : null,
                  type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : "",
                  nick: e.lastMsg.nick,
                  avatar: e.lastMsg.avatar,
                  version: e.lastMsg.messageVersion,
                  cloudCustomData: e.lastMsg.cloudCustomData,
                  isRevoked: 2 === e.lastMsg.isPlaceMessage,
                  revoker: S(e.lastMsg.revokerInfo) ? null : e.lastMsg.revokerInfo.revoker
                }, e.lastMessage = t);
              }
            }, {
              key: "deleteTopicListInCommunity",
              value: function value(t) {
                var n = this,
                  e = this._getLocalTopicList(t),
                  o = this.get(11);
                e.forEach(function (e) {
                  e = e.topicID;
                  n._deleteLocalTopic(t, e), n._getTopicTimeMap["delete"](t), o.deleteLocalConv("".concat(R.CONV_GROUP).concat(e));
                });
              }
            }, {
              key: "_computeUnreadCount",
              value: function value(t) {
                var n,
                  e = t.selfInfo,
                  o = e.excludedUnreadSequenceList,
                  i = e.readedSequence,
                  e = t.nextMessageSeq - t.selfInfo.readedSequence - 1;
                return O(o) && (n = 0, o.forEach(function (e) {
                  i < e && e <= t.nextMessageSeq - 1 && (n += 1);
                }), 1 <= n) && (e -= n), e < 0 ? 0 : e;
              }
            }, {
              key: "_filterProfanity",
              value: function value(e, t) {
                var n,
                  o = this.get(29);
                return !o || (n = (o = o.filterText(t[e], se)).isAllowedToSend, o = o.modifiedText, !0 === n && (t[e] = o, !0));
              }
            }, {
              key: "getMessageExtensions",
              value: function value(e, t) {
                M.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t));
                var n = jt(e.to);
                return this.req({
                  P: G.GET_GRP_MSG_EXT,
                  data: {
                    groupID: n,
                    topicID: e.to,
                    messageSequence: e.sequence,
                    startSequence: t
                  }
                });
              }
            }, {
              key: "modifyMsgExts",
              value: function value(e, t) {
                var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1,
                  o = (M.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n)), jt(e.to));
                return this.req({
                  P: G.MODIFY_GRP_MSG_EXT,
                  data: {
                    groupID: o,
                    topicID: e.to,
                    messageSequence: e.sequence,
                    extensionList: t,
                    operateType: n
                  }
                });
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._topicMap.clear(), this._getTopicTimeMap.clear(), this.TOPIC_CACHE_TIME = 300, this.TOPIC_LAST_ACTIVE_TIME = 3600;
              }
            }])),
            ri = e(function e(t) {
              p(this, e), this._userM = t, this._n = "ProfileHandler", this.TAG = "profile", this.accountProfileMap = new Map(), this.expirationTime = 864e5;
            }, [{
              key: "setExpirationTime",
              value: function value(e) {
                this.expirationTime = e;
              }
            }, {
              key: "getUserProfile",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("getUserProfile"),
                  o = e.userIDList;
                e.fromAccount = this._userM.getMyAccount(), 100 < o.length && (M.w("".concat(n, " ").concat(Qt(100))), o.length = 100);
                for (var i, a = [], s = [], r = 0, c = o.length; r < c; r++) i = o[r], this._userM.isMyFriend(i) && this._contains(i) ? s.push(this._getProfileFromMap(i)) : a.push(i);
                if (0 === a.length) return D(s);
                e.toAccount = a;
                var u = e.bFromGetMyProfile || !1,
                  l = [],
                  d = (e.toAccount.forEach(function (e) {
                    l.push({
                      toAccount: e,
                      standardSequence: 0,
                      customSequence: 0
                    });
                  }), e.userItem = l, new P("getUserProfile"));
                return d.setMessage(5 < o.length ? "userIDList.length:".concat(o.length) : "userIDList:".concat(o)), this._userM.req({
                  P: G.GET_USER_PROFILE,
                  data: e
                }).then(function (e) {
                  d.end(), M.i("".concat(n, " ok"));
                  e = t._handleResponse(e).concat(s);
                  return T(u ? e[0] : e);
                })["catch"](function (e) {
                  return d.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "getMyProfile",
              value: function value() {
                var e,
                  t = this._userM.getMyAccount(),
                  n = "".concat(this._n, ".getMyProfile");
                return M.l("".concat(n, " myAccount:").concat(t)), this._fill(), this._contains(t) ? (e = this._getProfileFromMap(t), M.d("".concat(n, " from cache, myProfile:").concat(JSON.stringify(e))), D(e)) : this.getUserProfile({
                  fromAccount: t,
                  userIDList: [t],
                  bFromGetMyProfile: !0
                });
              }
            }, {
              key: "_handleResponse",
              value: function value(e) {
                var t = e.data.userProfileItem;
                if (!O(t)) return [];
                for (var n = [], e = Date.now(), o = 0, i = t.length; o < i; o++) {
                  var a = t[o],
                    s = a.to,
                    a = a.profileItem;
                  "@TLS#NOT_FOUND" !== s && "" !== s && (s = this._update(s, this._getLatestProfileFromResponse(s, a)).latestProfile, n.push(s));
                }
                return M.l("".concat(this._n, "._handleResponse cost:").concat(tn(e))), n;
              }
            }, {
              key: "_getLatestProfileFromResponse",
              value: function value(e, t) {
                var n = {
                  userID: e,
                  profileCustomField: []
                };
                if (!S(t)) for (var o = 0, i = t.length; o < i; o++) if (-1 < t[o].tag.indexOf("Tag_Profile_Custom")) n.profileCustomField.push({
                  key: t[o].tag,
                  value: t[o].value
                });else switch (t[o].tag) {
                  case f.NICK:
                    n.nick = t[o].value;
                    break;
                  case f.GENDER:
                    n.gender = t[o].value;
                    break;
                  case f.BIRTHDAY:
                    n.birthday = t[o].value;
                    break;
                  case f.LOCATION:
                    n.location = t[o].value;
                    break;
                  case f.SELFSIGNATURE:
                    n.selfSignature = t[o].value;
                    break;
                  case f.ALLOWTYPE:
                    n.allowType = t[o].value;
                    break;
                  case f.LANGUAGE:
                    n.language = t[o].value;
                    break;
                  case f.AVATAR:
                    n.avatar = t[o].value;
                    break;
                  case f.MESSAGESETTINGS:
                    n.messageSettings = t[o].value;
                    break;
                  case f.ADMINFORBIDTYPE:
                    n.adminForbidType = t[o].value;
                    break;
                  case f.LEVEL:
                    n.level = t[o].value;
                    break;
                  case f.ROLE:
                    n.role = t[o].value;
                    break;
                  default:
                    M.w("".concat(this._n, "._getLatestProfileFromResponse unknown tag:"), t[o].tag, t[o].value);
                }
                return n;
              }
            }, {
              key: "updateMyProfile",
              value: function value(o) {
                var i = this,
                  a = "".concat(this._n, ".").concat("updateMyProfile");
                if (o.nick && !1 === this._userM.filterProfanity("nick", o)) return E({
                  code: k.PROFANITY_FOUND
                });
                if (o.selfSignature && !1 === this._userM.filterProfanity("selfSignature", o)) return E({
                  code: k.PROFANITY_FOUND
                });
                var s = new P("updateMyProfile"),
                  e = (s.setMessage(JSON.stringify(o)), new bo().validate(o));
                if (!e.valid) return s.setCode(k.UPDATE_PROFILE_INVALID_PARAM).setMoreMessage("info:".concat(e.tips)).end(), M.e("".concat(a, " info:").concat(e.tips)), E({
                  code: k.UPDATE_PROFILE_INVALID_PARAM
                });
                var t,
                  r,
                  n = [];
                for (t in o) Object.prototype.hasOwnProperty.call(o, t) && ("profileCustomField" === t ? o.profileCustomField.forEach(function (e) {
                  n.push({
                    tag: e.key,
                    value: e.value
                  });
                }) : n.push({
                  tag: f[t.toUpperCase()],
                  value: o[t]
                }));
                return 0 === n.length ? (e = new L({
                  code: k.UPDATE_PROFILE_NO_KEY
                }), s.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e)) : (r = this._userM.getMyAccount(), this._userM.req({
                  P: G.UPDATE_MY_PROFILE,
                  data: {
                    fromAccount: r,
                    profileItem: n
                  }
                }).then(function (e) {
                  s.end(), M.i("".concat(a, " ok"));
                  var t = i._update(r, o),
                    n = t.isProfileUpdated,
                    t = t.latestProfile;
                  return !0 === n && i._userM.emitOEvt(h.PROFILE_UPDATED, [t]), D(t);
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "onProfileModified",
              value: function value(e) {
                var t = e.dataList;
                if (!S(t)) {
                  var n = t.length;
                  M.d("".concat(this._n, ".onProfileModified count:").concat(n, " dataList:"), e.dataList);
                  for (var o = [], i = 0; i < n; i++) {
                    var a = t[i].userID,
                      a = this._update(a, this._getLatestProfileFromResponse(a, t[i].profileList)),
                      s = a.isProfileUpdated,
                      a = a.latestProfile;
                    !0 === s && o.push(a);
                  }
                  0 < o.length && (this._userM.emitIEvt(U.PROFILE_UPDATED, o), this._userM.emitOEvt(h.PROFILE_UPDATED, o));
                }
              }
            }, {
              key: "_fill",
              value: function value() {
                if (0 === this.accountProfileMap.size) {
                  for (var e = this._getCachedProfiles(), t = Date.now(), n = 0, o = e.length; n < o; n++) t - e[n].lastUpdatedTime < this.expirationTime && this.accountProfileMap.set(e[n].userID, e[n]);
                  M.l("".concat(this._n, "._fill from cache, size:").concat(this.accountProfileMap.size));
                }
              }
            }, {
              key: "_update",
              value: function value(e, t) {
                var n,
                  o = !1,
                  i = Date.now();
                return this._contains(e) ? (n = this._getProfileFromMap(e), t.profileCustomField && !0 === Lt(n.profileCustomField, t.profileCustomField) && (n.lastUpdatedTime = i, o = !0), 0 < dt(n, t, ["profileCustomField"]) && (n.lastUpdatedTime = i, o = !0)) : (n = new bo(t), !this._userM.isMyFriend(e) && e !== this._userM.getMyAccount() || (n.lastUpdatedTime = i, o = !0, this.accountProfileMap.set(e, n))), this._flush(e === this._userM.getMyAccount()), !0 === o && M.l("".concat(this._n, "._update account:").concat(e, " isUpdated:").concat(o)), {
                  isProfileUpdated: o,
                  latestProfile: n
                };
              }
            }, {
              key: "_flush",
              value: function value(e) {
                var t = d(this.accountProfileMap.values()),
                  n = this._userM.getStorageModule();
                M.d("".concat(this._n, "._flush length:").concat(t.length, " flushAtOnce:").concat(e)), n.setItem(this.TAG, t, e);
              }
            }, {
              key: "_contains",
              value: function value(e) {
                return this.accountProfileMap.has(e);
              }
            }, {
              key: "_getProfileFromMap",
              value: function value(e) {
                return this.accountProfileMap.get(e);
              }
            }, {
              key: "_getCachedProfiles",
              value: function value() {
                var e = this._userM.getStorageModule().getItem(this.TAG);
                return S(e) ? [] : e;
              }
            }, {
              key: "onConvProfileUpdated",
              value: function value(e) {
                for (var t, n, o, i = [], a = 0, s = e.length; a < s; a++) n = (t = e[a]).userID, this._userM.isMyFriend(n) && (this._contains(n) ? (o = this._getProfileFromMap(n), 0 < dt(o, t) && i.push(n)) : i.push(t.userID));
                0 !== i.length && (M.l("".concat(this._n, ".onConvProfileUpdated toAccountList:").concat(i)), this.getUserProfile({
                  userIDList: i
                }));
              }
            }, {
              key: "getNickAndAvatarByUserID",
              value: function value(e) {
                return this._contains(e) ? {
                  nick: (e = this._getProfileFromMap(e)).nick,
                  avatar: e.avatar
                } : {
                  nick: "",
                  avatar: ""
                };
              }
            }, {
              key: "getUserNickAndAvatar",
              value: function value(e) {
                var t,
                  n = this,
                  o = d(new Set(e)),
                  i = (M.l("".concat(this._n, ".getUserNickAndAvatar userIDList.length:").concat(e.length, " uniqueUserIDList.length:").concat(o.length)), []);
                return 0 === e.length ? Promise.resolve(i) : (e = this._createUserIDListGroup(o), t = [], e.forEach(function (e) {
                  t.push(n.getUserProfile({
                    userIDList: e
                  }));
                }), Promise.all(t).then(function (e) {
                  return e.forEach(function (e) {
                    e = e.data.map(function (e) {
                      return {
                        userID: e.userID,
                        nick: e.nick,
                        avatar: e.avatar
                      };
                    });
                    i.push.apply(i, d(e));
                  }), i;
                }));
              }
            }, {
              key: "_createUserIDListGroup",
              value: function value(e) {
                for (var t = [], n = 0; n < e.length;) t.push(e.slice(n, n += 100));
                return t;
              }
            }, {
              key: "reset",
              value: function value() {
                this._flush(!0), this.accountProfileMap.clear();
              }
            }]),
            ci = e(function e(t) {
              p(this, e);
            }),
            ui = e(function e(t) {
              p(this, e), this._userM = t, this._n = "BlacklistHandler", this._blacklistMap = new Map(), this._startIndex = 0;
            }, [{
              key: "getLocalBlacklist",
              value: function value() {
                return d(this._blacklistMap.keys());
              }
            }, {
              key: "getBlacklist",
              value: function value() {
                var o = this,
                  i = "".concat(this._n, ".getBlacklist"),
                  e = {
                    fromAccount: this._userM.getMyAccount(),
                    maxLimited: 100,
                    startIndex: this._startIndex
                  },
                  a = new P("getBlacklist");
                return this._userM.req({
                  P: G.GET_BL,
                  data: e
                }).then(function (e) {
                  var e = e.data,
                    t = e.blackListItem,
                    e = e.startIndex,
                    n = S(t) ? 0 : t.length;
                  a.setMessage("count:".concat(n)).end(), M.i("".concat(i, " ok")), o._startIndex = e, o._handleResponse(t, !0), o._userM.emitOEvt(h.BLACKLIST_UPDATED, d(o._blacklistMap.keys())), 0 !== o._startIndex && o.getBlacklist();
                })["catch"](function (e) {
                  return a.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "addBlacklist",
              value: function value(t) {
                var e,
                  n,
                  o = this,
                  i = new P("addToBlacklist"),
                  a = "".concat(this._n, ".addBlacklist"),
                  s = this._userM.getMyAccount();
                return 1 === t.userIDList.length && t.userIDList[0] === s ? (n = this._userM.getErrMsg(e = k.CANNOT_ADD_SELF_TO_BLACKLIST), i.setCode(e).setMessage(n).end(), n = new L({
                  code: e
                }), M.e("".concat(a, " failed. error:"), n), E(n)) : (t.userIDList.includes(s) && (t.userIDList = t.userIDList.filter(function (e) {
                  return e !== s;
                })), t.fromAccount = this._userM.getMyAccount(), t.toAccount = t.userIDList, this._userM.req({
                  P: G.ADD_TO_BL,
                  data: t
                }).then(function (e) {
                  return i.setMessage(5 < t.userIDList.length ? "userIDList.length:".concat(t.userIDList.length) : "userIDList:".concat(t.userIDList)).end(), M.i("".concat(a, " ok")), o._handleResponse(e.resultItem, !0), T(d(o._blacklistMap.keys()));
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(a, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "_handleResponse",
              value: function value(e, t) {
                if (!S(e)) for (var n, o, i, a = 0, s = e.length; a < s; a++) o = e[a].to, i = e[a].resultCode, !N(i) && 0 !== i || (t ? ((n = this._blacklistMap.has(o) ? this._blacklistMap.get(o) : new ci()).userID = o, S(e[a].addBlackTimeStamp) || (n.timeStamp = e[a].addBlackTimeStamp), this._blacklistMap.set(o, n)) : this._blacklistMap.has(o) && (n = this._blacklistMap.get(o), this._blacklistMap["delete"](o)));
                M.l("".concat(this._n, "._handleResponse total:").concat(this._blacklistMap.size, " bAdd:").concat(t));
              }
            }, {
              key: "deleteBlacklist",
              value: function value(t) {
                var n = this,
                  o = "".concat(this._n, ".deleteBlacklist"),
                  i = new P("removeFromBlacklist");
                return t.fromAccount = this._userM.getMyAccount(), t.toAccount = t.userIDList, this._userM.req({
                  P: G.RM_FROM_BL,
                  data: t
                }).then(function (e) {
                  return i.setMessage(5 < t.userIDList.length ? "userIDList.length:".concat(t.userIDList.length) : "userIDList:".concat(t.userIDList)).end(), M.i("".concat(o, " ok")), n._handleResponse(e.data.resultItem, !1), T(d(n._blacklistMap.keys()));
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "onAccountDeleted",
              value: function value(e) {
                for (var t = 0, n = e.length; t < n; t++) {
                  var o = e[t];
                  this._blacklistMap.has(o) && this._blacklistMap["delete"](o);
                }
                var i = e.length;
                0 < i && (M.l("".concat(this._n, ".onAccountDeleted count:").concat(i, " ").concat(i < 30 ? "userIDList:".concat(e) : "")), this._userM.emitOEvt(h.BLACKLIST_UPDATED, d(this._blacklistMap.keys())));
              }
            }, {
              key: "onAccountAdded",
              value: function value(e) {
                for (var t, n = [], o = 0, i = e.length; o < i; o++) t = e[o], this._blacklistMap.has(t) || (this._blacklistMap.set(t, new ci({
                  userID: t
                })), n.push(t));
                0 < n.length && (M.l("".concat(this._n, ".onAccountAdded count:").concat(n.length, " userIDList:"), n), this._userM.emitOEvt(h.BLACKLIST_UPDATED, d(this._blacklistMap.keys())));
              }
            }, {
              key: "reset",
              value: function value() {
                this._blacklistMap.clear(), this._startIndex = 0;
              }
            }]),
            li = e(function e(t) {
              p(this, e), this._userM = t, this._n = "UserStatusHandler", this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100, this._userM.getIEmitInst().on(U.CLOUD_CONFIG, this._onCloudConfig, this);
            }, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this._userM.getCloudConfig("status_query_count"),
                  t = this._userM.getCloudConfig("status_sub_count"),
                  n = this._userM.getCloudConfig("status_unsub_count");
                M.l("".concat(this._n, "._onCloudConfig statusQueryCount:").concat(e, " statusSubscribeCount:").concat(t) + " statusUnsubscribeCount:".concat(n)), N(e) || (this.MAX_QUERY_USER_COUNT = parseInt(e, 10)), N(e) || (this.MAX_SUBSCRIBE_USER_COUNT = parseInt(t, 10)), N(e) || (this.MAX_UNSUBSCRIBE_USER_COUNT = parseInt(n, 10));
              }
            }, {
              key: "onUserStatusUpdated",
              value: function value(e) {
                var e = e.dataList,
                  o = this._userM.getMyUserID(),
                  i = this._userM.get(12),
                  e = e.map(function (e) {
                    var t = e.to,
                      n = e.statusType,
                      e = e.customStatus,
                      e = Go(e);
                    return t === o && i.setCustomStatus(e), {
                      userID: t,
                      statusType: n,
                      customStatus: e
                    };
                  });
                M.l("".concat(this._n, ".onUserStatusUpdated list:").concat(JSON.stringify(e))), this._userM.emitOEvt(h.USER_STATUS_UPDATED, e);
              }
            }, {
              key: "setSelfStatus",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".setSelfStatus");
                return !1 === this._userM.filterProfanity("customStatus", e) ? E({
                  code: k.PROFANITY_FOUND
                }) : (t = new P("setSelfStatus"), n = e.customStatus, this._userM.req({
                  P: G.SET_SELF_STATUS,
                  data: {
                    customStatus: n
                  }
                }).then(function (e) {
                  return t.setMessage("customStatus:".concat(n)).end(), M.l("".concat(i, " ok. customStatus:").concat(n)), o._userM.get(12).setCustomStatus(n), T({
                    userID: o._userM.getMyUserID(),
                    statusType: 1,
                    customStatus: n
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "getUserStatus",
              value: function value(e) {
                var o = "".concat(this._n, ".").concat("getUserStatus"),
                  e = e.userIDList,
                  i = void 0 === e ? [] : e,
                  e = this._userM.getMyUserID(),
                  t = d(i),
                  a = void 0,
                  n = t.indexOf(e);
                if (-1 < n && (t.splice(n, 1), a = {
                  userID: e,
                  statusType: 1,
                  customStatus: this._userM.get(12).getCustomStatus()
                }), 0 === t.length) return D({
                  successUserList: [a],
                  failureUserList: []
                });
                if (!this._userM.canIUse(g.USER_STATUS)) return this._userM.noUse("getUserStatus");
                t.length > this.MAX_QUERY_USER_COUNT && (M.w("".concat(o, " ").concat(Qt(this.MAX_QUERY_USER_COUNT))), t = i.slice(0, this.MAX_QUERY_USER_COUNT));
                var s = new P("getUserStatus");
                return this._userM.req({
                  P: G.GET_USER_STATUS,
                  data: {
                    userIDList: t
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.successUserList,
                    t = void 0 === t ? [] : t,
                    e = e.failureUserList,
                    e = void 0 === e ? [] : e,
                    t = t.map(function (e) {
                      var t = e.userID,
                        n = e.statusType,
                        e = e.customStatus;
                      return {
                        userID: t,
                        statusType: n,
                        customStatus: Go(e)
                      };
                    }),
                    e = e.map(function (e) {
                      var t = e.userID,
                        n = e.invalidUserID,
                        o = e.errorCode,
                        e = e.errorInfo;
                      return {
                        userID: S(n) ? t : n,
                        code: o,
                        message: e
                      };
                    }),
                    n = (N(a) || t.unshift(a), "userID count:".concat(i.length, ", success count:").concat(t.length, ", fail count:").concat(e.length));
                  return s.setMessage("".concat(n)).end(), M.l("".concat(o, " ok. ").concat(n, ".")), T({
                    successUserList: t,
                    failureUserList: e
                  });
                })["catch"](function (e) {
                  return s.setMessage("userID count:".concat(i.length)).setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "subscribeUserStatus",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a = "subscribeUserStatus";
                return this._userM.canIUse(g.USER_STATUS) ? (t = "".concat(this._n, ".").concat(a), (n = d(e = void 0 === (e = e.userIDList) ? [] : e)).length > this.MAX_SUBSCRIBE_USER_COUNT && (M.w("".concat(t, " ").concat(Qt(this.MAX_SUBSCRIBE_USER_COUNT))), n = e.slice(0, this.MAX_SUBSCRIBE_USER_COUNT)), o = new P(a), i = "userID count:".concat(e.length), M.l("".concat(t, " ").concat(i)), this._userM.req({
                  P: G.SUB_USER_STATUS,
                  data: {
                    userIDList: n
                  }
                }).then(function (e) {
                  e = e.data.failureUserList, e = (void 0 === e ? [] : e).map(function (e) {
                    var t = e.userID,
                      n = e.invalidUserID,
                      o = e.errorCode,
                      e = e.errorInfo;
                    return {
                      userID: S(n) ? t : n,
                      code: o,
                      message: e
                    };
                  });
                  return o.setMessage("".concat(i, " fail count:").concat(e.length)).end(), M.l("".concat(t, " ok. fail count:").concat(e.length, ".")), T({
                    failureUserList: e
                  });
                })["catch"](function (e) {
                  return o.setMessage(i).setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._userM.noUse(a);
              }
            }, {
              key: "unsubscribeUserStatus",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a = "unsubscribeUserStatus";
                return this._userM.canIUse(g.USER_STATUS) ? (t = "".concat(this._n, ".").concat(a), n = d(e = void 0 === (e = (e || {}).userIDList) ? [] : e), e.length > this.MAX_UNSUBSCRIBE_USER_COUNT && (M.w("".concat(t, " ").concat(Qt(this.MAX_UNSUBSCRIBE_USER_COUNT))), n = e.slice(0, this.MAX_UNSUBSCRIBE_USER_COUNT)), o = new P(a), i = "userID count:".concat(e.length), M.l("".concat(t, " ").concat(i)), e = {
                  userIDList: n
                }, 0 === n.length && (e.userIDList = void 0, e.unsubscribeAll = 1), this._userM.req({
                  P: G.UNSUB_USER_STATUS,
                  data: e
                }).then(function (e) {
                  e = e.data.failureUserList, e = (void 0 === e ? [] : e).map(function (e) {
                    var t = e.userID,
                      n = e.invalidUserID,
                      o = e.errorCode,
                      e = e.errorInfo;
                    return {
                      userID: S(n) ? t : n,
                      code: o,
                      message: e
                    };
                  });
                  return o.setMessage("".concat(i, " fail count:").concat(e.length)).end(), M.l("".concat(t, " ok. fail count:").concat(e.length, ".")), T({
                    failureUserList: e
                  });
                })["catch"](function (e) {
                  return o.setMessage("".concat(i)).setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this._userM.noUse(a);
              }
            }, {
              key: "reset",
              value: function value() {
                this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100;
              }
            }]),
            di = (t(fi, c), e(fi, [{
              key: "onContextUpdated",
              value: function value(e) {
                this._profileHandler.getMyProfile(), this._blacklistHandler.getBlacklist();
              }
            }, {
              key: "mockOnNickAvatarModified",
              value: function value(e, t) {
                M.l("".concat(this._n, "._mockOnNickAvatarModified nick:").concat(e, " avatar:").concat(t)), this.onProfileModified({
                  dataList: [{
                    pushType: 1,
                    userID: this.getMyUserID(),
                    profileList: [{
                      tag: f.NICK,
                      value: e
                    }, {
                      tag: f.AVATAR,
                      value: t
                    }]
                  }]
                });
              }
            }, {
              key: "onProfileModified",
              value: function value(e) {
                this._profileHandler.onProfileModified(e);
              }
            }, {
              key: "onRelationChainModified",
              value: function value(e) {
                var t,
                  n,
                  e = e.dataList;
                S(e) || (t = [], e.forEach(function (e) {
                  e.blackListDelAccount && t.push.apply(t, d(e.blackListDelAccount));
                }), 0 < t.length && this._blacklistHandler.onAccountDeleted(t), n = [], e.forEach(function (e) {
                  e.blackListAddAccount && n.push.apply(n, d(e.blackListAddAccount));
                }), 0 < n.length && this._blacklistHandler.onAccountAdded(n));
              }
            }, {
              key: "onConvProfileUpdated",
              value: function value(e) {
                this._profileHandler.onConvProfileUpdated(e);
              }
            }, {
              key: "getMyAccount",
              value: function value() {
                return this.getMyUserID();
              }
            }, {
              key: "getMyNick",
              value: function value() {
                return this._profileHandler.getNickAndAvatarByUserID(this.getMyUserID()).nick;
              }
            }, {
              key: "getMyProfile",
              value: function value() {
                return this._profileHandler.getMyProfile();
              }
            }, {
              key: "getStorageModule",
              value: function value() {
                return this.get(13);
              }
            }, {
              key: "filterProfanity",
              value: function value(e, t) {
                var n,
                  o = this.get(29);
                return !o || (n = (o = o.filterText(t[e], "user_profile")).isAllowedToSend, o = o.modifiedText, !0 === n && (t[e] = o, !0));
              }
            }, {
              key: "isMyFriend",
              value: function value(e) {
                var t = this.get(8);
                return !!t && t.isMyFriend(e);
              }
            }, {
              key: "getUserProfile",
              value: function value(e) {
                return this._profileHandler.getUserProfile(e);
              }
            }, {
              key: "updateMyProfile",
              value: function value(e) {
                return this._profileHandler.updateMyProfile(e);
              }
            }, {
              key: "getNickAndAvatarByUserID",
              value: function value(e) {
                return this._profileHandler.getNickAndAvatarByUserID(e);
              }
            }, {
              key: "getUserNickAndAvatar",
              value: function value(e) {
                return this._profileHandler.getUserNickAndAvatar(e);
              }
            }, {
              key: "getLocalBlacklist",
              value: function value() {
                var e = this._blacklistHandler.getLocalBlacklist();
                return D(e);
              }
            }, {
              key: "addBlacklist",
              value: function value(e) {
                return this._blacklistHandler.addBlacklist(e);
              }
            }, {
              key: "deleteBlacklist",
              value: function value(e) {
                return this._blacklistHandler.deleteBlacklist(e);
              }
            }, {
              key: "onUserStatusUpdated",
              value: function value(e) {
                this._userStatusHandler.onUserStatusUpdated(e);
              }
            }, {
              key: "setSelfStatus",
              value: function value(e) {
                return this._userStatusHandler.setSelfStatus(e);
              }
            }, {
              key: "getUserStatus",
              value: function value(e) {
                return this._userStatusHandler.getUserStatus(e);
              }
            }, {
              key: "subscribeUserStatus",
              value: function value(e) {
                return this._userStatusHandler.subscribeUserStatus(e);
              }
            }, {
              key: "unsubscribeUserStatus",
              value: function value(e) {
                return this._userStatusHandler.unsubscribeUserStatus(e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._profileHandler.reset(), this._blacklistHandler.reset(), this._userStatusHandler.reset();
              }
            }])),
            pi = e(function e(t, n) {
              p(this, e), this._m = t, this._isLoggedIn = !1, this._SDKAppID = n.SDKAppID, this._userID = n.userID || "", this._userSig = n.userSig || "", this._version = "3.5.3", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._contentType = "json", this._unlimitedAVChatRoom = n.unlimitedAVChatRoom, this._scene = n.scene || "", this._oversea = n.oversea, this._instanceID = n.instanceID, this._statusInstanceID = 0, this._isDevMode = n.devMode, this._isTestEnv = n.testEnv, this._proxyServer = n.proxyServer, this._fileUploadProxy = n.fileUploadProxy, this._fileDownloadProxy = n.fileDownloadProxy, this._applicationID = 0, this._isPartialUpdatedConvs = n.partialUpdatedConversations, this._isIndependentDomainDisabled = n.disableIndependentDomain, this._isUsingChatCore = !1, this._uiPlatform = 0, this._authKey = "", this._customLoginInfo = "";
            }, [{
              key: "isLoggedIn",
              value: function value() {
                return this._isLoggedIn;
              }
            }, {
              key: "isOversea",
              value: function value() {
                return this._oversea;
              }
            }, {
              key: "isPrivateNetWork",
              value: function value() {
                return this._proxyServer;
              }
            }, {
              key: "isDevMode",
              value: function value() {
                return this._isDevMode;
              }
            }, {
              key: "isTestEnv",
              value: function value() {
                return this._isTestEnv;
              }
            }, {
              key: "isPartialUpdatedConvs",
              value: function value() {
                return this._isPartialUpdatedConvs;
              }
            }, {
              key: "isIndependentDomainDisabled",
              value: function value() {
                return this._isIndependentDomainDisabled;
              }
            }, {
              key: "isSingaporeSite",
              value: function value() {
                return 2e7 <= this._SDKAppID && this._SDKAppID < 3e7 || 172e7 <= this._SDKAppID && this._SDKAppID < 173e7;
              }
            }, {
              key: "isKoreaSite",
              value: function value() {
                return 3e7 <= this._SDKAppID && this._SDKAppID < 4e7 || 173e7 <= this._SDKAppID && this._SDKAppID < 174e7;
              }
            }, {
              key: "isGermanySite",
              value: function value() {
                return 4e7 <= this._SDKAppID && this._SDKAppID < 5e7 || 174e7 <= this._SDKAppID && this._SDKAppID < 175e7;
              }
            }, {
              key: "isIndiaSite",
              value: function value() {
                return 5e7 <= this._SDKAppID && this._SDKAppID < 6e7 || 175e7 <= this._SDKAppID && this._SDKAppID < 176e7;
              }
            }, {
              key: "isJapanSite",
              value: function value() {
                return 6e7 <= this._SDKAppID && this._SDKAppID < 7e7 || 176e7 <= this._SDKAppID && this._SDKAppID < 177e7;
              }
            }, {
              key: "isUSASite",
              value: function value() {
                return 7e7 <= this._SDKAppID && this._SDKAppID < 8e7 || 177e7 <= this._SDKAppID && this._SDKAppID < 178e7;
              }
            }, {
              key: "isIndonesiaSite",
              value: function value() {
                return 8e7 <= this._SDKAppID && this._SDKAppID < 9e7 || 178e7 <= this._SDKAppID && this._SDKAppID < 179e7;
              }
            }, {
              key: "isIntl",
              value: function value() {
                return 0 === (e = this._SDKAppID) || 2e7 <= e && e < 9e7 || 172e7 <= e && e < 179e7;
                var e;
              }
            }, {
              key: "isUnlimitedAVChatRoom",
              value: function value() {
                return this._unlimitedAVChatRoom;
              }
            }, {
              key: "isUsingChatCore",
              value: function value() {
                return this._isUsingChatCore;
              }
            }, {
              key: "setUsingChatCore",
              value: function value(e) {
                this._isUsingChatCore = e;
              }
            }, {
              key: "getUIPlatform",
              value: function value() {
                return this._uiPlatform;
              }
            }, {
              key: "setUIPlatform",
              value: function value(e) {
                this._uiPlatform = e;
              }
            }, {
              key: "setUserID",
              value: function value(e) {
                this._userID = e;
              }
            }, {
              key: "getUserID",
              value: function value() {
                return this._userID;
              }
            }, {
              key: "setUserSig",
              value: function value(e) {
                this._userSig = e;
              }
            }, {
              key: "getUserSig",
              value: function value() {
                return this._userSig;
              }
            }, {
              key: "getSDKAppID",
              value: function value() {
                return this._SDKAppID;
              }
            }, {
              key: "setTinyID",
              value: function value(e) {
                this._tinyID = e, this._isLoggedIn = !0;
              }
            }, {
              key: "getTinyID",
              value: function value() {
                return this._tinyID;
              }
            }, {
              key: "setCustomStatus",
              value: function value(e) {
                this._customStatus = e;
              }
            }, {
              key: "getCustomStatus",
              value: function value() {
                return this._customStatus;
              }
            }, {
              key: "getScene",
              value: function value() {
                return Ne ? window.tencent_cloud_im_csig_flutter_for_web_25F_cy : this._isTUIKit() ? "tuikit" : this._scene;
              }
            }, {
              key: "getInstanceID",
              value: function value() {
                return this._instanceID;
              }
            }, {
              key: "getStatusInstanceID",
              value: function value() {
                return this._statusInstanceID;
              }
            }, {
              key: "setStatusInstanceID",
              value: function value(e) {
                this._statusInstanceID = e;
              }
            }, {
              key: "getVersion",
              value: function value() {
                return this._version;
              }
            }, {
              key: "getA2Key",
              value: function value() {
                return this._a2Key;
              }
            }, {
              key: "setA2Key",
              value: function value(e) {
                this._a2Key = e;
              }
            }, {
              key: "getContentType",
              value: function value() {
                return this._contentType;
              }
            }, {
              key: "getProxyServer",
              value: function value() {
                return this._proxyServer;
              }
            }, {
              key: "getFileUploadProxy",
              value: function value() {
                return this._fileUploadProxy;
              }
            }, {
              key: "getFileDownloadProxy",
              value: function value() {
                return this._fileDownloadProxy;
              }
            }, {
              key: "setApplicationID",
              value: function value(e) {
                this._applicationID = e;
              }
            }, {
              key: "getApplicationID",
              value: function value() {
                return this._applicationID;
              }
            }, {
              key: "setDowloadFileAuthKey",
              value: function value(e) {
                this._authKey = e;
              }
            }, {
              key: "getDownloadFileAuthKey",
              value: function value() {
                return this._authKey;
              }
            }, {
              key: "setCustomLoginInfo",
              value: function value(e) {
                this._customLoginInfo = e;
              }
            }, {
              key: "getCustomLoginInfo",
              value: function value() {
                return this._customLoginInfo;
              }
            }, {
              key: "_isTUIKit",
              value: function value() {
                var e = !1,
                  t = !1,
                  n = !1,
                  o = !1,
                  i = [];
                v && (i = Object.keys(I));
                for (var a = 0, s = (i = Ie ? me ? Object.keys(uni) : Object.keys(window) : i).length; a < s; a++) if (i[a].toLowerCase().includes("uikit")) {
                  e = !0;
                  break;
                }
                var r,
                  i = null,
                  c = (v && !ct(I.createGamePortal) && ct(getApp) && !N(getApp()) && (r = getApp().globalData, m(r)) && !0 === r.isTUIKit && (t = !0), !0 === this._m.get(13).getStorageSync("TIM_".concat(this._SDKAppID, "_isTUIKit")) && (n = !0), null);
                if (le && !_e && "undefined" == typeof uni && __wxConfig && (c = __wxConfig.pages), pe && "undefined" == typeof uni && __qqConfig && (c = __qqConfig.pages), O(c) && 0 < c.length) {
                  for (var u = 0, l = c.length; u < l; u++) if (c[u].toLowerCase().includes("tui")) {
                    o = !0;
                    break;
                  }
                  c = null;
                }
                return e || t || n || o;
              }
            }, {
              key: "reset",
              value: function value() {
                this._isLoggedIn = !1, this._userSig = "", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._statusInstanceID = 0;
              }
            }]),
            _i = {
              "k-vue2-pc": 1,
              "k-vue2-h5": 2,
              "k-vue2-h5-uni": 3,
              "k-vue2-app-uni": 4,
              "k-vue2-mp-uni": 5,
              "k-vue2-pc-uni": 6,
              "k-vue3-pc": 7,
              "k-vue3-h5": 8,
              "k-vue3-h5-uni": 9,
              "k-vue3-app-uni": 10,
              "k-vue3-mp-uni": 11,
              "k-vue3-pc-uni": 12,
              "k-rn": 13
            },
            hi = (t(gi, c), e(gi, [{
              key: "onCheckTimer",
              value: function value(e) {
                this.isLoggedIn() && e % this._helloInterval == 0 && this._hello();
              }
            }, {
              key: "getPushModule",
              value: function value() {
                var e = void 0,
                  t = this.get(36),
                  n = this.get(28);
                return t.canIUseTIMPush() ? e = t : n.canIUseOfflinePush() && (e = n), e;
              }
            }, {
              key: "login",
              value: function value(e) {
                if (this.isLoggedIn()) return n = this.getMyUserID(), (n = this.getErrMsg("RepeatLogin", n)) && M.w(n), D({
                  actionStatus: "OK",
                  errorCode: 0,
                  errorInfo: n,
                  repeatLogin: !0
                });
                if (Date.now() - this._lastLoginTs <= 15e3) return this.warn("LoggingIn", e.userID), E({
                  code: k.REPEAT_LOGIN
                });
                M.l("".concat(this._n, ".login userID:").concat(e.userID));
                var t,
                  n = this._checkLoginInfo(e);
                return 0 !== n.code ? E(n) : (n = this.get(12), t = e.userID, e = e.userSig, n.setUserID(t), n.setUserSig(e), this.get(20).updateProtocolConfig(), this._login());
              }
            }, {
              key: "_login",
              value: function value() {
                var _ = this,
                  h = this.get(12),
                  g = h.getScene(),
                  e = 0,
                  t = g,
                  f = (g && g.startsWith("k-") && (t = _i[g], g = "tuikit"), new P("login")),
                  n = (f.setMessage("".concat(t)).setMoreMessage("identifier:".concat(this.getMyUserID())), "tuikit" === g),
                  o = 0,
                  n = (me ? o = n ? 3 === t || 4 === t || 5 === t || 6 === t ? 31 : 9 === t || 10 === t || 11 === t || 12 === t ? 32 : 4 : 3 : v ? o = de ? 36 : "tuikit" === g ? 12 : 11 : Ie ? o = Ne ? "flutter_web_uikit" === g ? 21 : 20 : this._isReactUIKit() ? Oe ? 25 : 24 : n ? 1 === t || 2 === t ? 29 : 7 === t || 8 === t ? 30 : Oe ? 17 : 14 : Oe ? 16 : 13 : 13 === t && (o = 38), f.setUIPlatform(o), h.setUIPlatform(o), this.getPushModule()),
                  m = (n && (this._isWebUniapp = n.getUniAppPlatform(), t = this._getStatusInstanceID(), h.setStatusInstanceID(t), this.get(20).updateProtocolConfig(), e = n.getDeviceBrand()), "".concat(this._n, "._login"));
                return this._lastLoginTs = Date.now(), this.req({
                  P: G.LOGIN,
                  data: {
                    deviceBrand: e,
                    isWebUniapp: this._isWebUniapp,
                    customInfo: h.getCustomLoginInfo()
                  }
                }).then(function (e) {
                  _._lastLoginTs = 0;
                  var t = Date.now(),
                    n = null,
                    o = e.data,
                    i = o.a2Key,
                    a = o.tinyID,
                    s = o.helloInterval,
                    r = o.instanceID,
                    c = o.timeStamp,
                    u = o.customStatus,
                    u = void 0 === u ? "" : u,
                    l = o.purchaseBits,
                    o = o.authKey,
                    o = void 0 === o ? "" : o,
                    d = 1e3 * c,
                    p = t - f.getStartTs(),
                    p = d + parseInt(p / 2) - t,
                    t = f.getStartTs() + p;
                  if (f.start(t), t = d, Be = p, (d = new Date()).setTime(t), M.i("baseTime from server:".concat(d, " offset:").concat(Be)), a) {
                    if (i) return t = _.get(21).getSocketID(), d = Go(u), u = "socketID:".concat(t, " scene:").concat(g, " helloInterval:").concat(s, " instanceID:").concat(r, " timeStamp:").concat(c) + " offset:".concat(p, " customStatus:").concat(d, " isWebUniapp:").concat(_._isWebUniapp), M.l("".concat(m, " ok. ").concat(u)), c = t = "", le && ct(I.getAccountInfoSync) && (p = I.getAccountInfoSync().miniProgram) && (t = p.appId, c = p.envVersion), f.setMoreMessage("".concat(u, " href:").concat(Ie ? window.location.href : "", " mpAppId:").concat(t, " envVersion:").concat(c, " authKey:").concat(o)).end(), h.setA2Key(i), h.setTinyID(a), h.setStatusInstanceID(r), h.setCustomStatus(d), h.setDowloadFileAuthKey(o), l && _.get(27).onPushedConfig({
                      errorCode: 0,
                      expiredTime: 0,
                      purchaseBits: l
                    }), _.get(20).updateProtocolConfig(), _.emitIEvt(U.A2KEY_AND_TINYID_UPDATED), _._helloInterval = s, _.triggerReady(), (p = _.getPushModule()) && (uni.setStorageSync("timUniAppInstanceID", r), p.init()), _._fetchCloudControlConfig(), _.get(29).init(), e;
                    n = new L({
                      code: k.NO_A2KEY
                    });
                  } else n = new L({
                    code: k.NO_TINYID
                  });
                  throw f.setError(n).end(), n;
                })["catch"](function (e) {
                  return f.setError(e).end(!0), _._m.setNotReadyReason(k.LOGIN_FAILED), M.e("".concat(m, " failed. error:"), e), _._lastLoginTs = 0, _._m.onLoginFailed(), E(e);
                });
              }
            }, {
              key: "logout",
              value: function value() {
                var t = this,
                  e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0,
                  n = "".concat(this._n, ".logout"),
                  o = this.isLoggedIn();
                return M.i("".concat(n, " type:").concat(e, " isLoggedIn:").concat(o, " isWebUniapp:").concat(this._isWebUniapp)), o ? (new P("logout").setMessage("identifier:".concat(this.getMyUserID())).end(!0), 0 === e && this._m.setNotReadyReason(k.LOGGED_OUT), this.req({
                  P: G.LOGOUT,
                  data: {
                    type: e,
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function () {
                  return t.resetReady(), D({});
                })["catch"](function (e) {
                  return M.e("".concat(n, " error:"), e), t.resetReady(), D({});
                })) : E({
                  code: k.USER_NOT_LOGGED_IN
                });
              }
            }, {
              key: "getLoginUser",
              value: function value() {
                return this.isLoggedIn() ? this.getMyUserID() : "";
              }
            }, {
              key: "_fetchCloudControlConfig",
              value: function value() {
                this.get(23).fetchConfig();
              }
            }, {
              key: "_getStatusInstanceID",
              value: function value() {
                return uni.getStorageSync("timUniAppInstanceID") || 0;
              }
            }, {
              key: "_hello",
              value: function value() {
                var t = this;
                this._lastWsHelloTs = Date.now(), this.req({
                  P: G.HELLO,
                  data: {
                    isWebUniapp: this._isWebUniapp
                  }
                })["catch"](function (e) {
                  M.w("".concat(t._n, "._hello error:"), e);
                });
              }
            }, {
              key: "getLastWsHelloTs",
              value: function value() {
                return this._lastWsHelloTs;
              }
            }, {
              key: "_checkLoginInfo",
              value: function value(e) {
                var t = 0;
                return S(this.get(12).getSDKAppID()) ? t = k.NO_SDKAPPID : S(e.userID) ? t = k.NO_IDENTIFIER : S(e.userSig) && (t = k.NO_USERSIG), {
                  code: t
                };
              }
            }, {
              key: "_isReactUIKit",
              value: function value() {
                return Ie && void 0 !== window.tencent_cloud_im_csig_react_uikit_23F_xa;
              }
            }, {
              key: "onMultipleAccountKickedOut",
              value: function value(e) {
                var t = this;
                new P("kickedOut").setMessage("type:".concat(R.KICKED_OUT_MULT_ACCOUNT, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), M.w("".concat(this._n, ".onMultipleAccountKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), this.logout(1).then(function () {
                  t.emitOEvt(h.KICKED_OUT, {
                    type: R.KICKED_OUT_MULT_ACCOUNT
                  }), t._m.setNotReadyReason(k.KICKED_OUT_MULT_ACCOUNT), t._m.reset();
                });
              }
            }, {
              key: "onMultipleDeviceKickedOut",
              value: function value(e) {
                var t = this;
                new P("kickedOut").setMessage("type:".concat(R.KICKED_OUT_MULT_DEVICE, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), M.w("".concat(this._n, ".onMultipleDeviceKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), this.logout(1).then(function () {
                  t.emitOEvt(h.KICKED_OUT, {
                    type: R.KICKED_OUT_MULT_DEVICE
                  }), t._m.setNotReadyReason(k.KICKED_OUT_MULT_DEVICE), t._m.reset();
                });
              }
            }, {
              key: "onUserSigExpired",
              value: function value() {
                new P("kickedOut").setMessage(R.KICKED_OUT_USERSIG_EXPIRED).end(!0), M.w("".concat(this._n, ".onUserSigExpired userID:").concat(this.getMyUserID())), 0 !== this.get(12).getStatusInstanceID() && (this.emitOEvt(h.KICKED_OUT, {
                  type: R.KICKED_OUT_USERSIG_EXPIRED
                }), this._m.setNotReadyReason(k.KICKED_OUT_USERSIG_EXPIRED), this._m.reset());
              }
            }, {
              key: "onRestApiKickedOut",
              value: function value(e) {
                new P("kickedOut").setMessage("type:".concat(R.KICKED_OUT_REST_API, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), M.w("".concat(this._n, ".onRestApiKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), 0 !== this.get(12).getStatusInstanceID() && (this.emitOEvt(h.KICKED_OUT, {
                  type: R.KICKED_OUT_REST_API
                }), this._m.setNotReadyReason(k.KICKED_OUT_REST_API), this._m.reset(), this.get(21).onRestApiKickedOut());
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this.resetReady(), this._helloInterval = 120, this._lastLoginTs = 0, this._lastWsHelloTs = 0, this._isWebUniapp = 0;
              }
            }]));
          function gi(e) {
            return p(this, gi), (e = i(this, gi, [e]))._n = "SignModule", e._helloInterval = 120, e._lastLoginTs = 0, e._lastWsHelloTs = 0, e._isWebUniapp = 0, Ao.mixin(e), e;
          }
          function fi(e) {
            return p(this, fi), (e = i(this, fi, [e]))._n = "UserModule", e._profileHandler = new ri(e), e._blacklistHandler = new ui(e), e._userStatusHandler = new li(e), e.getIEmitInst().on(U.A2KEY_AND_TINYID_UPDATED, e.onContextUpdated, e), e;
          }
          function mi(e) {
            return p(this, mi), (e = i(this, mi, [e]))._n = "TopicModule", e._topicMap = new Map(), e._getTopicTimeMap = new Map(), e.TOPIC_CACHE_TIME = 300, e.TOPIC_LAST_ACTIVE_TIME = 3600, e.getIEmitInst().on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function vi(e) {
            return p(this, vi), (e = i(this, vi, [e]))._n = "GroupModule", e._commonGroupHandler = new Yo(e), e._groupAttributesHandler = new jo(e), e._groupCountersHandler = new Jo(e), e._AVChatRoomHandler = new Zo(e), e._groupTipsHandler = new Wo(e), e._groupSystemNoticeHandler = new ti(e), e._groupMemberHandler = new $o(e), e.groupMap = new Map(), e._unjoinedAVChatRoomList = new Map(), e._receiptDetailCompleteMap = new Map(), e._onlineMemberCountMap = new Map(), e._timeoutIDs = [], e.getIEmitInst().on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function Ii(e) {
            return p(this, Ii), (e = i(this, Ii, [e]))._n = "ConvModule", Ao.mixin(e), e._msgListHandler = new ko(e), e._msgRemindHandler = new Bo(e), e._convGroupHandler = new Ho(e), e._sll = new wo(100), e._pagingStatus = Gn, e._pagingTs = 0, e._pagingStartIdx = 0, e._pagingPinnedTs = 0, e._pagingPinnedStartIdx = 0, e._pagingConvIDMap = new Map(), e._convIDFromUnreadDBMap = new Map(), e._convMap = new Map(), e._tmpGroupList = [], e._tmpGroupAtTipsList = [], e._peerReadTimeMap = new Map(), e._completedMap = new Map(), e._roamingMsgKeyAndTimeMap = new Map(), e._remoteGroupReadSeqMap = new Map(), e._convTotalUnreadCount = 0, e._pagingGetCostList = [], e._convMapForDiff = new Map(), e._partialUpdatedConvMap = new Map(), e._everClearedMap = new Map(), e._bPullOnInvite = !0, e._initListeners(), e;
          }
          function Mi() {
            return null;
          }
          function yi(e) {
            var t = e.get(12);
            return {
              SDKType: 10,
              SDKAppID: t.getSDKAppID(),
              SDKVersion: t.getVersion(),
              tinyID: Number(t.getTinyID()),
              userID: t.getUserID(),
              platform: e.getPlatform(),
              instanceID: t.getInstanceID(),
              traceID: He()
            };
          }
          var Ci = e(function e(t) {
              p(this, e), this._m = t, this._n = "StorageModule", this._storageQueue = new Map(), this._errorTolerantHandle();
            }, [{
              key: "_errorTolerantHandle",
              value: function value() {
                v || "undefined" != typeof window && this._canIUseCookies() || (this.getItem = Mi, this.setItem = Mi, this.removeItem = Mi, this.clear = Mi);
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                e % 20 == 0 && 0 !== this._storageQueue.size && this._doFlush();
              }
            }, {
              key: "_doFlush",
              value: function value() {
                try {
                  var e,
                    t = F(this._storageQueue);
                  try {
                    for (t.s(); !(e = t.n()).done;) {
                      var n = j(e.value, 2),
                        o = n[0],
                        i = n[1];
                      this._setStorageSync(this._getKey(o), i);
                    }
                  } catch (e) {
                    t.e(e);
                  } finally {
                    t.f();
                  }
                  this._storageQueue.clear();
                } catch (e) {
                  M.w("".concat(this._n, "._doFlush error:"), e);
                }
              }
            }, {
              key: "_getPrefix",
              value: function value() {
                var e = this._m.get(12);
                return "TIM_".concat(e.getSDKAppID(), "_").concat(e.getUserID(), "_");
              }
            }, {
              key: "_getKey",
              value: function value(e) {
                return "".concat(this._getPrefix()).concat(e);
              }
            }, {
              key: "getItem",
              value: function value(e) {
                var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
                try {
                  var n = t ? this._getKey(e) : e;
                  return this.getStorageSync(n);
                } catch (e) {
                  return M.w("".concat(this._n, ".getItem error:"), e), {};
                }
              }
            }, {
              key: "setItem",
              value: function value(e, t) {
                var n;
                2 < arguments.length && void 0 !== arguments[2] && arguments[2] ? (n = !(3 < arguments.length && void 0 !== arguments[3]) || arguments[3] ? this._getKey(e) : e, this._setStorageSync(n, t)) : this._storageQueue.set(e, t);
              }
            }, {
              key: "clear",
              value: function value() {
                try {
                  v ? I.clearStorageSync() : this._canIUseCookies() && localStorage.clear();
                } catch (e) {
                  M.w("".concat(this._n, ".clear error:"), e);
                }
              }
            }, {
              key: "removeItem",
              value: function value(e) {
                var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
                try {
                  var n = t ? this._getKey(e) : e;
                  this._removeStorageSync(n);
                } catch (e) {
                  M.w("".concat(this._n, ".removeItem error:"), e);
                }
              }
            }, {
              key: "getSize",
              value: function value(e) {
                var t = this,
                  n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "b";
                try {
                  var o = {
                    size: 0,
                    limitSize: 5242880,
                    unit: n
                  };
                  if (Object.defineProperty(o, "leftSize", {
                    enumerable: !0,
                    get: function get() {
                      return o.limitSize - o.size;
                    }
                  }), v && (o.limitSize = 1024 * I.getStorageInfoSync().limitSize), e) o.size = JSON.stringify(this.getItem(e)).length + this._getKey(e).length;else if (v) I.getStorageInfoSync().keys.forEach(function (e) {
                    o.size += JSON.stringify(t.getStorageSync(e)).length + t._getKey(e).length;
                  });else if (this._canIUseCookies()) for (var i in localStorage) localStorage.hasOwnProperty(i) && (o.size += localStorage.getItem(i).length + i.length);
                  return this._convertUnit(o);
                } catch (e) {
                  M.w("".concat(this._n, " error:"), e);
                }
              }
            }, {
              key: "_convertUnit",
              value: function value(e) {
                var t,
                  n = {},
                  o = e.unit;
                for (t in n.unit = o, e) "number" == typeof e[t] && ("kb" === o.toLowerCase() ? n[t] = Math.round(e[t] / 1024) : "mb" === o.toLowerCase() ? n[t] = Math.round(e[t] / 1024 / 1024) : n[t] = e[t]);
                return n;
              }
            }, {
              key: "_setStorageSync",
              value: function value(e, t) {
                v ? ge ? my.setStorageSync({
                  key: e,
                  data: t
                }) : I.setStorageSync(e, t) : this._canIUseCookies() && localStorage.setItem(e, JSON.stringify(t));
              }
            }, {
              key: "getStorageSync",
              value: function value(e) {
                return v ? ge ? my.getStorageSync({
                  key: e
                }).data : I.getStorageSync(e) : this._canIUseCookies() ? JSON.parse(localStorage.getItem(e)) : {};
              }
            }, {
              key: "_removeStorageSync",
              value: function value(e) {
                v ? ge ? my.removeStorageSync({
                  key: e
                }) : I.removeStorageSync(e) : this._canIUseCookies() && localStorage.removeItem(e);
              }
            }, {
              key: "_canIUseCookies",
              value: function value() {
                return "undefined" != typeof window && navigator && navigator.cookieEnabled && localStorage;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._doFlush();
              }
            }]),
            Ti = e(function e(t) {
              p(this, e), this._n = "SSOLogBody", this._report = [];
            }, [{
              key: "pushIn",
              value: function value(e) {
                M.d("".concat(this._n, ".pushIn"), this._report.length, e), this._report.push(e);
              }
            }, {
              key: "backfill",
              value: function value(e) {
                var t;
                O(e) && 0 !== e.length && (M.d("".concat(this._n, ".backfill"), this._report.length, e.length), (t = this._report).unshift.apply(t, d(e)));
              }
            }, {
              key: "getLogsNumInMemory",
              value: function value() {
                return this._report.length;
              }
            }, {
              key: "isEmpty",
              value: function value() {
                return 0 === this._report.length;
              }
            }, {
              key: "_reset",
              value: function value() {
                this._report.length = 0, this._report = [];
              }
            }, {
              key: "getLogsInMemory",
              value: function value() {
                var e = this._report.slice();
                return this._reset(), e;
              }
            }]),
            Di = (t(ki, c), e(ki, [{
              key: "reportAtOnce",
              value: function value() {
                this._report();
              }
            }, {
              key: "_onLoginSuccess",
              value: function value() {
                var t = this,
                  e = this.get(13),
                  n = e.getItem(this.TAG, !1);
                !S(n) && ct(n.forEach) && (M.l("".concat(this._n, "._onLoginSuccess. logs count:").concat(n.length)), n.forEach(function (e) {
                  t._reportBody.pushIn(e);
                }), e.removeItem(this.TAG, !1));
              }
            }, {
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("evt_rpt_threshold"),
                  t = this.getCloudConfig("evt_rpt_waiting"),
                  n = this.getCloudConfig("evt_rpt_level"),
                  o = this.getCloudConfig("evt_rpt_sdkappid_bl"),
                  i = this.getCloudConfig("evt_rpt_tinyid_wl");
                N(e) || (this.MIN_THRESHOLD = Number(e)), N(t) || (this.WAITING_TIME = Number(t)), N(n) || (this.REPORT_LEVEL = n.split(",").map(function (e) {
                  return Number(e);
                })), N(o) || (this.REPORT_SDKAPPID_BLACKLIST = o.split(",").map(function (e) {
                  return Number(e);
                })), N(i) || (this.REPORT_TINYID_WHITELIST = i.split(","));
              }
            }, {
              key: "pushIn",
              value: function value(e) {
                e instanceof P && (e.updateTimeStamp(), this._reportBody.pushIn(e), this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD) && this._report();
              }
            }, {
              key: "onCheckTimer",
              value: function value() {
                Date.now() < this._lastReportTime + this.WAITING_TIME || this._reportBody.isEmpty() || this._report();
              }
            }, {
              key: "_filterLogs",
              value: function value(e) {
                var t = this,
                  n = this.get(12),
                  o = n.getSDKAppID(),
                  n = n.getTinyID();
                return Wt(this.REPORT_SDKAPPID_BLACKLIST, o) && !Yt(this.REPORT_TINYID_WHITELIST, n) ? [] : e.filter(function (e) {
                  return t.REPORT_LEVEL.includes(e.level);
                });
              }
            }, {
              key: "_report",
              value: function value() {
                var t,
                  e,
                  n = this;
                this._reportBody.isEmpty() || (t = this._reportBody.getLogsInMemory(), 0 !== (e = this._filterLogs(t)).length ? (e = {
                  header: yi(this),
                  event: e
                }, this.req({
                  P: G.SSO_STAT,
                  data: y({}, e)
                }).then(function () {
                  n._lastReportTime = Date.now();
                })["catch"](function (e) {
                  M.w("".concat(n._n, "._report failed. error:"), e), n._lastReportTime = Date.now(), n._reportBody.backfill(t), n._reportBody.getLogsNumInMemory() > n.MAX_THRESHOLD && n._flushAtOnce();
                })) : this._lastReportTime = Date.now());
              }
            }, {
              key: "_flushAtOnce",
              value: function value() {
                var e = this.get(13),
                  t = e.getItem(this.TAG, !1),
                  n = this._reportBody.getLogsInMemory(),
                  o = "".concat(this._n, "._flushAtOnce");
                S(t) ? (M.l("".concat(o, " count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1)) : ((n = n.concat(t)).length > this.MAX_THRESHOLD && (n = n.slice(0, this.MAX_THRESHOLD)), M.l("".concat(o, " count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1));
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._lastReportTime = 0, this._report(), this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [];
              }
            }])),
            Ei = "none",
            Li = "online",
            Si = e(function e(t) {
              p(this, e), this._m = t, this._networkType = Li, this._n = "NetMonitorModule", this._mpNetworkStatusCallback = null, this._webOnlineCallback = null, this._webOfflineCallback = null, this._removeListener = null, this._m.getIEmitInst().on(U.A2KEY_AND_TINYID_UPDATED, this._startRN, this);
            }, [{
              key: "_startRN",
              value: function value() {
                var e,
                  n = this;
                ve && (e = this._m.get(18).getPlugin("chat-network-monitor")) && (this._removeListener = e.addEventListener(function (e) {
                  var t = e.isConnected,
                    e = e.type;
                  n._networkType !== e && n._onNetworkStatusChange({
                    isConnected: void 0 !== t && t,
                    networkType: e
                  });
                }));
              }
            }, {
              key: "start",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".start");
                v ? (I.getNetworkType({
                  success: function success(e) {
                    t._networkType = e.networkType || e.subtype || "", e.networkType === Ei ? M.w("".concat(n, " no network, please check!")) : M.i("".concat(n, " networkType:").concat(e.networkType));
                  }
                }), this._mpNetworkStatusCallback = this._onNetworkStatusChange.bind(this), I.onNetworkStatusChange(this._mpNetworkStatusCallback)) : Ie && (this._networkType = Li, this._webOnlineCallback = this._onWebOnline.bind(this), this._webOfflineCallback = this._onWebOffline.bind(this), window.addEventListener("online", this._webOnlineCallback), window.addEventListener("offline", this._webOfflineCallback));
              }
            }, {
              key: "_onWebOnline",
              value: function value() {
                this._onNetworkStatusChange({
                  isConnected: !0,
                  networkType: Li
                });
              }
            }, {
              key: "_onWebOffline",
              value: function value() {
                this._onNetworkStatusChange({
                  isConnected: !1,
                  networkType: Ei
                });
              }
            }, {
              key: "_onNetworkStatusChange",
              value: function value(e) {
                var t = e.isConnected,
                  e = e.networkType,
                  n = "".concat(this._n, "._onNetworkStatusChange"),
                  o = !1,
                  i = "previous:".concat(this._networkType, " current:").concat(e);
                t ? (M.i("".concat(n, " ").concat(i)), this._networkType !== e && (o = !0, this._networkType = e, this._m.get(21).reConnect(!0))) : this._networkType !== e && (o = !0, this._networkType = e, M.w("".concat(n, " no network, please check!")), this._m.get(21).offline()), o && new P("networkChange").setMessage("isConnected:".concat(t, " ").concat(i)).end();
              }
            }, {
              key: "isOnline",
              value: function value() {
                return this._networkType !== Ei;
              }
            }, {
              key: "getNetworkType",
              value: function value() {
                return this._networkType;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), v ? null !== this._mpNetworkStatusCallback && (I.offNetworkStatusChange && I.offNetworkStatusChange(this._mpNetworkStatusCallback), this._mpNetworkStatusCallback = null) : Ie ? (null !== this._webOnlineCallback && (window.removeEventListener("online", this._webOnlineCallback), this._webOnlineCallback = null), null !== this._onWebOffline && (window.removeEventListener("offline", this._webOfflineCallback), this._webOfflineCallback = null)) : ve && this._removeListener && (this._removeListener(), this._removeListener = null);
              }
            }]);
          function ki(e) {
            p(this, ki), (e = i(this, ki, [e]))._n = "EventStatModule", e.TAG = "im-ssolog-event", e._reportBody = new Ti(), e.MIN_THRESHOLD = 20, e.MAX_THRESHOLD = 100, e.WAITING_TIME = 6e4, e.REPORT_LEVEL = [4, 5, 6], e.REPORT_SDKAPPID_BLACKLIST = [], e.REPORT_TINYID_WHITELIST = [], e._lastReportTime = Date.now();
            var t = e.getIEmitInst();
            return t.on(U.A2KEY_AND_TINYID_UPDATED, e._onLoginSuccess, e), t.on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function Ri(e, t) {
            return e(t = {
              exports: {}
            }, t.exports), t.exports;
          }
          var Ai = Ri(function (e) {
              var o = Object.prototype.hasOwnProperty,
                _ = "~";
              function n() {}
              function a(e, t, n) {
                this.fn = e, this.context = t, this.once = n || !1;
              }
              function i(e, t, n, o, i) {
                if ("function" != typeof n) throw new TypeError("The listener must be a function");
                n = new a(n, o || e, i), o = _ ? _ + t : t;
                return e._events[o] ? e._events[o].fn ? e._events[o] = [e._events[o], n] : e._events[o].push(n) : (e._events[o] = n, e._eventsCount++), e;
              }
              function c(e, t) {
                0 == --e._eventsCount ? e._events = new n() : delete e._events[t];
              }
              function t() {
                this._events = new n(), this._eventsCount = 0;
              }
              Object.create && (n.prototype = Object.create(null), new n().__proto__ || (_ = !1)), t.prototype.eventNames = function () {
                var e,
                  t,
                  n = [];
                if (0 === this._eventsCount) return n;
                for (t in e = this._events) o.call(e, t) && n.push(_ ? t.slice(1) : t);
                return Object.getOwnPropertySymbols ? n.concat(Object.getOwnPropertySymbols(e)) : n;
              }, t.prototype.listeners = function (e) {
                var e = _ ? _ + e : e,
                  t = this._events[e];
                if (!t) return [];
                if (t.fn) return [t.fn];
                for (var n = 0, o = t.length, i = new Array(o); n < o; n++) i[n] = t[n].fn;
                return i;
              }, t.prototype.listenerCount = function (e) {
                e = _ ? _ + e : e, e = this._events[e];
                return e ? e.fn ? 1 : e.length : 0;
              }, t.prototype.emit = function (e, t, n, o, i, a) {
                var s = _ ? _ + e : e;
                if (!this._events[s]) return !1;
                var r,
                  c = this._events[s],
                  u = arguments.length;
                if (c.fn) {
                  switch (c.once && this.removeListener(e, c.fn, void 0, !0), u) {
                    case 1:
                      return c.fn.call(c.context), !0;
                    case 2:
                      return c.fn.call(c.context, t), !0;
                    case 3:
                      return c.fn.call(c.context, t, n), !0;
                    case 4:
                      return c.fn.call(c.context, t, n, o), !0;
                    case 5:
                      return c.fn.call(c.context, t, n, o, i), !0;
                    case 6:
                      return c.fn.call(c.context, t, n, o, i, a), !0;
                  }
                  for (p = 1, r = new Array(u - 1); p < u; p++) r[p - 1] = arguments[p];
                  c.fn.apply(c.context, r);
                } else for (var l, d = c.length, p = 0; p < d; p++) switch (c[p].once && this.removeListener(e, c[p].fn, void 0, !0), u) {
                  case 1:
                    c[p].fn.call(c[p].context);
                    break;
                  case 2:
                    c[p].fn.call(c[p].context, t);
                    break;
                  case 3:
                    c[p].fn.call(c[p].context, t, n);
                    break;
                  case 4:
                    c[p].fn.call(c[p].context, t, n, o);
                    break;
                  default:
                    if (!r) for (l = 1, r = new Array(u - 1); l < u; l++) r[l - 1] = arguments[l];
                    c[p].fn.apply(c[p].context, r);
                }
                return !0;
              }, t.prototype.on = function (e, t, n) {
                return i(this, e, t, n, !1);
              }, t.prototype.once = function (e, t, n) {
                return i(this, e, t, n, !0);
              }, t.prototype.removeListener = function (e, t, n, o) {
                e = _ ? _ + e : e;
                if (this._events[e]) if (t) {
                  var i = this._events[e];
                  if (i.fn) i.fn !== t || o && !i.once || n && i.context !== n || c(this, e);else {
                    for (var a = 0, s = [], r = i.length; a < r; a++) (i[a].fn !== t || o && !i[a].once || n && i[a].context !== n) && s.push(i[a]);
                    s.length ? this._events[e] = 1 === s.length ? s[0] : s : c(this, e);
                  }
                } else c(this, e);
                return this;
              }, t.prototype.removeAllListeners = function (e) {
                return e ? (e = _ ? _ + e : e, this._events[e] && c(this, e)) : (this._events = new n(), this._eventsCount = 0), this;
              }, t.prototype.off = t.prototype.removeListener, t.prototype.addListener = t.prototype.on, t.prefixed = _, e.exports = t.EventEmitter = t;
            }),
            Oi = ["rich.my-imcloud.com", "imrich.qcloud.com"],
            Ni = ["requestSnapshotUrl"],
            Gi = (t(Fi, c), e(Fi, [{
              key: "_init",
              value: function value() {
                this._fileDownloadProxy = this.getFileDownloadProxy(), this._authKey = this.getDownloadFileAuthKey();
                var e = this.get(18);
                this.TIMUploadPlugin = e.getPlugin("tim-upload-plugin"), this.TIMUploadPlugin ? this._initUploaderMethod() : (this.COSSDK = e.getPlugin(e = v ? "cos-wx-sdk" : "cos-js-sdk"), this.COSSDK ? (this._getAuthorizationKey(), this.warn("CosReplacement", e)) : this.warn("PluginUndetected"));
              }
            }, {
              key: "_onCloudConfig",
              value: function value() {
                var t = this,
                  e = "".concat(this._n, "._onCloudConfig"),
                  n = this.getCloudConfig("upload_size_limit"),
                  o = this.getCloudConfig("simple_cos"),
                  i = this.getCloudConfig("file_dn_list");
                if (M.l("".concat(e, " uploadSizeLimit:").concat(n, " simpleCos:").concat(o)), !N(n)) try {
                  var a = JSON.parse(n);
                  this.UPLOAD_SIZE_LIMIT = {
                    A: a.a ? 1048576 * parseInt(a.a) : this.UPLOAD_SIZE_LIMIT.A,
                    F: a.f ? 1048576 * parseInt(a.f) : this.UPLOAD_SIZE_LIMIT.F,
                    I: a.i ? 1048576 * parseInt(a.i) : this.UPLOAD_SIZE_LIMIT.I,
                    V: a.v ? 1048576 * parseInt(a.v) : this.UPLOAD_SIZE_LIMIT.V
                  };
                } catch (e) {}
                if (N(o) || (this.isSimpleCos = "1" === o), !N(i)) try {
                  JSON.parse(i).forEach(function (e) {
                    t._fileDNList.includes(e) || t._fileDNList.push(e);
                  });
                } catch (e) {}
              }
            }, {
              key: "_getAuthorizationKey",
              value: function value() {
                var n = this,
                  o = "".concat(this._n, ".").concat("_getAuthorizationKey"),
                  i = new P("_getAuthorizationKey"),
                  a = Math.ceil(Date.now() / 1e3);
                this.req({
                  P: G.COS_SIGN,
                  data: {
                    duration: this.expiredTimeLimit
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = (M.l("".concat(o, " ok. data:"), e), e.expiredTime - a);
                  i.setMessage("requestId:".concat(e.requestId, " requestTime:").concat(a, " expiredTime:").concat(e.expiredTime, " diff:").concat(t, "s")).end(), !v && e.region && (n.region = e.region), n.appid = e.appid, n.bucketName = e.bucketName, n.ciUrl = e.ciUrl, n.directory = e.directory, n.downloadUrl = e.downloadUrl, n.uploadUrl = e.uploadUrl, n.cosOptions = {
                    secretId: e.secretId,
                    secretKey: e.secretKey,
                    sessionToken: e.sessionToken,
                    expiredTime: e.expiredTime
                  }, M.l("".concat(o, " ok. region:").concat(n.region, " bucketName:").concat(n.bucketName)), n._initUploaderMethod();
                })["catch"](function (e) {
                  i.setError(e).end(), M.w("".concat(o, " failed. error:"), e);
                });
              }
            }, {
              key: "_getCosPreSigUrl",
              value: function value(t) {
                var i = this,
                  a = "".concat(this._n, ".").concat("_getCosPreSigUrl"),
                  s = Math.ceil(Date.now() / 1e3),
                  r = new P("_getCosPreSigUrl"),
                  e = {
                    uploadMethod: t.uploadMethod,
                    platform: this.getPlatform(),
                    SDKAppID: this.getSDKAppID(),
                    userID: t.userID,
                    conversationType: t.conversationType,
                    uploadConfig: [{
                      fileID: 1,
                      fileType: t.fileType,
                      fileName: t.fileName
                    }]
                  },
                  n = G.SIMPLE_COS_PRE_SIG;
                return this.isSimpleCos || (e = {
                  fileType: t.fileType,
                  fileName: t.fileName,
                  uploadMethod: t.uploadMethod,
                  duration: t.duration
                }, n = G.COS_PRE_SIG), this.req({
                  P: n,
                  data: e
                }).then(function (e) {
                  i.tryCount = 0;
                  var t,
                    n,
                    e = e.data || {},
                    o = (M.l("".concat(a, " ok. isSimpleCos:").concat(i.isSimpleCos, " data:"), e), "");
                  return o = i.isSimpleCos ? (t = (n = e.preSig[0]).uploadUrl, n = n.fileKey, "uploadIP:".concat(e.uploadIP, " uploadUrl:").concat(t, " fileKey:").concat(n, " cost:").concat(tn(s))) : "requestId:".concat(e.requestId, " expiredTime:").concat(e.expiredTime, " diff:").concat(e.expiredTime - s, "s"), r.setMessage(o).end(), e;
                })["catch"](function (e) {
                  return -1 === e.code && (e.code = k.COS_GET_SIG_FAIL), r.setError(e).end(), M.w("".concat(a, " failed. error:"), e), i.tryCount < 1 ? (i.tryCount++, i._getCosPreSigUrl(t)) : (i.tryCount = 0, E({
                    code: k.COS_GET_SIG_FAIL
                  }));
                });
              }
            }, {
              key: "_initUploaderMethod",
              value: function value() {
                var n = this;
                this.TIMUploadPlugin ? (this.timUploadPlugin = new this.TIMUploadPlugin(), this._cosUploadMethod = function (e, t) {
                  n.timUploadPlugin.uploadFile(e, t);
                }) : this.appid && (this.cos = v ? new this.COSSDK({
                  ForcePathStyle: !0,
                  getAuthorization: this._getAuthorization.bind(this)
                }) : new this.COSSDK({
                  getAuthorization: this._getAuthorization.bind(this)
                }), this._cosUploadMethod = v ? function (e, t) {
                  n.cos.postObject(e, t);
                } : function (e, t) {
                  n.cos.uploadFiles(e, t);
                });
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                !this.COSSDK || this.TIMUploadPlugin || this.isLoggedIn() && e % 60 == 0 && Math.ceil(Date.now() / 1e3) >= this.cosOptions.expiredTime - 120 && this._getAuthorizationKey();
              }
            }, {
              key: "getFileDNList",
              value: function value() {
                return this._fileDNList;
              }
            }, {
              key: "_getAuthorization",
              value: function value(e, t) {
                t({
                  TmpSecretId: this.cosOptions.secretId,
                  TmpSecretKey: this.cosOptions.secretKey,
                  XCosSecurityToken: this.cosOptions.sessionToken,
                  ExpiredTime: this.cosOptions.expiredTime
                });
              }
            }, {
              key: "upload",
              value: function value(e) {
                if (!0 === e._relayFlag) return Promise.resolve();
                var t = this.get(26);
                switch (e.type) {
                  case R.MSG_IMAGE:
                    return t.addTotalCount(Jn), this._uploadImage(e);
                  case R.MSG_FILE:
                    return t.addTotalCount(Jn), this._uploadFile(e);
                  case R.MSG_AUDIO:
                    return t.addTotalCount(Jn), this._uploadAudio(e);
                  case R.MSG_VIDEO:
                    return t.addTotalCount(Jn), this._uploadVideo(e);
                  default:
                    return Promise.resolve();
                }
              }
            }, {
              key: "_uploadImage",
              value: function value(v) {
                var I = this,
                  e = this.get(2),
                  M = v.getElements()[0],
                  t = e.getMessageOption(v.clientSequence);
                return this.doUploadImage({
                  file: t.payload.file,
                  to: t.to,
                  message: v,
                  onProgress: function onProgress(e) {
                    if (M.updatePercent(e), ct(t.onProgress)) try {
                      t.onProgress(e);
                    } catch (e) {
                      return E({
                        code: k.MSG_ONPROGRESS_ERR
                      });
                    }
                  }
                }).then(function (e) {
                  var t = e.location,
                    n = e.fileType,
                    o = e.fileSize,
                    i = e.width,
                    a = e.height,
                    s = e.smallImageUrl,
                    r = e.smallImageWidth,
                    c = e.smallImageHeight,
                    u = e.largeImageUrl,
                    l = e.largeImageWidth,
                    d = e.largeImageHeight,
                    p = e.imageInfoArray,
                    e = I.isPrivateNetWork() ? t : mt(t);
                  M.updateImageFormat(n);
                  var _,
                    h,
                    g = {
                      size: o,
                      url: e,
                      width: i,
                      height: a
                    };
                  if (p && 0 < p.length) for (var f = 0; f < p.length; f++) {
                    var m = p[f];
                    1 === m.type ? _ = m : 2 === m.type ? h = m : g = y(y({}, g), m);
                  } else h = s && u ? (_ = {
                    url: s,
                    width: r,
                    height: c
                  }, {
                    url: u,
                    width: l,
                    height: d
                  }) : (_ = Vt({
                    originUrl: e,
                    originWidth: i,
                    originHeight: a,
                    min: 198
                  }), Vt({
                    originUrl: e,
                    originWidth: i,
                    originHeight: a,
                    min: 720
                  }));
                  return M.updateImageInfoArray([y({}, g), y({}, h), y({}, _)]), v;
                });
              }
            }, {
              key: "_uploadFile",
              value: function value(n) {
                var o = this,
                  e = this.get(2),
                  i = n.getElements()[0],
                  t = e.getMessageOption(n.clientSequence);
                return this.doUploadFile({
                  file: t.payload.file,
                  to: t.to,
                  message: n,
                  onProgress: function onProgress(e) {
                    if (i.updatePercent(e), ct(t.onProgress)) try {
                      t.onProgress(e);
                    } catch (e) {
                      return E({
                        code: k.MSG_ONPROGRESS_ERR
                      });
                    }
                  }
                }).then(function (e) {
                  var e = e.location,
                    t = e;
                  return o.isPrivateNetWork() || (t = ao(t = mt(e), o._fileDownloadProxy, o._authKey, o._fileDNList)), i.updateFileUrl(t), n;
                });
              }
            }, {
              key: "_uploadAudio",
              value: function value(t) {
                var n = this,
                  e = this.get(2),
                  o = t.getElements()[0],
                  i = e.getMessageOption(t.clientSequence);
                return this.doUploadAudio({
                  file: i.payload.file,
                  to: i.to,
                  message: t,
                  onProgress: function onProgress(e) {
                    if (o.updatePercent(e), ct(i.onProgress)) try {
                      i.onProgress(e);
                    } catch (e) {
                      return E({
                        code: k.MSG_ONPROGRESS_ERR
                      });
                    }
                  }
                }).then(function (e) {
                  e = e.location, e = n.isPrivateNetWork() ? e : mt(e);
                  return o.updateAudioUrl(e), t;
                });
              }
            }, {
              key: "_uploadVideo",
              value: function value(n) {
                var o = this,
                  e = this.get(2),
                  i = n.getElements()[0],
                  t = e.getMessageOption(n.clientSequence);
                return this.doUploadVideo({
                  file: t.payload.file,
                  to: t.to,
                  message: n,
                  onProgress: function onProgress(e) {
                    if (i.updatePercent(e), ct(t.onProgress)) try {
                      t.onProgress(e);
                    } catch (e) {
                      return E({
                        code: k.MSG_ONPROGRESS_ERR
                      });
                    }
                  }
                }).then(function (e) {
                  var t = e.location,
                    e = e.snapshotInfo,
                    t = o.isPrivateNetWork() ? t : mt(t);
                  return i.updateVideoUrl(t), S(e) || i.updateSnapshotInfo(e), n;
                });
              }
            }, {
              key: "_checkSizeError",
              value: function value(e) {
                var t = "";
                return "A" === e ? t = "audio" : "I" === e ? t = "image" : "V" === e ? t = "video" : "F" === e && (t = "file"), E({
                  code: k["MSG_".concat(e, "_SIZE_LIMIT")],
                  message: this.getErrMsg("UploadSizeLimit", t, "".concat(this.UPLOAD_SIZE_LIMIT[e] / 1048576, "MB"))
                });
              }
            }, {
              key: "doUploadImage",
              value: function value(o) {
                var e,
                  i,
                  a = this;
                return !o.file || this._isEmptyFileList(o.file.files) ? E({
                  code: k.MSG_I_SELECT_F_FIRST
                }) : !0 !== (e = this._checkImageType(o.file)) ? e : !0 !== (e = this._checkImageSize(o.file)) ? e : (i = null, this._setUploadFileType(1), this.uploadByCOS(o).then(function (e) {
                  if (i = e, a.isPrivateNetWork()) return wt(n);
                  if (O(i.imageInfoArray)) {
                    var t = i.imageInfoArray.find(function (e) {
                      return 3 === e.type;
                    });
                    if (t) return t;
                  }
                  var n;
                  return ve ? {
                    width: o.file.width,
                    height: o.file.height
                  } : (n = mt(e.location), a.COSSDK ? wt(n) : wt(n = ao(n, a._fileDownloadProxy, a._authKey, a._fileDNList)));
                }).then(function (e) {
                  return i.width = e.width, i.height = e.height, Promise.resolve(i);
                }));
              }
            }, {
              key: "_checkImageType",
              value: function value(e) {
                var t = "",
                  t = v ? e.url.slice(e.url.lastIndexOf(".") + 1) : ve ? e.type.split("/")[1] : e.files[0].name.slice(e.files[0].name.lastIndexOf(".") + 1);
                return 0 <= Po.indexOf(t.toLowerCase()) || E({
                  code: k.MSG_I_TYPES_LIMIT
                });
              }
            }, {
              key: "_checkImageSize",
              value: function value(e) {
                return 0 === (e = (v || ve ? e : e.files[0]).size) ? E({
                  code: k.MSG_F_IS_EMPTY
                }) : e < this.UPLOAD_SIZE_LIMIT.I || this._checkSizeError("I");
              }
            }, {
              key: "doUploadFile",
              value: function value(e) {
                return !e.file || this._isEmptyFileList(e.file.files) ? E({
                  code: k.MSG_F_SELECT_F_FIRST
                }) : e.file.files[0].size > this.UPLOAD_SIZE_LIMIT.F ? this._checkSizeError("F") : 0 === e.file.files[0].size ? E({
                  code: k.MSG_F_IS_EMPTY
                }) : (this._setUploadFileType(255), this.uploadByCOS(e));
              }
            }, {
              key: "doUploadVideo",
              value: function value(e) {
                return e.file.videoFile.size > this.UPLOAD_SIZE_LIMIT.V ? this._checkSizeError("V") : 0 === e.file.videoFile.size ? E({
                  code: k.MSG_F_IS_EMPTY
                }) : -1 === Uo.indexOf(e.file.videoFile.type) ? E({
                  code: k.MSG_V_TYPES_LIMIT
                }) : (this._setUploadFileType(2), v || ve ? this.handleVideoUpload(y(y({}, e), {}, {
                  file: e.file.videoFile
                })) : Ie ? this.handleVideoUpload(e) : void 0);
              }
            }, {
              key: "handleVideoUpload",
              value: function value(n) {
                var o = this;
                return new Promise(function (t, e) {
                  o.uploadByCOS(n).then(function (e) {
                    t(e);
                  })["catch"](function () {
                    o.uploadByCOS(n).then(function (e) {
                      t(e);
                    })["catch"](function () {
                      e(new L({
                        code: k.MSG_V_UPLOAD_FAIL
                      }));
                    });
                  });
                });
              }
            }, {
              key: "doUploadAudio",
              value: function value(e) {
                return e.file ? e.file.size > this.UPLOAD_SIZE_LIMIT.A ? this._checkSizeError("A") : 0 === e.file.size ? E({
                  code: k.MSG_F_IS_EMPTY
                }) : (this._setUploadFileType(3), this.uploadByCOS(e)) : E({
                  code: k.MSG_A_UPLOAD_FAIL
                });
              }
            }, {
              key: "uploadByCOS",
              value: function value(t) {
                var c,
                  u,
                  l,
                  d,
                  p = this;
                return ct(this._cosUploadMethod) ? this.timUploadPlugin ? this._uploadWithPreSigUrl(t) : (c = new P("upload"), u = "".concat(this._n, ".uploadByCOS"), l = Date.now(), d = this._getFile(t), new Promise(function (a, s) {
                  var e = v ? p._createCosOptionsWXMiniApp(t) : p._createCosOptionsWeb(t),
                    r = p;
                  p._cosUploadMethod(e, function (e, t) {
                    var n,
                      o,
                      i = Object.create(null);
                    t ? e || O(t.files) && t.files[0].error ? (n = new L({
                      code: k.MSG_F_UPLOAD_FAIL
                    }), c.setError(n).end(), M.l("".concat(u, " failed. error:"), t.files[0].error), 403 === t.files[0].error.statusCode && p._getAuthorizationKey(), s(n)) : (i.fileName = d.name, i.fileSize = d.size, i.fileType = d.type.slice(d.type.indexOf("/") + 1).toLowerCase(), i.location = (v ? t : t.files[0].data).Location, n = Date.now() - l, t = r._formatFileSize(d.size), o = r._formatSpeed(1e3 * d.size / n), t = "size:".concat(t, " time:").concat(n, "ms speed:").concat(o), M.l("".concat(u, " success. name:").concat(d.name, " ").concat(t)), a(i), (o = p.get(26)).addCost(Jn, n), o.addFileSize(Jn, d.size), c.setMessage(t).end()) : (i = new L({
                      code: k.MSG_F_UPLOAD_FAIL
                    }), c.setError(i).end(), M.w("".concat(u, " failed. error:"), e), 403 === e.statusCode && p._getAuthorizationKey(), s(i));
                  });
                })) : (this.warn("PluginUndetected"), E({
                  code: k.COS_UNDETECTED
                }));
              }
            }, {
              key: "_uploadWithPreSigUrl",
              value: function value(e) {
                var p = this,
                  _ = "".concat(this._n, "._uploadWithPreSigUrl"),
                  h = this._getFile(e);
                return this._createCosOptionsPreSigUrl(e).then(function (d) {
                  return new Promise(function (a, s) {
                    var r = new P("upload"),
                      e = d.requestSnapshotUrl,
                      c = void 0 === e ? void 0 : e,
                      u = W(d, Ni),
                      l = Date.now();
                    p._cosUploadMethod(u, function (e, t) {
                      if (e || 403 === t.statusCode) r.setError(new L(e)).end(), o = {
                        HttpStatusCode: 9999,
                        CostTime: tn(l, !1),
                        error: e,
                        url: d.url
                      }, t.data && t.data.uploadIP && (o.uploadIP = t.data.uploadIP), p._uploadSSOLog(o), M.l("".concat(_, " failed, error:"), e), s(new L({
                        code: k.MSG_F_UPLOAD_FAIL
                      }));else {
                        var n = Object.create(null),
                          o = t.data.location || "",
                          e = (p.isPrivateNetWork() || 0 !== o.indexOf("https://") && 0 !== o.indexOf("http://") || (o = o.split("//")[1]), n.fileName = h.name, n.fileSize = h.size, n.fileType = h.type.slice(h.type.indexOf("/") + 1).toLowerCase(), n.location = o, tn(l, !1)),
                          o = p._formatFileSize(h.size),
                          i = p._formatSpeed(1e3 * h.size / e),
                          o = "size:".concat(o, " time:").concat(e, "ms speed:").concat(i, " res:").concat(JSON.stringify(t.data)),
                          i = (M.l("".concat(_, " ok. name:").concat(h.name, " ").concat(o)), r.setMessage(o).end(), {
                            HttpStatusCode: t.statusCode,
                            FileSize: h.size,
                            CostTime: e,
                            url: d.url
                          }),
                          o = (t.data && t.data.uploadIP && (i.uploadIP = t.data.uploadIP), p._uploadSSOLog(i), p.get(26)),
                          i = (o.addCost(Jn, e), o.addFileSize(Jn, h.size), []);
                        if (u.thumbUrl && u.largeUrl && i.push.apply(i, [p._getSmallImageInfoByUrl(u.thumbUrl, n), p._getLargeImageInfoByUrl(u.largeUrl, n)]), 1 === p.uploadFileType && p.isSimpleCos && !p.isPrivateNetWork() && (i.push(p._getImageInfoArray(u.downloadUrl, n)), t.data.uploadIP) && i.push(p._getDownloadIP(u.downloadUrl.split("//")[1].split("/")[0], n)), c && i.push(p._getSnapshotInfoByUrl(c, n)), 0 < i.length) return Promise.all(i).then(function () {
                          a(n);
                        });
                        a(n);
                      }
                    });
                  });
                });
              }
            }, {
              key: "_getDownloadIP",
              value: function value(e, n) {
                var o = "".concat(this._n, "._getDownloadIP"),
                  i = Date.now();
                return this.req({
                  P: G.GET_IP,
                  data: {
                    domainName: e
                  }
                }).then(function (e) {
                  var t;
                  e.data && e.data.ip && (M.l("".concat(o, " ok. downloadIP:").concat(e.data.ip, " cost:").concat(tn(i))), (t = n.location.split("/"))[0] = e.data.ip, n.location = t.join("/"));
                })["catch"](function (e) {});
              }
            }, {
              key: "_getImageInfoArray",
              value: function value(t, n) {
                var o = this,
                  i = "".concat(this._n, "._getImageInfoArray"),
                  a = Date.now();
                return this.req({
                  P: G.GET_IMAGE_INFO,
                  data: {
                    imageUrl: t
                  }
                }).then(function (e) {
                  e = e.data || {};
                  return M.l("".concat(i, " ok. data: ").concat(JSON.stringify(e), " cost:").concat(tn(a))), n.imageInfoArray = e.imageInfoArray, e;
                })["catch"](function (e) {
                  n.imageInfoArray = void 0, o._uploadSSOLog({
                    HttpStatusCode: 1e4,
                    CostTime: tn(a, !1),
                    url: t
                  });
                });
              }
            }, {
              key: "_uploadSSOLog",
              value: function value(e) {
                var t, n;
                this.isSimpleCos && ((t = new P()).setEventType(18), e.error && t.setError(new L(e.error)), n = "HttpStatusCode:".concat(e.HttpStatusCode, "|CosRequestId:").concat(e.CosRequestId || "", "|") + "FileAlreadyExist:".concat(e.FileAlreadyExist || 0, "|FileSize:").concat(e.FileSize || 0, "|CostTime:").concat(e.CostTime), e.uploadIP && (n += "|FinalIP:".concat(e.uploadIP)), t.setMessage("OK").setMoreMessage(e.url).setExtension(n).end());
              }
            }, {
              key: "_getRawOrUploadProxyUrl",
              value: function value(e) {
                var t = this.get(12).getFileUploadProxy(),
                  n = e;
                return n = t ? e.replace(/^https:\/\/[^/]+/, t) : n;
              }
            }, {
              key: "_getFile",
              value: function value(e) {
                return O(e.file.files) || ut(e.file.files) ? e.file.files[0] : e.file;
              }
            }, {
              key: "_formatFileSize",
              value: function value(e) {
                return e < 1024 ? e + "B" : e < 1048576 ? Math.floor(e / 1024) + "KB" : Math.floor(e / 1048576) + "MB";
              }
            }, {
              key: "_formatSpeed",
              value: function value(e) {
                return e <= 1048576 ? Kt(e / 1024, 1) + "KB/s" : Kt(e / 1048576, 1) + "MB/s";
              }
            }, {
              key: "_createCosOptionsWeb",
              value: function value(t) {
                var e = this._getFile(t),
                  n = e.name,
                  n = n.slice(n.lastIndexOf(".")),
                  n = this._genFileName("".concat(ht(999999)).concat(n));
                return {
                  files: [{
                    Bucket: "".concat(this.bucketName, "-").concat(this.appid),
                    Region: this.region,
                    Key: "".concat(this.directory, "/").concat(n),
                    Body: e
                  }],
                  SliceSize: 1048576,
                  onProgress: function onProgress(e) {
                    if ("function" == typeof t.onProgress) try {
                      t.onProgress(e.percent);
                    } catch (e) {
                      M.w("onProgress callback error:", e);
                    }
                  },
                  onFileFinish: function onFileFinish(e, t, n) {}
                };
              }
            }, {
              key: "_createCosOptionsWXMiniApp",
              value: function value(t) {
                var e = this._getFile(t),
                  n = this._genFileName(e.name),
                  e = e.url;
                return {
                  Bucket: "".concat(this.bucketName, "-").concat(this.appid),
                  Region: this.region,
                  Key: "".concat(this.directory, "/").concat(n),
                  FilePath: e,
                  onProgress: function onProgress(e) {
                    if (M.l(JSON.stringify(e)), "function" == typeof t.onProgress) try {
                      t.onProgress(e.percent);
                    } catch (e) {
                      M.w("onProgress callback error:", e);
                    }
                  }
                };
              }
            }, {
              key: "_createCosOptionsPreSigUrl",
              value: function value(r) {
                var e,
                  c = this,
                  u = "",
                  l = "",
                  t = 0,
                  n = this._getFile(r),
                  t = v || ve ? (u = r.message.type === R.MSG_FILE ? (e = (e = n.name).slice(e.lastIndexOf(".")), this._genFileName("".concat(ht(999999)).concat(e))) : this._genFileName(n.name), l = n.url, 1) : (e = (e = n.name).slice(e.lastIndexOf(".")), u = this._genFileName("".concat(ht(999999)).concat(e)), l = n, 0);
                return this._getCosPreSigUrl({
                  fileType: this.uploadFileType,
                  fileName: u,
                  uploadMethod: t,
                  duration: this.duration,
                  userID: r.message.from,
                  conversationType: Gt(r.message.conversationID) ? 1 : 2
                }).then(function (e) {
                  var t = c.isSimpleCos ? e.preSig[0] : e,
                    n = t.uploadUrl,
                    o = t.downloadUrl,
                    i = t.requestSnapshotUrl,
                    i = void 0 === i ? void 0 : i,
                    a = t.thumbUrl,
                    s = t.largeUrl,
                    t = t.fileKey,
                    e = e.uploadIP,
                    e = void 0 === e ? "" : e;
                  return {
                    url: c._getRawOrUploadProxyUrl(n),
                    fileType: c.uploadFileType,
                    fileName: u,
                    resources: l,
                    downloadUrl: o,
                    requestSnapshotUrl: i,
                    thumbUrl: a,
                    largeUrl: s,
                    fileKey: t,
                    uploadIP: !c.isPrivateNetWork() && e,
                    onProgress: function onProgress(e) {
                      if ("function" == typeof r.onProgress) try {
                        r.onProgress(e.percent);
                      } catch (e) {
                        M.w("onProgress callback error:", e), M.e(e);
                      }
                    }
                  };
                });
              }
            }, {
              key: "_genFileName",
              value: function value(e) {
                return "".concat(Ft(), "-").concat(e);
              }
            }, {
              key: "_setUploadFileType",
              value: function value(e) {
                this.uploadFileType = e;
              }
            }, {
              key: "_getSnapshotInfoByUrl",
              value: function value(e, n) {
                var o = this,
                  i = "_getSnapshotInfoByUrl",
                  a = new P(i);
                return this.req({
                  P: G.VIDEO_COVER,
                  data: {
                    platform: this.getPlatform(),
                    coverName: this._genFileName(ht(99999)),
                    requestSnapshotUrl: e
                  }
                }).then(function (e) {
                  var t,
                    e = (e.data || {}).snapshotUrl;
                  return M.l("".concat(o._n, ".").concat(i, " ok. snapshotUrl:").concat(e)), a.setMessage("snapshotUrl:".concat(e)).end(), S(e) ? {} : wt(t = ao(e, o._fileDownloadProxy, o._authKey, o._fileDNList)).then(function (e) {
                    n.snapshotInfo = {
                      snapshotUrl: t,
                      snapshotWidth: e.width,
                      snapshotHeight: e.height
                    };
                  });
                })["catch"](function (e) {
                  return M.w("".concat(o._n, ".").concat(i, " failed. error:"), e), a.setCode(e.errorCode).setMessage(e.errorInfo).end(), {};
                });
              }
            }, {
              key: "_getSmallImageInfoByUrl",
              value: function value(t, n) {
                return wt(ao(t, this._fileDownloadProxy, this._authKey, this._fileDNList)).then(function (e) {
                  n.smallImageUrl = t, n.smallImageWidth = e.width, n.smallImageHeight = e.height;
                });
              }
            }, {
              key: "_getLargeImageInfoByUrl",
              value: function value(t, n) {
                return wt(ao(t, this._fileDownloadProxy, this._authKey, this._fileDNList)).then(function (e) {
                  n.largeImageUrl = t, n.largeImageWidth = e.width, n.largeImageHeight = e.height;
                });
              }
            }, {
              key: "_isEmptyFileList",
              value: function value(e) {
                return !(!ut(e) || 0 !== e.length);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }])),
            Pi = ["downloadKey", "pbDownloadKey", "messageList"],
            Ui = e(function e(t) {
              p(this, e), this._n = "MergerMessageHandler", this._msgM = t;
            }, [{
              key: "uploadMergerMessage",
              value: function value(e, n) {
                var o = "".concat(this._n, ".").concat("uploadMergerMessage"),
                  e = (M.d("".concat(o, " message:"), e, "messageBytes:".concat(n)), JSON.parse(JSON.stringify(e.payload)).messageList),
                  i = e.length,
                  t = this._msgM.get(17).getFileDNList(),
                  a = new P("uploadMergerMessage");
                return e.forEach(function (e) {
                  so(e.messageBody[0].type, e.messageBody, t);
                }), this._msgM.req({
                  P: G.UPLOAD_MERGER_MSG,
                  data: {
                    messageList: e
                  }
                }).then(function (e) {
                  M.d("".concat(o, " ok. response:"), e.data);
                  var e = e.data,
                    t = e.pbDownloadKey,
                    e = e.downloadKey,
                    t = {
                      pbDownloadKey: t,
                      downloadKey: e,
                      messageNumber: i
                    };
                  return a.setMessage("".concat(i, "-").concat(n, "-").concat(e)).end(), t;
                })["catch"](function (e) {
                  throw M.w("".concat(o, " failed. error:"), e), a.setError(e).end(), e;
                });
              }
            }, {
              key: "downloadMergerMessage",
              value: function value(i) {
                var a = this,
                  s = "".concat(this._n, ".").concat("downloadMergerMessage"),
                  t = (M.d("".concat(s, " message:"), i), i.payload.downloadKey),
                  r = this._msgM.getFileDownloadProxy(),
                  c = this._msgM.getDownloadFileAuthKey(),
                  u = new P("downloadMergerMessage");
                return u.setMessage("downloadKey:".concat(t)), this._msgM.req({
                  P: G.DOWNLOAD_MERGER_MSG,
                  data: {
                    downloadKey: t
                  }
                }).then(function (e) {
                  M.d("".concat(s, " ok. response:"), e.data);
                  var t,
                    n,
                    o = a._msgM.get(17).getFileDNList();
                  return ct(i.clearElement) ? ((t = i.payload).downloadKey, t.pbDownloadKey, t.messageList, t = W(t, Pi), i.clearElement(), i.setElement({
                    type: i.type,
                    content: y({
                      messageList: e.data.messageList
                    }, t)
                  }, r, c, o)) : (n = [], e.data.messageList.forEach(function (e) {
                    S(e) || (e = new yo(e, r, c, o), n.push(e));
                  }), i.payload.messageList = n, i.payload.downloadKey = "", i.payload.pbDownloadKey = ""), u.end(), i;
                })["catch"](function (e) {
                  throw M.w("".concat(s, " failed. key:").concat(t, " error:"), e), u.setError(e).end(), e;
                });
              }
            }, {
              key: "createMergerMessagePack",
              value: function value(e, t, n) {
                return e.conversationType === R.CONV_C2C ? this._createC2CMergerMessagePack(e, t, n) : this._createGroupMergerMessagePack(e, t, n);
              }
            }, {
              key: "_createC2CMergerMessagePack",
              value: function value(e, t, n) {
                var o = null,
                  i = (t && (t.offlinePushInfo && (o = t.offlinePushInfo), !0 === t.onlineUserOnly) && (o ? o.disablePush = !0 : o = {
                    disablePush: !0
                  }), []),
                  a = (m(t) && m(t.messageControlInfo) && (a = (r = t.messageControlInfo).excludedFromUnreadCount, s = r.excludedFromLastMessage, r = r.excludedFromContentModeration, !0 === a && i.push("NoUnread"), !0 === s && i.push("NoLastMsg"), !0 === r) && i.push("NoMsgCheck"), ""),
                  s = (C(e.cloudCustomData) && 0 < e.cloudCustomData.length && (a = e.cloudCustomData), n.pbDownloadKey),
                  r = n.downloadKey,
                  n = n.messageNumber,
                  c = e.payload,
                  u = c.title,
                  l = c.abstractList,
                  c = c.compatibleText,
                  d = this._msgM.get(6),
                  d = d && d.isOnlineMessage(e, t) ? 0 : void 0;
                return {
                  P: G.SEND_C2C_MSG,
                  data: {
                    fromAccount: this._msgM.getMyUserID(),
                    toAccount: e.to,
                    msgBody: [{
                      msgType: e.type,
                      msgContent: {
                        pbDownloadKey: s,
                        downloadKey: r,
                        title: u,
                        abstractList: l,
                        compatibleText: c,
                        messageNumber: n
                      }
                    }],
                    cloudCustomData: a,
                    clientTime: e.clientTime,
                    msgSeq: e.sequence,
                    msgRandom: e.random,
                    msgLifeTime: d,
                    offlinePushInfo: Lo(o),
                    messageControlInfo: 0 !== d ? i : void 0,
                    isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                    isRelayMessage: !0 === e._relayFlag ? 1 : 0
                  }
                };
              }
            }, {
              key: "_createGroupMergerMessagePack",
              value: function value(e, t, n) {
                var o = null,
                  i = (t && t.offlinePushInfo && (o = t.offlinePushInfo), []),
                  a = (m(t) && m(t.messageControlInfo) && (a = (r = t.messageControlInfo).excludedFromUnreadCount, s = r.excludedFromLastMessage, r = r.excludedFromContentModeration, !0 === a && i.push("NoUnread"), !0 === s && i.push("NoLastMsg"), !0 === r) && i.push("NoMsgCheck"), ""),
                  s = (C(e.cloudCustomData) && 0 < e.cloudCustomData.length && (a = e.cloudCustomData), n.pbDownloadKey),
                  r = n.downloadKey,
                  n = n.messageNumber,
                  c = e.payload,
                  u = c.title,
                  l = c.abstractList,
                  c = c.compatibleText,
                  d = this._msgM.get(7),
                  t = d && d.isOnlineMessage(e, t) ? 1 : 0;
                return {
                  P: G.SEND_GRP_MSG,
                  data: {
                    fromAccount: this._msgM.getMyUserID(),
                    groupID: e.to,
                    msgBody: [{
                      msgType: e.type,
                      msgContent: {
                        pbDownloadKey: s,
                        downloadKey: r,
                        title: u,
                        abstractList: l,
                        compatibleText: c,
                        messageNumber: n
                      }
                    }],
                    random: e.random,
                    priority: e.priority,
                    clientSequence: e.clientSequence,
                    groupAtInfo: void 0,
                    cloudCustomData: a,
                    onlineOnlyFlag: t,
                    offlinePushInfo: Lo(o),
                    clientTime: e.clientTime,
                    needReadReceipt: !0 !== e.needReadReceipt || d.isMessageFromOrToAVChatroom(e.to) ? 0 : 1,
                    messageControlInfo: 0 == t ? i : void 0,
                    isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                    isRelayMessage: !0 === e._relayFlag ? 1 : 0
                  }
                };
              }
            }]),
            bi = {
              ERR_SVR_COMM_SENSITIVE_TEXT: 80001,
              ERR_SVR_COMM_BODY_SIZE_LIMIT: 80002,
              OPEN_SERVICE_OVERLOAD_ERROR: 60022,
              ERR_SVR_MSG_PKG_PARSE_FAILED: 20001,
              ERR_SVR_MSG_INTERNAL_AUTH_FAILED: 20002,
              ERR_SVR_MSG_INVALID_ID: 20003,
              ERR_SVR_MSG_PUSH_DENY: 20006,
              ERR_SVR_MSG_IN_PEER_BLACKLIST: 20007,
              ERR_SVR_MSG_BOTH_NOT_FRIEND: 20009,
              ERR_SVR_MSG_NOT_PEER_FRIEND: 20010,
              ERR_SVR_MSG_NOT_SELF_FRIEND: 20011,
              ERR_SVR_MSG_SHUTUP_DENY: 20012,
              ERR_SVR_GROUP_INVALID_PARAMETERS: 10004,
              ERR_SVR_GROUP_PERMISSION_DENY: 10007,
              ERR_SVR_GROUP_NOT_FOUND: 10010,
              ERR_SVR_GROUP_INVALID_GROUPID: 10015,
              ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY: 10016,
              ERR_SVR_GROUP_SHUTUP_DENY: 10017,
              MSG_SEND_FAIL: 2100,
              OVER_FREQUENCY_LIMIT: 2996
            },
            wi = [k.MSG_ONPROGRESS_ERR, k.MSG_I_SELECT_F_FIRST, k.MSG_I_TYPES_LIMIT, k.MSG_F_IS_EMPTY, k.MSG_I_SIZE_LIMIT, k.MSG_F_SELECT_F_FIRST, k.MSG_F_SIZE_LIMIT, k.MSG_V_SIZE_LIMIT, k.MSG_V_TYPES_LIMIT, k.MSG_A_UPLOAD_FAIL, k.MSG_A_SIZE_LIMIT, k.COS_UNDETECTED];
          function Fi(e) {
            p(this, Fi), (e = i(this, Fi, [e]))._n = "UploadModule", e.TIMUploadPlugin = null, e.timUploadPlugin = null, e.COSSDK = null, e._cosUploadMethod = null, e.expiredTimeLimit = 600, e.appid = 0, e.bucketName = "", e.ciUrl = "", e.directory = "", e.downloadUrl = "", e.uploadUrl = "", e.region = "ap-shanghai", e.cos = null, e.cosOptions = {
              secretId: "",
              secretKey: "",
              sessionToken: "",
              expiredTime: 0
            }, e.uploadFileType = "", e.duration = 900, e.tryCount = 0, e.UPLOAD_SIZE_LIMIT = {
              A: 20971520,
              F: 104857600,
              I: 20971520,
              V: 104857600
            }, e.isSimpleCos = !1, e._fileDownloadProxy = "", e._authKey = "", e._fileDNList = Oi;
            var t = e.getIEmitInst();
            return t.on(U.A2KEY_AND_TINYID_UPDATED, e._init, e), t.on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function qi(e) {
            var t = !1;
            return Object.values(bi).includes(e) && (t = !0), t = 120001 <= e && e <= 13e4 || 10100 <= e && e <= 10200 ? !0 : t;
          }
          t(Qi, c);
          var xi = e(Qi, [{
              key: "createTextMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  e = C(e.payload) ? e.payload : e.payload.text,
                  e = new no({
                    text: e
                  }),
                  t = this._getNickAndAvatarByUserID(t);
                return n.setElement(e), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), n;
              }
            }, {
              key: "createImageMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e));
                if (v) {
                  var o = e.payload.file;
                  if (at(o)) return void this.warn("FileUnsupportedInMP", "createImageMessage");
                  var i = o.tempFiles[0].path || o.tempFiles[0].tempFilePath,
                    o = {
                      url: i,
                      name: i.slice(i.lastIndexOf("/") + 1),
                      size: o.tempFiles && o.tempFiles[0].size || 1,
                      type: i.slice(i.lastIndexOf(".") + 1).toLowerCase()
                    };
                  e.payload.file = o;
                } else ve ? (o = {
                  url: (i = e.payload.file).uri,
                  name: i.fileName,
                  size: i.fileSize || 1,
                  type: i.type,
                  width: i.width,
                  height: i.height
                }, e.payload.file = o) : Ie && (at(e.payload.file) ? (i = e.payload.file, e.payload.file = {
                  files: [i]
                }) : m(e.payload.file) && "undefined" != typeof uni && (o = e.payload.file.tempFiles[0], e.payload.file = {
                  files: [o]
                }));
                i = new uo({
                  imageFormat: je.UNKNOWN,
                  uuid: this._generateUUID(e.payload.file),
                  file: e.payload.file
                }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), Oi), o = this._getNickAndAvatarByUserID(t);
                return n.setElement(i), n.setNickAndAvatar(o), n.setNameCard(this._getNameCardByGroupID(n)), this._messageOptionsMap.set(n.clientSequence, e), n;
              }
            }, {
              key: "createAudioMessage",
              value: function value(e) {
                var t = e.payload.file,
                  n = (v && (n = {
                    url: t.tempFilePath,
                    name: t.tempFilePath.slice(t.tempFilePath.lastIndexOf("/") + 1),
                    size: t.fileSize,
                    second: parseInt(t.duration) / 1e3,
                    type: t.tempFilePath.slice(t.tempFilePath.lastIndexOf(".") + 1).toLowerCase()
                  }, e.payload.file = n), ve && (n = {
                    url: t.uri,
                    name: t.uri.slice(t.uri.lastIndexOf("/") + 1),
                    size: t.fileSize || 1,
                    second: Math.floor(t.duration / 1e3),
                    type: t.uri.slice(t.uri.lastIndexOf(".") + 1).toLowerCase()
                  }, e.payload.file = n, S(t.uri)) && this.warn("VoiceFileInRN"), this.getMyUserID()),
                  o = (e.currentUser = n, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  t = new po({
                    second: Math.floor(t.duration / 1e3),
                    size: t.fileSize || t.size || 1,
                    url: t.tempFilePath || t.uri,
                    uuid: this._generateUUID(e.payload.file)
                  }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), Oi),
                  n = this._getNickAndAvatarByUserID(n);
                return o.setElement(t), o.setNickAndAvatar(n), o.setNameCard(this._getNameCardByGroupID(o)), this._messageOptionsMap.set(o.clientSequence, e), o;
              }
            }, {
              key: "createVideoMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), e.payload.file.thumbUrl = "", e.payload.file.thumbSize = 0, {});
                if (v) {
                  if (ge) return void this.warn("VideoUnsupportedInAlipay");
                  if (at(e.payload.file)) return void this.warn("FileUnsupportedInMP", "createVideoMessage");
                  var o = e.payload.file;
                  O(o.tempFiles) && (o = o.tempFiles[0]), n.url = o.tempFilePath, n.name = o.tempFilePath.slice(o.tempFilePath.lastIndexOf("/") + 1), n.size = o.size || 1, n.second = o.duration || 0, n.type = o.tempFilePath.slice(o.tempFilePath.lastIndexOf(".") + 1).toLowerCase();
                } else ve ? (o = e.payload.file, n.url = o.uri, n.name = o.fileName, n.size = o.fileSize || 1, n.second = o.duration || 0, n.type = o.type.split("/")[1]) : Ie && (at(e.payload.file) ? (o = e.payload.file, e.payload.file.files = [o]) : m(e.payload.file) && "undefined" != typeof uni && (o = e.payload.file.tempFile, e.payload.file.files = [o]), o = e.payload.file, n.url = window.URL.createObjectURL(o.files[0]), n.name = o.files[0].name, n.size = o.files[0].size || 1, n.second = o.files[0].duration || 0, n.type = o.files[0].type.split("/")[1]);
                e.payload.file.videoFile = n;
                o = new Do(e), n = new Io({
                  videoFormat: n.type,
                  videoSecond: Kt(n.second, 0),
                  videoSize: n.size,
                  remoteVideoUrl: "",
                  videoUrl: n.url,
                  videoUUID: this._generateUUID(e.payload.file.videoFile),
                  thumbUUID: this._generateUUID(e.payload.file.videoFile),
                  thumbWidth: e.payload.file.width || 200,
                  thumbHeight: e.payload.file.height || 200,
                  thumbUrl: e.payload.file.thumbUrl,
                  thumbSize: e.payload.file.thumbSize,
                  thumbFormat: e.payload.file.thumbUrl.slice(e.payload.file.thumbUrl.lastIndexOf(".") + 1).toLowerCase()
                }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), Oi), t = this._getNickAndAvatarByUserID(t);
                return o.setElement(n), o.setNickAndAvatar(t), o.setNameCard(this._getNameCardByGroupID(o)), this._messageOptionsMap.set(o.clientSequence, e), o;
              }
            }, {
              key: "createCustomMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  e = new vo({
                    data: e.payload.data,
                    description: e.payload.description,
                    extension: e.payload.extension
                  }),
                  t = this._getNickAndAvatarByUserID(t);
                return n.setElement(e), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), n;
              }
            }, {
              key: "createFaceMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  e = new lo(e.payload),
                  t = this._getNickAndAvatarByUserID(t);
                return n.setElement(e), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), n;
              }
            }, {
              key: "createMergerMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  t = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), this._getNickAndAvatarByUserID(t)),
                  n = new Do(e),
                  e = new Co(e.payload);
                return n.setElement(e), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), n.setRelayFlag(!0), n;
              }
            }, {
              key: "createForwardMessage",
              value: function value(e) {
                var t,
                  n,
                  o = e.to,
                  i = e.conversationType,
                  a = e.priority,
                  s = e.payload,
                  r = e.needReadReceipt,
                  c = e.receiverList;
                return O(s._elements) ? (t = this.getMyUserID(), n = this._getNickAndAvatarByUserID(t), s.type === R.MSG_GRP_TIP ? E({
                  code: k.MSG_FORWARD_TYPE_INVALID
                }) : (i = {
                  to: o,
                  conversationType: i,
                  conversationID: "".concat(i).concat(o),
                  priority: a,
                  isPlaceMessage: 0,
                  status: An,
                  currentUser: t,
                  senderTinyID: this.getMyTinyID(),
                  cloudCustomData: e.cloudCustomData || s.cloudCustomData || "",
                  needReadReceipt: r,
                  receiverList: c,
                  isSupportExtension: e.isSupportExtension || !1
                }, (o = new Do(i)).setElement(s._elements[0]), o.setNickAndAvatar(n), o.setNameCard(this._getNameCardByGroupID(s)), o.setRelayFlag(!0), o)) : E({
                  code: k.MSG_FORWARD_INVALID_ELEMENTS
                });
              }
            }, {
              key: "downloadMergerMessage",
              value: function value(e) {
                return this._mergerMessageHandler.downloadMergerMessage(e);
              }
            }, {
              key: "createFileMessage",
              value: function value(e) {
                if (v) {
                  if (!le && !pe && !fe) return;
                  var t = I.getSystemInfoSync().SDKVersion;
                  if (le && xt(t, "2.5.0") < 0) return void this.warn("WXChooseMessageFile");
                  if (pe && xt(t, "1.18.0") < 0) return void this.warn("QQChooseMessageFile");
                }
                Ie || fe ? at(e.payload.file) ? (t = e.payload.file, e.payload.file = {
                  files: [t]
                }) : m(e.payload.file) && "undefined" != typeof uni && (o = (t = e.payload.file).tempFiles, t = t.files, n = null, O(o) ? n = o[0] : O(t) && (n = t[0]), e.payload.file = {
                  files: [n]
                }) : le || pe ? (t = y(y({}, (o = e.payload.file.tempFiles)[0]), {}, {
                  url: o[0].path
                }), e.payload.file = {
                  files: [t]
                }) : ve && (o = y(y({}, n = e.payload.file), {}, {
                  url: n.uri
                }), e.payload.file = {
                  files: [o]
                });
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  o = new mo({
                    uuid: this._generateUUID(e.payload.file),
                    file: e.payload.file
                  }),
                  t = this._getNickAndAvatarByUserID(t);
                return n.setElement(o), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), this._messageOptionsMap.set(n.clientSequence, e), n;
              }
            }, {
              key: "createLocationMessage",
              value: function value(e) {
                var t = this.getMyUserID(),
                  n = (e.currentUser = t, e.senderTinyID = this.getMyTinyID(), new Do(e)),
                  e = new Mo(e.payload),
                  t = this._getNickAndAvatarByUserID(t);
                return n.setElement(e), n.setNickAndAvatar(t), n.setNameCard(this._getNameCardByGroupID(n)), n;
              }
            }, {
              key: "_onNoModule",
              value: function value() {
                return E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "sendMessageInstance",
              value: function value(i, a) {
                var s = this;
                if (!1 === this.get(29).filterMessage(i, a)) return i.hasRiskContent = !0, this._onSendMessageFailed(i, new L({
                  code: k.PROFANITY_FOUND
                }));
                var r,
                  c,
                  u,
                  l,
                  t = null;
                if (i.conversationType === R.CONV_C2C) t = this.get(6);else {
                  if (i.conversationType !== R.CONV_GROUP) return E({
                    code: k.MSG_INVALID_CONV_TYPE
                  });
                  t = this.get(7);
                }
                return t ? (c = "".concat(this._n, ".sendMessageInstance"), u = this.get(11), l = t.isOnlineMessage(i, a), this.get(17).upload(i).then(function () {
                  return s._getSendMessageSpecifiedKey(i) === jn && s.get(26).addSuccessCount(Jn), s._guardForGroup(i).then(function () {
                    if (!i.isSendable()) return E({
                      code: k.MSG_F_URL_IS_EMPTY
                    });
                    s._addSendMessageTotalCount(i), r = Date.now();
                    var e = function (e) {
                      var t = "utf-8";
                      Ie && document && (t = document.charset.toLowerCase());
                      var n,
                        o = 0,
                        i = e.length;
                      if ("utf-8" === t || "utf8" === t) for (var a = 0; a < i; a++) (n = e.codePointAt(a)) <= 127 ? o += 1 : n <= 2047 ? o += 2 : n <= 65535 ? o += 3 : (o += 4, a++);else if ("utf-16" === t || "utf16" === t) for (var s = 0; s < i; s++) (n = e.codePointAt(s)) <= 65535 ? o += 2 : (o += 4, s++);else o = e.replace(/[^\x00-\xff]/g, "aa").length;
                      return o;
                    }(JSON.stringify(i));
                    return i.type === R.MSG_MERGER && 11264 < e ? s._mergerMessageHandler.uploadMergerMessage(i, e).then(function (e) {
                      e = s._mergerMessageHandler.createMergerMessagePack(i, a, e);
                      return s.req(e);
                    }) : (u.setMessageRandom(i), t.sendMessage(i, a));
                  }).then(function (e) {
                    var e = e.data,
                      t = e.time,
                      n = e.sequence,
                      o = e.readReceiptCode,
                      e = e.messageDropReason,
                      e = (A(o) && 0 !== o && (new P("sendMessageWithReceipt").setMessage("from:".concat(i.from, " to:").concat(i.to, " sequence:").concat(n, " readReceiptCode:").concat(o)).end(), M.w("".concat(c, " readReceiptCode:").concat(o, " message:").concat(s.getErrMsg(o)))), e && (o = new P("messageDropReason"), e = "from:".concat(i.from, " to:").concat(i.to, " sequence:").concat(n, " messageDropReason:").concat(e), o.setMessage(e).end(), M.w("".concat(c, " ").concat(e))), s._addSendMessageSuccessCount(i, r), s._messageOptionsMap["delete"](i.clientSequence), !0 === i.isResend && (o = u.findMessage(i.ID)) && (M.l("".concat(c, " resend ok. ID:").concat(o.ID)), u.deleteLocalMessage(o)), i.status = On, i.time = t, !1);
                    return i.conversationType === R.CONV_GROUP ? i.sequence = n : i.conversationType === R.CONV_C2C && (o = u.getLatestMessageSentByMe(i.conversationID)) && (t = o.nick, n = o.avatar, t === i.nick && n === i.avatar || (e = !0)), e && u.modifyMessageSentByMe({
                      conversationID: i.conversationID,
                      latestNick: i.nick,
                      latestAvatar: i.avatar
                    }), !0 === l ? i._onlineOnlyFlag = !0 : (u.appendToMessageList(i), o = i, m(a) && m(a.messageControlInfo) && (!0 === a.messageControlInfo.excludedFromLastMessage && (i._isExcludedFromLastMessage = !0, o = ""), !0 === a.messageControlInfo.excludedFromUnreadCount) && (i._isExcludedFromUnreadCount = !0), t = i.conversationType, Nt(i.to) && (t = R.CONV_TOPIC, s.get(10).onMessageSent({
                      groupID: jt(i.to),
                      topicID: i.to,
                      lastMessage: o
                    })), u.onMessageSent({
                      conversationOptionsList: [{
                        conversationID: i.conversationID,
                        unreadCount: 0,
                        type: t,
                        subType: i.conversationSubType,
                        lastMessage: o
                      }]
                    })), i._relayFlag || "TIMImageElem" !== i.type || Bt(i.payload.imageInfoArray), T({
                      message: i
                    });
                  });
                })["catch"](function (e) {
                  return s._onSendMessageFailed(i, e, l);
                })) : this._onNoModule();
              }
            }, {
              key: "_guardForGroup",
              value: function value(e) {
                if (e.conversationType !== R.CONV_GROUP) return Promise.resolve();
                var t = this.get(7);
                if (!t) return this._onNoModule();
                if (Ot({
                  groupID: e.to
                })) {
                  var n = t.getLocalGroupProfile(e.to);
                  if (n && n.isSupportTopic) return E({
                    code: k.MSG_SEND_GRP_WITH_TOPIC_FAIL
                  });
                }
                return t.guardForAVChatRoom(e);
              }
            }, {
              key: "_onSendMessageFailed",
              value: function value(e, t) {
                var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
                  o = "".concat(this._n, "._onSendMessageFailed"),
                  i = (e.status = Nn, 80001 !== t.code && 80004 !== t.code || (e.hasRiskContent = !0), this.get(11)),
                  a = (i.deleteMessageRandom(e), 10100 <= t.code && t.code <= 10200 || 120001 <= t.code && t.code <= 13e4),
                  n = (n || a || !0 === i.appendToMessageList(e) && M.l("".concat(o, " message stored, ID:").concat(e.ID)), this._addSendMessageFailCountOnUser(e, t), new P("sendMessage")),
                  a = "head.seq:".concat(t.data.headSeq, " type:").concat(e.type, " from:").concat(e.from, " to:").concat(e.to);
                return Ie && ("connection" in navigator && (i = navigator.connection, a += " downlink:".concat(i.downlink, " effectiveType:").concat(i.effectiveType, " rtt:").concat(i.rtt)), "memory" in window.performance) && (i = window.performance.memory, a += " usedJSHeapSize:".concat(i.usedJSHeapSize, " totalJSHeapSize:").concat(i.totalJSHeapSize, " jsHeapSizeLimit:").concat(i.jsHeapSizeLimit)), n.setMessage(a).setError(t).end(), M.e("".concat(o, " ").concat(a, " error:"), t), E(new L({
                  code: t && t.code ? t.code : k.MSG_SEND_FAIL,
                  message: t && t.message ? t.message : void 0,
                  data: {
                    message: e
                  }
                }));
              }
            }, {
              key: "_getSendMessageSpecifiedKey",
              value: function value(e) {
                if ([R.MSG_IMAGE, R.MSG_AUDIO, R.MSG_VIDEO, R.MSG_FILE].includes(e.type)) return jn;
                if (e.conversationType === R.CONV_C2C) return Kn;
                if (e.conversationType === R.CONV_GROUP) {
                  var t = this.get(7);
                  if (t) {
                    t = t.getLocalGroupProfile(e.to);
                    if (t) return e = t.type, At(e) ? Yn : Wn;
                  }
                }
              }
            }, {
              key: "_addSendMessageTotalCount",
              value: function value(e) {
                e = this._getSendMessageSpecifiedKey(e);
                e && this.get(26).addTotalCount(e);
              }
            }, {
              key: "_addSendMessageSuccessCount",
              value: function value(e, t) {
                var n,
                  e = this._getSendMessageSpecifiedKey(e);
                e && ((n = this.get(26)).addSuccessCount(e), n.addCost(e, tn(t, !1)));
              }
            }, {
              key: "_addSendMessageFailCountOnUser",
              value: function value(e, t) {
                var n,
                  t = t.code,
                  t = void 0 === t ? -1 : t,
                  o = this.get(26),
                  e = this._getSendMessageSpecifiedKey(e);
                e === jn && (n = !1, n = wi.includes(t) ? !0 : n) ? o.addFailedCountOfUserSide(Jn) : qi(t) && e && o.addFailedCountOfUserSide(e);
              }
            }, {
              key: "resendMessage",
              value: function value(e, t) {
                return e.isResend = !0, e.status = An, this.sendMessageInstance(e, t);
              }
            }, {
              key: "revokeMessage",
              value: function value(n) {
                var o,
                  i,
                  t = this,
                  e = null;
                return n.conversationType === R.CONV_C2C ? e = this.get(6) : n.conversationType === R.CONV_GROUP && (e = this.get(7)), e ? ((o = new P("revokeMessage")).setMessage("type:".concat(n.type, " from:").concat(n.from, " to:").concat(n.to)), i = "".concat(this._n, ".").concat("revokeMessage"), e.revokeMessage(n).then(function (e) {
                  var e = e.data.recallRetList;
                  return S(e) || 0 === e[0].retCode ? (M.i("".concat(i, " ok. ID:").concat(n.ID)), n.isRevoked = !0, o.end(), t.get(11).onMessageRevoked([n]), T({
                    message: n
                  })) : (e = new L({
                    code: e[0].retCode,
                    data: {
                      message: n
                    }
                  }), o.setCode(e.code).setMoreMessage(e.message).end(), E(e));
                })["catch"](function (e) {
                  o.setError(e).end();
                  var t = new L({
                    code: e && e.code ? e.code : k.MSG_REVOKE_FAIL,
                    message: e && e.message ? e.message : void 0,
                    data: {
                      message: n
                    }
                  });
                  return M.w("".concat(i, " failed. error:"), e), E(t);
                })) : this._onNoModule();
              }
            }, {
              key: "deleteMessage",
              value: function value(e) {
                var t = this,
                  n = null,
                  o = e[0],
                  i = o.conversationID,
                  a = "",
                  s = [],
                  r = [];
                if (o.conversationType === R.CONV_C2C) n = this.get(6), a = i.replace(R.CONV_C2C, ""), e.forEach(function (e) {
                  e && e.status === On && e.conversationID === i && (e._onlineOnlyFlag || s.push("".concat(e.sequence, "_").concat(e.random, "_").concat(e.time)), r.push(e));
                });else if (o.conversationType === R.CONV_GROUP) n = this.get(7), a = i.replace(R.CONV_GROUP, ""), e.forEach(function (e) {
                  e && e.status === On && e.conversationID === i && (e._onlineOnlyFlag || s.push("".concat(e.sequence)), r.push(e));
                });else if (o.conversationType === R.CONV_SYSTEM) return E({
                  code: k.CANNOT_DELETE_GRP_SYSTEM_NOTICE
                });
                if (!n) return this._onNoModule();
                if (0 === s.length) return this._onMessageDeleted(r);
                30 < s.length && (s = s.slice(0, 30), r = r.slice(0, 30));
                var c = new P("deleteMessage"),
                  u = (c.setMessage("to:".concat(a, " count:").concat(s.length)), "".concat(this._n, ".").concat("deleteMessage"));
                return n.deleteMessage({
                  to: a,
                  keyList: s
                }).then(function (e) {
                  return c.end(), M.i("".concat(u, " ok")), t._onMessageDeleted(r);
                })["catch"](function (e) {
                  c.setError(e).end(), M.w("".concat(u, " failed. error:"), e);
                  e = new L({
                    code: e && e.code ? e.code : k.MSG_DELETE_FAIL,
                    message: e && e.message ? e.message : void 0
                  });
                  return E(e);
                });
              }
            }, {
              key: "_onMessageDeleted",
              value: function value(e) {
                return this.get(11).onMessageDeleted(e), D({
                  messageList: e
                });
              }
            }, {
              key: "translateText",
              value: function value(e) {
                var o = "".concat(this._n, ".").concat("translateText"),
                  t = e.sourceTextList,
                  n = e.sourceLanguage,
                  e = e.targetLanguage,
                  i = new P("translateText");
                return i.setMessage("sourceLanguage:".concat(n, " targetLanguage:").concat(e)), this.req({
                  P: G.TRANSLATE_TEXT,
                  data: {
                    sourceTextList: t,
                    source: n || "auto",
                    target: e,
                    from: this.getMyTinyID(),
                    SDKAppID: this.getSDKAppID()
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.error,
                    n = e.requestID,
                    e = e.translatedTextList;
                  if (0 === t.code) return i.end(), M.i("".concat(o, " ok. requestID:").concat(n)), T({
                    translatedTextList: e
                  });
                  throw y(y({}, t), {}, {
                    requestID: n
                  });
                })["catch"](function (e) {
                  return i.setCode(e.code).setMoreMessage(e.requestID).end(), M.w("".concat(o, " failed. error:"), e), E({
                    code: k.TRANSLATE_TEXT_FAIL
                  });
                });
              }
            }, {
              key: "convertVoiceToText",
              value: function value(e) {
                var t,
                  o,
                  i,
                  n = e.message,
                  e = e.language,
                  a = n.payload.url,
                  n = (n.from === this.getMyUserID() && "out" === n.flow && (a = n.payload.remoteAudioUrl), /\.(wav|pcm|ogg-opus|speex|silk|mp3|m4a|aac|amr)/);
                return n.test(a) ? (n = n.exec(a)[1] || "mp3", t = "16k_zh-PY", e ? "zh (cmn-Hans-CN)" === e ? t = "16k_zh" : "en-US" === e ? t = "16k_en" : "yue-Hant-HK" === e ? t = "16k_yue" : "ja-JP" === e && (t = "16k_ja") : t = "16k_zh-PY", e = "serviceType:".concat(t, " url:").concat(a), o = "".concat(this._n, ".").concat("convertVoiceToText"), M.i("".concat(o, " ").concat(e)), (i = new P("convertVoiceToText")).setMessage(e), this.req({
                  P: G.VOICE_TO_TEXT,
                  data: {
                    url: a,
                    language: t,
                    SDKAppID: this.getSDKAppID(),
                    format: n
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.error,
                    n = e.requestID,
                    e = e.result;
                  if (0 === t.code) return i.end(), M.i("".concat(o, " ok. requestID:").concat(n)), T({
                    result: e
                  });
                  throw y(y({}, t), {}, {
                    requestID: n
                  });
                })["catch"](function (e) {
                  return i.setCode(e.code).setMoreMessage(e.requestID || "").end(), M.w("".concat(o, " failed. error:"), e), E({
                    code: k.VOICE_TO_TEXT_FAIL
                  });
                })) : E({
                  code: k.UNSUPPORTED_VOICE_FORMAT
                });
              }
            }, {
              key: "modifyRemoteMessage",
              value: function value(n) {
                var o = this;
                if (!1 === this.get(29).filterMessage(n)) return n.hasRiskContent = !0, E({
                  code: k.PROFANITY_FOUND,
                  data: {
                    message: n
                  }
                });
                var e = null,
                  t = n.conversationType,
                  i = n.to;
                if (t === R.CONV_C2C) e = this.get(6);else if (t === R.CONV_GROUP) {
                  if (!(e = this.get(7))) return this._onNoModule();
                  if (e.isMessageFromOrToAVChatroom(i)) return E({
                    code: k.MSG_MODIFY_DISABLED_IN_AV,
                    data: {
                      message: n
                    }
                  });
                }
                var a = new P("modifyMessage"),
                  s = (a.setMessage("to:".concat(i)), "".concat(this._n, ".modifyRemoteMessage"));
                return e.modifyRemoteMessage(n).then(function (e) {
                  a.end(), M.i("".concat(s, " ok"));
                  e = o._onModifyRemoteMessageResp(n, e.data);
                  return T({
                    message: e
                  });
                })["catch"](function (e) {
                  var t;
                  return a.setCode(e.code).setMoreMessage(e.message).end(), M.w("".concat(s, " failed. error:"), e), 20027 === e.code ? (t = o._onModifyRemoteMessageResp(n, e.data), E({
                    code: k.MSG_MODIFY_CONFLICT,
                    data: {
                      message: t
                    }
                  })) : E({
                    code: e.code,
                    message: e.message,
                    data: {
                      message: n
                    }
                  });
                });
              }
            }, {
              key: "_onModifyRemoteMessageResp",
              value: function value(e, t) {
                M.d("".concat(this._n, "._onModifyRemoteMessageResp options:"), t);
                var n = e.conversationType,
                  o = e.from,
                  i = e.to,
                  a = e.random,
                  s = e.sequence,
                  e = e.time,
                  r = t.elements,
                  c = t.messageVersion,
                  t = t.cloudCustomData,
                  t = void 0 === t ? "" : t;
                return this.get(11).onMessageModified({
                  conversationType: n,
                  from: o,
                  to: i,
                  time: e,
                  random: a,
                  sequence: s,
                  elements: r,
                  cloudCustomData: t,
                  messageVersion: c
                });
              }
            }, {
              key: "_generateUUID",
              value: function value(e) {
                var t = this.get(12),
                  t = "".concat(t.getSDKAppID(), "-").concat(t.getUserID(), "-").concat(gt()),
                  e = e.name || e.value || e.url || e.tempFilePath,
                  e = e && e.slice(e.lastIndexOf(".") + 1);
                return t = e ? "".concat(t, ".").concat(e) : t;
              }
            }, {
              key: "getMessageOption",
              value: function value(e) {
                return this._messageOptionsMap.get(e);
              }
            }, {
              key: "_getNickAndAvatarByUserID",
              value: function value(e) {
                return this.get(4).getNickAndAvatarByUserID(e);
              }
            }, {
              key: "_getNameCardByGroupID",
              value: function value(e) {
                if (e.conversationType === R.CONV_GROUP) {
                  var t = this.get(7);
                  if (t) return t.getMyNameCardByGroupID(e.to);
                }
                return "";
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._messageOptionsMap.clear();
              }
            }]),
            Vi = (t(Zi, c), e(Zi, [{
              key: "onMsgExtNotify",
              value: function value(e) {
                var o = this,
                  e = e.dataList,
                  t = e.messageInfo,
                  i = e.operateType,
                  n = e.operateResultList,
                  a = e.tinyID,
                  e = e.globalSequence,
                  s = t.clientTime,
                  t = t.random,
                  r = "".concat(a, "-").concat(s, "-").concat(t),
                  c = [],
                  u = [],
                  l = (M.l("".concat(this._n, ".onMsgExtNotify messageID:").concat(r, " operateType:").concat(i, " globalSequence:").concat(e)), this._updateGlobalSeq(r, e), !1),
                  d = !1;
                n.forEach(function (e) {
                  var t = e.extensions,
                    t = void 0 === t ? [] : t,
                    n = e.clearSequence;
                  1 === i ? (l = !0, t.forEach(function (e) {
                    c.push({
                      key: e.key,
                      value: e.value
                    });
                  }), o._updateLocalExt(r, t)) : 2 === i ? (d = !0, t.forEach(function (e) {
                    u.push(e.key);
                  }), o._updateLocalExt(r, t)) : 3 === i && (d = !0, o._hasLocalExt(r) && o._getLocalExt(r).forEach(function (e, t) {
                    e.seq <= n && !S(e.value) && u.push(t);
                  }), o._clearLocalExt(r, n));
                }), l && this.emitOEvt(h.MESSAGE_EXTENSIONS_UPDATED, {
                  messageID: r,
                  extensions: c
                }), d && this.emitOEvt(h.MESSAGE_EXTENSIONS_DELETED, {
                  messageID: r,
                  keyList: u
                });
              }
            }, {
              key: "setMessageExtensions",
              value: function value(e, t) {
                var o,
                  n,
                  i,
                  a,
                  s,
                  r,
                  c,
                  u = "setMessageExtensions";
                return this.canIUse(g.MSG_EXT) ? (o = "".concat(this._n, ".").concat(u), n = e.ID, i = e.conversationID, a = e.sequence, s = e.time, r = d(t), 20 < t.length && (r = t.slice(0, 20), M.w("".concat(o, ". the length of extensions cannot exceed 20."))), t = "convID:".concat(i, " messageID:").concat(n, " sequence:").concat(a, " time:").concat(s, " count:").concat(r.length), (c = new P(u)).setMessage(t), M.l("".concat(o, " ").concat(t)), this._modifyMsgExts(e, r).then(function (e) {
                  var t = e.resultList,
                    n = e.successCount,
                    e = e.failureCount,
                    n = "successCount:".concat(n, " failCount:").concat(e);
                  return c.setMoreMessage(n).end(), M.l("".concat(o, " ok. ").concat(n)), T({
                    extensions: t
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                })) : this.noUse(u);
              }
            }, {
              key: "getMessageExtensions",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r,
                  c = this,
                  u = "getMessageExtensions";
                return this.canIUse(g.MSG_EXT) ? (t = "".concat(this._n, ".").concat(u), n = e.ID, a = e.conversationID, o = e.sequence, i = e.time, a = "convID:".concat(a, " messageID:").concat(n, " sequence:").concat(o, " time:").concat(i), (s = new P(u)).setMessage(a), r = void M.l("".concat(t, " ").concat(a)), this.getMsgExtsMap.has(n) && (r = this._getGlobalSeq(n)), this._getMsgExts(e, r).then(function (e) {
                  return s.end(), M.l("".concat(t, " ok. extCount:").concat(e.length)), N(r) && 0 < e.length && c.getMsgExtsMap.set(n, 1), T({
                    extensions: e
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse(u);
              }
            }, {
              key: "deleteMessageExtensions",
              value: function value(e, t) {
                var i,
                  n,
                  a,
                  o,
                  s,
                  r,
                  c,
                  u = "deleteMessageExtensions";
                return this.canIUse(g.MSG_EXT) ? (i = "".concat(this._n, ".").concat(u), n = [], a = 3, S(t) || (a = 2, t.forEach(function (e) {
                  n.push({
                    key: e,
                    value: "",
                    seq: 0
                  });
                })), t = e.ID, r = e.conversationID, o = e.sequence, s = e.time, r = "convID:".concat(r, " messageID:").concat(t, " sequence:").concat(o, " time:").concat(s, " operateType:").concat(a), (c = new P(u)).setMessage(r), M.l("".concat(i, " ").concat(r)), this._modifyMsgExts(e, n, a).then(function (e) {
                  var t = e.resultList,
                    n = e.successCount,
                    e = e.failureCount,
                    o = "";
                  return 2 === a && (o = "success count:".concat(n, " fail count:").concat(e)), c.setMoreMessage("".concat(o)).end(), M.l("".concat(i, " ok. ").concat(o)), T({
                    extensions: t
                  });
                })["catch"](function (e) {
                  return c.setError(e).end(), M.e("".concat(i, " failed. error:"), e), E(e);
                })) : this.noUse(u);
              }
            }, {
              key: "_modifyMsgExts",
              value: function value(n, e) {
                var o = this,
                  t = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1,
                  i = Nt(n.to) ? R.CONV_TOPIC : n.conversationType,
                  a = void 0,
                  s = (3 !== t && (a = this._getReqExts(n, e)), null);
                switch (i) {
                  case R.CONV_C2C:
                    s = this.get(6);
                    break;
                  case R.CONV_GROUP:
                    s = this.get(7);
                    break;
                  case R.CONV_TOPIC:
                    s = this.get(10);
                    break;
                  default:
                    return E({
                      code: k.NO_MODULE
                    });
                }
                return s.modifyMsgExts(n, a, t).then(function (e) {
                  var e = e.data,
                    t = e.extensions,
                    e = e.seq,
                    i = [],
                    a = 0,
                    s = 0,
                    r = [];
                  return (t = S(t) ? [] : t).forEach(function (e) {
                    var t = e.errorCode,
                      e = e.extension,
                      n = e.key,
                      o = e.value,
                      e = e.seq;
                    i.push({
                      code: t,
                      key: n,
                      value: o
                    }), 0 === t ? a++ : s++, r.push({
                      key: n,
                      value: o,
                      seq: e
                    });
                  }), o._updateGlobalSeq(n.ID, e), 0 < r.length && (o._updateLocalExt(n.ID, r), r = null), {
                    resultList: i,
                    successCount: a,
                    failureCount: s
                  };
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "_getReqExts",
              value: function value(e, t) {
                var o,
                  i = [];
                return this._hasLocalExt(e.ID) ? (o = this._getLocalExt(e.ID), t.forEach(function (e) {
                  var t = e.key,
                    e = e.value,
                    n = 0;
                  o.has(t) && (n = o.get(t).seq), i.push({
                    key: t,
                    value: e,
                    seq: n
                  });
                })) : t.forEach(function (e) {
                  var t = e.key,
                    e = e.value;
                  i.push({
                    key: t,
                    value: e,
                    seq: 0
                  });
                }), i;
              }
            }, {
              key: "_getMsgExts",
              value: function value(i, e) {
                var a = this,
                  s = "".concat(this._n, "._getMsgExts"),
                  r = i.ID,
                  t = i.to,
                  n = null;
                switch (Nt(t) ? R.CONV_TOPIC : i.conversationType) {
                  case R.CONV_C2C:
                    n = this.get(6);
                    break;
                  case R.CONV_GROUP:
                    n = this.get(7);
                    break;
                  case R.CONV_TOPIC:
                    n = this.get(10);
                    break;
                  default:
                    return E({
                      code: k.NO_MODULE
                    });
                }
                return n.getMessageExtensions(i, e).then(function (e) {
                  var e = e.data,
                    t = e.extensions,
                    n = e.completeFlag,
                    o = e.globalSequence,
                    e = e.clearSequence,
                    t = S(t) ? [] : t;
                  return M.l("".concat(s, " ok. completeFlag:").concat(n, " globalSequence:").concat(o, " clearSequence:").concat(e, " count:").concat(t.length)), a._updateLocalExt(r, t), a._clearLocalExt(r, e), a._updateGlobalSeq(r, o), 1 !== n ? (e = t.slice(-1)[0].seq + 1, a._getMsgExts(i, e)) : a._getLocalExtList(r);
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "_hasLocalExt",
              value: function value(e) {
                return this.msgExtMap.has(e);
              }
            }, {
              key: "_getLocalExt",
              value: function value(e) {
                return this.msgExtMap.get(e);
              }
            }, {
              key: "_updateLocalExt",
              value: function value(e, t) {
                this._hasLocalExt(e) || this.msgExtMap.set(e, new Map());
                var o = this._getLocalExt(e);
                t.forEach(function (e) {
                  var t = e.key,
                    n = e.value,
                    e = e.seq;
                  o.set(t, {
                    value: void 0 === n ? "" : n,
                    seq: e
                  });
                });
              }
            }, {
              key: "_clearLocalExt",
              value: function value(e, n) {
                var o;
                n <= 0 || !this._hasLocalExt(e) || (o = this._getLocalExt(e)).forEach(function (e, t) {
                  e.seq <= n && o["delete"](t);
                });
              }
            }, {
              key: "_getLocalExtList",
              value: function value(e) {
                var n = [];
                return this._hasLocalExt(e) && this._getLocalExt(e).forEach(function (e, t) {
                  e = e.value;
                  S(e) || n.push({
                    key: t,
                    value: e
                  });
                }), n;
              }
            }, {
              key: "_getGlobalSeq",
              value: function value(e) {
                return this.globalSeqMap.get(e);
              }
            }, {
              key: "_updateGlobalSeq",
              value: function value(e, t) {
                this.globalSeqMap.set(e, t);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this.msgExtMap.clear(), this.globalSeqMap.clear(), this.getMsgExtsMap.clear();
              }
            }])),
            Bi = (t(Xi, c), e(Xi, [{
              key: "onReactionNotifyList",
              value: function value(e) {
                var a = this,
                  e = (e || {}).dataList;
                (void 0 === e ? [] : e).forEach(function (e) {
                  var t = e.C2CMessageInfo,
                    n = e.groupMessageInfo,
                    n = void 0 === n ? {} : n,
                    e = e.reactionList,
                    e = void 0 === e ? [] : e,
                    t = y(y({}, void 0 === t ? {} : t), n),
                    n = t.tinyID,
                    o = t.clientTime,
                    t = t.random,
                    n = "".concat(n, "-").concat(o, "-").concat(t),
                    i = [];
                  e.forEach(function (e) {
                    N(e.userIDList) && (e.userIDList = [], e.count = 0), i.push.apply(i, d(e.userIDList));
                  }), M.l("".concat(a._n, ".onReactionNotifyList messageID:").concat(n, " reactionList:").concat(e.length)), a._handleReactionSummary([{
                    messageID: n,
                    reactionList: e
                  }], i).then(function (e) {
                    a.emitOEvt(h.MESSAGE_REACTIONS_UPDATED, y({}, e[0]));
                  });
                });
              }
            }, {
              key: "onReactionNotify",
              value: function value(e) {
                var e = e.dataList || {},
                  t = e.C2CMessageInfo,
                  n = e.groupMessageInfo,
                  n = void 0 === n ? {} : n,
                  o = e.reactionID,
                  e = e.operateType,
                  t = y(y({}, void 0 === t ? {} : t), n),
                  n = t.tinyID,
                  i = t.clientTime,
                  t = t.random,
                  n = "".concat(n, "-").concat(i, "-").concat(t),
                  i = (M.l("".concat(this._n, ".onReactionNotify messageID:").concat(n, " reactionID:").concat(o, " operateType:").concat(e)), 1 === e ? this._addReactedByMyselfMap(n, o) : this._removeReactedByMyselfMap(n, o), "".concat(n, "-").concat(o));
                this._reactionInfoMap.has(i) && ((t = this._reactionInfoMap.get(i)).reactedByMyself = 1 === e, this.emitOEvt(h.MESSAGE_REACTIONS_UPDATED, {
                  messageID: n,
                  reactionList: [t]
                }));
              }
            }, {
              key: "addMessageReaction",
              value: function value(t, n) {
                var o,
                  e,
                  i,
                  a,
                  s = this,
                  r = "addMessageReaction";
                return this.canIUse(g.MSG_REACTION) ? (o = "".concat(this._n, ".").concat(r), a = t.ID, e = t.conversationID, e = "convID:".concat(e, " messageID:").concat(a, " reactionID:").concat(n), (i = new P(r)).setMessage(e), M.l("".concat(o, " ").concat(e)), a = this._createReactionOperationPack(t, n, 1), this._addReactedByMyselfMap(t.ID, n), this.req(a).then(function () {
                  return i.end(), M.l("".concat(o, " ok.")), T();
                })["catch"](function (e) {
                  return s._removeReactedByMyselfMap(t.ID, n), i.setError(e).end(), M.e("".concat(o, " failed. error:"), e), E(e);
                })) : this.noUse(r);
              }
            }, {
              key: "removeMessageReaction",
              value: function value(e, t) {
                var n,
                  o,
                  i,
                  a,
                  s = "removeMessageReaction";
                return this.canIUse(g.MSG_REACTION) ? (n = "".concat(this._n, ".").concat(s), a = e.ID, o = e.conversationID, o = "convID:".concat(o, " messageID:").concat(a, " reactionID:").concat(t), (i = new P(s)).setMessage(o), M.l("".concat(n, " ").concat(o)), a = this._createReactionOperationPack(e, t, 2), this._removeReactedByMyselfMap(e.ID, t), this.req(a).then(function () {
                  return i.end(), M.l("".concat(n, " ok.")), T();
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(n, " failed. error:"), e), E(e);
                })) : this.noUse(s);
              }
            }, {
              key: "getMessageReactions",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r = this,
                  c = "getMessageReactions";
                return this.canIUse(g.MSG_REACTION) ? (t = "".concat(this._n, ".").concat(c), n = e.messageList, s = e.maxUserCountPerReaction, o = n[0].conversationID, o = "convID:".concat(o, " maxUserCountPerReaction:").concat(s, " msgCount:").concat(n.length), (i = new P(c)).setMessage(o), M.l("".concat(t, " ").concat(o)), a = new Map(), s = this._createReactionSummaryPack(y(y({}, e), {}, {
                  messageIDMap: a
                })), this.req(s).then(function (e) {
                  var e = e.data.resultList,
                    o = [],
                    i = [];
                  return (void 0 === e ? [] : e).forEach(function (e) {
                    var t = e.messageKey,
                      t = void 0 === t ? void 0 : t,
                      n = e.messageSequence,
                      n = void 0 === n ? void 0 : n,
                      e = e.reactionList,
                      e = void 0 === e ? [] : e,
                      n = N(t) ? a.get(n) : a.get(t);
                    o.push({
                      messageID: n,
                      reactionList: e
                    }), e.forEach(function (e) {
                      i.push.apply(i, d(e.userIDList));
                    });
                  }), r._handleReactionSummary(o, i);
                }).then(function (e) {
                  return i.end(), M.l("".concat(t, " ok.")), a.clear(), T({
                    resultList: e
                  });
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse(c);
              }
            }, {
              key: "getAllUserListOfMessageReaction",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r,
                  c,
                  u = this,
                  l = "getAllUserListOfMessageReaction";
                return this.canIUse(g.MSG_REACTION) ? (t = "".concat(this._n, ".").concat(l), a = e.message, n = e.reactionID, o = e.nextSeq, i = e.count, c = a.ID, a = a.conversationID, a = "convID:".concat(a, " messageID:").concat(c, " reactionID:").concat(n, " nextSeq:").concat(o, " count:").concat(i), (s = new P(l)).setMessage(a), M.l("".concat(t, " ").concat(a)), r = {
                  userList: [],
                  nextSeq: 0,
                  isCompleted: !1
                }, c = this._createReactionUserListPack(e), this.req(c).then(function (e) {
                  var e = e.data,
                    t = e.userIDList,
                    t = void 0 === t ? [] : t,
                    e = e.nextSeq,
                    e = void 0 === e ? 0 : e;
                  return r.nextSeq = e, r.isCompleted = 0 === e, u.get(4).getUserNickAndAvatar(t);
                }).then(function (e) {
                  return r.userList = e, s.end(), M.l("".concat(t, " ok.")), T(r);
                })["catch"](function (e) {
                  return s.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse(l);
              }
            }, {
              key: "_createReactionOperationPack",
              value: function value(e, t, n) {
                var o,
                  i,
                  a = void 0,
                  t = {
                    reactionID: t,
                    userIDList: [this.getMyUserID()]
                  };
                return e.conversationType === R.CONV_C2C && (o = this.get(6), a = 1 === n ? G.ADD_C2C_MSG_REACTION : G.RM_C2C_MSG_REACTION, t.from = e.from, t.to = e.to, t.messageKey = o.getMessageKey(e)), e.conversationType === R.CONV_GROUP && (o = void 0, i = e.to, Nt(e.to) && (i = jt(o = e.to)), a = 1 === n ? G.ADD_GRP_MSG_REACTION : G.RM_GRP_MSG_REACTION, t.groupID = i, t.topicID = o, t.messageSequence = e.sequence), {
                  P: a,
                  data: t
                };
              }
            }, {
              key: "_createReactionSummaryPack",
              value: function value(e) {
                var n,
                  t,
                  o,
                  i = e.messageList,
                  a = e.maxUserCountPerReaction,
                  a = void 0 === a ? 10 : a,
                  s = e.messageIDMap,
                  e = i[0],
                  r = void 0,
                  c = void 0;
                return e.conversationType === R.CONV_C2C && (n = this.get(6), t = i.map(function (e) {
                  var t = n.getMessageKey(e);
                  return s.set(t, e.ID), t;
                }), r = G.GET_C2C_MSG_REACTIONS, c = {
                  from: e.from,
                  to: e.to,
                  messageKeyList: t,
                  count: a
                }), e.conversationType === R.CONV_GROUP && (t = void 0, o = e.to, Nt(e.to) && (o = jt(t = e.to)), e = i.map(function (e) {
                  return s.set(e.sequence, e.ID), e.sequence;
                }), r = G.GET_GRP_MSG_REACTIONS, c = {
                  groupID: o,
                  topicID: t,
                  messageSequenceList: e,
                  count: a
                }), {
                  P: r,
                  data: c
                };
              }
            }, {
              key: "_createReactionUserListPack",
              value: function value(e) {
                var t = e.message,
                  n = e.reactionID,
                  o = e.nextSeq,
                  e = e.count,
                  e = void 0 === e ? 100 : e,
                  i = void 0,
                  n = {
                    reactionID: n,
                    nextSeq: void 0 === o ? 0 : o,
                    count: 100 < e ? 100 : e
                  };
                return t.conversationType === R.CONV_C2C && (o = this.get(6), i = G.GET_C2C_MSG_REACTION_USER_LIST, n.from = t.from, n.to = t.to, n.messageKey = o.getMessageKey(t)), t.conversationType === R.CONV_GROUP && (e = void 0, o = t.to, Nt(t.to) && (o = jt(e = t.to)), i = G.GET_GRP_MSG_REACTION_USER_LIST, n.groupID = o, n.topicID = e, n.messageSequence = t.sequence), {
                  P: i,
                  data: n
                };
              }
            }, {
              key: "_handleReactionSummary",
              value: function value(t, e) {
                var c = this;
                return this.get(4).getUserNickAndAvatar(e).then(function (r) {
                  var e = [];
                  return t.forEach(function (a) {
                    var s = [];
                    a.reactionList.forEach(function (e) {
                      var t = e.reactionID,
                        n = e.count,
                        o = e.userIDList,
                        e = e.reactedByMyself,
                        e = void 0 === e ? void 0 : e,
                        i = [],
                        o = (o.forEach(function (t) {
                          r.forEach(function (e) {
                            t === e.userID && i.push(e);
                          });
                        }), {
                          reactionID: t,
                          totalUserCount: n,
                          partialUserList: i,
                          reactedByMyself: c._computeReactedByMyself({
                            reactedByMyself: e,
                            messageID: a.messageID,
                            reactionID: t
                          })
                        });
                      s.push(o), N(e) && !c._reactedByMyselfMap.has(a.messageID) && (n = "".concat(a.messageID, "-").concat(t), c._reactionInfoMap.set(n, o));
                    }), e.push({
                      messageID: a.messageID,
                      reactionList: s
                    });
                  }), e;
                });
              }
            }, {
              key: "_addReactedByMyselfMap",
              value: function value(e, t) {
                this._reactedByMyselfMap.has(e) || this._reactedByMyselfMap.set(e, []);
                e = this._reactedByMyselfMap.get(e);
                -1 === e.indexOf(t) && e.push(t);
              }
            }, {
              key: "_removeReactedByMyselfMap",
              value: function value(e, t) {
                this._reactedByMyselfMap.has(e) && -1 < (t = (e = this._reactedByMyselfMap.get(e)).indexOf(t)) && e.splice(t, 1);
              }
            }, {
              key: "_computeReactedByMyself",
              value: function value(e) {
                var t = e.reactedByMyself,
                  n = e.messageID,
                  e = e.reactionID;
                return N(t) ? !!this._reactedByMyselfMap.has(n) && this._reactedByMyselfMap.get(n).includes(e) : 1 === t;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._reactedByMyselfMap.clear(), this._reactionInfoMap.clear();
              }
            }])),
            Hi = (t(zi, c), e(zi, [{
              key: "sendMessage",
              value: function value(e) {
                var o = this,
                  i = this._createMsg(e);
                if (null === i) return E({
                  code: k.MSG_SEND_FAIL
                });
                this._addSendMessageTotalCount(i);
                var a = Date.now();
                return this.get(11).setMessageRandom(i), this._sendComboMessage(i, e).then(function (e) {
                  var e = e.data,
                    t = e.time,
                    n = e.sequence,
                    e = e.readReceiptCode,
                    e = (A(e) && 0 !== e && (new P("sendMessageWithReceipt").setMessage("from:".concat(i.from, " to:").concat(i.to, " sequence:").concat(n, " readReceiptCode:").concat(e)).end(), M.w("".concat(o._n, ".sendMessage readReceiptCode:").concat(e, " message:").concat(o.getErrMsg(e)))), o._addSendMessageSuccessCount(i, a), o.get(11)),
                    t = (i.status = On, i.time = t, i.conversationType === R.CONV_GROUP && (i.sequence = n), e.appendToMessageList(i), i);
                  return !0 === i._isExcludedFromLastMessage && (t = ""), e.onMessageSent({
                    conversationOptionsList: [{
                      conversationID: i.conversationID,
                      unreadCount: 0,
                      type: i.conversationType,
                      subType: i.conversationSubType,
                      lastMessage: t
                    }]
                  }), T({
                    message: i
                  });
                })["catch"](function (e) {
                  return o._onSendMessageFailed(i, e);
                });
              }
            }, {
              key: "_sendComboMessage",
              value: function value(e, t) {
                var n = this._m.get(20),
                  o = "";
                return e.conversationType === R.CONV_C2C && (o = "".concat(a.NAME.OPEN_IM, ".").concat(G.SEND_C2C_MSG)), e.conversationType === R.CONV_GROUP && (o = "".concat(a.NAME.GRP, ".").concat(G.SEND_GRP_MSG)), n.sendComboMessage({
                  servcmd: o,
                  data: t
                });
              }
            }, {
              key: "_createMsg",
              value: function value(e) {
                var t = "".concat(this._n, "._createMsg"),
                  n = null;
                try {
                  var o,
                    i = this.getMyUserID(),
                    a = {};
                  a.senderTinyID = this.getMyTinyID(), a.currentUser = i, a.from = e.From_Account || i, e.GroupId ? (a.conversationID = "".concat(R.CONV_GROUP).concat(e.GroupId), a.conversationType = R.CONV_GROUP, a.to = e.GroupId) : e.To_Account && (a.conversationID = "".concat(R.CONV_C2C).concat(e.To_Account), a.conversationType = R.CONV_C2C, a.to = e.To_Account), a.time = e.MsgTimeStamp || 0, a.random = e.Random || e.MsgRandom || 0, a.priority = e.MsgPriority, C(e.CloudCustomData) && 0 < e.CloudCustomData.length && (a.cloudCustomData = e.CloudCustomData), O(e.SendMsgControl) && (a.messageControlInfo = {}, e.SendMsgControl.includes("NoUnread") && (a.messageControlInfo.excludedFromUnreadCount = 1), e.SendMsgControl.includes("NoLastMsg")) && (a.messageControlInfo.excludedFromLastMessage = 1), a.conversationType === R.CONV_GROUP && O(e.To_Account) && 0 < e.To_Account.length && (o = e.To_Account, 50 < e.To_Account.length && (o = e.To_Account.slice(0, 50), M.w("".concat(t, " To_Account must be less than or equal to 50."))), a.receiverList = d(o), e.To_Account = d(o)), 1 !== e.IsNeedReadReceipt && 1 !== e.NeedReadReceipt || (a.needReadReceipt = !0), 1 === e.SupportMessageExtension && (a.isSupportExtension = !0), (n = new Do(a)).status = An, e.MsgClientTime = n.clientTime, n.conversationType === R.CONV_C2C && (e.MsgSeq = n.sequence);
                  for (var s, r = e.MsgBody.length, c = 0; c < r; c++) "TIMTextElem" === (s = e.MsgBody[c]).MsgType ? n.setTextElement(s.MsgContent.Text) : "TIMCustomElem" === s.MsgType ? n.setCustomElement({
                    data: s.MsgContent.Data || "",
                    description: s.MsgContent.Desc || "",
                    extension: s.MsgContent.Ext || ""
                  }) : "TIMFaceElem" === s.MsgType && n.setFaceElement({
                    index: s.MsgContent.Index,
                    data: s.MsgContent.Data
                  });
                  var u = n.getElements();
                  n.payload = u[0].content, n.type = u[0].type;
                } catch (e) {
                  n = null, M.e("".concat(t, " failed. error:"), e);
                }
                return n;
              }
            }, {
              key: "_onSendMessageFailed",
              value: function value(e, t) {
                e.status = Nn, this.get(11).deleteMessageRandom(e), this._addSendMessageFailCountOnUser(e, t);
                var n = new P("sendMessage"),
                  o = "head.seq:".concat(t.data.headSeq, "  type:").concat(e.type, " from:").concat(e.from, " to:").concat(e.to);
                return n.setMessage(o).setError(t).end(), M.e("".concat(this._n, "._onSendMessageFailed ").concat(o, " error:"), t), E(new L({
                  code: t && t.code ? t.code : k.MSG_SEND_FAIL,
                  message: t && t.message ? t.message : void 0,
                  data: {
                    message: e
                  }
                }));
              }
            }, {
              key: "_getSendMessageSpecifiedKey",
              value: function value(e) {
                if (e.conversationType === R.CONV_C2C) return Kn;
                if (e.conversationType === R.CONV_GROUP) {
                  var e = this.get(7).getLocalGroupProfile(e.to);
                  if (e) return e = e.type, At(e) ? Yn : Wn;
                }
              }
            }, {
              key: "_addSendMessageTotalCount",
              value: function value(e) {
                e = this._getSendMessageSpecifiedKey(e);
                e && this.get(26).addTotalCount(e);
              }
            }, {
              key: "_addSendMessageSuccessCount",
              value: function value(e, t) {
                var n,
                  e = this._getSendMessageSpecifiedKey(e);
                e && ((n = this.get(26)).addSuccessCount(e), n.addCost(e, tn(t, !1)));
              }
            }, {
              key: "_addSendMessageFailCountOnUser",
              value: function value(e, t) {
                var t = t.code,
                  t = void 0 === t ? -1 : t,
                  n = this.get(26),
                  e = this._getSendMessageSpecifiedKey(e);
                qi(t) && e && n.addFailedCountOfUserSide(e);
              }
            }])),
            Ki = (t(Ji, c), e(Ji, [{
              key: "registerPlugin",
              value: function value(t) {
                var n = this,
                  o = "0";
                Object.keys(t).forEach(function (e) {
                  n.plugins[e] = t[e], "tim-upload-plugin" === e && "function" == typeof t[e].getVersion && (o = t[e].getVersion());
                }), new P("registerPlugin").setMessage("".concat(Object.keys(t))).setMoreMessage("version:".concat(o)).end();
              }
            }, {
              key: "getPlugin",
              value: function value(e) {
                return this.plugins[e];
              }
            }, {
              key: "reset",
              value: function value() {}
            }])),
            Wi = (t(ji, c), e(ji, [{
              key: "_init",
              value: function value() {
                this._startSync({
                  cookie: this._cookie,
                  syncFlag: 0,
                  isOnlineSync: 0
                });
              }
            }, {
              key: "_startSync",
              value: function value(e) {
                var i = this,
                  t = e.cookie,
                  n = e.syncFlag,
                  o = e.isOnlineSync,
                  a = "".concat(this._n, "._startSync"),
                  s = (M.l("".concat(a, " options:"), e), new P("syncUnread"));
                s.setMessage(JSON.stringify(e)), this.req({
                  P: G.SYNC_UNREAD_MSG,
                  data: {
                    cookie: t,
                    syncFlag: n,
                    isOnlineSync: o
                  }
                }).then(function (e) {
                  var t = e.data,
                    n = t.cookie,
                    t = t.syncFlag,
                    o = "$cookie:".concat(n, " syncFlag:").concat(t);
                  M.l("".concat(a, " ok. ").concat(o)), i._cookie = n, s.setMoreMessage(o).end(), S(n) || (0 === t || 1 === t ? (i._dispatch(y(y({}, e.data), {}, {
                    isSyncingEnded: !1
                  })), i._startSync({
                    cookie: n,
                    syncFlag: t,
                    isOnlineSync: 0
                  })) : 2 === t && i._dispatch(y(y({}, e.data), {}, {
                    isSyncingEnded: !0
                  })));
                })["catch"](function (e) {
                  s.setError(e).end(), M.e("".concat(a, " failed. error:"), e);
                });
              }
            }, {
              key: "_dispatch",
              value: function value(e) {
                e.eventArray && this.get(20).onMessage({
                  head: {},
                  body: {
                    eventArray: e.eventArray,
                    isInstantMessage: this._onlineSyncFlag,
                    isSyncingEnded: e.isSyncingEnded
                  }
                }), this.get(6).onNewMessage({
                  dataList: e.messageList,
                  isInstantMessage: !!e.isSyncingEnded && this._onlineSyncFlag,
                  C2CRemainingUnreadList: e.C2CRemainingUnreadList,
                  C2CPairUnreadList: e.C2CPairUnreadList,
                  isSyncingEnded: e.isSyncingEnded
                });
              }
            }, {
              key: "syncOnNeed",
              value: function value() {
                M.l("".concat(this._n, ".syncOnNeed cookie:").concat(this._cookie)), this._onlineSyncFlag = !0, this._startSync({
                  cookie: this._cookie,
                  syncFlag: 0,
                  isOnlineSync: 1
                });
              }
            }, {
              key: "syncOnReconnected",
              value: function value() {
                M.l("".concat(this._n, ".syncOnReconnected cookie:").concat(this._cookie)), this._onlineSyncFlag = !0, this._startSync({
                  cookie: this._cookie,
                  syncFlag: 0,
                  isOnlineSync: 0
                });
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._onlineSyncFlag = !1, this._cookie = "";
              }
            }])),
            Yi = {
              req: {
                toAccount: "To_Account",
                fromAccount: "From_Account",
                to: "To_Account",
                from: "From_Account",
                groupID: "GroupId",
                groupAtUserID: "GroupAt_Account",
                extension: "Ext",
                data: "Data",
                description: "Desc",
                elements: "MsgBody",
                sizeType: "Type",
                downloadFlag: "Download_Flag",
                thumbUUID: "ThumbUUID",
                videoUUID: "VideoUUID",
                remoteAudioUrl: "Url",
                remoteVideoUrl: "VideoUrl",
                videoUrl: "",
                imageUrl: "URL",
                fileUrl: "Url",
                uuid: "UUID",
                priority: "MsgPriority",
                receiverUserID: "To_Account",
                receiverGroupID: "GroupId",
                messageSender: "SenderId",
                messageReceiver: "ReceiverId",
                nick: "From_AccountNick",
                avatar: "From_AccountHeadurl",
                messageNumber: "MsgNum",
                pbDownloadKey: "PbMsgKey",
                downloadKey: "JsonMsgKey",
                applicationType: "PendencyType",
                userIDList: "To_Account",
                groupNameList: "GroupName",
                userID: "To_Account",
                groupAttributeList: "GroupAttr",
                mainSequence: "AttrMainSeq",
                avChatRoomKey: "BytesKey",
                attributeControl: "AttrControl",
                sequence: "seq",
                messageControlInfo: "SendMsgControl",
                updateSequence: "UpdateSeq",
                clientTime: "MsgClientTime",
                sequenceList: "MsgSeqList",
                topicID: "TopicId",
                customData: "CustomString",
                isSupportTopic: "SupportTopic",
                isWebUniapp: "is_web_uniapp",
                isSupportExtension: "SupportMessageExtension",
                messageSequence: "MsgSeq",
                messageKey: "MsgKey",
                startSequence: "startSeq",
                simplifiedMessage: "DownsizeFlag",
                isRelayMessage: "IsRelayMsg",
                reactionID: "Reaction",
                messageSequenceList: "MsgSeqList",
                messageKeyList: "MsgKeyList",
                cmConfigID: "CustomModerationConfigID"
              },
              res: {
                MsgPriority: "priority",
                ThumbUUID: "thumbUUID",
                VideoUUID: "videoUUID",
                Download_Flag: "downloadFlag",
                GroupId: "groupID",
                Member_Account: "userID",
                MsgList: "messageList",
                SyncFlag: "syncFlag",
                To_Account: "to",
                From_Account: "from",
                MsgSeq: "sequence",
                MsgRandom: "random",
                MsgTime: "time",
                MsgTimeStamp: "time",
                MsgContent: "content",
                MsgBody: "elements",
                From_AccountNick: "nick",
                From_AccountHeadurl: "avatar",
                GroupWithdrawInfoArray: "revokedInfos",
                GroupReadInfoArray: "groupMessageReadNotice",
                LastReadMsgSeq: "lastMessageSeq",
                WithdrawC2cMsgNotify: "c2cMessageRevokedNotify",
                C2cWithdrawInfoArray: "revokedInfos",
                C2cReadedReceipt: "c2cMessageReadReceipt",
                ReadC2cMsgNotify: "c2cMessageReadNotice",
                LastReadTime: "peerReadTime",
                MsgRand: "random",
                MsgType: "type",
                MsgShow: "messageShow",
                NextMsgSeq: "nextMessageSeq",
                FaceUrl: "avatar",
                ProfileDataMod: "profileModify",
                Profile_Account: "userID",
                ValueBytes: "value",
                ValueNum: "value",
                NoticeSeq: "noticeSequence",
                NotifySeq: "notifySequence",
                MsgFrom_AccountExtraInfo: "messageFromAccountExtraInformation",
                Operator_Account: "operatorID",
                OpType: "operationType",
                ReportType: "operationType",
                UserId: "userID",
                User_Account: "userID",
                List_Account: "userIDList",
                MsgOperatorMemberExtraInfo: "operatorInfo",
                MsgMemberExtraInfo: "memberInfoList",
                ImageUrl: "avatar",
                NickName: "nick",
                MsgGroupNewInfo: "newGroupProfile",
                MsgAppDefinedData: "groupCustomField",
                Owner_Account: "ownerID",
                GroupFaceUrl: "avatar",
                GroupIntroduction: "introduction",
                GroupNotification: "notification",
                GroupApplyJoinOption: "joinOption",
                MsgKey: "messageKey",
                GroupInfo: "groupProfile",
                ShutupTime: "muteTime",
                Desc: "description",
                Ext: "extension",
                GroupAt_Account: "groupAtUserID",
                MsgNum: "messageNumber",
                PbMsgKey: "pbDownloadKey",
                JsonMsgKey: "downloadKey",
                MsgModifiedFlag: "isModified",
                PendencyItem: "applicationItem",
                PendencyType: "applicationType",
                AddTime: "time",
                AddSource: "source",
                AddWording: "wording",
                ProfileImImage: "avatar",
                PendencyAdd: "friendApplicationAdded",
                FrienPencydDel_Account: "friendApplicationDeletedUserIDList",
                Peer_Account: "userID",
                GroupAttr: "groupAttributeList",
                GroupAttrAry: "groupAttributeList",
                AttrMainSeq: "mainSequence",
                seq: "sequence",
                GroupAttrOption: "groupAttributeOption",
                BytesChangedKeys: "changedKeyList",
                GroupAttrInfo: "groupAttributeList",
                GroupAttrSeq: "mainSequence",
                PushChangedAttrValFlag: "isWithChangedAttributeInfo",
                SubKeySeq: "sequence",
                Val: "value",
                MsgGroupFromCardName: "senderNameCard",
                MsgGroupFromNickName: "senderNick",
                C2cNick: "peerNick",
                C2cImage: "peerAvatar",
                SendMsgControl: "messageControlInfo",
                NoLastMsg: "excludedFromLastMessage",
                NoUnread: "excludedFromUnreadCount",
                UpdateSeq: "updateSequence",
                MuteNotifications: "muteFlag",
                MsgClientTime: "clientTime",
                TinyId: "tinyID",
                GroupMsgReceiptList: "readReceiptList",
                ReadNum: "readCount",
                UnreadNum: "unreadCount",
                TopicId: "topicID",
                MillionGroupFlag: "communityType",
                SupportTopic: "isSupportTopic",
                MsgTopicNewInfo: "newTopicInfo",
                ShutupAll: "muteAllMembers",
                CustomString: "customData",
                TopicFaceUrl: "avatar",
                TopicIntroduction: "introduction",
                TopicNotification: "notification",
                TopicIdArray: "topicIDList",
                MsgVersion: "messageVersion",
                C2cMsgModNotifys: "c2cMessageModified",
                GroupMsgModNotifys: "groupMessageModified",
                ApplyJoinOption: "joinOption",
                MsgFlag: "messageRemindType",
                AtInfoList: "groupAtInfoList",
                AtFlagList: "groupAtType",
                AtMsgSeq: "sequence",
                BanDuration: "duration",
                BanDescription: "reason",
                NotVisible: "invisible",
                BytesTag: "tag",
                BytesValue: "value",
                RptBytesValue: "value",
                LatestSeq: "globalSequence",
                ClearSeq: "clearSequence",
                SupportMessageExtension: "isSupportExtension",
                ExtensionList: "extensions",
                GroupCounter: "counterList",
                Revoker_Account: "revoker",
                MsgExtensionNotify: "messageExtensionNotify",
                ExtensionC2cMsgInfo: "messageInfo",
                ExtensionGroupMsgInfo: "messageInfo",
                MsgOptType: "operateType",
                SetKVInfo: "operateResultList",
                DeleteKVInfo: "operateResultList",
                ClearKVInfo: "operateResultList",
                MsgKeyValue: "extensions",
                ClearMsgSeq: "clearSequence",
                MsgLastSeq: "globalSequence",
                InviteJoinOption: "inviteOption",
                MemberList_Account: "inviteeList",
                MsgMemberExtraInfoList: "inviteeInfoList",
                E: "event",
                GInf: "groupProfile",
                MCT: "clientTime",
                MR: "random",
                MP: "priority",
                MTS: "time",
                GId: "groupID",
                MS: "sequence",
                CCD: "cloudCustomData",
                F_Account: "from",
                F_Hd: "avatar",
                F_NN: "nick",
                GN: "groupName",
                GT: "groupType",
                IsSys: "isSystemMessage",
                OpInf: "operatorInfo",
                Img: "avatar",
                NN: "nick",
                OnlineInf: "onlineMemberInfo",
                ET: "expireTime",
                Num: "onlineMemberNum",
                Opt: "operationType",
                O_Account: "operatorID",
                RT: "operationType",
                UDF: "userDefinedField",
                L_Account: "userIDList",
                IsPlaceMsg: "isPlaceMessage",
                MsgCheckResult: "checkResult",
                Results: "resultList",
                Reaction: "reactionID",
                Reaction_Account: "userIDList",
                MsgReactionNotifyList: "messageReactionNotifyList",
                MsgReactionNotify: "messageReactionNotify",
                MsgReactionSummary: "reactionList",
                C2CMsgInfo: "C2CMessageInfo",
                GroupMsgInfo: "groupMessageInfo",
                int32_err_code: "errorCode",
                str_err_msg: "errorMsg",
                MsgDropReason: "messageDropReason",
                ReactedByMe: "reactedByMyself",
                Level: "messageRemindType",
                PeerReadTime: "timestamp",
                NoUnreadSeqList: "excludedUnreadSequenceList",
                NewMsg: "topicLatestMessage"
              },
              ignoreKeyWord: ["C2C", "ID", "USP"]
            };
          function ji(e) {
            return p(this, ji), (e = i(this, ji, [e]))._n = "SyncUnreadMsgModule", e._cookie = "", e._onlineSyncFlag = !1, e.getIEmitInst().on(U.A2KEY_AND_TINYID_UPDATED, e._init, e), e;
          }
          function Ji(e) {
            return p(this, Ji), (e = i(this, Ji, [e]))._n = "PluginModule", e.plugins = {}, e;
          }
          function zi(e) {
            return p(this, zi), (e = i(this, zi, [e]))._n = "ComboMsgModule", e;
          }
          function Xi(e) {
            return p(this, Xi), (e = i(this, Xi, [e]))._n = "MsgReactionModule", e._reactedByMyselfMap = new Map(), e._reactionInfoMap = new Map(), e;
          }
          function Zi(e) {
            return p(this, Zi), (e = i(this, Zi, [e]))._n = "MsgExtModule", e.msgExtMap = new Map(), e.globalSeqMap = new Map(), e.getMsgExtsMap = new Map(), e;
          }
          function Qi(e) {
            return p(this, Qi), (e = i(this, Qi, [e]))._n = "MessageModule", e._messageOptionsMap = new Map(), e._mergerMessageHandler = new Ui(e), e;
          }
          function $i(e, t) {
            if ("string" == typeof e || Array.isArray(e)) return t = Object.assign({
              pascalCase: !1
            }, t), 0 === (e = Array.isArray(e) ? e.map(function (e) {
              return e.trim();
            }).filter(function (e) {
              return e.length;
            }).join("-") : e.trim()).length ? "" : 1 === e.length ? t.pascalCase ? e.toUpperCase() : e.toLowerCase() : (e = e = (e = e !== e.toLowerCase() ? ea(e) : e).replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (e, t) {
              return t.toUpperCase();
            }).replace(/\d+(\w|$)/g, function (e) {
              return e.toUpperCase();
            }), t.pascalCase ? e.charAt(0).toUpperCase() + e.slice(1) : e);
            throw new TypeError("Expected the input to be `string | string[]`");
          }
          var ea = function ea(e) {
            for (var t = !1, n = !1, o = !1, i = 0; i < e.length; i++) {
              var a = e[i];
              t && /[a-zA-Z]/.test(a) && a.toUpperCase() === a ? (e = e.slice(0, i) + "-" + e.slice(i), o = n, n = !(t = !1), i++) : n && o && /[a-zA-Z]/.test(a) && a.toLowerCase() === a ? (e = e.slice(0, i - 1) + "-" + e.slice(i - 1), o = n, t = !(n = !1)) : (t = a.toLowerCase() === a && a.toUpperCase() !== a, o = n, n = a.toUpperCase() === a && a.toLowerCase() !== a);
            }
            return e;
          };
          function ta(e, t) {
            var r = 0;
            return function n(e, i) {
              var t, o, a, s;
              return 100 < ++r ? (r--, e) : O(e) ? (t = e.map(function (e) {
                return st(e) ? n(e, i) : e;
              }), r--, t) : st(e) ? (o = e, a = function a(e, t) {
                if (!lt(t)) return !1;
                if (t !== $i(t)) for (var n = 0; n < Yi.ignoreKeyWord.length && !t.includes(Yi.ignoreKeyWord[n]); n++);
                var o;
                return N(i[t]) ? (o = t)[0].toUpperCase() + $i(o).slice(1) : i[t];
              }, s = Object.create(null), Object.keys(o).forEach(function (e) {
                var t = a(o[e], e);
                t && (s[t] = o[e]);
              }), t = bt(t = s, function (e, t) {
                return O(e) || st(e) ? n(e, i) : e;
              }), r--, t) : void 0;
            }(e, t);
          }
          for (var na = String.fromCharCode, oa = function oa(e) {
              var t = 0 | e.charCodeAt(0);
              if (55296 <= t) if (t < 56320) {
                e = 0 | e.charCodeAt(1);
                if (56320 <= e && e <= 57343) {
                  if (65535 < (t = (t << 10) + e - 56613888 | 0)) return na(240 | t >>> 18, 128 | t >>> 12 & 63, 128 | t >>> 6 & 63, 128 | 63 & t);
                } else t = 65533;
              } else t <= 57343 && (t = 65533);
              return t <= 2047 ? na(192 | t >>> 6, 128 | 63 & t) : na(224 | t >>> 12, 128 | t >>> 6 & 63, 128 | 63 & t);
            }, ia = function ia(e) {
              for (var t = void 0 === e ? "" : ("" + e).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g, oa), n = 0 | t.length, o = new Uint8Array(n), i = 0; i < n; i = i + 1 | 0) o[i] = 0 | t.charCodeAt(i);
              return o;
            }, aa = e(function e(t) {
              p(this, e);
              var n,
                i,
                o = (this._handler = t).getURL();
              this._socket = null, this._workerSocket = null, this._id = ht(), this._handler.getIsWorkerEnabled() ? (n = URL.createObjectURL(new Blob([';let _socket = null;onmessage = function(event) {  if (event.data.cmd === "start") {    const url = event.data.url;    _socket = new WebSocket(url);    _socket.binaryType = "arraybuffer";    _socket.onopen = function() {      postMessage({ callback: "onOpen", extensions: _socket.extensions });    };    _socket.onclose = function(e) {      postMessage({ callback: "onOpen", e: { code: e.code, reason: e.reason } });    };    _socket.onmessage = function(e) {      postMessage({ callback: "onMessage", data: e.data });    };    _socket.onerror = function(e) {      postMessage({ callback: "onError", e: { isTrusted: "true" } });    };  } else if (event.data.cmd === "sendMessage") {    if (_socket !== null) {      _socket.send(event.data.data);    }  } else if (event.data.cmd === "stop") {    if (_socket !== null) {      _socket.close(event.data.code);      _socket = null;    }  }};'], {
                type: "application/javascript; charset=utf-8"
              })), this._workerSocket = new Worker(n), (i = this)._workerSocket.onmessage = function (e) {
                var t = e.data,
                  n = t.callback,
                  o = t.e,
                  t = t.extensions;
                "onOpen" === n ? i._onOpen(t) : "onClose" === n ? i._onClose(o) : "onError" === n ? i._onError(o) : "onMessage" === n && i._onMessage(e.data);
              }, this._workerSocket.postMessage({
                cmd: "start",
                id: this._id,
                url: o
              })) : v ? ge ? (I.connectSocket({
                url: o,
                header: {
                  "content-type": "application/json"
                }
              }), I.onSocketClose(this._onClose.bind(this)), I.onSocketOpen(this._onOpen.bind(this)), I.onSocketMessage(this._onMessage.bind(this)), I.onSocketError(this._onError.bind(this))) : (this._socket = I.connectSocket({
                url: o,
                header: {
                  "content-type": "application/json"
                },
                complete: function complete() {}
              }), this._socket.onClose(this._onClose.bind(this)), this._socket.onOpen(this._onOpen.bind(this)), this._socket.onMessage(this._onMessage.bind(this)), this._socket.onError(this._onError.bind(this))) : (this._socket = new WebSocket(o), this._socket.binaryType = "arraybuffer", this._socket.onopen = this._onOpen.bind(this, this._socket.extensions), this._socket.onmessage = this._onMessage.bind(this), this._socket.onclose = this._onClose.bind(this), this._socket.onerror = this._onError.bind(this)), this._canIUseBinaryFrame = t.canIUseBinaryFrame();
            }, [{
              key: "getID",
              value: function value() {
                return this._id;
              }
            }, {
              key: "_onOpen",
              value: function value(e) {
                this._handler.onOpen({
                  id: this._id,
                  res: JSON.stringify(e)
                });
              }
            }, {
              key: "_onClose",
              value: function value(e) {
                this._handler.onClose({
                  id: this._id,
                  e: e
                });
              }
            }, {
              key: "_onMessage",
              value: function value(e) {
                e = this._canIUseBinaryFrame ? this._isAppCompressedData(e.data) ? this._handler.inflate(e.data) : function (e) {
                  for (var t = new Uint8Array(e), n = "", o = 0, i = t.length; o < i;) {
                    var a = t[o],
                      s = 0,
                      r = 0;
                    if (a <= 127 ? (s = 0, r = 255 & a) : a <= 223 ? (s = 1, r = 31 & a) : a <= 239 ? (s = 2, r = 15 & a) : a <= 244 && (s = 3, r = 7 & a), 0 < i - o - s) for (var c = 0; c < s;) r = r << 6 | 63 & (a = t[o + c + 1]), c += 1;else r = 65533, s = i - o;
                    n += String.fromCodePoint(r), o += s + 1;
                  }
                  return n;
                }(e.data) : e.data;
                this._handler.onMessage({
                  data: e
                });
              }
            }, {
              key: "_isAppCompressedData",
              value: function value(e) {
                e = new Uint8Array(e);
                return 67 === e[0] && 79 === e[1] && 77 === e[2] && 80 === e[3];
              }
            }, {
              key: "_onError",
              value: function value(e) {
                this._handler.onError({
                  id: this._id,
                  e: e
                });
              }
            }, {
              key: "setIsWorkerEnabled",
              value: function value(e) {
                this._isWorkerEnabled = !0;
              }
            }, {
              key: "close",
              value: function value(e) {
                this._workerSocket && (this._workerSocket.postMessage({
                  cmd: "stop",
                  code: e
                }), this._workerSocket.terminate(), this._workerSocket = null), ge ? (I.offSocketClose(), I.offSocketMessage(), I.offSocketOpen(), I.offSocketError(), I.closeSocket()) : this._socket && (v ? (this._socket.onClose(function () {}), this._socket.onOpen(function () {}), this._socket.onMessage(function () {}), this._socket.onError(function () {})) : (this._socket.onopen = null, this._socket.onmessage = null, this._socket.onclose = null, this._socket.onerror = null), he ? this._socket.close({
                  code: e
                }) : this._socket.close(e), this._socket = null);
              }
            }, {
              key: "send",
              value: function value(e) {
                this._workerSocket ? this._workerSocket.postMessage({
                  cmd: "sendMessage",
                  data: this._canIUseBinaryFrame ? ia(e.data).buffer : e.data
                }) : ge ? I.sendSocketMessage({
                  data: e.data,
                  fail: function fail() {
                    e.fail && e.requestID && e.fail(e.requestID);
                  }
                }) : this._socket && (v ? this._socket.send({
                  data: this._canIUseBinaryFrame ? ia(e.data).buffer : e.data,
                  fail: function fail() {
                    e.fail && e.requestID && e.fail(e.requestID);
                  }
                }) : this._socket.send(this._canIUseBinaryFrame ? ia(e.data) : e.data));
              }
            }]), sa = ["keyMap"], ra = ["keyMap"], ca = "connected", ua = "connecting", la = "disconnected", da = e(function e(t) {
              p(this, e), this._chM = t, this._n = "SocketHandler", this._promiseMap = new Map(), this._readyState = la, this._simpleRequestMap = new Map(), this.MAX_SIZE = 100, this._startSequence = ht(), this._startTs = 0, this._reConnectFlag = !1, this._nextPingTs = 0, this._reConnectCount = 0, this.MAX_RECONNECT_COUNT = 3, this._socketID = -1, this._random = 0, this._socket = null, this._url = "", this._onOpenTs = 0, this._canIUseBinaryFrame = !0, this._isWorkerEnabled = !0, this._currentSite = ae, this._setWebsocketHost(), this._initConnection();
            }, [{
              key: "_setWebsocketHost",
              value: function value() {
                var e = this._chM.get(12);
                this._currentSite = ae, this._chM.isOversea() && (this._currentSite = "OVERSEA"), e.isSingaporeSite() ? this._currentSite = "SINGAPORE" : e.isKoreaSite() ? this._currentSite = "KOREA" : e.isGermanySite() ? this._currentSite = "GERMANY" : e.isIndiaSite() ? this._currentSite = "IND" : e.isJapanSite() ? this._currentSite = "JPN" : e.isUSASite() ? this._currentSite = "USA" : e.isIndonesiaSite() && (this._currentSite = "INDONESIA"), a.HOST.setCurrent(this._currentSite);
              }
            }, {
              key: "_initConnection",
              value: function value() {
                var e = this._chM.get(12).getSDKAppID() + "",
                  t = this._chM.get(12).isIndependentDomainDisabled(),
                  t = (N(a.HOST.CURRENT.BACKUP) ? this._url = a.HOST.CURRENT.DEFAULT : "" === this._url ? this._url = t ? a.HOST.CURRENT.DEFAULT : a.HOST.CURRENT.DEFAULT0.replace("*", e) : -1 < this._url.indexOf(e) ? this._url = a.HOST.CURRENT.DEFAULT : this._url === a.HOST.CURRENT.DEFAULT ? this._url = a.HOST.CURRENT.IPV6 : this._url === a.HOST.CURRENT.IPV6 ? this._url = Ie ? this._genRandomDomain() : a.HOST.CURRENT.BACKUP : this._isWebBackupUrl(this._url) || this._url === a.HOST.CURRENT.BACKUP ? this._url = this._canIUseAnyCast() ? a.HOST.CURRENT.ANYCAST : a.HOST.CURRENT.DEFAULT : this._url === a.HOST.CURRENT.ANYCAST && (a.HOST.CURRENT.ANYCAST = "", this._url = a.HOST.CURRENT.DEFAULT), this._chM.get(12)),
                  e = t.getProxyServer();
                S(e) || (this._url = e), t.isTestEnv() && (this._url = ee.TEST[this._currentSite].DEFAULT), this._connect(), this._nextPingTs = 0;
              }
            }, {
              key: "_genRandomDomain",
              value: function value() {
                var e = Math.floor(10001 * Math.random()) + 1e4;
                return a.HOST.CURRENT.BACKUP_WEB.replace("*", e);
              }
            }, {
              key: "_isWebBackupUrl",
              value: function value(e) {
                return e.includes("my-cpaas.com");
              }
            }, {
              key: "_canIUseAnyCast",
              value: function value() {
                return Ie && a.HOST.CURRENT.ANYCAST;
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                e % 1 == 0 && (this._checkPromiseMap(), this._checkNativeAppWS());
              }
            }, {
              key: "_checkPromiseMap",
              value: function value() {
                var a = this;
                0 !== this._promiseMap.size && this._promiseMap.forEach(function (e, t) {
                  var n = e.reject,
                    o = e.timestamp,
                    e = e.headSeq,
                    i = 15e3;
                  -1 !== t.indexOf(G.LOGIN) ? i = 9e4 : -1 !== t.indexOf(G.PING) && (i = 3e3), Date.now() - o >= i && (M.l("".concat(a._n, "._checkPromiseMap request timeout, delete requestID:").concat(t)), a._promiseMap["delete"](t), n(new L({
                    code: k.NETWORK_TIMEOUT,
                    data: {
                      headSeq: e
                    }
                  })), a._chM.onRequestTimeout());
                });
              }
            }, {
              key: "_checkNativeAppWS",
              value: function value() {
                fe && !this.isConnected() && this._reConnect();
              }
            }, {
              key: "onOpen",
              value: function value(e) {
                var t, n;
                this._readyState !== la && (this._onOpenTs = Date.now(), n = e.id, e = e.res, this._socketID = n, t = tn(this._startTs, !1), n = "socketID:".concat(n, " res:").concat(e), M.l("".concat(this._n, "._onOpen cost:").concat(t, " ms. ").concat(n)), new P("wsOnOpen").setMessage(t).setCostTime(t).setMoreMessage(n).end(), this._readyState = ca, this._reConnectCount = 0, this._resend(), !0 === this._reConnectFlag && (this._chM.onReconnected(), this._reConnectFlag = !1), this._chM.onOpen());
              }
            }, {
              key: "onClose",
              value: function value(e) {
                var t = new P("wsOnClose"),
                  n = e.id,
                  e = e.e,
                  o = "sourceSocketID:".concat(n, " currentSocketID:").concat(this._socketID, " code:").concat(e.code, " reason:").concat(e.reason),
                  i = 0;
                0 !== this._onOpenTs && (i = Date.now() - this._onOpenTs), t.setMessage(i).setCostTime(i).setMoreMessage(o).setCode(e.code).end(!0), M.l("".concat(this._n, "._onClose ").concat(o, " onlineTime:").concat(i)), n === this._socketID && (this._readyState = la, i < 1e3 ? this._chM.onReconnectFailed() : this._chM.onClose());
              }
            }, {
              key: "onError",
              value: function value(e) {
                var t = e.id,
                  e = e.e,
                  n = "sourceSocketID:".concat(t, " currentSocketID:").concat(this._socketID);
                new P("wsOnError").setMessage(e.errMsg || JSON.stringify(e, ["message", "code"])).setMoreMessage(n).setLevel("error").end(!0), M.w("".concat(this._n, "._onError"), e, n), t === this._socketID && (this._readyState = la, this._chM.onError());
              }
            }, {
              key: "onMessage",
              value: function value(t) {
                var e, n, o, i, a, s;
                try {
                  e = JSON.parse(t.data);
                } catch (e) {
                  new P("jsonParseError").setMessage(t.data).end();
                }
                e && e.head && (t = this._getRequestIDFromHead(e.head), n = e.body, this._chM.get(30).isTRTCCommand(t) || (s = Ht(e.head), n = function t(e, n) {
                  var o, i, a;
                  return O(e) ? e.map(function (e) {
                    return st(e) ? t(e, n) : e;
                  }) : st(e) ? (o = e, i = function i(e, t) {
                    return N(n[t]) ? $i(t) : n[t];
                  }, a = {}, Object.keys(o).forEach(function (e) {
                    a[i(o[e], e)] = o[e];
                  }), bt(a, function (e) {
                    return O(e) || st(e) ? t(e, n) : e;
                  })) : void 0;
                }(e.body, this._getResKeyMap(s))), M.d("".concat(this._n, ".onMessage ret:").concat(JSON.stringify(n), " requestID:").concat(t, " has:").concat(this._promiseMap.has(t))), this._setNextPingTs(), this._promiseMap.has(t) ? (o = (s = this._promiseMap.get(t)).resolve, i = s.reject, a = s.timestamp, s = s.headSeq, this._promiseMap["delete"](t), this._calcRTT(a), n.errorCode && 0 !== n.errorCode ? (this._chM.onErrorCodeNotZero(n), i(new L({
                  code: n.errorCode,
                  message: n.errorInfo || "",
                  data: t.includes(G.MODIFY_C2C_MSG) || t.includes(G.MODIFY_GRP_MSG) ? {
                    elements: n.elements,
                    messageVersion: n.messageVersion,
                    cloudCustomData: n.cloudCustomData,
                    headSeq: s
                  } : {
                    headSeq: s
                  }
                }))) : o(T(n))) : this._chM.onMessage({
                  head: e.head,
                  body: n
                }));
              }
            }, {
              key: "_calcRTT",
              value: function value(e) {
                e = Date.now() - e;
                this._chM.get(26).addRTT(e);
              }
            }, {
              key: "_connect",
              value: function value() {
                this._readyState !== ua && this._readyState !== ca && (this._startTs = Date.now(), this._onOpenTs = 0, this._readyState = ua, this._socket = new aa(this), this._socketID = this._socket.getID(), M.l("".concat(this._n, "._connect isWorkerEnabled:").concat(this.getIsWorkerEnabled(), " socketID:").concat(this._socketID, " url:").concat(this.getURL())), new P("wsConnect").setMessage("socketID:".concat(this._socketID, " url:").concat(this.getURL())).end());
              }
            }, {
              key: "getURL",
              value: function value() {
                this._chM.isDevMode() && (this._canIUseBinaryFrame = !1);
                var e = qt(),
                  t = ((ge || le && "windows" === e || fe) && (this._canIUseBinaryFrame = !1), -1),
                  n = ("ios" === e ? t = Te || -1 : "android" === e && (t = Ee || -1), this._chM.get(12)),
                  o = this._chM.getPlatform(),
                  i = n.getSDKAppID(),
                  n = n.getInstanceID(),
                  i = "sdkappid=".concat(i, "&instanceid=").concat(n, "&random=").concat(this._getRandom(), "&platform=").concat(o, "&host=").concat(e) + "&version=".concat(t, "&sdkversion=").concat("3.5.3");
                return de && (i += "&isminigame=1"), this._chM.canIUseInflate() && (i += "&compress=gzip"), (this._canIUseBinaryFrame ? "".concat(this._url, "/binfo?") : "".concat(this._url, "/info?")).concat(i);
              }
            }, {
              key: "_closeConnection",
              value: function value(e) {
                M.l("".concat(this._n, "._closeConnection socketID:").concat(this._socketID)), this._socket && (this._socket.close(e), this._socketID = -1, this._socket = null, this._readyState = la);
              }
            }, {
              key: "_resend",
              value: function value() {
                var i = this;
                if (M.l("".concat(this._n, "._resend reConnectFlag:").concat(this._reConnectFlag), "promiseMap.size:".concat(this._promiseMap.size, " simpleRequestMap.size:").concat(this._simpleRequestMap.size)), 0 < this._promiseMap.size && this._promiseMap.forEach(function (e, t) {
                  var n = e.uplinkData,
                    o = e.resolve,
                    e = e.reject;
                  -1 !== t.indexOf(G.AV_POLLING) ? i._promiseMap["delete"](t) : (i._promiseMap.set(t, {
                    resolve: o,
                    reject: e,
                    timestamp: Date.now(),
                    uplinkData: n
                  }), i._execute(t, n));
                }), 0 < this._simpleRequestMap.size) {
                  var e,
                    t = F(this._simpleRequestMap);
                  try {
                    for (t.s(); !(e = t.n()).done;) {
                      var n = j(e.value, 2),
                        o = n[0],
                        a = n[1];
                      this._execute(o, a);
                    }
                  } catch (e) {
                    t.e(e);
                  } finally {
                    t.f();
                  }
                  this._simpleRequestMap.clear();
                }
              }
            }, {
              key: "send",
              value: function value(n) {
                var o = this,
                  i = (n.head.seq = this._getSequence(), n.head.reqtime = Math.floor(Date.now() / 1e3), n.head.cs = this._calcCheckSum(n.head.servcmd, n.body), n.keyMap, W(n, sa)),
                  a = this._getRequestIDFromHead(n.head),
                  s = JSON.stringify(i);
                return new Promise(function (e, t) {
                  o._promiseMap.set(a, {
                    resolve: e,
                    reject: t,
                    timestamp: Date.now(),
                    uplinkData: s,
                    headSeq: n.head.seq
                  }), M.d("".concat(o._n, ".send uplinkData:").concat(JSON.stringify(i), " requestID:").concat(a, " readyState:").concat(o._readyState)), o._readyState !== ca ? o._reConnect() : (o._execute(a, s), o._chM.get(26).addRequestCount());
                });
              }
            }, {
              key: "simplySend",
              value: function value(e) {
                e.head.seq = this._getSequence(), e.head.reqtime = Math.floor(Date.now() / 1e3), e.keyMap;
                var t = W(e, ra),
                  e = this._getRequestIDFromHead(e.head),
                  t = JSON.stringify(t);
                this._readyState !== ca ? (this._simpleRequestMap.size < this.MAX_SIZE ? this._simpleRequestMap.set(e, t) : M.l("".concat(this._n, ".simplySend. simpleRequestMap is full, drop request!")), this._reConnect()) : this._execute(e, t);
              }
            }, {
              key: "_execute",
              value: function value(e, t) {
                this._socket.send({
                  data: t,
                  fail: v ? this._onSendFail.bind(this) : void 0,
                  requestID: e
                });
              }
            }, {
              key: "_onSendFail",
              value: function value(e) {
                M.l("".concat(this._n, "._onSendFail requestID:").concat(e)), this._chM.onSendFail();
              }
            }, {
              key: "_getSequence",
              value: function value() {
                var e;
                if (this._startSequence < 2415919103) return e = this._startSequence, this._startSequence += 1, 2415919103 === this._startSequence && (this._startSequence = ht()), e;
              }
            }, {
              key: "_getRequestIDFromHead",
              value: function value(e) {
                return e.servcmd + e.seq;
              }
            }, {
              key: "_getResKeyMap",
              value: function value(e) {
                e = this._chM.getKeyMap(e);
                return y(y({}, Yi.res), e.res);
              }
            }, {
              key: "_reConnect",
              value: function value() {
                this._readyState !== ca && this._readyState !== ua && this.forcedReconnect();
              }
            }, {
              key: "forcedReconnect",
              value: function value() {
                var e = "".concat(this._n, ".forcedReconnect");
                M.l("".concat(e, " count:").concat(this._reConnectCount, " readyState:").concat(this._readyState)), this._reConnectFlag = !0, this._resetRandom(), this._reConnectCount < this.MAX_RECONNECT_COUNT ? (this._reConnectCount += 1, this._closeConnection(4001), this._initConnection()) : (this._reConnectCount = 0, this._chM.get(15).isOnline() ? (M.w("".concat(e, " disconnected from wsserver but network is ok, continue...")), this._closeConnection(4001), this._initConnection()) : this._chM.onReconnectFailed());
              }
            }, {
              key: "getReconnectFlag",
              value: function value() {
                return this._reConnectFlag;
              }
            }, {
              key: "_setNextPingTs",
              value: function value() {
                this._nextPingTs = fe ? Date.now() + 5e3 : Date.now() + 1e4;
              }
            }, {
              key: "getNextPingTs",
              value: function value() {
                return this._nextPingTs;
              }
            }, {
              key: "isConnected",
              value: function value() {
                return this._readyState === ca;
              }
            }, {
              key: "canIUseBinaryFrame",
              value: function value() {
                return this._canIUseBinaryFrame;
              }
            }, {
              key: "getSocketID",
              value: function value() {
                return this._socketID;
              }
            }, {
              key: "inflate",
              value: function value(e) {
                if (this._chM.canIUseInflate()) return this._chM.get(37).inflate(e);
              }
            }, {
              key: "setIsWorkerEnabled",
              value: function value(e) {
                M.l("".concat(this._n, ".setIsWorkerEnabled flag:").concat(e)), this._isWorkerEnabled = e;
              }
            }, {
              key: "getIsWorkerEnabled",
              value: function value() {
                return this._isWorkerEnabled && Ae;
              }
            }, {
              key: "_getRandom",
              value: function value() {
                return 0 === this._random && (this._random = Math.random()), this._random;
              }
            }, {
              key: "_resetRandom",
              value: function value() {
                this._random = 0;
              }
            }, {
              key: "_calcCheckSum",
              value: function value(e, t) {
                if (-1 !== e.indexOf(G.PING) || -1 !== e.indexOf(G.LOGIN) || -1 !== e.indexOf(G.LOGOUT) || -1 !== e.indexOf(G.AV_POLLING) || -1 !== e.indexOf(G.AV_NOAUTH_POLLING)) return 0;
                for (var n = ia(JSON.stringify(t)), o = 4294967295, i = 0, a = n.length; i < a; i++) {
                  o ^= n[i];
                  for (var s = 0; s < 8; s++) 1 == (1 & o) ? o = o >>> 1 ^ 3988292384 : o >>>= 1;
                }
                return (4294967295 ^ o) >>> 0;
              }
            }, {
              key: "close",
              value: function value() {
                M.l("".concat(this._n, ".close")), this._closeConnection(4e3), this._promiseMap.clear(), this._startSequence = ht(), this._readyState = la, this._simpleRequestMap.clear(), this._reConnectFlag = !1, this._reConnectCount = 0, this._onOpenTs = 0, this._url = "", this._random = 0, this._canIUseBinaryFrame = !0, this._isWorkerEnabled = !0;
              }
            }]), pa = function pa(a, s, r) {
              return new Promise(function (t, e) {
                var n,
                  o,
                  i = "application/x-www-form-urlencoded;charset=UTF-8";
                v ? I.request({
                  url: s,
                  data: r,
                  method: a,
                  timeout: 3e3,
                  header: {
                    "content-type": i
                  },
                  success: function success(e) {
                    e && e.data && e.data.NetCheckInfo && M.l("".concat("getconninfo ok in", " miniapp. ret:"), e.data), t();
                  },
                  fail: function fail() {
                    e(new L({
                      code: k.NETWORK_ERROR
                    }));
                  }
                }) : (n = new XMLHttpRequest(), o = setTimeout(function () {
                  n.abort(), e(new L({
                    code: k.NETWORK_TIMEOUT
                  }));
                }, 3e3), n.onreadystatechange = function () {
                  4 === n.readyState && (o && clearTimeout(o), 200 === n.status || 304 === n.status ? (n.responseText && -1 < n.responseText.indexOf("NetCheckInfo") && M.l("".concat("getconninfo ok in", " web. ret:"), JSON.parse(n.responseText)), t()) : e(new L({
                    code: k.NETWORK_ERROR
                  })));
                }, n.open(a, s, !0), n.setRequestHeader("Content-type", i), r ? n.send(r) : n.send());
              });
            }, _a = (t(Da, c), e(Da, [{
              key: "onCheckTimer",
              value: function value(e) {
                this._socketHandler && (this.isLoggedIn() ? (0 < this._timerForNotLoggedIn && (clearInterval(this._timerForNotLoggedIn), this._timerForNotLoggedIn = -1), this._socketHandler.onCheckTimer(e)) : this._socketHandler.onCheckTimer(1), this._checkNextPing());
              }
            }, {
              key: "onErrorCodeNotZero",
              value: function value(e) {
                this.get(20).onErrorCodeNotZero(e);
              }
            }, {
              key: "onMessage",
              value: function value(e) {
                this.get(20).onMessage(e);
              }
            }, {
              key: "send",
              value: function value(e) {
                return this._socketHandler ? this._previousState !== R.NET_STATE_CONNECTED && e.head.servcmd.includes(G.SSO_STAT) ? (this.reConnect(), this.isPrivateNetWork() ? Promise.resolve() : this._sendLogViaHTTP(e)) : this._socketHandler.send(e) : Promise.reject();
              }
            }, {
              key: "_sendLogViaHTTP",
              value: function value(e) {
                var t = a.HOST.CURRENT.STAT,
                  t = "".concat(t, "/v4/imopenstat/tim_web_report_v2?sdkappid=").concat(e.head.sdkappid, "&reqtime=").concat(Date.now()),
                  e = JSON.stringify(e.body);
                return pa("POST", t, e);
              }
            }, {
              key: "simplySend",
              value: function value(e) {
                return this._socketHandler ? this._socketHandler.simplySend(e) : Promise.reject();
              }
            }, {
              key: "onOpen",
              value: function value() {
                this._ping();
              }
            }, {
              key: "onClose",
              value: function value() {
                this._socketHandler && this._socketHandler.getReconnectFlag() && this._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED), this.reConnect();
              }
            }, {
              key: "onError",
              value: function value() {
                v && !fe && this.warn("DomainNameInMP"), this._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED);
              }
            }, {
              key: "getKeyMap",
              value: function value(e) {
                return this.get(20).getKeyMap(e);
              }
            }, {
              key: "onRequestTimeout",
              value: function value() {
                3e4 <= Date.now() - this._lastDiagnoseTS && this.diagnose();
              }
            }, {
              key: "onSendFail",
              value: function value() {
                this._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED);
              }
            }, {
              key: "onReconnected",
              value: function value() {
                M.l("".concat(this._n, ".onReconnected cost:").concat(tn(this._disconnectedTS, !0, !0))), this._m.restartTimer(), this.get(20).onReconnected(tn(this._disconnectedTS, !1, !1)), this._disconnectedTS = 0, this._emitNetStateChangeEvent(R.NET_STATE_CONNECTED);
              }
            }, {
              key: "onReconnectFailed",
              value: function value() {
                M.l("".concat(this._n, ".onReconnectFailed")), this._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED);
              }
            }, {
              key: "setIsWorkerEnabled",
              value: function value(e) {
                this._socketHandler && this._socketHandler.setIsWorkerEnabled(!1);
              }
            }, {
              key: "offline",
              value: function value() {
                this._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED);
              }
            }, {
              key: "reConnect",
              value: function value() {
                var e = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],
                  t = !1,
                  n = (this._socketHandler && (t = this._socketHandler.getReconnectFlag()), "forcedFlag:".concat(e, " fatalErrorFlag:").concat(this._fatalErrorFlag, " previousState:").concat(this._previousState, " reconnectFlag:").concat(t));
                M.l("".concat(this._n, ".reConnect ").concat(n)), this._fatalErrorFlag || !this._socketHandler || !0 !== e && this._previousState === R.NET_STATE_CONNECTING && t || (this._socketHandler.forcedReconnect(), this._emitNetStateChangeEvent(R.NET_STATE_CONNECTING));
              }
            }, {
              key: "_emitNetStateChangeEvent",
              value: function value(e) {
                this._previousState !== e && (M.l("".concat(this._n, "._emitNetStateChangeEvent from ").concat(this._previousState, " to ").concat(e)), e === R.NET_STATE_DISCONNECTED && 0 === this._disconnectedTS && (this._disconnectedTS = Date.now(), this.diagnose()), this._previousState = e, this.emitOEvt(h.NET_STATE_CHANGE, {
                  state: e
                }));
              }
            }, {
              key: "_ping",
              value: function value() {
                var e,
                  n = this;
                !0 !== this._probing && (this._probing = !0, e = this.get(20).getProtocolData({
                  P: G.PING
                }), this.send(e).then(function () {
                  n._probing = !1;
                })["catch"](function (e) {
                  n._probing = !1;
                  var t = n.get(15).isOnline();
                  M.w("".concat(n._n, "._ping failed. bOnline:").concat(t, " error:"), e), e && 60002 === e.code ? (new P("error").setMessage("code:".concat(e.code, " message:").concat(e.message)).end(), n._fatalErrorFlag = !0, n._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED)) : t ? n.reConnect() : n._emitNetStateChangeEvent(R.NET_STATE_DISCONNECTED);
                }));
              }
            }, {
              key: "_checkNextPing",
              value: function value() {
                this._socketHandler && this._socketHandler.isConnected() && Date.now() >= this._socketHandler.getNextPingTs() && this._ping();
              }
            }, {
              key: "dealloc",
              value: function value() {
                this._socketHandler && (this._socketHandler.close(), this._socketHandler = null), -1 < this._timerForNotLoggedIn && clearInterval(this._timerForNotLoggedIn);
              }
            }, {
              key: "onRestApiKickedOut",
              value: function value() {
                this._socketHandler && (this._socketHandler.close(), this.reConnect(!0));
              }
            }, {
              key: "canIUseInflate",
              value: function value() {
                return this._m.canIUseInflate();
              }
            }, {
              key: "getSocketID",
              value: function value() {
                if (this._socketHandler) return this._socketHandler.getSocketID();
              }
            }, {
              key: "diagnose",
              value: function value() {
                this.isPrivateNetWork() || (this._lastDiagnoseTS = Date.now(), this._diagnoseBySSO(), this._diagnoseByCDN());
              }
            }, {
              key: "_diagnoseBySSO",
              value: function value() {
                var t = this,
                  e = this._socketHandler.getURL(),
                  n = e.split("/")[2];
                n.startsWith("ws") && (e = e.slice(e.indexOf("info?") + 5), n = "https://".concat(n, "/v3/netcheck/getconninfo?").concat(e, "&reqtime=").concat(Date.now()), pa("GET", n)["catch"](function (e) {
                  M.w("".concat(t._n, "._diagnoseBySSO failed. error:"), e);
                }));
              }
            }, {
              key: "_diagnoseByCDN",
              value: function value() {
                var t = this,
                  e = this._socketHandler.getURL(),
                  e = e.slice(e.indexOf("info?") + 5),
                  e = "https://boce-cdn.my-imcloud.com/v3/netcheck/getconninfo?".concat(e, "&reqtime=").concat(Date.now());
                pa("GET", e)["catch"](function (e) {
                  M.w("".concat(t._n, "._diagnoseByCDN failed. error:"), e);
                });
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._previousState = R.NET_STATE_CONNECTED, this._probing = !1, this._fatalErrorFlag = !1, this._timerForNotLoggedIn = setInterval(this.onCheckTimer.bind(this), 1e3), this._disconnectedTS = 0, this._lastDiagnoseTS = 0;
              }
            }])), ha = ["a2", "tinyid"], ga = ["a2", "tinyid"], fa = e(function e(t) {
              p(this, e), this._n = "PHandler", this._sessionM = t, this._map = new Map(), this._fillMap();
            }, [{
              key: "_fillMap",
              value: function value() {
                this._map.clear();
                var e = this._sessionM.genCommonHead(),
                  t = this._sessionM.genCosSpecifiedHead(),
                  n = this._sessionM.genSSOReportHead();
                this._map.set(G.LOGIN, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.LOGIN)
                  }),
                  body: {
                    state: "Online",
                    isWebUniapp: 0,
                    deviceBrand: 0,
                    customInfo: ""
                  },
                  keyMap: {
                    req: {
                      deviceBrand: "InstType"
                    },
                    res: {
                      InstId: "instanceID",
                      HelloInterval: "helloInterval",
                      RichMsgAuthKey: "authKey"
                    }
                  }
                }), this._map.set(G.LOGOUT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.LOGOUT)
                  }),
                  body: {
                    type: 0,
                    isWebUniapp: 0
                  },
                  keyMap: {
                    req: {
                      type: "wslogout_type"
                    }
                  }
                }), this._map.set(G.HELLO, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.HELLO)
                  }),
                  body: {
                    isWebUniapp: 0
                  },
                  keyMap: {
                    res: {
                      NewInstInfo: "newInstanceInfo"
                    }
                  }
                }), this._map.set(G.KICK_OTHER, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.STAT_SERVICE, ".").concat(G.KICK_OTHER)
                  }),
                  body: {}
                }), this._map.set(G.COS_SIGN, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.IM_COS_SIGN, ".").concat(G.COS_SIGN)
                  }),
                  body: {
                    cmd: "open_im_cos_svc",
                    subCmd: "get_cos_token",
                    duration: 300,
                    version: 2
                  },
                  keyMap: {
                    req: {
                      userSig: "usersig",
                      subCmd: "sub_cmd",
                      cmd: "cmd",
                      duration: "duration",
                      version: "version"
                    },
                    res: {
                      expired_time: "expiredTime",
                      bucket_name: "bucketName",
                      session_token: "sessionToken",
                      tmp_secret_id: "secretId",
                      tmp_secret_key: "secretKey"
                    }
                  }
                }), this._map.set(G.COS_PRE_SIG, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.CUSTOM_UPLOAD, ".").concat(G.COS_PRE_SIG)
                  }),
                  body: {
                    fileType: void 0,
                    fileName: void 0,
                    uploadMethod: 0,
                    duration: 900
                  },
                  keyMap: {
                    req: {
                      userSig: "usersig",
                      fileType: "file_type",
                      fileName: "file_name",
                      uploadMethod: "upload_method"
                    },
                    res: {
                      expired_time: "expiredTime",
                      request_id: "requestId",
                      head_url: "headUrl",
                      upload_url: "uploadUrl",
                      download_url: "downloadUrl",
                      ci_url: "ciUrl",
                      snapshot_url: "requestSnapshotUrl"
                    }
                  }
                }), this._map.set(G.SIMPLE_COS_PRE_SIG, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.CUSTOM_UPLOAD, ".").concat(G.SIMPLE_COS_PRE_SIG)
                  }),
                  body: {
                    uploadMethod: 0,
                    platform: 2,
                    SDKAppID: 0,
                    userID: "",
                    conversationType: 1,
                    uploadConfig: [{
                      fileID: 1,
                      fileType: 1,
                      fileName: ""
                    }]
                  },
                  keyMap: {
                    req: {
                      platform: "uint32_platform",
                      SDKAppID: "uint32_sdkappid",
                      userID: "str_user_id",
                      uploadMethod: "uint32_upload_method",
                      conversationType: "uint32_scene",
                      uploadConfig: "rpt_upload_object",
                      fileID: "uint32_file_id",
                      fileType: "uint32_file_type",
                      fileName: "str_file_name"
                    },
                    res: {
                      str_final_ip: "uploadIP",
                      rpt_pre_sig: "preSig",
                      uint32_file_id: "fileID",
                      uint32_exist_flag: "existFlag",
                      str_download_url: "downloadUrl",
                      str_upload_url: "uploadUrl",
                      str_snapshot_url: "requestSnapshotUrl",
                      str_file_key: "fileKey"
                    }
                  }
                }), this._map.set(G.GET_IMAGE_INFO, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.CUSTOM_UPLOAD, ".").concat(G.GET_IMAGE_INFO)
                  }),
                  body: {
                    imageUrl: ""
                  },
                  keyMap: {
                    req: {
                      imageUrl: "str_image_url"
                    },
                    res: {
                      rpt_msg_image_info: "imageInfoArray",
                      uint32_image_type: "type",
                      str_url: "url",
                      uint32_width: "width",
                      uint32_height: "height",
                      str_image_format: "imageFormat"
                    }
                  }
                }), this._map.set(G.GET_IP, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.CUSTOM_UPLOAD, ".").concat(G.GET_IP)
                  }),
                  body: {
                    domainName: ""
                  },
                  keyMap: {
                    req: {
                      domainName: "str_domain"
                    },
                    res: {
                      str_final_ip: "ip"
                    }
                  }
                }), this._map.set(G.VIDEO_COVER, {
                  head: y(y({}, t), {}, {
                    servcmd: "".concat(a.NAME.CUSTOM_UPLOAD, ".").concat(G.VIDEO_COVER)
                  }),
                  body: {
                    version: 1,
                    platform: void 0,
                    coverName: void 0,
                    requestSnapshotUrl: void 0
                  },
                  keyMap: {
                    req: {
                      version: "version",
                      platform: "platform",
                      coverName: "cover_name",
                      requestSnapshotUrl: "snapshot_url"
                    },
                    res: {
                      error_code: "errorCode",
                      error_msg: "errorInfo",
                      download_url: "snapshotUrl"
                    }
                  }
                }), this._map.set(G.FETCH_COMMERCIAL_CONFIG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_CONFIG_MANAGER, ".").concat(G.FETCH_COMMERCIAL_CONFIG)
                  }),
                  body: {
                    SDKAppID: 0
                  },
                  keyMap: {
                    req: {
                      SDKAppID: "uint32_sdkappid"
                    },
                    res: {
                      int32_error_code: "errorCode",
                      str_error_message: "errorMessage",
                      str_purchase_bits: "purchaseBits",
                      uint32_expired_time: "expiredTime"
                    }
                  }
                }), this._map.set(G.PUSHED_COMMERCIAL_CONFIG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_CONFIG_MANAGER, ".").concat(G.PUSHED_COMMERCIAL_CONFIG)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      int32_error_code: "errorCode",
                      str_error_message: "errorMessage",
                      str_purchase_bits: "purchaseBits",
                      uint32_expired_time: "expiredTime"
                    }
                  }
                }), this._map.set(G.FETCH_CLOUD_CTRL_CONFIG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_CONFIG_MANAGER, ".").concat(G.FETCH_CLOUD_CTRL_CONFIG)
                  }),
                  body: {
                    SDKAppID: 0,
                    version: 0
                  },
                  keyMap: {
                    req: {
                      SDKAppID: "uint32_sdkappid",
                      version: "uint64_version"
                    },
                    res: {
                      int32_error_code: "errorCode",
                      str_error_message: "errorMessage",
                      str_json_config: "cloudControlConfig",
                      uint32_expired_time: "expiredTime",
                      uint32_sdkappid: "SDKAppID",
                      uint64_version: "version"
                    }
                  }
                }), this._map.set(G.PUSHED_CLOUD_CTRL_CONFIG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_CONFIG_MANAGER, ".").concat(G.PUSHED_CLOUD_CTRL_CONFIG)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      int32_error_code: "errorCode",
                      str_error_message: "errorMessage",
                      str_json_config: "cloudControlConfig",
                      uint32_expired_time: "expiredTime",
                      uint32_sdkappid: "SDKAppID",
                      uint64_version: "version"
                    }
                  }
                }), this._map.set(G.OVERLOAD_NOTIFY, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OVERLOAD_PUSH, ".").concat(G.OVERLOAD_NOTIFY)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      OverLoadServCmd: "overloadCommand",
                      DelaySecs: "waitingTime"
                    }
                  }
                }), this._map.set(G.SYNC_UNREAD_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SYNC_UNREAD_MSG)
                  }),
                  body: {
                    cookie: "",
                    syncFlag: 0,
                    needAbstract: 1,
                    isOnlineSync: 0,
                    needSignaling: 1,
                    needCachedMsg: 1
                  },
                  keyMap: {
                    req: {
                      fromAccount: "From_Account",
                      toAccount: "To_Account",
                      from: "From_Account",
                      to: "To_Account",
                      time: "MsgTimeStamp",
                      sequence: "MsgSeq",
                      random: "MsgRandom",
                      elements: "MsgBody"
                    },
                    res: {
                      MsgList: "messageList",
                      SyncFlag: "syncFlag",
                      To_Account: "to",
                      From_Account: "from",
                      ClientSeq: "clientSequence",
                      MsgSeq: "sequence",
                      NoticeSeq: "noticeSequence",
                      NotifySeq: "notifySequence",
                      MsgRandom: "random",
                      MsgTimeStamp: "time",
                      MsgContent: "content",
                      ToGroupId: "to",
                      MsgKey: "messageKey",
                      GroupTips: "groupTips",
                      MsgBody: "elements",
                      MsgType: "type",
                      C2CRemainingUnreadCount: "C2CRemainingUnreadList",
                      C2CPairUnreadCount: "C2CPairUnreadList"
                    }
                  }
                }), this._map.set(G.GET_PROFANITY_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_MSG_AUDIT_MGR, ".").concat(G.GET_PROFANITY_LIST)
                  }),
                  body: {
                    version: 0,
                    deviceID: "",
                    startIndex: void 0
                  },
                  keyMap: {
                    req: {
                      version: "uint64_version",
                      deviceID: "str_device_id",
                      startIndex: "uint64_start_index"
                    },
                    res: {
                      msg_cmd_error_code: "errorInfo",
                      str_err_msg: "errorMessage",
                      uint32_code: "errorCode",
                      msg_scene_ctl_config: "filterConfig",
                      uint64_c2c_custom_msg_flag: "c2c_custom_message",
                      uint64_c2c_text_msg_flag: "c2c_text_message",
                      uint64_group_custom_msg_flag: "group_custom_message",
                      uint64_group_text_msg_flag: "group_text_message",
                      uint64_group_info_flag: "group_profile",
                      uint64_group_member_info_flag: "group_member_profile",
                      uint64_relation_chain_flag: "sns",
                      uint64_user_info_flag: "user_profile",
                      rpt_msg_dirty_word: "lexicon",
                      str_dirty_word: "profanity",
                      str_replaced_content: "replacement",
                      uint64_filter_type: "filterType",
                      uint64_id: "id",
                      uint64_word_type: "profanityType",
                      uint64_complete_flag: "completeFlag",
                      uint64_next_start_index: "nextStartIndex",
                      uint64_version: "version",
                      uint64_expired_time: "expiredTime"
                    }
                  }
                }), this._map.set(G.SEND_C2C_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SEND_C2C_MSG)
                  }),
                  body: {
                    fromAccount: "",
                    toAccount: "",
                    msgSeq: 0,
                    msgRandom: 0,
                    msgBody: [],
                    cloudCustomData: void 0,
                    nick: "",
                    avatar: "",
                    msgLifeTime: void 0,
                    offlinePushInfo: {
                      pushFlag: 0,
                      title: "",
                      desc: "",
                      ext: "",
                      apnsInfo: {
                        sound: "",
                        badgeMode: 0,
                        isVoipPush: void 0,
                        image: ""
                      },
                      androidInfo: {
                        sound: "",
                        XiaoMiChannelID: "",
                        OPPOChannelID: "",
                        GoogleChannelID: "",
                        VIVOClassification: 1,
                        VIVOCategory: "",
                        HuaWeiCategory: "",
                        OPPOCategory: "",
                        HuaWeiImage: "",
                        HonorImage: "",
                        GoogleImage: "",
                        HonorImportance: ""
                      }
                    },
                    messageControlInfo: void 0,
                    clientTime: void 0,
                    needReadReceipt: 0,
                    isSupportExtension: 0,
                    isRelayMessage: 0,
                    cmConfigID: void 0,
                    forbidCallbackControl: void 0
                  },
                  keyMap: {
                    req: {
                      fromAccount: "From_Account",
                      toAccount: "To_Account",
                      msgTimeStamp: "MsgTimeStamp",
                      msgSeq: "MsgSeq",
                      msgRandom: "MsgRandom",
                      msgBody: "MsgBody",
                      count: "MaxCnt",
                      lastMessageTime: "LastMsgTime",
                      messageKey: "MsgKey",
                      peerAccount: "Peer_Account",
                      data: "Data",
                      description: "Desc",
                      extension: "Ext",
                      type: "MsgType",
                      content: "MsgContent",
                      sizeType: "Type",
                      uuid: "UUID",
                      url: "",
                      imageUrl: "URL",
                      fileUrl: "Url",
                      remoteAudioUrl: "Url",
                      remoteVideoUrl: "VideoUrl",
                      thumbUUID: "ThumbUUID",
                      videoUUID: "VideoUUID",
                      videoUrl: "",
                      downloadFlag: "Download_Flag",
                      nick: "From_AccountNick",
                      avatar: "From_AccountHeadurl",
                      from: "From_Account",
                      time: "MsgTimeStamp",
                      messageRandom: "MsgRandom",
                      messageSequence: "MsgSeq",
                      elements: "MsgBody",
                      clientSequence: "ClientSeq",
                      payload: "MsgContent",
                      messageList: "MsgList",
                      messageNumber: "MsgNum",
                      abstractList: "AbstractList",
                      messageBody: "MsgBody",
                      needReadReceipt: "IsNeedReadReceipt",
                      GoogleChannelID: "GoogleChannelID",
                      XiaoMiChannelID: "XiaoMiChannelID",
                      OPPOChannelID: "OPPOChannelID",
                      OPPOCategory: "OPPOCategory",
                      VIVOClassification: "VIVOClassification",
                      VIVOCategory: "VIVOCategory",
                      HonorImportance: "HonorImportance"
                    }
                  }
                }), this._map.set(G.SEND_GRP_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.SEND_GRP_MSG)
                  }),
                  body: {
                    fromAccount: "",
                    groupID: "",
                    random: 0,
                    clientSequence: 0,
                    priority: "",
                    msgBody: [],
                    cloudCustomData: void 0,
                    onlineOnlyFlag: 0,
                    offlinePushInfo: {
                      pushFlag: 0,
                      title: "",
                      desc: "",
                      ext: "",
                      apnsInfo: {
                        sound: "",
                        badgeMode: 0,
                        isVoipPush: void 0,
                        image: ""
                      },
                      androidInfo: {
                        sound: "",
                        XiaoMiChannelID: "",
                        OPPOChannelID: "",
                        GoogleChannelID: "",
                        VIVOClassification: 1,
                        VIVOCategory: "",
                        HuaWeiCategory: "",
                        OPPOCategory: "",
                        HuaWeiImage: "",
                        HonorImage: "",
                        GoogleImage: "",
                        HonorImportance: ""
                      }
                    },
                    groupAtInfo: [],
                    messageControlInfo: void 0,
                    clientTime: void 0,
                    needReadReceipt: 0,
                    topicID: void 0,
                    receiverList: void 0,
                    isSupportExtension: 0,
                    isRelayMessage: 0,
                    cmConfigID: void 0,
                    forbidCallbackControl: void 0
                  },
                  keyMap: {
                    req: {
                      to: "GroupId",
                      extension: "Ext",
                      data: "Data",
                      description: "Desc",
                      random: "Random",
                      sequence: "ReqMsgSeq",
                      count: "ReqMsgNumber",
                      type: "MsgType",
                      priority: "MsgPriority",
                      content: "MsgContent",
                      elements: "MsgBody",
                      sizeType: "Type",
                      uuid: "UUID",
                      url: "",
                      imageUrl: "URL",
                      fileUrl: "Url",
                      remoteAudioUrl: "Url",
                      remoteVideoUrl: "VideoUrl",
                      thumbUUID: "ThumbUUID",
                      videoUUID: "VideoUUID",
                      videoUrl: "",
                      downloadFlag: "Download_Flag",
                      clientSequence: "ClientSeq",
                      from: "From_Account",
                      time: "MsgTimeStamp",
                      messageRandom: "MsgRandom",
                      messageSequence: "MsgSeq",
                      payload: "MsgContent",
                      messageList: "MsgList",
                      messageNumber: "MsgNum",
                      abstractList: "AbstractList",
                      messageBody: "MsgBody",
                      needReadReceipt: "NeedReadReceipt",
                      receiverList: "To_Account",
                      GoogleChannelID: "GoogleChannelID",
                      XiaoMiChannelID: "XiaoMiChannelID",
                      OPPOChannelID: "OPPOChannelID",
                      OPPOCategory: "OPPOCategory",
                      VIVOClassification: "VIVOClassification",
                      VIVOCategory: "VIVOCategory",
                      HonorImportance: "HonorImportance"
                    },
                    res: {
                      MsgTime: "time",
                      MsgSeq: "sequence"
                    }
                  }
                }), this._map.set(G.REVOKE_C2C_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.REVOKE_C2C_MSG)
                  }),
                  body: {
                    msgInfo: {
                      fromAccount: "",
                      toAccount: "",
                      msgTimeStamp: 0,
                      msgSeq: 0,
                      msgRandom: 0
                    }
                  },
                  keyMap: {
                    req: {
                      msgInfo: "MsgInfo",
                      msgTimeStamp: "MsgTimeStamp",
                      msgSeq: "MsgSeq",
                      msgRandom: "MsgRandom"
                    }
                  }
                }), this._map.set(G.REVOKE_GRP_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.REVOKE_GRP_MSG)
                  }),
                  body: {
                    groupID: "",
                    msgSeqList: void 0,
                    topicID: ""
                  },
                  keyMap: {
                    req: {
                      msgSeqList: "MsgSeqList",
                      msgSeq: "MsgSeq"
                    }
                  }
                }), this._map.set(G.GET_C2C_ROAMING_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.GET_C2C_ROAMING_MSG)
                  }),
                  body: {
                    peerAccount: "",
                    count: 15,
                    lastMessageTime: 0,
                    messageKey: "",
                    withRecalledMessage: 1,
                    direction: 0
                  },
                  keyMap: {
                    req: {
                      messageKey: "MsgKey",
                      peerAccount: "Peer_Account",
                      count: "MaxCnt",
                      lastMessageTime: "LastMsgTime",
                      withRecalledMessage: "WithRecalledMsg",
                      direction: "GetDirection"
                    },
                    res: {
                      LastMsgTime: "lastMessageTime",
                      IsNeedReadReceipt: "needReadReceipt",
                      IsPeerRead: "readReceiptSentByPeer"
                    }
                  }
                }), this._map.set(G.MODIFY_C2C_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.MODIFY_C2C_MSG)
                  }),
                  body: {
                    from: "",
                    to: "",
                    sequence: 0,
                    random: 0,
                    time: 0,
                    version: 0,
                    elements: void 0,
                    cloudCustomData: void 0
                  },
                  keyMap: {
                    req: {
                      sequence: "MsgSeq",
                      random: "MsgRandom",
                      time: "MsgTime",
                      version: "MsgVersion",
                      type: "MsgType",
                      content: "MsgContent"
                    }
                  }
                }), this._map.set(G.GET_GRP_ROAMING_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_ROAMING_MSG)
                  }),
                  body: {
                    withRecalledMsg: 1,
                    groupID: "",
                    count: 15,
                    sequence: "",
                    topicID: void 0
                  },
                  keyMap: {
                    req: {
                      sequence: "ReqMsgSeq",
                      count: "ReqMsgNumber",
                      withRecalledMessage: "WithRecalledMsg"
                    },
                    res: {
                      Random: "random",
                      MsgTime: "time",
                      MsgSeq: "sequence",
                      ReqMsgSeq: "sequence",
                      RspMsgList: "messageList",
                      IsSystemMsg: "isSystemMessage",
                      ToGroupId: "to",
                      EnumFrom_AccountType: "fromAccountType",
                      EnumTo_AccountType: "toAccountType",
                      GroupCode: "groupCode",
                      MsgPriority: "priority",
                      MsgBody: "elements",
                      MsgType: "type",
                      MsgContent: "content",
                      IsFinished: "complete",
                      Download_Flag: "downloadFlag",
                      ClientSeq: "clientSequence",
                      ThumbUUID: "thumbUUID",
                      VideoUUID: "videoUUID",
                      ToTopicId: "topicID",
                      InvisibleMsgSeq: "invisibleSequenceList",
                      NextReqMsgSeq: "nextSequence"
                    }
                  }
                }), this._map.set(G.SET_C2C_MSG_READ, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SET_C2C_MSG_READ)
                  }),
                  body: {
                    C2CMsgReaded: void 0
                  },
                  keyMap: {
                    req: {
                      lastMessageTime: "LastedMsgTime"
                    }
                  }
                }), this._map.set(G.SET_C2C_PEER_MUTE_NOTIFICATIONS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SET_C2C_PEER_MUTE_NOTIFICATIONS)
                  }),
                  body: {
                    userIDList: void 0,
                    muteFlag: 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Peer_Account",
                      muteFlag: "Mute_Notifications"
                    }
                  }
                }), this._map.set(G.GET_C2C_PEER_MUTE_NOTIFICATIONS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.GET_C2C_PEER_MUTE_NOTIFICATIONS)
                  }),
                  body: {
                    toAccount: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Peer_Account"
                    },
                    res: {
                      MuteNotificationsList: "muteFlagList"
                    }
                  }
                }), this._map.set(G.SET_GRP_MSG_READ, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.SET_GRP_MSG_READ)
                  }),
                  body: {
                    groupID: void 0,
                    messageReadSeq: void 0,
                    topicID: void 0
                  },
                  keyMap: {
                    req: {
                      messageReadSeq: "MsgReadedSeq"
                    }
                  }
                }), this._map.set(G.SET_ALL_MSG_READ, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SET_ALL_MSG_READ)
                  }),
                  body: {
                    readAllC2CMessage: 0,
                    groupMessageReadInfoList: []
                  },
                  keyMap: {
                    req: {
                      readAllC2CMessage: "C2CReadAllMsg",
                      groupMessageReadInfoList: "GroupReadInfo",
                      messageSequence: "MsgSeq"
                    },
                    res: {
                      C2CReadAllMsg: "readAllC2CMessage",
                      GroupReadInfoArray: "groupMessageReadInfoList"
                    }
                  }
                }), this._map.set(G.DEL_C2C_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.DEL_C2C_MSG)
                  }),
                  body: {
                    fromAccount: "",
                    to: "",
                    keyList: void 0
                  },
                  keyMap: {
                    req: {
                      keyList: "MsgKeyList"
                    }
                  }
                }), this._map.set(G.DEL_GRP_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.DEL_GRP_MSG)
                  }),
                  body: {
                    groupID: "",
                    deleter: "",
                    keyList: void 0,
                    topicID: void 0
                  },
                  keyMap: {
                    req: {
                      deleter: "Deleter_Account",
                      keyList: "Seqs"
                    }
                  }
                }), this._map.set(G.TRANSLATE_TEXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_TRANSLATE, ".").concat(G.TRANSLATE_TEXT)
                  }),
                  body: {
                    sourceTextList: void 0,
                    SDKAppID: 0,
                    from: 0,
                    source: "",
                    target: ""
                  },
                  keyMap: {
                    req: {
                      sourceTextList: "SourceText",
                      SDKAppID: "SdkAppId",
                      from: "FromAccount"
                    },
                    res: {
                      TargetText: "translatedTextList",
                      RequestId: "requestID",
                      CmdErrorCode: "error",
                      ErrorCode: "code",
                      ErrorInfo: "message"
                    }
                  }
                }), this._map.set(G.VOICE_TO_TEXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_SPEECH, ".").concat(G.VOICE_TO_TEXT)
                  }),
                  body: {
                    url: "",
                    SDKAppID: 0,
                    format: "",
                    sourceType: 0,
                    language: ""
                  },
                  keyMap: {
                    req: {
                      url: "BytesUrl",
                      SDKAppID: "Uint32Sdkappid",
                      format: "BytesVoiceFormat",
                      sourceType: "Uint64SourceType",
                      language: "BytesEngServiceType"
                    },
                    res: {
                      BytesRequestid: "requestID",
                      BytesResult: "result",
                      CmdErrorCode: "error",
                      ErrorCode: "code",
                      ErrorInfo: "message"
                    }
                  }
                }), this._map.set(G.MODIFY_GRP_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.MODIFY_GRP_MSG)
                  }),
                  body: {
                    groupID: "",
                    topicID: void 0,
                    sequence: 0,
                    version: 0,
                    elements: void 0,
                    cloudCustomData: void 0
                  },
                  keyMap: {
                    req: {
                      sequence: "MsgSeq",
                      version: "MsgVersion",
                      type: "MsgType",
                      content: "MsgContent"
                    }
                  }
                }), this._map.set(G.GET_READ_RECEIPT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_READ_RECEIPT)
                  }),
                  body: {
                    groupID: "",
                    sequenceList: void 0
                  },
                  keyMap: {
                    req: {
                      sequence: "MsgSeq"
                    }
                  }
                }), this._map.set(G.SEND_C2C_READ_RECEIPT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.SEND_C2C_READ_RECEIPT)
                  }),
                  body: {
                    peerAccount: "",
                    messageInfoList: void 0
                  },
                  keyMap: {
                    req: {
                      peerAccount: "Peer_Account",
                      messageInfoList: "C2CMsgInfo",
                      fromAccount: "From_Account",
                      toAccount: "To_Account",
                      sequence: "MsgSeq",
                      random: "MsgRandom",
                      time: "MsgTime",
                      clientTime: "MsgClientTime"
                    }
                  }
                }), this._map.set(G.SEND_READ_RECEIPT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.SEND_READ_RECEIPT)
                  }),
                  body: {
                    groupID: "",
                    sequenceList: void 0
                  },
                  keyMap: {
                    req: {
                      sequenceList: "MsgSeqList",
                      sequence: "MsgSeq"
                    }
                  }
                }), this._map.set(G.GET_READ_RECEIPT_DETAIL, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_READ_RECEIPT_DETAIL)
                  }),
                  body: {
                    groupID: "",
                    sequence: void 0,
                    flag: 0,
                    cursor: 0,
                    count: 0
                  },
                  keyMap: {
                    req: {
                      sequence: "MsgSeq",
                      count: "Num"
                    },
                    res: {
                      ReadList: "readUserIDList",
                      Read_Account: "userID",
                      UnreadList: "unreadUserIDList",
                      Unread_Account: "userID",
                      IsFinish: "isCompleted"
                    }
                  }
                }), this._map.set(G.GET_GRP_RECEIPTS_BY_USERS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_RECEIPTS_BY_USERS)
                  }),
                  body: {
                    groupID: "",
                    dataList: void 0
                  },
                  keyMap: {
                    req: {
                      dataList: "MemberReadMsgList",
                      sequence: "MsgSeq",
                      userIDList: "MemberList_Account"
                    },
                    res: {
                      MsgReadList: "dataList",
                      Read_Account: "userID",
                      Read_Time: "readTime"
                    }
                  }
                }), this._map.set(G.MODIFY_C2C_MSG_EXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.MODIFY_C2C_MSG_EXT)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKey: void 0,
                    operateType: void 0,
                    extensionList: void 0
                  }
                }), this._map.set(G.GET_C2C_MSG_EXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_C2C_MSG_EXT)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKey: void 0,
                    startSequence: void 0
                  }
                }), this._map.set(G.MODIFY_GRP_MSG_EXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.MODIFY_GRP_MSG_EXT)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequence: void 0,
                    operateType: void 0,
                    extensionList: void 0
                  }
                }), this._map.set(G.GET_GRP_MSG_EXT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_GRP_MSG_EXT)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequence: void 0,
                    startSequence: void 0
                  }
                }), this._map.set(G.ADD_C2C_MSG_REACTION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.ADD_C2C_MSG_REACTION)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Add_Account"
                    }
                  }
                }), this._map.set(G.RM_C2C_MSG_REACTION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.RM_C2C_MSG_REACTION)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Del_Account"
                    }
                  }
                }), this._map.set(G.GET_C2C_MSG_REACTIONS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_C2C_MSG_REACTIONS)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKeyList: void 0,
                    count: void 0
                  }
                }), this._map.set(G.GET_C2C_MSG_REACTION_USER_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_C2C_MSG_REACTION_USER_LIST)
                  }),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    count: void 0
                  }
                }), this._map.set(G.ADD_GRP_MSG_REACTION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.ADD_GRP_MSG_REACTION)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Add_Account"
                    }
                  }
                }), this._map.set(G.RM_GRP_MSG_REACTION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.RM_GRP_MSG_REACTION)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Del_Account"
                    }
                  }
                }), this._map.set(G.GET_GRP_MSG_REACTIONS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_GRP_MSG_REACTIONS)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequenceList: void 0,
                    count: void 0
                  },
                  keyMap: {
                    res: {
                      MsgSeq: "messageSequence"
                    }
                  }
                }), this._map.set(G.GET_GRP_MSG_REACTION_USER_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM_MSG_EXT, ".").concat(G.GET_GRP_MSG_REACTION_USER_LIST)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    nextSeq: void 0,
                    count: void 0
                  }
                }), this._map.set(G.GET_C2C_PEER_READ_TIME, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.GET_C2C_PEER_READ_TIME)
                  }),
                  body: {
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "To_Account"
                    },
                    res: {
                      ReadTime: "peerReadTimeList"
                    }
                  }
                }), this._map.set(G.PAGING_GET_CONV_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.PAGING_GET_CONV_LIST)
                  }),
                  body: {
                    fromAccount: void 0,
                    timeStamp: void 0,
                    startIndex: void 0,
                    pinnedTimeStamp: void 0,
                    pinnedStartIndex: void 0,
                    orderType: void 0,
                    messageAssistFlag: 15,
                    assistFlag: 31
                  },
                  keyMap: {
                    req: {
                      messageAssistFlag: "MsgAssistFlags",
                      assistFlag: "AssistFlags",
                      pinnedTimeStamp: "TopTimeStamp",
                      pinnedStartIndex: "TopStartIndex"
                    },
                    res: {
                      SessionItem: "conversations",
                      ToAccount: "groupID",
                      To_Account: "userID",
                      UnreadMsgCount: "unreadCount",
                      MsgGroupReadedSeq: "messageReadSeq",
                      C2cPeerReadTime: "c2cPeerReadTime",
                      LastMsgFlags: "lastMessageFlag",
                      TopFlags: "isPinned",
                      TopTimeStamp: "pinnedTimeStamp",
                      TopStartIndex: "pinnedStartIndex",
                      GroupId: "convGroupID",
                      C2cRemark: "friendRemark",
                      MsgRecvOption: "messageRemindType",
                      GroupIgnoredUnreadSeqCount: "noUnreadCount",
                      GroupNextMsgSeq: "nextMessageSeq"
                    }
                  }
                }), this._map.set(G.DEL_CONV, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.DEL_CONV)
                  }),
                  body: {
                    fromAccount: "",
                    conversationList: void 0,
                    clearHistoryMessage: void 0
                  },
                  keyMap: {
                    req: {
                      toGroupID: "ToGroupid",
                      clearHistoryMessage: "ClearRamble",
                      conversationList: "ContactItem"
                    },
                    res: {
                      ResultItem: "resultList",
                      ToGroupid: "groupID",
                      ResultCode: "code",
                      ResultInfo: "info"
                    }
                  }
                }), this._map.set(G.CLEAR_HISTORY_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.CLEAR_HISTORY_MSG)
                  }),
                  body: {
                    fromAccount: "",
                    toAccount: void 0,
                    type: 1,
                    toGroupID: void 0
                  },
                  keyMap: {
                    req: {
                      toGroupID: "ToGroupid"
                    }
                  }
                }), this._map.set(G.PIN_CONV, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.PIN_CONV)
                  }),
                  body: {
                    fromAccount: "",
                    operationType: 1,
                    itemList: void 0
                  },
                  keyMap: {
                    req: {
                      itemList: "RecentContactItem"
                    }
                  }
                }), this._map.set(G.DEL_GROUP_AT_TIPS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.DEL_GROUP_AT_TIPS)
                  }),
                  body: {
                    messageListToDelete: void 0
                  },
                  keyMap: {
                    req: {
                      messageListToDelete: "DelMsgList",
                      messageSeq: "MsgSeq",
                      messageRandom: "MsgRandom"
                    }
                  }
                }), this._map.set(G.SET_CONV_CUSTOM_DATA, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.MARK_CONV)
                  }),
                  body: {
                    fromAccount: "",
                    itemList: void 0
                  },
                  keyMap: {
                    req: {
                      itemList: "MarkItem",
                      operationType: "OptType",
                      groupID: "ToGroupId"
                    },
                    res: {
                      ToGroupId: "groupID",
                      OptType: "operationType"
                    }
                  }
                }), this._map.set(G.MARK_CONV, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.MARK_CONV)
                  }),
                  body: {
                    fromAccount: "",
                    itemList: void 0
                  },
                  keyMap: {
                    req: {
                      itemList: "MarkItem",
                      operationType: "OptType",
                      groupID: "ToGroupId"
                    },
                    res: {
                      ToGroupId: "groupID",
                      OptType: "operationType"
                    }
                  }
                }), this._map.set(G.CREATE_CONV_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.CREATE_CONV_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    itemList: void 0
                  },
                  keyMap: {
                    req: {
                      itemList: "GroupContactItem",
                      groupID: "ToGroupId"
                    },
                    res: {
                      GroupId: "convGroupID",
                      ToGroupId: "groupID",
                      OptType: "operationType"
                    }
                  }
                }), this._map.set(G.DEL_CONV_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.DEL_CONV_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    groupName: void 0
                  },
                  keyMap: {
                    res: {
                      GroupId: "convGroupID"
                    }
                  }
                }), this._map.set(G.RENAME_CONV_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.RENAME_CONV_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    updateType: void 0,
                    updateGroup: void 0
                  },
                  keyMap: {
                    req: {
                      oldName: "OldGroupName",
                      newName: "NewGroupName",
                      groupID: "ToGroupId",
                      operationType: "ContactOptType",
                      groupName: "OldGroupName",
                      updateItem: "ContactUpdateItem"
                    },
                    res: {
                      ContactOptType: "operationType",
                      ToGroupId: "groupID",
                      GroupId: "convGroupID"
                    }
                  }
                }), this._map.set(G.ADD_CONV_TO_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.RENAME_CONV_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    updateType: void 0,
                    updateGroup: {
                      groupName: void 0,
                      updateGroupType: void 0,
                      updateItem: void 0
                    }
                  }
                }), this._map.set(G.DEL_CONV_FROM_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.RENAME_CONV_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    updateType: void 0,
                    updateGroup: void 0
                  }
                }), this._map.set(G.GET_CONV_GRP_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.GET_CONV_GRP_LIST)
                  }),
                  body: {
                    fromAccount: "",
                    startIndex: void 0
                  },
                  keyMap: {
                    res: {
                      GroupId: "convGroupID",
                      ToGroupId: "groupID",
                      OptType: "operationType",
                      CustomMark: "customData",
                      ContactGroupId: "convGroupIDList"
                    }
                  }
                }), this._map.set(G.SEARCH_CONV_GRP_MARK, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.RECENT_CONTACT, ".").concat(G.SEARCH_CONV_GRP_MARK)
                  }),
                  body: {
                    fromAccount: "",
                    contactItem: void 0
                  },
                  keyMap: {
                    req: {
                      groupID: "ToGroupId"
                    },
                    res: {
                      GroupId: "convGroupID",
                      ToGroupId: "groupID",
                      OptType: "operationType",
                      CustomMark: "customData",
                      ContactGroupId: "convGroupIDList",
                      ContactResultItem: "contactItem"
                    }
                  }
                }), this._map.set(G.GET_USER_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.PROFILE, ".").concat(G.GET_USER_PROFILE)
                  }),
                  body: {
                    fromAccount: "",
                    userItem: []
                  },
                  keyMap: {
                    req: {
                      toAccount: "To_Account",
                      standardSequence: "StandardSequence",
                      customSequence: "CustomSequence"
                    }
                  }
                }), this._map.set(G.UPDATE_MY_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.PROFILE, ".").concat(G.UPDATE_MY_PROFILE)
                  }),
                  body: {
                    fromAccount: "",
                    profileItem: [{
                      tag: f.NICK,
                      value: ""
                    }, {
                      tag: f.GENDER,
                      value: ""
                    }, {
                      tag: f.ALLOWTYPE,
                      value: ""
                    }, {
                      tag: f.AVATAR,
                      value: ""
                    }]
                  },
                  keyMap: {
                    req: {
                      toAccount: "To_Account",
                      standardSequence: "StandardSequence",
                      customSequence: "CustomSequence"
                    }
                  }
                }), this._map.set(G.GET_BL, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.GET_BL)
                  }),
                  body: {
                    fromAccount: "",
                    startIndex: 0,
                    maxLimited: 30
                  }
                }), this._map.set(G.ADD_TO_BL, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.ADD_TO_BL)
                  }),
                  body: {
                    fromAccount: "",
                    toAccount: []
                  }
                }), this._map.set(G.RM_FROM_BL, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.RM_FROM_BL)
                  }),
                  body: {
                    fromAccount: "",
                    toAccount: []
                  }
                }), this._map.set(G.SET_SELF_STATUS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.SET_SELF_STATUS)
                  }),
                  body: {
                    customStatus: ""
                  }
                }), this._map.set(G.GET_USER_STATUS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.GET_USER_STATUS)
                  }),
                  body: {
                    userIDList: void 0
                  },
                  keyMap: {
                    res: {
                      UserStatusList: "successUserList",
                      ErrorList: "failureUserList",
                      To_Account: "userID",
                      Invalid_Account: "invalidUserID",
                      Status: "statusType"
                    }
                  }
                }), this._map.set(G.SUB_USER_STATUS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.SUB_USER_STATUS)
                  }),
                  body: {
                    userIDList: void 0
                  },
                  keyMap: {
                    res: {
                      ErrorList: "failureUserList",
                      To_Account: "userID",
                      Invalid_Account: "invalidUserID"
                    }
                  }
                }), this._map.set(G.UNSUB_USER_STATUS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.UNSUB_USER_STATUS)
                  }),
                  body: {
                    userIDList: void 0,
                    unsubscribeAll: void 0
                  },
                  keyMap: {
                    res: {
                      ErrorList: "failureUserList",
                      To_Account: "userID",
                      Invalid_Account: "invalidUserID"
                    }
                  }
                }), this._map.set(G.GET_FD_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.GET_FD_LIST)
                  }),
                  body: {
                    fromAccount: "",
                    startIndex: 0,
                    standardSequence: 0,
                    customSequence: 0
                  },
                  keyMap: {
                    res: {
                      FriendNum: "friendCount",
                      UserDataItem: "resultList",
                      ValueItem: "tagValueList"
                    }
                  }
                }), this._map.set(G.ADD_FD, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.ADD_FD)
                  }),
                  body: {
                    fromAccount: "",
                    addFriendItem: [],
                    type: ""
                  },
                  keyMap: {
                    req: {
                      source: "AddSource",
                      wording: "AddWording",
                      type: "AddType"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.UPDATE_FD, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.UPDATE_FD)
                  }),
                  body: {
                    fromAccount: "",
                    updateItem: void 0
                  },
                  keyMap: {
                    req: {
                      snsItem: "SnsItem"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.DEL_FD, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.DEL_FD)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: [],
                    type: ""
                  },
                  keyMap: {
                    req: {
                      type: "DeleteType"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.GET_FD_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.GET_FD_PROFILE)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: void 0
                  },
                  keyMap: {
                    res: {
                      InfoItem: "resultList",
                      SnsProfileItem: "tagValueList"
                    }
                  }
                }), this._map.set(G.CHECK_FD, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.CHECK_FD)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: [],
                    type: ""
                  },
                  keyMap: {
                    req: {
                      type: "CheckType"
                    },
                    res: {
                      InfoItem: "resultList"
                    }
                  }
                }), this._map.set(G.GET_FD_APPLICATION_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.GET_FD_APPLICATION_LIST)
                  }),
                  body: {
                    fromAccount: "",
                    applicationType: "",
                    startTime: 0,
                    maxLimited: 0,
                    lastSequence: 0
                  },
                  keyMap: {
                    res: {
                      PendencyItem: "resultList",
                      AddSource: "source",
                      AddTime: "time",
                      AddWording: "wording",
                      Image: "avatar",
                      UnreadPendencyCount: "unreadCount",
                      To_Account: "userID",
                      PendencyType: "type"
                    }
                  }
                }), this._map.set(G.RESPOND_FD_APPLICATION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.RESPOND_FD_APPLICATION)
                  }),
                  body: {
                    fromAccount: "",
                    responseFriendItem: []
                  },
                  keyMap: {
                    req: {
                      tag: "TagName",
                      action: "ResponseAction"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.DEL_FD_APPLICATION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.DEL_FD_APPLICATION)
                  }),
                  body: {
                    fromAccount: "",
                    type: "",
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      type: "PendencyType",
                      userIDList: "To_Account"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.REPORT_FD_APPLICATION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.REPORT_FD_APPLICATION)
                  }),
                  body: {
                    fromAccount: "",
                    latestTimeStamp: ""
                  },
                  keyMap: {
                    req: {
                      latestTimeStamp: "LatestPendencyTimeStamp"
                    }
                  }
                }), this._map.set(G.CREATE_FD_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.CREATE_FD_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    groupName: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      groupName: "GroupName",
                      userIDList: "To_Account"
                    },
                    res: {
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.DEL_FD_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.DEL_FD_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    nameList: void 0
                  },
                  keyMap: {
                    req: {
                      nameList: "GroupName"
                    }
                  }
                }), this._map.set(G.GET_FD_GRP_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.GET_FD_GRP_LIST)
                  }),
                  body: {
                    fromAccount: "",
                    lastSequence: 0,
                    needFriend: "Need_Friend_Type_Yes"
                  },
                  keyMap: {
                    res: {
                      ResultItem: "resultList",
                      GroupName: "name",
                      FriendNumber: "friendCount",
                      To_Account: "userIDList"
                    }
                  }
                }), this._map.set(G.UPDATE_FD_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FD, ".").concat(G.UPDATE_FD_GRP)
                  }),
                  body: {
                    fromAccount: "",
                    oldName: "",
                    newName: void 0,
                    updateGroupItem: void 0
                  },
                  keyMap: {
                    req: {
                      oldName: "GroupOldName",
                      newName: "GroupNewName"
                    },
                    res: {
                      UpdateType: "type",
                      ResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.GET_GRP_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_LIST)
                  }),
                  body: {
                    memberAccount: "",
                    limit: void 0,
                    offset: void 0,
                    groupType: void 0,
                    responseFilter: {
                      groupBaseInfoFilter: void 0,
                      selfInfoFilter: void 0
                    },
                    isSupportTopic: 0,
                    needAppDefineData: 1
                  },
                  keyMap: {
                    req: {
                      memberAccount: "Member_Account"
                    },
                    res: {
                      GroupIdList: "groups",
                      MsgSeq: "readedSequence",
                      LastRecallTime: "_lastRevokedTime",
                      AppDefinedData: "groupCustomField"
                    }
                  }
                }), this._map.set(G.GET_GRP_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_PROFILE)
                  }),
                  body: {
                    groupIDList: void 0,
                    responseFilter: {
                      groupBaseInfoFilter: void 0,
                      groupCustomFieldFilter: void 0,
                      memberInfoFilter: void 0,
                      memberCustomFieldFilter: void 0
                    }
                  },
                  keyMap: {
                    req: {
                      groupIDList: "GroupIdList",
                      groupCustomField: "AppDefinedData",
                      memberCustomField: "AppMemberDefinedData",
                      groupCustomFieldFilter: "AppDefinedDataFilter_Group",
                      memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                    },
                    res: {
                      GroupIdList: "groups",
                      AppDefinedData: "groupCustomField",
                      AppMemberDefinedData: "memberCustomField",
                      AppDefinedDataFilter_Group: "groupCustomFieldFilter",
                      AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                      InfoSeq: "infoSequence",
                      MemberList: "members",
                      GroupInfo: "groups",
                      ShutUpUntil: "muteUntil",
                      ShutUpAllMember: "muteAllMembers"
                    }
                  }
                }), this._map.set(G.CREATE_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.CREATE_GRP)
                  }),
                  body: {
                    type: void 0,
                    name: void 0,
                    groupID: void 0,
                    ownerID: void 0,
                    introduction: void 0,
                    notification: void 0,
                    maxMemberNum: void 0,
                    joinOption: void 0,
                    memberList: void 0,
                    groupCustomField: void 0,
                    memberCustomField: void 0,
                    webPushFlag: 1,
                    avatar: "",
                    isSupportTopic: void 0,
                    inviteOption: void 0
                  },
                  keyMap: {
                    req: {
                      ownerID: "Owner_Account",
                      userID: "Member_Account",
                      avatar: "FaceUrl",
                      maxMemberNum: "MaxMemberCount",
                      joinOption: "ApplyJoinOption",
                      groupCustomField: "AppDefinedData",
                      memberCustomField: "AppMemberDefinedData",
                      inviteOption: "InviteJoinOption"
                    },
                    res: {
                      HugeGroupFlag: "avChatRoomFlag",
                      OverJoinedGroupLimit_Account: "overLimitUserIDList"
                    }
                  }
                }), this._map.set(G.DISMISS_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.DISMISS_GRP)
                  }),
                  body: {
                    groupID: void 0
                  }
                }), this._map.set(G.UPDATE_GRP_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.UPDATE_GRP_PROFILE)
                  }),
                  body: {
                    groupID: void 0,
                    name: void 0,
                    introduction: void 0,
                    notification: void 0,
                    avatar: void 0,
                    joinOption: void 0,
                    groupCustomField: void 0,
                    muteAllMembers: void 0,
                    inviteOption: void 0
                  },
                  keyMap: {
                    req: {
                      groupCustomField: "AppDefinedData",
                      muteAllMembers: "ShutUpAllMember",
                      joinOption: "ApplyJoinOption",
                      avatar: "FaceUrl",
                      inviteOption: "InviteJoinOption"
                    },
                    res: {
                      AppDefinedData: "groupCustomField",
                      ShutUpAllMember: "muteAllMembers"
                    }
                  }
                }), this._map.set(G.APPLY_JOIN_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.APPLY_JOIN_GRP)
                  }),
                  body: {
                    groupID: void 0,
                    applyMessage: void 0,
                    userDefinedField: void 0,
                    webPushFlag: 1,
                    historyMessageFlag: void 0
                  },
                  keyMap: {
                    req: {
                      applyMessage: "ApplyMsg",
                      historyMessageFlag: "HugeGroupHistoryMsgFlag"
                    },
                    res: {
                      HugeGroupFlag: "avChatRoomFlag",
                      AVChatRoomKey: "avChatRoomKey",
                      RspMsgList: "messageList",
                      ToGroupId: "to"
                    }
                  }
                }), this._map.set(G.APPLY_JOIN_GRP_NOAUTH, (e.a2, e.tinyid, {
                  head: y(y({}, W(e, ha)), {}, {
                    servcmd: "".concat(a.NAME.BIG_GRP_NO_AUTH, ".").concat(G.APPLY_JOIN_GRP)
                  }),
                  body: {
                    groupID: void 0,
                    applyMessage: void 0,
                    userDefinedField: void 0,
                    webPushFlag: 1
                  },
                  keyMap: {
                    req: {
                      applyMessage: "ApplyMsg"
                    },
                    res: {
                      HugeGroupFlag: "avChatRoomFlag"
                    }
                  }
                })), this._map.set(G.QUIT_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.QUIT_GRP)
                  }),
                  body: {
                    groupID: void 0
                  }
                }), this._map.set(G.SEARCH_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.SEARCH_GRP)
                  }),
                  body: {
                    groupIDList: void 0,
                    responseFilter: {
                      groupBasePublicInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "CreateTime", "Owner_Account", "LastInfoTime", "LastMsgTime", "NextMsgSeq", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "InviteJoinOption"]
                    }
                  }
                }), this._map.set(G.CHANGE_GRP_OWNER, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.CHANGE_GRP_OWNER)
                  }),
                  body: {
                    groupID: void 0,
                    newOwnerID: void 0
                  },
                  keyMap: {
                    req: {
                      newOwnerID: "NewOwner_Account"
                    }
                  }
                }), this._map.set(G.HANDLE_GRP_APPLICATION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.HANDLE_GRP_APPLICATION)
                  }),
                  body: {
                    groupID: void 0,
                    applicant: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    messageKey: void 0,
                    userDefinedField: void 0
                  },
                  keyMap: {
                    req: {
                      applicant: "Applicant_Account",
                      handleAction: "HandleMsg",
                      handleMessage: "ApprovalMsg",
                      messageKey: "MsgKey"
                    }
                  }
                }), this._map.set(G.HANDLE_INVITE_JOIN_GRP, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.HANDLE_INVITE_JOIN_GRP)
                  }),
                  body: {
                    groupID: void 0,
                    applicant: void 0,
                    invitee: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    userDefinedField: void 0
                  },
                  keyMap: {
                    req: {
                      applicant: "Applicant_Account",
                      invitee: "Invited_Account",
                      handleAction: "HandleMsg",
                      handleMessage: "ApprovalMsg"
                    }
                  }
                }), this._map.set(G.HANDLE_GRP_INVITATION, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.HANDLE_GRP_INVITATION)
                  }),
                  body: {
                    groupID: void 0,
                    inviter: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    messageKey: void 0,
                    userDefinedField: void 0
                  },
                  keyMap: {
                    req: {
                      inviter: "Inviter_Account",
                      handleAction: "HandleMsg",
                      handleMessage: "ApprovalMsg",
                      messageKey: "MsgKey"
                    }
                  }
                }), this._map.set(G.GET_GRP_PENDENCY, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_PENDENCY)
                  }),
                  body: {
                    startTime: void 0,
                    limit: void 0,
                    handleAccount: void 0
                  },
                  keyMap: {
                    req: {
                      handleAccount: "Handle_Account"
                    },
                    res: {
                      To_Account: "userID",
                      ApplyInviteMsg: "note"
                    }
                  }
                }), this._map.set(G.DEL_GRP_SYSTEM_NOTICE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.DEL_GRP_SYSTEM_NOTICE)
                  }),
                  body: {
                    messageListToDelete: void 0
                  },
                  keyMap: {
                    req: {
                      messageListToDelete: "DelMsgList",
                      messageSeq: "MsgSeq",
                      messageRandom: "MsgRandom"
                    }
                  }
                }), this._map.set(G.AV_POLLING, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.BIG_GRP_POLLING, ".").concat(G.AV_POLLING)
                  }),
                  body: {
                    USP: 1,
                    startSeq: 1,
                    startBroadcastSeq: void 0,
                    holdTime: 90,
                    key: void 0,
                    simplifiedMessage: void 0
                  },
                  keyMap: {
                    req: {
                      USP: "USP"
                    },
                    res: {
                      ToGroupId: "groupID",
                      RspBroadcastMsgList: "broadcastMessageList",
                      IsSystemMsg: "isSystemMessage"
                    }
                  }
                }), this._map.set(G.AV_NOAUTH_POLLING, (e.a2, e.tinyid, {
                  head: y(y({}, W(e, ga)), {}, {
                    servcmd: "".concat(a.NAME.BIG_GRP_POLLING_NO_AUTH, ".").concat(G.AV_POLLING)
                  }),
                  body: {
                    USP: 1,
                    startSeq: 1,
                    holdTime: 90,
                    key: void 0,
                    simplifiedMessage: void 0
                  },
                  keyMap: {
                    req: {
                      USP: "USP"
                    },
                    res: {
                      ToGroupId: "groupID",
                      RspBroadcastMsgList: "broadcastMessageList",
                      IsSystemMsg: "isSystemMessage"
                    }
                  }
                })), this._map.set(G.GET_ONLINE_MBR_NUM, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_ONLINE_MBR_NUM)
                  }),
                  body: {
                    groupID: void 0
                  },
                  keyMap: {
                    res: {
                      OnlineMemberNum: "memberCount"
                    }
                  }
                }), this._map.set(G.SET_GRP_ATTR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.SET_GRP_ATTR)
                  }),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ["RaceConflict"]
                  },
                  keyMap: {
                    req: {
                      key: "key",
                      value: "value"
                    }
                  }
                }), this._map.set(G.MODIFY_GRP_ATTR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.MODIFY_GRP_ATTR)
                  }),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ["RaceConflict"]
                  },
                  keyMap: {
                    req: {
                      key: "key",
                      value: "value"
                    }
                  }
                }), this._map.set(G.DEL_GRP_ATTR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.DEL_GRP_ATTR)
                  }),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ["RaceConflict"]
                  },
                  keyMap: {
                    req: {
                      key: "key"
                    }
                  }
                }), this._map.set(G.CLEAR_GRP_ATTR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.CLEAR_GRP_ATTR)
                  }),
                  body: {
                    groupID: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ["RaceConflict"]
                  }
                }), this._map.set(G.GET_GRP_ATTR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_ATTR, ".").concat(G.GET_GRP_ATTR)
                  }),
                  body: {
                    groupID: void 0,
                    avChatRoomKey: void 0,
                    groupType: 1
                  },
                  keyMap: {
                    req: {
                      avChatRoomKey: "Key",
                      groupType: "GroupType"
                    }
                  }
                }), this._map.set(G.GET_GRP_NOTIFY, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_NOTIFY)
                  }),
                  body: {
                    notifyReqList: []
                  },
                  keyMap: {
                    req: {
                      notifyReqList: "NotifyReqList"
                    },
                    res: {
                      NextMsgTime: "nextRevokedTime",
                      NotifyMsgList: "notifyList",
                      NotifyRspList: "notifyRspList"
                    }
                  }
                }), this._map.set(G.UPDATE_GRP_COUNTER, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.UPDATE_GRP_COUNTER)
                  }),
                  body: {
                    groupID: void 0,
                    counterList: void 0,
                    avChatRoomKey: void 0,
                    mode: void 0
                  },
                  keyMap: {
                    req: {
                      counterList: "GroupCounter"
                    }
                  }
                }), this._map.set(G.GET_GRP_COUNTER, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_COUNTER)
                  }),
                  body: {
                    groupID: void 0,
                    keyList: [],
                    avChatRoomKey: void 0
                  },
                  keyMap: {
                    req: {
                      keyList: "GroupCounterKeys"
                    }
                  }
                }), this._map.set(G.CREATE_TOPIC, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_COMMUNITY, ".").concat(G.CREATE_TOPIC)
                  }),
                  body: {
                    groupID: void 0,
                    topicName: void 0,
                    avatar: void 0,
                    customData: void 0,
                    topicID: void 0,
                    notification: void 0,
                    introduction: void 0
                  },
                  keyMap: {
                    req: {
                      avatar: "FaceUrl"
                    }
                  }
                }), this._map.set(G.DEL_TOPIC, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_COMMUNITY, ".").concat(G.DEL_TOPIC)
                  }),
                  body: {
                    groupID: void 0,
                    topicIDList: void 0
                  },
                  keyMap: {
                    req: {
                      topicIDList: "TopicIdList"
                    },
                    res: {
                      DestroyResultItem: "resultList"
                    }
                  }
                }), this._map.set(G.UPDATE_TOPIC_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_COMMUNITY, ".").concat(G.UPDATE_TOPIC_PROFILE)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    avatar: void 0,
                    customData: void 0,
                    notification: void 0,
                    introduction: void 0,
                    muteAllMembers: void 0,
                    topicName: void 0
                  },
                  keyMap: {
                    req: {
                      avatar: "FaceUrl",
                      muteAllMembers: "ShutUpAllMember"
                    }
                  }
                }), this._map.set(G.GET_TOPIC_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_COMMUNITY, ".").concat(G.GET_TOPIC_LIST)
                  }),
                  body: {
                    groupID: void 0,
                    topicIDList: void 0,
                    MemberInfoFilter: ["NoUnreadSeqList"]
                  },
                  keyMap: {
                    req: {
                      topicIDList: "TopicIdList"
                    },
                    res: {
                      TopicAndSelfInfo: "topicInfoList",
                      TopicInfo: "topic",
                      GroupID: "groupID",
                      ShutUpTime: "muteTime",
                      ShutUpAllFlag: "muteAllMembers",
                      LastMsgTime: "lastMessageTime",
                      MsgSeq: "readedSequence",
                      LastMsgSeq: "sequence"
                    }
                  }
                }), this._map.set(G.GET_GRP_MBR_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_MBR_LIST)
                  }),
                  body: {
                    groupID: void 0,
                    limit: 0,
                    offset: void 0,
                    next: void 0,
                    memberRoleFilter: void 0,
                    memberInfoFilter: void 0,
                    memberCustomFieldFilter: void 0
                  },
                  keyMap: {
                    req: {
                      memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                    },
                    res: {
                      AppMemberDefinedData: "memberCustomField",
                      AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                      MemberList: "members",
                      ShutUpUntil: "muteUntil"
                    }
                  }
                }), this._map.set(G.GET_AV_MBR_LIST, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_AV, ".").concat(G.GET_AV_MBR_LIST)
                  }),
                  body: {
                    groupID: void 0,
                    offset: void 0,
                    filter: void 0
                  },
                  keyMap: {
                    req: {
                      offset: "Timestamp",
                      filter: "Mark"
                    },
                    res: {
                      NextTimestamp: "offset"
                    }
                  }
                }), this._map.set(G.GET_GRP_MBR_PROFILE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.GET_GRP_MBR_PROFILE)
                  }),
                  body: {
                    groupID: void 0,
                    userIDList: void 0,
                    memberInfoFilter: void 0,
                    memberCustomFieldFilter: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "Member_List_Account",
                      memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                    },
                    res: {
                      MemberList: "members",
                      ShutUpUntil: "muteUntil",
                      AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                      AppMemberDefinedData: "memberCustomField"
                    }
                  }
                }), this._map.set(G.ADD_GRP_MBR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.ADD_GRP_MBR)
                  }),
                  body: {
                    groupID: void 0,
                    silence: void 0,
                    userIDList: void 0
                  },
                  keyMap: {
                    req: {
                      userID: "Member_Account",
                      userIDList: "MemberList"
                    },
                    res: {
                      MemberList: "members"
                    }
                  }
                }), this._map.set(G.DEL_GRP_MBR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.DEL_GRP_MBR)
                  }),
                  body: {
                    groupID: void 0,
                    userIDList: void 0,
                    reason: void 0
                  },
                  keyMap: {
                    req: {
                      userIDList: "MemberToDel_Account"
                    }
                  }
                }), this._map.set(G.BAN_AV_MBR, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.BAN_AV_MBR)
                  }),
                  body: {
                    groupID: void 0,
                    userIDList: void 0,
                    duration: void 0,
                    reason: ""
                  },
                  keyMap: {
                    req: {
                      userIDList: "Members_Account",
                      duration: "Duration",
                      reason: "Description"
                    }
                  }
                }), this._map.set(G.MODIFY_GRP_MBR_INFO, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP, ".").concat(G.MODIFY_GRP_MBR_INFO)
                  }),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    userID: void 0,
                    messageRemindType: void 0,
                    nameCard: void 0,
                    role: void 0,
                    memberCustomField: void 0,
                    muteTime: void 0
                  },
                  keyMap: {
                    req: {
                      userID: "Member_Account",
                      memberCustomField: "AppMemberDefinedData",
                      muteTime: "ShutUpTime",
                      messageRemindType: "MsgFlag"
                    }
                  }
                }), this._map.set(G.MARK_AV_MBR_INFO, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_AV, ".").concat(G.MARK_AV_MBR_INFO)
                  }),
                  body: {
                    groupID: void 0,
                    operationType: 1,
                    memberList: []
                  },
                  keyMap: {
                    req: {
                      operationType: "CommandType",
                      memberList: "MemberList",
                      markType: "Marks",
                      userID: "Member_Account"
                    },
                    res: {
                      CommandType: "operationType",
                      Marks: "markType",
                      Member_Account: "userID"
                    }
                  }
                }), this._map.set(G.CS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.MSG_SEARCH, ".").concat(G.CS)
                  }),
                  body: {
                    keywordList: void 0,
                    keywordListMatchType: "or",
                    account: void 0,
                    groupID: void 0,
                    count: 100,
                    cursor: void 0,
                    messageTypeList: void 0,
                    senderUserIDList: void 0,
                    startTime: void 0,
                    endTime: void 0
                  },
                  keyMap: {
                    req: {
                      keywordListMatchType: "MatchType",
                      account: "PeerAccount",
                      groupID: "GroupID",
                      messageTypeList: "MsgTypeList",
                      senderUserIDList: "SendUserIDList",
                      keywords: "Keywords",
                      keywordMatchType: "KeywordMatchType",
                      count: "Count",
                      miniBirthday: "UserBirthStart",
                      maxBirthday: "UserBirthEnd",
                      gender: "UserGenderType",
                      groupTypeList: "GroupType",
                      groupIDList: "GroupIdList"
                    },
                    res: {
                      GroupID: "groupID",
                      UserID: "userID",
                      ErrorCode: "code",
                      ErrorInfo: "message",
                      TotalCount: "totalCount",
                      Count: "messageCount",
                      LastMsgTime: "lastMessageTime",
                      ConversationMsgs: "searchResult",
                      IsNeedReadReceipt: "needReadReceipt",
                      IsPeerRead: "readReceiptSentByPeer",
                      MsgSeq: "sequence",
                      ReqMsgSeq: "sequence",
                      IsSystemMsg: "isSystemMessage",
                      ToGroupId: "to",
                      EnumFrom_AccountType: "fromAccountType",
                      EnumTo_AccountType: "toAccountType",
                      GroupCode: "groupCode",
                      MsgContent: "content",
                      ClientSeq: "clientSequence",
                      ToTopicId: "topicID",
                      InvisibleMsgSeq: "invisibleSequenceList",
                      Users: "userList",
                      ProfileItems: "profileItems",
                      StrValue: "value",
                      IntValue: "value",
                      Groups: "groupList",
                      GroupFaceUrl: "avatar",
                      GroupIntroduction: "introduction",
                      GroupOwnerUserID: "ownerID",
                      GroupOwnerUserName: "ownerNick",
                      GroupOwnerTinyID: "ownerTinyID",
                      GroupMemberNum: "memberNum",
                      GroupName: "name",
                      GroupType: "type",
                      GroupMembers: "groupMemberList",
                      GroupMemberUserID: "userID",
                      GroupMemberTinyID: "userTinyID",
                      GroupMemberUserName: "nick",
                      GroupMemberNameCard: "nameCard"
                    }
                  }
                }), this._map.set(G.USER_CS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.USER_SEARCH, ".").concat(G.CS)
                  }),
                  body: {
                    keywords: void 0,
                    keywordMatchType: 0,
                    miniBirthday: void 0,
                    maxBirthday: void 0,
                    gender: void 0,
                    count: 20,
                    cursor: void 0
                  }
                }), this._map.set(G.GRP_CS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_SEARCH, ".").concat(G.CS)
                  }),
                  body: {
                    keywords: void 0,
                    keywordMatchType: 0,
                    groupType: void 0,
                    count: 20,
                    cursor: void 0
                  }
                }), this._map.set(G.MBR_CS, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.GRP_MEMBER_SEARCH, ".").concat(G.CS)
                  }),
                  body: {
                    keywords: void 0,
                    keywordMatchType: 0,
                    groupType: void 0,
                    groupIDList: void 0,
                    count: 20,
                    cursor: void 0
                  }
                }), this._map.set(G.SSO_STAT, {
                  head: y(y({}, n), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STAT, ".").concat(G.SSO_STAT)
                  }),
                  body: {
                    header: {},
                    event: [],
                    quality: []
                  },
                  keyMap: {
                    req: {
                      SDKType: "sdk_type",
                      SDKVersion: "sdk_version",
                      deviceType: "device_type",
                      platform: "platform",
                      instanceID: "instance_id",
                      traceID: "trace_id",
                      SDKAppID: "sdk_app_id",
                      userID: "user_id",
                      tinyID: "tiny_id",
                      extension: "extension",
                      timestamp: "timestamp",
                      networkType: "network_type",
                      eventType: "event_type",
                      code: "error_code",
                      message: "error_message",
                      moreMessage: "more_message",
                      duplicate: "duplicate",
                      costTime: "cost_time",
                      level: "level",
                      qualityType: "quality_type",
                      reportIndex: "report_index",
                      wholePeriod: "whole_period",
                      totalCount: "total_count",
                      rttCount: "success_count_business",
                      successRateOfRequest: "percent_business",
                      countLessThan1Second: "success_count_business",
                      percentOfCountLessThan1Second: "percent_business",
                      countLessThan3Second: "success_count_platform",
                      percentOfCountLessThan3Second: "percent_platform",
                      successCountOfBusiness: "success_count_business",
                      successRateOfBusiness: "percent_business",
                      successCountOfPlatform: "success_count_platform",
                      successRateOfPlatform: "percent_platform",
                      successCountOfMessageReceived: "success_count_business",
                      successRateOfMessageReceived: "percent_business",
                      avgRTT: "average_value",
                      avgDelay: "average_value",
                      avgValue: "average_value",
                      uiPlatform: "ui_platform"
                    }
                  }
                }), this._map.set(G.PING, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.HEARTBEAT, ".").concat(G.PING)
                  }),
                  body: {}
                }), this._map.set(G.MSG_PUSH, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_PUSH, ".").concat(G.MSG_PUSH)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      C2cMsgArray: "C2CMessageArray",
                      GroupMsgArray: "groupMessageArray",
                      GroupTips: "groupTips",
                      C2cNotifyMsgArray: "C2CNotifyMessageArray",
                      C2cMsgInfo: "C2CReadReceiptArray",
                      ClientSeq: "clientSequence",
                      MsgPriority: "priority",
                      NoticeSeq: "noticeSequence",
                      MsgContent: "content",
                      MsgType: "type",
                      MsgBody: "elements",
                      ToGroupId: "to",
                      Desc: "description",
                      Ext: "extension",
                      IsSyncMsg: "isSyncMessage",
                      Flag: "needSync",
                      NeedAck: "needAck",
                      PendencyAdd_Account: "userID",
                      ProfileImNick: "nick",
                      PendencyType: "applicationType",
                      C2CReadAllMsg: "readAllC2CMessage",
                      IsNeedReadReceipt: "needReadReceipt",
                      Status: "statusType"
                    }
                  }
                }), this._map.set(G.MULTI_MSG_PUSH, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_PUSH, ".").concat(G.MULTI_MSG_PUSH)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      GroupMsgArray: "groupMessageArray",
                      GroupTips: "groupTips",
                      ClientSeq: "clientSequence",
                      MsgPriority: "priority",
                      NoticeSeq: "noticeSequence",
                      MsgContent: "content",
                      MsgType: "type",
                      MsgBody: "elements",
                      ToGroupId: "to",
                      Desc: "description",
                      Ext: "extension",
                      IsSyncMsg: "isSyncMessage",
                      Flag: "needSync",
                      NeedAck: "needAck",
                      PendencyType: "applicationType"
                    }
                  }
                }), this._map.set(G.MSG_PUSH_ACK, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OPEN_IM, ".").concat(G.MSG_PUSH_ACK)
                  }),
                  body: {
                    sessionData: void 0
                  },
                  keyMap: {
                    req: {
                      sessionData: "SessionData"
                    }
                  }
                }), this._map.set(G.STATUS_FORCE_OFFLINE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.STATUS_FORCE_OFFLINE)
                  }),
                  body: {},
                  keyMap: {
                    res: {
                      C2cNotifyMsgArray: "C2CNotifyMessageArray",
                      NoticeSeq: "noticeSequence",
                      KickoutMsgNotify: "kickoutMsgNotify",
                      NewInstInfo: "newInstanceInfo"
                    }
                  }
                }), this._map.set(G.DOWNLOAD_MERGER_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_LONG_MSG, ".").concat(G.DOWNLOAD_MERGER_MSG)
                  }),
                  body: {
                    downloadKey: ""
                  },
                  keyMap: {
                    res: {
                      Data: "data",
                      Desc: "description",
                      Ext: "extension",
                      Download_Flag: "downloadFlag",
                      ThumbUUID: "thumbUUID",
                      VideoUUID: "videoUUID"
                    }
                  }
                }), this._map.set(G.UPLOAD_MERGER_MSG, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_LONG_MSG, ".").concat(G.UPLOAD_MERGER_MSG)
                  }),
                  body: {
                    messageList: []
                  },
                  keyMap: {
                    req: {
                      fromAccount: "From_Account",
                      toAccount: "To_Account",
                      msgTimeStamp: "MsgTimeStamp",
                      msgSeq: "MsgSeq",
                      msgRandom: "MsgRandom",
                      msgBody: "MsgBody",
                      type: "MsgType",
                      content: "MsgContent",
                      data: "Data",
                      description: "Desc",
                      extension: "Ext",
                      sizeType: "Type",
                      uuid: "UUID",
                      url: "",
                      imageUrl: "URL",
                      fileUrl: "Url",
                      remoteAudioUrl: "Url",
                      remoteVideoUrl: "VideoUrl",
                      thumbUUID: "ThumbUUID",
                      videoUUID: "VideoUUID",
                      videoUrl: "",
                      downloadFlag: "Download_Flag",
                      from: "From_Account",
                      time: "MsgTimeStamp",
                      messageRandom: "MsgRandom",
                      messageSequence: "MsgSeq",
                      elements: "MsgBody",
                      clientSequence: "ClientSeq",
                      payload: "MsgContent",
                      messageList: "MsgList",
                      messageNumber: "MsgNum",
                      abstractList: "AbstractList",
                      messageBody: "MsgBody"
                    }
                  }
                }), this._map.set(G.FOLLOW, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FOLLOW, ".").concat(G.FOLLOW)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: []
                  },
                  keyMap: {
                    req: {
                      userIDList: "FollowItem"
                    },
                    res: {
                      ResultItem: "resultList",
                      To_Account: "userID"
                    }
                  }
                }), this._map.set(G.UNFOLLOW, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FOLLOW, ".").concat(G.UNFOLLOW)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: []
                  },
                  keyMap: {
                    req: {
                      userIDList: "To_Account"
                    },
                    res: {
                      ResultItem: "resultList",
                      To_Account: "userID"
                    }
                  }
                }), this._map.set(G.GET_FOLLOW_INFO, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FOLLOW, ".").concat(G.GET_FOLLOW_INFO)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: []
                  },
                  keyMap: {
                    req: {
                      userIDList: "To_Account"
                    },
                    res: {
                      FollowInfo: "followInfoList",
                      To_Account: "userID",
                      FollowerCount: "followersCount",
                      FollowingCount: "followingCount",
                      MutualFollowingCount: "mutualFollowersCount"
                    }
                  }
                }), this._map.set(G.GET_FOLLOW, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FOLLOW, ".").concat(G.GET_FOLLOW)
                  }),
                  body: {
                    fromAccount: "",
                    type: 1,
                    nextCursor: "",
                    count: 500
                  },
                  keyMap: {
                    req: {
                      type: "FollowType",
                      nextCursor: "StartCursor",
                      count: "WantNum"
                    },
                    res: {
                      FollowItem: "resultList",
                      To_Account: "userID",
                      ProfileItem: "profileList"
                    }
                  }
                }), this._map.set(G.CHECK_FOLLOW_TYPE, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.FOLLOW, ".").concat(G.CHECK_FOLLOW_TYPE)
                  }),
                  body: {
                    fromAccount: "",
                    userIDList: []
                  },
                  keyMap: {
                    req: {
                      userIDList: "To_Account"
                    },
                    res: {
                      ResultItem: "resultList",
                      To_Account: "userID"
                    }
                  }
                }), this._map.set(G.SET_TOKEN, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.SET_TOKEN)
                  }),
                  body: {
                    tokenID: "",
                    pushMsg: 0,
                    sdkAppID: 0,
                    businessID: "",
                    deviceBrand: "",
                    deviceToken: "",
                    isTpns: 0,
                    isWebUniapp: 0,
                    notificationStatus: 0,
                    deviceModel: "",
                    systemVersion: "",
                    pushVersion: ""
                  },
                  keyMap: {
                    req: {
                      tokenID: "TokenID",
                      pushMsg: "PushMsg",
                      sdkAppID: "EnterVersion",
                      businessID: "BusiID",
                      deviceBrand: "InstType",
                      deviceToken: "VarToken",
                      isTpns: "IsTpns",
                      notificationStatus: "NotificationStatus",
                      deviceModel: "DeviceModel",
                      systemVersion: "SystemVersion",
                      pushVersion: "PushPluginVersion"
                    }
                  }
                }), this._map.set(G.STAT_FOREGROUND, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.STAT_FOREGROUND)
                  }),
                  body: {
                    isWebUniapp: 0
                  }
                }), this._map.set(G.STAT_BACKGROUND, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_OPEN_STATUS, ".").concat(G.STAT_BACKGROUND)
                  }),
                  body: {
                    C2CUnread: 0,
                    GroupUnread: 0,
                    isWebUniapp: 0
                  },
                  keyMap: {
                    req: {
                      c2cUnreadCount: "C2cUnread",
                      groupUnreadCount: "GrpUnread"
                    }
                  }
                }), this._map.set(G.PUSH_REPORT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.OFFLINE_PUSH_REPORT, ".").concat(G.PUSH_REPORT)
                  }),
                  body: {
                    eventList: []
                  },
                  keyMap: {
                    req: {
                      eventList: "UinappPushEvents",
                      type: "EventType",
                      time: "EventTime",
                      pushId: "ClickExt"
                    }
                  }
                }), this._map.set(G.SET_ALL_RECEIVE_MSG_OPT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_MSG_LOGIC, ".").concat(G.SET_ALL_RECEIVE_MSG_OPT)
                  }),
                  body: {
                    startTime: 0,
                    endTime: 0,
                    isRepeated: 0,
                    messageRemindType: 0
                  },
                  keyMap: {
                    req: {
                      messageRemindType: "Level"
                    }
                  }
                }), this._map.set(G.GET_ALL_RECEIVE_MSG_OPT, {
                  head: y(y({}, e), {}, {
                    servcmd: "".concat(a.NAME.IM_MSG_LOGIC, ".").concat(G.GET_ALL_RECEIVE_MSG_OPT)
                  }),
                  body: {
                    toAccount: void 0
                  }
                });
              }
            }, {
              key: "has",
              value: function value(e) {
                return this._map.has(e);
              }
            }, {
              key: "get",
              value: function value(e) {
                return this._map.get(e);
              }
            }, {
              key: "update",
              value: function value() {
                this._fillMap();
              }
            }, {
              key: "getKeyMap",
              value: function value(e) {
                return this.has(e) ? this.get(e).keyMap || {} : (M.w("".concat(this._n, ".getKeyMap unknown P:").concat(e)), {});
              }
            }, {
              key: "getProtocolData",
              value: function value(e) {
                var t = e.P,
                  n = e.data,
                  e = this.get(t),
                  t = null;
                if (n) {
                  var o,
                    i = this._simpleDeepCopy(e),
                    i = this._updateService(n, i),
                    a = i.body,
                    s = Object.create(null);
                  for (o in a) if (Object.prototype.hasOwnProperty.call(a, o)) {
                    if (s[o] = a[o], void 0 === n[o]) continue;
                    s[o] = n[o];
                  }
                  i.body = s, t = this._getUplinkData(i);
                } else t = this._getUplinkData(e);
                return t;
              }
            }, {
              key: "_getUplinkData",
              value: function value(e) {
                var e = this._dataCleaner(e),
                  t = Ht(e.head),
                  t = ta(e.body, this._getReqKeyMap(t));
                return e.body = t, e;
              }
            }, {
              key: "_updateService",
              value: function value(e, t) {
                var n,
                  o,
                  i = Ht(t.head);
                return this._isFromGroupRequest(t) && (n = e.type, o = e.groupID, e = void 0 === (e = e.groupIDList) ? [] : e, N(o = void 0 === o ? void 0 : o) && (o = e[0] || ""), Ot({
                  type: n,
                  groupID: o
                })) && (t.head.servcmd = "".concat(a.NAME.GRP_COMMUNITY, ".").concat(i)), t;
              }
            }, {
              key: "_isFromGroupRequest",
              value: function value(e) {
                return e.head.servcmd.includes(a.NAME.GRP) || e.head.servcmd.includes(a.NAME.GRP_ATTR);
              }
            }, {
              key: "_getReqKeyMap",
              value: function value(e) {
                e = this.getKeyMap(e);
                return y(y({}, Yi.req), e.req);
              }
            }, {
              key: "_dataCleaner",
              value: function value(e) {
                var t,
                  n = Array.isArray(e) ? [] : Object.create(null);
                for (t in e) Object.prototype.hasOwnProperty.call(e, t) && lt(t) && null !== e[t] && void 0 !== e[t] && ("object" !== z(e[t]) ? n[t] = e[t] : n[t] = this._dataCleaner.bind(this)(e[t]));
                return n;
              }
            }, {
              key: "_simpleDeepCopy",
              value: function value(e) {
                for (var t, n = Object.keys(e), o = {}, i = 0, a = n.length; i < a; i++) t = n[i], O(e[t]) ? o[t] = Array.from(e[t]) : st(e[t]) ? o[t] = this._simpleDeepCopy(e[t]) : o[t] = e[t];
                return o;
              }
            }]), ma = [G.MSG_PUSH_ACK], va = e(function e(t) {
              p(this, e), this._sessionM = t, this._n = "MsgDispatcher", this._eventHandlerMap = new Map(), this._eventHandlerMap.set("C2CMessageArray", this._onC2CMsgArray.bind(this)), this._eventHandlerMap.set("groupMessageArray", this._onGroupMsgArray.bind(this)), this._eventHandlerMap.set("groupTips", this._onGroupTips.bind(this)), this._eventHandlerMap.set("C2CNotifyMessageArray", this._onC2CNotifyMsgArray.bind(this)), this._eventHandlerMap.set("C2CReadReceiptArray", this._onC2CReadReceiptArray.bind(this)), this._eventHandlerMap.set("profileModify", this._onProfileModified.bind(this)), this._eventHandlerMap.set("friendListMod", this._onRelationChainModified.bind(this)), this._eventHandlerMap.set("recentContactMod", this._onRecentContact.bind(this)), this._eventHandlerMap.set("readAllC2CMessage", this._onAllMsgRead.bind(this)), this._eventHandlerMap.set("c2cMessageModified", this._onC2CMsgModified.bind(this)), this._eventHandlerMap.set("groupMessageModified", this._onGroupMsgModified.bind(this)), this._eventHandlerMap.set("userStatusList", this._onUserStatusList.bind(this)), this._eventHandlerMap.set("messageExtensionNotify", this._onMsgExtNotify.bind(this)), this._eventHandlerMap.set("messageReactionNotifyList", this._onMsgReactionNotifyList.bind(this)), this._eventHandlerMap.set("messageReactionNotify", this._onMsgReactionNotify.bind(this)), this._eventHandlerMap.set("followChangeList", this._onFollowNotify.bind(this)), this._keys = d(this._eventHandlerMap.keys());
            }, [{
              key: "_onC2CMsgArray",
              value: function value(e) {
                var t = this._sessionM.get(6);
                e.dataList.forEach(function (e) {
                  var t;
                  1 === e.isSyncMessage && (t = e.from, e.from = e.to, e.to = t);
                }), 1 === e.needSync && this._sessionM.get(19).syncOnNeed(), t.onNewMessage({
                  dataList: e.dataList,
                  isInstantMessage: !0
                });
              }
            }, {
              key: "_onC2CMsgModified",
              value: function value(e) {
                this._sessionM.get(6).onMsgModified(e);
              }
            }, {
              key: "_onGroupMsgArray",
              value: function value(e) {
                var t = this._sessionM.get(7);
                t && t.onNewMessage({
                  event: e.event,
                  dataList: e.dataList,
                  isInstantMessage: !0
                });
              }
            }, {
              key: "_onGroupMsgModified",
              value: function value(e) {
                var t = this._sessionM.get(7);
                t && t.onMsgModified(e);
              }
            }, {
              key: "_onGroupTips",
              value: function value(e) {
                var t = this._sessionM.get(7);
                if (t) {
                  var n = e.event,
                    o = e.dataList,
                    i = e.isInstantMessage,
                    a = void 0 === i || i,
                    s = e.isSyncingEnded;
                  switch (n) {
                    case 4:
                    case 6:
                      t.onNewGroupTips({
                        event: n,
                        dataList: o
                      });
                      break;
                    case 5:
                      for (var r = 0; r < o.length; r++) if (O(o[r].elements.revokedInfos)) t.onMsgRevoked({
                        dataList: o
                      });else if (O(o[r].elements.groupMessageReadNotice)) t.onMsgReadNotice({
                        dataList: o
                      });else {
                        if (!O(o[r].elements.readReceiptList)) {
                          t.onNewGroupSystemNotice({
                            dataList: o,
                            isInstantMessage: a,
                            isSyncingEnded: s
                          });
                          break;
                        }
                        t.onReadReceiptList({
                          dataList: o
                        });
                      }
                      break;
                    case 12:
                      this._sessionM.get(11).onNewGroupAtTips({
                        dataList: o
                      });
                      break;
                    default:
                      M.l("".concat(this._n, "._onGroupTips unknown event:").concat(n, " dataList:"), o);
                  }
                }
              }
            }, {
              key: "_onC2CNotifyMsgArray",
              value: function value(e) {
                var o,
                  i = this,
                  a = e.dataList;
                O(a) && (o = this._sessionM.get(6), a.forEach(function (e) {
                  var t, n;
                  m(e) && (e.hasOwnProperty("kickoutMsgNotify") ? (t = (n = e.kickoutMsgNotify).kickType, n = void 0 === (n = n.newInstanceInfo) ? {} : n, 1 === t ? i._sessionM.onMultipleAccountKickedOut(n) : 2 === t ? i._sessionM.onMultipleDeviceKickedOut(n) : 3 === t && i._sessionM.onRestApiKickedOut(n)) : e.hasOwnProperty("c2cMessageRevokedNotify") ? o && o.onMsgRevoked({
                    dataList: a
                  }, !0) : e.hasOwnProperty("c2cMessageReadReceipt") ? o && o.onMsgReadReceipt({
                    dataList: a
                  }) : e.hasOwnProperty("c2cMessageReadNotice") ? o && o.onMsgReadNotice({
                    dataList: a
                  }) : e.hasOwnProperty("muteNotificationsSync") && i._sessionM.get(11).onC2CMsgRemindTypeSynced({
                    dataList: a
                  }));
                }));
              }
            }, {
              key: "_onC2CReadReceiptArray",
              value: function value(e) {
                this._sessionM.get(6).onReadReceiptList(e);
              }
            }, {
              key: "_onProfileModified",
              value: function value(e) {
                this._sessionM.get(4).onProfileModified({
                  dataList: e.dataList
                });
                var t = this._sessionM.get(8);
                t && t.onFriendProfileModified({
                  dataList: e.dataList
                });
              }
            }, {
              key: "_onRelationChainModified",
              value: function value(e) {
                this._sessionM.get(4).onRelationChainModified({
                  dataList: e.dataList
                });
                var t = this._sessionM.get(8);
                t && t.onRelationChainModified({
                  dataList: e.dataList
                });
              }
            }, {
              key: "_onRecentContact",
              value: function value(e) {
                var i,
                  e = e.dataList;
                O(e) && (i = this._sessionM.get(11)) && e.forEach(function (e) {
                  var t,
                    n,
                    o = e.pushType;
                  1 === o ? (t = e.recentContactDeleteItem, i.onConvDeleted(t.recentContactList)) : 2 === o ? (t = e.recentContactTopItem, i.onConvPinnedStatus(t.recentContactList, !0)) : 3 === o ? (t = e.recentContactTopItem, i.onConvPinnedStatus(t.recentContactList, !1)) : 4 === o ? (t = e.recentContactMarkContact, i.onConvMarkUpdated(t.recentContactMarkContactItem)) : 5 === o ? (t = e.recentContactCreateContactGroup, i.onConvGroupCreated(t.msgContactGroupContactItem)) : 6 === o ? (t = e.recentContactDelContactGroup, i.onConvGroupDeleted(t.msgGroupItem)) : 7 === o && (o = (t = e.recentContactUpdateContactGroup).updateType, e = t.msgUpdateGroup, t = t.msgUpdateContact, 1 === o ? 1 === (n = e.updateGroupType) ? i.onConvGroupNameUpdated(e) : 2 === n && i.onConvInGroupUpdated(e) : 2 === o && i.onConvAddedToOrDeletedFromGroup(t));
                });
              }
            }, {
              key: "_onAllMsgRead",
              value: function value(e) {
                var e = e.dataList,
                  t = this._sessionM.get(11);
                t && t.onPushedAllMessageRead(e);
              }
            }, {
              key: "_onUserStatusList",
              value: function value(e) {
                this._sessionM.get(4).onUserStatusUpdated(e);
              }
            }, {
              key: "_onMsgExtNotify",
              value: function value(e) {
                this._sessionM.get(3).onMsgExtNotify(e);
              }
            }, {
              key: "_onMsgReactionNotifyList",
              value: function value(e) {
                this._sessionM.get(34).onReactionNotifyList(e);
              }
            }, {
              key: "_onMsgReactionNotify",
              value: function value(e) {
                this._sessionM.get(34).onReactionNotify(e);
              }
            }, {
              key: "_onFollowNotify",
              value: function value(e) {
                this._sessionM.get(35).onFollowNotify(e);
              }
            }, {
              key: "_onTopicLatestMsg",
              value: function value(e) {
                this._sessionM.get(10).onTopicLatestMsg(e);
              }
            }, {
              key: "onMessage",
              value: function value(e) {
                var t = this,
                  n = e.body;
                if (this._filterMsgFromIMOpenPush(e)) {
                  var o,
                    i = n.eventArray,
                    a = n.isInstantMessage,
                    s = n.isSyncingEnded,
                    r = n.needSync;
                  if (O(i)) for (var c, u, l, d = 0, p = i.length; d < p; d++) 100 !== (l = (c = i[d]).event) ? 24 !== l ? 26 !== l ? (o = Object.keys(c).find(function (e) {
                    return -1 !== t._keys.indexOf(e);
                  })) ? (u = 14 === l ? {
                    readAllC2CMessage: c[o],
                    groupMessageReadInfoList: c.groupMessageReadNotice || []
                  } : 16 === l ? {
                    userID: c.userID,
                    timestamp: c.timestamp,
                    readReceiptList: c[o]
                  } : c[o], this._eventHandlerMap.get(o)({
                    event: l,
                    dataList: u,
                    isInstantMessage: a,
                    isSyncingEnded: s,
                    needSync: r
                  })) : M.l("".concat(this._n, ".onMessage unknown eventItem:"), c) : this._onTopicLatestMsg(c) : this._onAllRcvMsgOptNotify(c) : this._onRoomCustomData(c.content);
                }
              }
            }, {
              key: "_onRoomCustomData",
              value: function value(e) {
                this._sessionM.get(30).onRoomCustomDataReceived(e), M.l("".concat(this._n, "._onRoomCustomData data:").concat(e));
              }
            }, {
              key: "_onAllRcvMsgOptNotify",
              value: function value(e) {
                this._sessionM.get(11).onAllRcvMsgOptNotify(e);
              }
            }, {
              key: "_filterMsgFromIMOpenPush",
              value: function value(e) {
                var t = e.head,
                  e = e.body,
                  t = t.servcmd,
                  n = !1;
                return !(n = N(t) ? n : t.includes(a.NAME.IM_CONFIG_MANAGER) || t.includes(a.NAME.OVERLOAD_PUSH) || t.includes(a.NAME.STAT_SERVICE)) || (t.includes(G.PUSHED_CLOUD_CTRL_CONFIG) ? this._sessionM.get(23).onPushedConfig(e) : t.includes(G.PUSHED_COMMERCIAL_CONFIG) ? this._sessionM.get(27).onPushedConfig(e) : t.includes(G.OVERLOAD_NOTIFY) ? this._sessionM.onPushedServerOverload(e) : t.includes(G.KICK_OTHER) && (n = Date.now(), this._sessionM.reLoginOnKickOther(), e = new P("kickOther"), n = n - (t = this._sessionM.get(1).getLastWsHelloTs()), e.setMessage("last wshello time:".concat(t, " diff:").concat(n, "ms")).end()), !1);
              }
            }]), Ia = [{
              cmd: G.GET_GRP_PROFILE,
              interval: 1,
              count: 8
            }, {
              cmd: G.UPDATE_GRP_PROFILE,
              interval: 1,
              count: 8
            }, {
              cmd: G.GET_AV_MBR_LIST,
              interval: 3,
              count: 1
            }, {
              cmd: G.GET_GRP_PENDENCY,
              interval: 1,
              count: 15
            }, {
              cmd: G.GET_TOPIC_LIST,
              interval: 1,
              count: 10
            }, {
              cmd: G.SET_GRP_ATTR,
              interval: 5,
              count: 10
            }, {
              cmd: G.MODIFY_GRP_ATTR,
              interval: 5,
              count: 10
            }, {
              cmd: G.DEL_GRP_ATTR,
              interval: 5,
              count: 10
            }, {
              cmd: G.CLEAR_GRP_ATTR,
              interval: 5,
              count: 10
            }, {
              cmd: G.GET_GRP_ATTR,
              interval: 5,
              count: 20
            }, {
              cmd: G.UPDATE_GRP_COUNTER,
              interval: 5,
              count: 20
            }, {
              cmd: G.GET_GRP_COUNTER,
              interval: 5,
              count: 20
            }, {
              cmd: G.SET_ALL_MSG_READ,
              interval: 1,
              count: 1
            }, {
              cmd: G.GET_USER_STATUS,
              interval: 5,
              count: 20
            }, {
              cmd: G.SUB_USER_STATUS,
              interval: 5,
              count: 20
            }, {
              cmd: G.UNSUB_USER_STATUS,
              interval: 5,
              count: 20
            }, {
              cmd: G.CS,
              interval: 5,
              count: 20
            }, {
              cmd: G.GRP_CS,
              interval: 5,
              count: 20
            }, {
              cmd: G.MBR_CS,
              interval: 5,
              count: 20
            }, {
              cmd: G.USER_CS,
              interval: 5,
              count: 20
            }, {
              cmd: G.CHECK_FOLLOW_TYPE,
              interval: 5,
              count: 20
            }, {
              cmd: G.GET_GRP_ROAMING_MSG,
              interval: 1,
              count: 20
            }, {
              cmd: G.GET_C2C_ROAMING_MSG,
              interval: 1,
              count: 20
            }], Ma = new Map(), ya = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"], Ca = 0, Ta = ya.length; Ca < Ta; Ca++) Ma.set(Ca, ya[Ca]);
          function Da(e) {
            return p(this, Da), (e = i(this, Da, [e]))._n = "ChannelModule", e._socketHandler = new da(e), e._probing = !1, e._isAppShowing = !0, e._previousState = R.NET_STATE_CONNECTED, e._timerForNotLoggedIn = -1, e._timerForNotLoggedIn = setInterval(e.onCheckTimer.bind(e), 1e3), e._fatalErrorFlag = !1, e._disconnectedTS = 0, e._lastDiagnoseTS = 0, e;
          }
          function Ea(e) {
            for (var t, n, o = e, i = "", a = 0, s = (o = e.length % 8 != 0 ? "0".repeat(8 - e.length % 8) + e : o).length; a < s; a += 8) t = parseInt(o.slice(a, a + 4), 2), n = parseInt(o.slice(a + 4, a + 8), 2), i += Ma.get(t) + Ma.get(n);
            return i;
          }
          function La(e) {
            var t;
            return e < 0 || 53 < e ? NaN : (t = 0 | 1073741824 * Math.random(), 30 < e ? t + 1073741824 * (0 | Math.random() * (1 << e - 30)) : t >>> 30 - e);
          }
          function Sa(e, t) {
            for (var n = e.toString(16), o = t - n.length, i = "0"; 0 < o; o >>>= 1, i += i) 1 & o && (n = i + n);
            return n;
          }
          t(vs, c);
          var ka = e(vs, [{
              key: "_init",
              value: function value() {
                this._updateCmdFreqLimitMap(Ia);
              }
            }, {
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("cmd_frequency_limit");
                N(e) || (e = JSON.parse(e), this._updateCmdFreqLimitMap(e));
              }
            }, {
              key: "_updateCmdFreqLimitMap",
              value: function value(e) {
                var t = this;
                e.forEach(function (e) {
                  t._cmdFreqLimitMap.set(e.cmd, {
                    interval: e.interval,
                    count: e.count
                  });
                });
              }
            }, {
              key: "updateProtocolConfig",
              value: function value() {
                this._pHandler.update();
              }
            }, {
              key: "req",
              value: function value(e) {
                M.d("".concat(this._n, ".req options:"), e);
                var t,
                  n,
                  o = e.P;
                return this._pHandler.has(o) ? (t = (e = this.getProtocolData(e)).head.servcmd, this._isFreqOverLimit(t) ? E({
                  code: n = k.OVER_FREQUENCY_LIMIT,
                  message: this.getErrMsg(n, this._getCmd(t))
                }) : this._isServerOverload(t) ? E({
                  code: n = k.OPEN_SERVICE_OVERLOAD_ERROR,
                  message: this.getErrMsg(n, this._getCmd(t))
                }) : (n = this.get(21), ma.includes(o) ? n.simplySend(e) : n.send(e))) : (M.w("".concat(this._n, ".req unknown P:").concat(o)), E({
                  code: k.NO_PROTOCOL
                }));
              }
            }, {
              key: "getKeyMap",
              value: function value(e) {
                return this._pHandler.getKeyMap(e);
              }
            }, {
              key: "genCommonHead",
              value: function value() {
                var e = this.get(12);
                return {
                  ver: "v4",
                  platform: this._platform,
                  websdkappid: oe,
                  websdkversion: ne,
                  a2: e.getA2Key() || void 0,
                  tinyid: e.getTinyID() || void 0,
                  status_instid: e.getStatusInstanceID(),
                  sdkappid: e.getSDKAppID(),
                  contenttype: e.getContentType(),
                  reqtime: 0,
                  identifier: e.getA2Key() ? void 0 : e.getUserID(),
                  usersig: e.getA2Key() ? void 0 : e.getUserSig(),
                  sdkability: 75689843,
                  sdkability_ext: Ea(""),
                  cappid: e.getApplicationID(),
                  cs: 0
                };
              }
            }, {
              key: "genCosSpecifiedHead",
              value: function value() {
                var e = this.get(12);
                return {
                  ver: "v4",
                  platform: this._platform,
                  websdkappid: oe,
                  websdkversion: ne,
                  sdkappid: e.getSDKAppID(),
                  contenttype: e.getContentType(),
                  reqtime: 0,
                  identifier: e.getUserID(),
                  usersig: e.getUserSig(),
                  status_instid: e.getStatusInstanceID(),
                  sdkability: 75689843,
                  sdkability_ext: Ea(""),
                  cappid: e.getApplicationID(),
                  cs: 0
                };
              }
            }, {
              key: "genSSOReportHead",
              value: function value() {
                var e = this.get(12);
                return {
                  ver: "v4",
                  platform: this._platform,
                  websdkappid: oe,
                  websdkversion: ne,
                  sdkappid: e.getSDKAppID(),
                  contenttype: "",
                  reqtime: 0,
                  identifier: "",
                  usersig: "",
                  status_instid: e.getStatusInstanceID(),
                  sdkability: 75689843,
                  sdkability_ext: Ea(""),
                  cappid: e.getApplicationID(),
                  cs: 0
                };
              }
            }, {
              key: "getProtocolData",
              value: function value(e) {
                return this._pHandler.getProtocolData(e);
              }
            }, {
              key: "trans",
              value: function value(e) {
                var t = e.servcmd,
                  e = e.data,
                  t = {
                    head: y(y({}, this.genCommonHead()), {}, {
                      servcmd: t
                    }),
                    body: e
                  };
                return this.get(21).send(t);
              }
            }, {
              key: "sendComboMessage",
              value: function value(e) {
                var t = e.servcmd,
                  e = e.data,
                  t = {
                    head: y(y({}, this.genCommonHead()), {}, {
                      servcmd: t
                    }),
                    body: e
                  };
                return this.get(21).send(t);
              }
            }, {
              key: "onErrorCodeNotZero",
              value: function value(e) {
                var t,
                  n = e.errorCode;
                n === k.HELLO_ANSWER_KICKED_OUT && (t = e.kickType, e = void 0 === (e = e.newInstanceInfo) ? {} : e, 1 === t ? this.onMultipleAccountKickedOut(e) : 2 === t ? this.onMultipleDeviceKickedOut(e) : 3 === t && this.onRestApiKickedOut(e)), n !== k.MSG_A2KEY_EXPIRED && n !== k.ACCOUNT_A2KEY_EXPIRED || (this._onUserSigExpired(), this.get(21).reConnect());
              }
            }, {
              key: "onMessage",
              value: function value(e) {
                var t = e.body,
                  n = t.needAck,
                  t = t.sessionData;
                1 === (void 0 === n ? 0 : n) && this._sendACK(t), this._msgDispatcher.onMessage(e);
              }
            }, {
              key: "onReconnected",
              value: function value(e) {
                this._incrementalPullContactFlag = e <= 300, this._reLoginOnReconnected();
              }
            }, {
              key: "reLoginOnKickOther",
              value: function value() {
                M.l("".concat(this._n, ".reLoginOnKickOther")), this._reLogin();
              }
            }, {
              key: "_reLoginOnReconnected",
              value: function value() {
                M.l("".concat(this._n, "._reLoginOnReconnected")), this._reLogin();
              }
            }, {
              key: "_reLogin",
              value: function value() {
                var e,
                  t,
                  s,
                  r = this,
                  c = "".concat(this._n, "._reLogin");
                this.isLoggedIn() && (e = 0, (t = this.get(1).getPushModule()) && (e = t.getUniAppPlatform()), s = new P("reLogin"), this.req({
                  P: G.LOGIN,
                  data: {
                    isWebUniapp: e,
                    customInfo: this.get(12).getCustomLoginInfo()
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.instanceID,
                    e = e.customStatus,
                    n = r.get(12),
                    o = Go(e),
                    i = (n.setStatusInstanceID(t), r.get(21)),
                    a = i.getSocketID(),
                    a = "socketID:".concat(a, " instanceID:").concat(t, " customStatus:").concat(o),
                    t = (s.setMessage(a).end(!0), M.l("".concat(c, " ok. ").concat(a)), n.getCustomStatus() !== o && r.get(4).onUserStatusUpdated({
                      dataList: [{
                        to: r.getMyUserID(),
                        statusType: R.USER_STATUS_ONLINE,
                        customStatus: e
                      }]
                    }), i.diagnose(), r.get(11).syncConvList(r._incrementalPullContactFlag).then(function () {
                      M.l("".concat(c, ", sync conv list ok.")), r.get(25).start();
                    }), r.get(7)),
                    a = (t && t.updateLocalMainSequenceOnReconnected(), r.get(10)),
                    n = (a.resetGetTopicTime(), a.getTopicListOnReconnected(), r.get(35));
                  n && n.clearCacheOnReconnected();
                }));
              }
            }, {
              key: "onMultipleAccountKickedOut",
              value: function value(e) {
                this.get(1).onMultipleAccountKickedOut(e);
              }
            }, {
              key: "onMultipleDeviceKickedOut",
              value: function value(e) {
                this.get(1).onMultipleDeviceKickedOut(e);
              }
            }, {
              key: "_onUserSigExpired",
              value: function value() {
                this.get(1).onUserSigExpired();
              }
            }, {
              key: "onRestApiKickedOut",
              value: function value(e) {
                this.get(1).onRestApiKickedOut(e);
              }
            }, {
              key: "_sendACK",
              value: function value(e) {
                this.req({
                  P: G.MSG_PUSH_ACK,
                  data: {
                    sessionData: e
                  }
                });
              }
            }, {
              key: "_isFreqOverLimit",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  e = e.split(".")[1];
                return !!this._cmdFreqLimitMap.has(e) && (!this._cmdReqInfoMap.has(e) || (t = (n = this._cmdFreqLimitMap.get(e)).count, n = n.interval, o = (i = this._cmdReqInfoMap.get(e)).startTime, i = i.requestCount, Date.now() - o > 1e3 * n) ? (this._cmdReqInfoMap.set(e, {
                  startTime: Date.now(),
                  requestCount: 1
                }), !1) : (this._cmdReqInfoMap.set(e, {
                  startTime: o,
                  requestCount: i += 1
                }), t < i));
              }
            }, {
              key: "_isServerOverload",
              value: function value(e) {
                var t, n;
                return !!this._serverOverloadInfoMap.has(e) && (t = (n = this._serverOverloadInfoMap.get(e)).overloadTime, n = n.waitingTime, Date.now() - t <= 1e3 * n || (this._serverOverloadInfoMap["delete"](e), !1));
              }
            }, {
              key: "_getCmd",
              value: function value(e) {
                var t = "";
                if (e.includes(".")) {
                  var n,
                    o = e.split(".")[1];
                  for (n in G) if (G[n] === o) {
                    t = n;
                    break;
                  }
                }
                return t;
              }
            }, {
              key: "onPushedServerOverload",
              value: function value(e) {
                var t = e.overloadCommand,
                  e = e.waitingTime;
                this._serverOverloadInfoMap.set(t, {
                  overloadTime: Date.now(),
                  waitingTime: e
                }), M.w("".concat(this._n, ".onPushedServerOverload waitingTime:").concat(e, "s cmd:").concat(this._getCmd(t)));
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._updateCmdFreqLimitMap(Ia), this._cmdReqInfoMap.clear(), this._serverOverloadInfoMap.clear(), this._incrementalPullContactFlag = !0;
              }
            }]),
            Ra = (t(ms, c), e(ms, [{
              key: "getCloudConfig",
              value: function value(e) {
                return N(e) ? this._cloudConfig : this._cloudConfig.has(e) ? this._cloudConfig.get(e) : void 0;
              }
            }, {
              key: "getServerConfig",
              value: function value(e) {
                var t = {
                  code: 0,
                  data: ""
                };
                return !N(e) && this._cloudConfig.has(e) && (t.data = this._cloudConfig.get(e)), Promise.resolve(t);
              }
            }, {
              key: "_canFetch",
              value: function value() {
                return this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime;
              }
            }, {
              key: "fetchConfig",
              value: function value() {
                var o,
                  i = this,
                  a = "".concat(this._n, ".fetchConfig"),
                  e = this._canFetch();
                M.l("".concat(a, " canFetch:").concat(e)), e && (o = new P("fetchCloudCtrlConfig"), e = this.get(12).getSDKAppID(), this._isFetching = !0, this.req({
                  P: G.FETCH_CLOUD_CTRL_CONFIG,
                  data: {
                    SDKAppID: e,
                    version: this._version
                  }
                }).then(function (e) {
                  i._isFetching = !1;
                  var t = e.data,
                    n = t.version,
                    t = t.cloudControlConfig;
                  o.setMessage("version:".concat(i._version, " newVersion:").concat(n, " config:").concat(t)).end(), M.l("".concat(a, " ok")), i._parse(e.data);
                })["catch"](function (e) {
                  i._isFetching = !1, o.setError(e).end(), M.l("".concat(a, " failed. error:"), e), i._setExpiredTime(12e4);
                }));
              }
            }, {
              key: "onPushedConfig",
              value: function value(e) {
                M.l("".concat(this._n, ".onPushedConfig config:"), e), new P("pushedCloudCtrlConfig").setMessage("newVersion:".concat(e.version, " config:").concat(e.cloudControlConfig)).end(), this._parse(e);
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                this._canFetch() && this.fetchConfig();
              }
            }, {
              key: "_parse",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, "._parse"),
                  o = e.errorCode,
                  i = e.errorMessage,
                  a = e.cloudControlConfig,
                  s = e.version,
                  r = e.expiredTime;
                if (0 === o) {
                  if (this._version !== s) {
                    var c = null;
                    try {
                      c = JSON.parse(a);
                    } catch (e) {
                      this.isPrivateNetWork() || M.e("".concat(n, " failed. config:"), a);
                    }
                    c && (this._cloudConfig.clear(), Object.keys(c).forEach(function (e) {
                      t._cloudConfig.set(e, c[e]);
                    }), this._version = s, this.emitIEvt(U.CLOUD_CONFIG));
                  }
                  this._setExpiredTime(1e3 * r);
                } else N(o) ? (M.l("".concat(n, " failed. Invalid message format:"), e), this._setExpiredTime(36e5)) : (M.e("".concat(n, " errorCode:").concat(o, " errorMessage:").concat(i)), this._setExpiredTime(12e4));
              }
            }, {
              key: "_setExpiredTime",
              value: function value(e) {
                this._expiredTime = Date.now() + e;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._cloudConfig.clear(), this._expiredTime = 0, this._version = 0, this._isFetching = !1;
              }
            }])),
            Aa = (t(fs, c), e(fs, [{
              key: "start",
              value: function value() {
                this._recoverGroupChat(), this._recoverC2CChat();
              }
            }, {
              key: "_recoverGroupChat",
              value: function value() {
                var n,
                  o,
                  i,
                  a,
                  s = this,
                  e = this._getLocalConvList().filter(function (e) {
                    return e.type === R.CONV_GROUP && e.groupProfile.type !== R.GRP_AVCHATROOM;
                  }),
                  r = this.get(11),
                  c = [];
                e.forEach(function (e) {
                  var t = e.conversationID,
                    e = e.lastMessage;
                  n = t.replace(R.CONV_GROUP, ""), o = r.getLocalLastMessage(t), e && 0 !== e.lastSequence && o && (i = e.lastSequence, o = o.sequence, a = i - o, 0 < o) && 1 <= a && a < 300 ? s._recoverGroupMsg({
                    groupID: n,
                    localLastMessageSequence: o,
                    remoteLastMessageSequence: i
                  }) : c.push(n);
                }), this._getGroupNotice(c);
              }
            }, {
              key: "_recoverC2CChat",
              value: function value() {
                var n,
                  o,
                  i,
                  a = this,
                  e = this._getLocalConvList().filter(function (e) {
                    return e.type === R.CONV_C2C;
                  }),
                  s = this.get(11),
                  r = [Promise.resolve()];
                e.forEach(function (e) {
                  var t = e.conversationID,
                    e = e.lastMessage;
                  n = s.getLocalLastMessage(t), e && 0 !== e.lastTime && n && (o = e.lastTime, n = n.time, i = o - n, 0 < n) && 1 <= i && i <= 600 && r.push(a._recoverC2CMsg({
                    conversationID: t,
                    localLastMessageTime: n,
                    remoteLastMessageTime: o
                  }));
                }), Promise.all(r).then(function () {
                  M.l("".concat(a._n, "._recoverC2CChat all done")), a.get(19).syncOnReconnected();
                });
              }
            }, {
              key: "_getLocalConvList",
              value: function value() {
                return this.get(11).getLocalConvList();
              }
            }, {
              key: "_recoverGroupMsg",
              value: function value(e) {
                var d = this,
                  p = "".concat(this._n, ".").concat("_recoverGroupMsg"),
                  _ = (M.l("".concat(p, " options:"), e), e.groupID),
                  h = e.localLastMessageSequence,
                  g = e.remoteLastMessageSequence,
                  f = JSON.stringify(e),
                  m = new P("_recoverGroupMsg");
                m.setMessage(f), this._getGroupRoamingMsg({
                  groupID: _,
                  sequence: h
                }).then(function (e) {
                  var e = e.data,
                    t = e.complete,
                    n = e.messageList;
                  if (!N(n)) {
                    var e = n[0].sequence,
                      o = n.map(function (e) {
                        return e.sequence;
                      }),
                      o = "".concat(f, " complete:").concat(t, " sequenceList:").concat(o),
                      i = (M.l("".concat(p, " ").concat(o)), e !== h && e < g && 2 !== t && d._recoverGroupMsg({
                        groupID: _,
                        localLastMessageSequence: e,
                        remoteLastMessageSequence: g
                      }), m.setMessage(o).end(), d.get(7));
                    1 < n.length && n.sort(function (e, t) {
                      return e.sequence - t.sequence;
                    });
                    for (var a = !1, s = 0, r = n.length; s < r; s++) if (n[s].from === R.CONV_SYSTEM) {
                      a = !0;
                      break;
                    }
                    if (a) for (var c = 0, u = n.length; c < u; c++) {
                      var l = n[c];
                      l.from !== R.CONV_SYSTEM ? i.onNewMessage({
                        dataList: [l],
                        isInstantMessage: !1,
                        updateUnreadCount: !1
                      }) : i.onNewGroupTips({
                        event: l.event,
                        dataList: [l]
                      });
                    } else i.onNewMessage({
                      dataList: n,
                      isInstantMessage: !1,
                      updateUnreadCount: !1
                    });
                  }
                })["catch"](function (e) {
                  m.setError(e).end(), M.w("".concat(p, " failed. error:"), e);
                });
              }
            }, {
              key: "_getGroupNotice",
              value: function value(e) {
                var t = e.length;
                if (M.l("".concat(this._n, "._getGroupNotice length:").concat(t)), 0 !== t) {
                  var n = this.get(7);
                  if (t <= 10) n.getNotice(e);else {
                    var o = Math.floor(t / 10);
                    5 <= o && (o = 5);
                    for (var i = 0; i <= o; i++) n.getNotice(e.slice(10 * i, 10 * (i + 1)));
                  }
                }
              }
            }, {
              key: "_getGroupRoamingMsg",
              value: function value(e) {
                var t = e.groupID,
                  e = e.sequence;
                return this.req({
                  P: G.GET_GRP_ROAMING_MSG,
                  data: {
                    groupID: t,
                    count: this.PULL_LIMIT_COUNT,
                    sequence: e + this.PULL_LIMIT_COUNT - 1
                  }
                });
              }
            }, {
              key: "_recoverC2CMsg",
              value: function value(e) {
                var o = this,
                  i = "".concat(this._n, ".").concat("_recoverC2CMsg"),
                  a = (M.l("".concat(i, " options:"), e), e.conversationID),
                  t = e.localLastMessageTime,
                  s = e.remoteLastMessageTime,
                  r = JSON.stringify(e),
                  c = new P("_recoverC2CMsg");
                return c.setMessage(r), this._getC2CRoamingMsg({
                  conversationID: a,
                  time: t
                }).then(function (e) {
                  var e = e.data,
                    t = e.complete,
                    e = e.messageList;
                  if (!N(e)) {
                    var n = e.length,
                      n = (o.get(6).onNewMessage({
                        dataList: e,
                        isInstantMessage: !0
                      }), e[n - 1].time),
                      e = e.map(function (e) {
                        return e.random;
                      }),
                      e = "".concat(r, " complete:").concat(t, " randomList:").concat(e);
                    if (M.l("".concat(i, " ").concat(e)), c.setMessage(e).end(), n < s && 1 !== t) return o._recoverC2CMsg({
                      conversationID: a,
                      localLastMessageTime: n,
                      remoteLastMessageTime: s
                    });
                  }
                })["catch"](function (e) {
                  c.setError(e).end(), M.w("".concat(i, " failed. error:"), e);
                });
              }
            }, {
              key: "_getC2CRoamingMsg",
              value: function value(e) {
                var t = e.conversationID,
                  e = e.time;
                return this.req({
                  P: G.GET_C2C_ROAMING_MSG,
                  data: {
                    peerAccount: t.replace(R.CONV_C2C, ""),
                    count: this.PULL_LIMIT_COUNT + 1,
                    lastMessageTime: e,
                    direction: 1
                  }
                });
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }])),
            Oa = e(function e() {
              p(this, e), this._n = "AvgE2EDelay", this._e2eDelayArray = [];
            }, [{
              key: "addMessageDelay",
              value: function value(e) {
                e = xe() - e;
                0 <= e && this._e2eDelayArray.push(e);
              }
            }, {
              key: "_calcAvg",
              value: function value(e, t) {
                var n;
                return 0 === t ? 0 : (n = 0, e.forEach(function (e) {
                  n += e;
                }), Kt(n / t, 1));
              }
            }, {
              key: "_calcCountWithLimit",
              value: function value(e) {
                var t = e.e2eDelayArray,
                  n = e.min,
                  o = e.max;
                return t.filter(function (e) {
                  return n <= e && e < o;
                }).length;
              }
            }, {
              key: "_calcPercent",
              value: function value(e, t) {
                e = Kt(e / t * 100, 2);
                return e = 100 < e ? 100 : e;
              }
            }, {
              key: "_checkE2EDelayException",
              value: function value(e, t) {
                var n,
                  o,
                  i,
                  a = e.filter(function (e) {
                    return t < e;
                  });
                0 < a.length && (n = a.length, o = Math.min.apply(Math, d(a)), i = Math.max.apply(Math, d(a)), a = this._calcAvg(a, n), 50 < (e = Kt(n / e.length * 100, 2))) && new P("messageE2EDelayException").setMessage("count:".concat(n, " min:").concat(o, " max:").concat(i, " avg:").concat(a, " percent:").concat(e)).setLevel("warning").end();
              }
            }, {
              key: "getStatResult",
              value: function value() {
                var e,
                  t,
                  n,
                  o,
                  i,
                  a,
                  s = this._e2eDelayArray.length;
                return 0 === s ? null : (e = d(this._e2eDelayArray), t = this._calcCountWithLimit({
                  e2eDelayArray: e,
                  min: 0,
                  max: 1
                }), n = this._calcCountWithLimit({
                  e2eDelayArray: e,
                  min: 1,
                  max: 3
                }), o = this._calcPercent(t, s), i = this._calcPercent(n, s), a = this._calcAvg(e, s), this._checkE2EDelayException(e, 3), e.length = 0, this.reset(), {
                  totalCount: s,
                  countLessThan1Second: t,
                  percentOfCountLessThan1Second: o,
                  countLessThan3Second: n,
                  percentOfCountLessThan3Second: i,
                  avgDelay: a
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._e2eDelayArray.length = 0;
              }
            }]),
            Na = e(function e() {
              p(this, e), this._n = "AvgRTT", this._requestCount = 0, this._rttArray = [];
            }, [{
              key: "addRequestCount",
              value: function value() {
                this._requestCount += 1;
              }
            }, {
              key: "addRTT",
              value: function value(e) {
                this._rttArray.push(e);
              }
            }, {
              key: "_calcTotalCount",
              value: function value() {
                return this._requestCount;
              }
            }, {
              key: "_calcRTTCount",
              value: function value(e) {
                return e.length;
              }
            }, {
              key: "_calcSuccessRateOfRequest",
              value: function value(e, t) {
                return 0 === t ? 0 : 100 < (e = Kt(e / t * 100, 2)) ? 100 : e;
              }
            }, {
              key: "_calcAvg",
              value: function value(e, t) {
                var n;
                return 0 === t ? 0 : (n = 0, e.forEach(function (e) {
                  n += e;
                }), parseInt(n / t));
              }
            }, {
              key: "_calcMax",
              value: function value() {
                return Math.max.apply(Math, d(this._rttArray));
              }
            }, {
              key: "_calcMin",
              value: function value() {
                return Math.min.apply(Math, d(this._rttArray));
              }
            }, {
              key: "getStatResult",
              value: function value() {
                var e,
                  t,
                  n = this._calcTotalCount(),
                  o = d(this._rttArray);
                return 0 === n ? null : (e = this._calcRTTCount(o), t = this._calcSuccessRateOfRequest(e, n), o = this._calcAvg(o, e), M.l("".concat(this._n, ".getStatResult max:").concat(this._calcMax(), " min:").concat(this._calcMin(), " avg:").concat(o)), this.reset(), {
                  totalCount: n,
                  rttCount: e,
                  successRateOfRequest: t,
                  avgRTT: o
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._requestCount = 0, this._rttArray.length = 0;
              }
            }]),
            Ga = e(function e() {
              p(this, e), this._map = new Map();
            }, [{
              key: "initMap",
              value: function value(e) {
                var t = this;
                e.forEach(function (e) {
                  t._map.set(e, {
                    totalCount: 0,
                    successCount: 0,
                    failedCountOfUserSide: 0,
                    costArray: [],
                    fileSizeArray: []
                  });
                });
              }
            }, {
              key: "addTotalCount",
              value: function value(e) {
                return !(N(e) || !this._map.has(e) || (this._map.get(e).totalCount += 1, 0));
              }
            }, {
              key: "addSuccessCount",
              value: function value(e) {
                return !(N(e) || !this._map.has(e) || (this._map.get(e).successCount += 1, 0));
              }
            }, {
              key: "addFailedCountOfUserSide",
              value: function value(e) {
                return !(N(e) || !this._map.has(e) || (this._map.get(e).failedCountOfUserSide += 1, 0));
              }
            }, {
              key: "addCost",
              value: function value(e, t) {
                return !(N(e) || !this._map.has(e) || (this._map.get(e).costArray.push(t), 0));
              }
            }, {
              key: "addFileSize",
              value: function value(e, t) {
                return !(N(e) || !this._map.has(e) || (this._map.get(e).fileSizeArray.push(t), 0));
              }
            }, {
              key: "_calcSuccessRateOfBusiness",
              value: function value(e) {
                return N(e) || !this._map.has(e) ? -1 : 100 < (e = Kt((e = this._map.get(e)).successCount / e.totalCount * 100, 2)) ? 100 : e;
              }
            }, {
              key: "_calcSuccessRateOfPlatform",
              value: function value(e) {
                var t;
                return N(e) || !this._map.has(e) ? -1 : (t = this._map.get(e), 100 < (e = Kt(e = this._calcSuccessCountOfPlatform(e) / t.totalCount * 100, 2)) ? 100 : e);
              }
            }, {
              key: "_calcTotalCount",
              value: function value(e) {
                return N(e) || !this._map.has(e) ? -1 : this._map.get(e).totalCount;
              }
            }, {
              key: "_calcSuccessCountOfBusiness",
              value: function value(e) {
                return N(e) || !this._map.has(e) ? -1 : this._map.get(e).successCount;
              }
            }, {
              key: "_calcSuccessCountOfPlatform",
              value: function value(e) {
                return N(e) || !this._map.has(e) ? -1 : (e = this._map.get(e)).successCount + e.failedCountOfUserSide;
              }
            }, {
              key: "_calcAvg",
              value: function value(e) {
                return N(e) || !this._map.has(e) ? -1 : e === Jn ? this._calcAvgSpeed(e) : this._calcAvgCost(e);
              }
            }, {
              key: "_calcAvgCost",
              value: function value(e) {
                var t,
                  n = this._map.get(e).costArray.length;
                return 0 === n ? 0 : (t = 0, this._map.get(e).costArray.forEach(function (e) {
                  t += e;
                }), parseInt(t / n));
              }
            }, {
              key: "_calcAvgSpeed",
              value: function value(e) {
                var t = 0,
                  n = 0;
                return this._map.get(e).costArray.forEach(function (e) {
                  t += e;
                }), this._map.get(e).fileSizeArray.forEach(function (e) {
                  n += e;
                }), parseInt(1e3 * n / t);
              }
            }, {
              key: "getStatResult",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s = this._calcTotalCount(e);
                return 0 === s ? null : (t = this._calcSuccessCountOfBusiness(e), n = this._calcSuccessRateOfBusiness(e), o = this._calcSuccessCountOfPlatform(e), i = this._calcSuccessRateOfPlatform(e), a = this._calcAvg(e), this.reset(e), {
                  totalCount: s,
                  successCountOfBusiness: t,
                  successRateOfBusiness: n,
                  successCountOfPlatform: o,
                  successRateOfPlatform: i,
                  avgValue: a
                });
              }
            }, {
              key: "reset",
              value: function value(e) {
                N(e) ? this._map.clear() : this._map.set(e, {
                  totalCount: 0,
                  successCount: 0,
                  failedCountOfUserSide: 0,
                  costArray: [],
                  fileSizeArray: []
                });
              }
            }]),
            Pa = e(function e() {
              p(this, e), this._lastMap = new Map(), this._currentMap = new Map();
            }, [{
              key: "initMap",
              value: function value(e) {
                var t = this;
                e.forEach(function (e) {
                  t._lastMap.set(e, new Map()), t._currentMap.set(e, new Map());
                });
              }
            }, {
              key: "addMessageSequence",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i = e.key,
                  a = e.message;
                return !(N(i) || !this._lastMap.has(i) || !this._currentMap.has(i) || (t = a.conversationID, a = a.sequence, t = t.replace(R.CONV_GROUP, ""), 0 !== this._lastMap.get(i).size && this._lastMap.get(i).has(t) && (o = (n = this._lastMap.get(i).get(t)).length - 1, a > n[0]) && a < n[o] ? (n.push(a), n.sort(), this._lastMap.get(i).set(t, n)) : this._addCurrentMap(e), 0));
              }
            }, {
              key: "_addCurrentMap",
              value: function value(e) {
                var t = e.key,
                  e = e.message,
                  n = e.conversationID,
                  e = e.sequence,
                  n = n.replace(R.CONV_GROUP, "");
                this._currentMap.get(t).has(n) || this._currentMap.get(t).set(n, []), this._currentMap.get(t).get(n).push(e);
              }
            }, {
              key: "_copyData",
              value: function value(e) {
                if (!N(e)) {
                  this._lastMap.set(e, new Map());
                  var t,
                    n = this._lastMap.get(e),
                    o = F(this._currentMap.get(e));
                  try {
                    for (o.s(); !(t = o.n()).done;) {
                      var i = j(t.value, 2),
                        a = i[0],
                        s = i[1];
                      n.set(a, s);
                    }
                  } catch (e) {
                    o.e(e);
                  } finally {
                    o.f();
                  }
                  n = null, this._currentMap.set(e, new Map());
                }
              }
            }, {
              key: "getStatResult",
              value: function value(e) {
                var o, i, t;
                return N(this._currentMap.get(e)) || N(this._lastMap.get(e)) ? null : 0 === this._lastMap.get(e).size ? (this._copyData(e), null) : (i = o = 0, this._lastMap.get(e).forEach(function (e, t) {
                  var e = d(e.values()),
                    n = e.length,
                    e = e[n - 1] - e[0] + 1;
                  o += e, i += n;
                }), 0 === o ? null : (100 < (t = Kt(i / o * 100, 2)) && (t = 100), this._copyData(e), {
                  totalCount: o,
                  successCountOfMessageReceived: i,
                  successRateOfMessageReceived: t
                }));
              }
            }, {
              key: "reset",
              value: function value() {
                this._currentMap.clear(), this._lastMap.clear();
              }
            }]),
            Ua = (t(gs, c), e(gs, [{
              key: "_onLoginSuccess",
              value: function value() {
                var t = this,
                  e = (this._rateMessageSent.initMap(this._messageSentItems), this._rateMessageReceived.initMap(this._messageReceivedItems), this.get(13)),
                  n = e.getItem(this.TAG, !1);
                !S(n) && ct(n.forEach) && (M.l("".concat(this._n, "._onLoginSuccess. logs count:").concat(n.length)), n.forEach(function (e) {
                  t._statInfoArr.push(e);
                }), e.removeItem(this.TAG, !1));
              }
            }, {
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("q_rpt_interval"),
                  t = this.getCloudConfig("q_rpt_sdkappid_bl"),
                  n = this.getCloudConfig("q_rpt_tinyid_wl");
                N(e) || (this.REPORT_INTERVAL = Number(e)), N(t) || (this.REPORT_SDKAPPID_BLACKLIST = t.split(",").map(function (e) {
                  return Number(e);
                })), N(n) || (this.REPORT_TINYID_WHITELIST = n.split(","));
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                this.isLoggedIn() && e % this.REPORT_INTERVAL == 0 && (this.wholePeriod = !0, this._report());
              }
            }, {
              key: "addRequestCount",
              value: function value() {
                this._avgRTT.addRequestCount();
              }
            }, {
              key: "addRTT",
              value: function value(e) {
                this._avgRTT.addRTT(e);
              }
            }, {
              key: "addMessageDelay",
              value: function value(e) {
                this._avgE2EDelay.addMessageDelay(e);
              }
            }, {
              key: "addTotalCount",
              value: function value(e) {
                this._rateMessageSent.addTotalCount(e) || M.w("".concat(this._n, ".addTotalCount invalid key:"), e);
              }
            }, {
              key: "addSuccessCount",
              value: function value(e) {
                this._rateMessageSent.addSuccessCount(e) || M.w("".concat(this._n, ".addSuccessCount invalid key:"), e);
              }
            }, {
              key: "addFailedCountOfUserSide",
              value: function value(e) {
                this._rateMessageSent.addFailedCountOfUserSide(e) || M.w("".concat(this._n, ".addFailedCountOfUserSide invalid key:"), e);
              }
            }, {
              key: "addCost",
              value: function value(e, t) {
                this._rateMessageSent.addCost(e, t) || M.w("".concat(this._n, ".addCost invalid key or cost:"), e, t);
              }
            }, {
              key: "addFileSize",
              value: function value(e, t) {
                this._rateMessageSent.addFileSize(e, t) || M.w("".concat(this._n, ".addFileSize invalid key or size:"), e, t);
              }
            }, {
              key: "addMessageSequence",
              value: function value(e) {
                this._rateMessageReceived.addMessageSequence(e) || M.w("".concat(this._n, ".addMessageSequence invalid key:"), e.key);
              }
            }, {
              key: "_getQualityItem",
              value: function value(e) {
                var t = {},
                  n = eo[this.get(15).getNetworkType()],
                  n = (N(n) && (n = 8), {
                    qualityType: Qn[e],
                    timestamp: He(),
                    networkType: n,
                    extension: ""
                  });
                switch (e) {
                  case Bn:
                    t = this._avgRTT.getStatResult();
                    break;
                  case Hn:
                    t = this._avgE2EDelay.getStatResult();
                    break;
                  case Kn:
                  case Wn:
                  case Yn:
                  case jn:
                  case Jn:
                    t = this._rateMessageSent.getStatResult(e);
                    break;
                  case zn:
                  case Xn:
                  case Zn:
                    t = this._rateMessageReceived.getStatResult(e);
                }
                return null === t ? null : y(y({}, n), t);
              }
            }, {
              key: "_report",
              value: function value(e) {
                var t = this,
                  n = [],
                  o = null,
                  e = (N(e) ? this._qualityItems.forEach(function (e) {
                    null !== (o = t._getQualityItem(e)) && (o.reportIndex = t.reportIndex, o.wholePeriod = t.wholePeriod, n.push(o));
                  }) : null !== (o = this._getQualityItem(e)) && (o.reportIndex = this.reportIndex, o.wholePeriod = this.wholePeriod, n.push(o)), M.d("".concat(this._n, "._report"), n), 0 < this._statInfoArr.length && (n = n.concat(this._statInfoArr), this._statInfoArr = []), this.get(12)),
                  i = e.getSDKAppID(),
                  e = e.getTinyID();
                0 < (n = Wt(this.REPORT_SDKAPPID_BLACKLIST, i) && !Yt(this.REPORT_TINYID_WHITELIST, e) ? [] : n).length && this._doReport(n);
              }
            }, {
              key: "_doReport",
              value: function value(t) {
                var n = this,
                  e = {
                    header: yi(this),
                    quality: t
                  };
                this.req({
                  P: G.SSO_STAT,
                  data: y({}, e)
                }).then(function () {
                  n.reportIndex++, n.wholePeriod = !1;
                })["catch"](function (e) {
                  M.w("".concat(n._n, "._doReport failed. error:"), e), n._statInfoArr = n._statInfoArr.concat(t), n._flushAtOnce();
                });
              }
            }, {
              key: "_flushAtOnce",
              value: function value() {
                var e = this.get(13),
                  t = e.getItem(this.TAG, !1),
                  n = this._statInfoArr,
                  o = "".concat(this._n, "._flushAtOnce");
                S(t) ? (M.l("".concat(o, " count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1)) : (10 < (n = n.concat(t)).length && (n = n.slice(0, 10)), M.l("".concat(o, " count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1)), this._statInfoArr = [];
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._report(), this.reportIndex = 0, this.wholePeriod = !1, this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [], this._avgRTT.reset(), this._avgE2EDelay.reset(), this._rateMessageSent.reset(), this._rateMessageReceived.reset();
              }
            }])),
            ba = e(function e(t) {
              p(this, e), S(t) || (this.userID = t.userID || "", this.nick = t.nick || "", this.avatar = t.avatar || "", this.time = t.time || 0, this.source = t.source || "", this.wording = t.wording || "", this.type = t.type || "");
            }),
            wa = e(function e(t) {
              p(this, e), this._snsM = t, this._n = "FriendApplicationHandler", this._startTime = 0, this._maxLimited = 100, this._currentSeq = 0, this._map = new Map(), this._unreadCount = 0;
            }, [{
              key: "getLocalApplicationList",
              value: function value() {
                return {
                  friendApplicationList: d(this._map.values()),
                  unreadCount: this._unreadCount
                };
              }
            }, {
              key: "_onApplicationListUpdated",
              value: function value() {
                this._snsM.emitOEvt(h.FRIEND_APPLICATION_LIST_UPDATED, {
                  friendApplicationList: d(this._map.values()),
                  unreadCount: this._unreadCount
                });
              }
            }, {
              key: "onApplicationRead",
              value: function value() {
                this._unreadCount = 0, this._onApplicationListUpdated();
              }
            }, {
              key: "onApplicationAdded",
              value: function value(e, t) {
                var n,
                  o,
                  i = this;
                S(e) || (n = "", n = t === this._snsM.getMyUserID() ? R.SNS_APPLICATION_SENT_BY_ME : R.SNS_APPLICATION_SENT_TO_ME, o = !1, e.forEach(function (e) {
                  var t = "".concat(e.userID, "_").concat(n);
                  n !== R.SNS_APPLICATION_SENT_TO_ME || i._map.has(t) || (i._unreadCount += 1), i._map.set(t, new ba(y(y({}, e), {}, {
                    type: n
                  }))), o = !0;
                }), o && this._onApplicationListUpdated());
              }
            }, {
              key: "onApplicationDeleted",
              value: function value(e) {
                S(e) || (this._startTime = 0, this._currentSeq = 0, this.getApplicationList());
              }
            }, {
              key: "getApplicationList",
              value: function value() {
                var a = this,
                  s = "".concat(this._n, ".").concat("getApplicationList"),
                  r = new P("getApplicationList");
                return this._snsM.req({
                  P: G.GET_FD_APPLICATION_LIST,
                  data: {
                    applicationType: R.SNS_APPLICATION_TYPE_BOTH,
                    fromAccount: this._snsM.getMyUserID(),
                    maxLimited: this._maxLimited,
                    startTime: this._startTime,
                    lastSequence: this._currentSeq
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.resultList,
                    n = e.unreadCount,
                    o = e.startTime,
                    e = e.currentSequence,
                    i = (a._startTime = o, a._currentSeq = e, a._unreadCount = n, O(t) ? t.length : 0),
                    i = "applicationCount:".concat(i, " unreadCount:").concat(n, " startTime:").concat(o, " currentSequence:").concat(e);
                  r.setMessage(i).end(), M.i("".concat(s, " ok. ").concat(i)), a._map.clear(), O(t) && t.forEach(function (e) {
                    var t = e.userID,
                      n = e.type,
                      e = new ba(e);
                    a._map.set("".concat(t, "_").concat(n), e);
                  }), a._onApplicationListUpdated();
                })["catch"](function (e) {
                  return r.setError(e).end(), M.w("".concat(s, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "deleteApplication",
              value: function value(e) {
                var i,
                  a = "".concat(this._n, ".").concat("deleteApplication"),
                  s = e.userID,
                  r = e.type;
                return r && (r === R.SNS_APPLICATION_SENT_BY_ME || r === R.SNS_APPLICATION_SENT_TO_ME) || (r = R.SNS_APPLICATION_SENT_TO_ME), this._map.has("".concat(s, "_").concat(r)) ? ((i = new P("deleteApplication")).setMessage("userID:".concat(s, " type:").concat(r)), this._snsM.req({
                  P: G.DEL_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: [s],
                    type: r
                  }
                }).then(function (e) {
                  var e = e.data.resultList,
                    t = e[0],
                    n = t.to,
                    o = t.resultCode,
                    t = t.resultInfo;
                  return i.setMoreMessage("resultList:".concat(JSON.stringify(e))).end(), M.i("".concat(a, " ok. userID:").concat(s, " type:").concat(r)), 0 === o ? T() : E({
                    userID: n,
                    code: o,
                    message: t
                  });
                })["catch"](function (e) {
                  return i.setError(e).end(), M.w("".concat(a, " failed. error:"), e), E(e);
                })) : E({
                  code: k.FRIEND_APPLICATION_NOT_EXIST
                });
              }
            }, {
              key: "acceptApplication",
              value: function value(e) {
                var n = "".concat(this._n, ".").concat("acceptApplication"),
                  o = e.userID,
                  t = e.remark,
                  i = e.tag,
                  a = e.type,
                  s = (a && (a === R.SNS_APPLICATION_AGREE || a === R.SNS_APPLICATION_AGREE_AND_ADD) || (a = R.SNS_APPLICATION_AGREE_AND_ADD), new P("acceptApplication"));
                return s.setMessage("userID:".concat(o, " type:").concat(a)), this._snsM.req({
                  P: G.RESPOND_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    responseFriendItem: [{
                      userID: o,
                      remark: t,
                      tag: i,
                      action: a
                    }]
                  }
                }).then(function (e) {
                  s.end();
                  var e = e.data.resultList[0],
                    t = e.resultCode,
                    e = e.resultInfo;
                  if (0 !== t) return E({
                    code: t,
                    message: e
                  });
                  M.i("".concat(n, " ok. userID:").concat(o, " type:").concat(a));
                })["catch"](function (e) {
                  return s.setError(e).end(), M.w("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "refuseApplication",
              value: function value(e) {
                var n = "".concat(this._n, ".").concat("refuseApplication"),
                  o = e.userID,
                  i = new P("refuseApplication");
                return i.setMessage("userID:".concat(o)), this._snsM.req({
                  P: G.RESPOND_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    responseFriendItem: [{
                      userID: o,
                      action: "Response_Action_Reject"
                    }]
                  }
                }).then(function (e) {
                  i.end();
                  var e = e.data.resultList[0],
                    t = e.resultCode,
                    e = e.resultInfo;
                  if (0 !== t) return E({
                    code: t,
                    message: e
                  });
                  M.i("".concat(n, " ok. userID:").concat(o));
                })["catch"](function (e) {
                  return i.setError(e).end(), M.w("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "setApplicationRead",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".").concat("setApplicationRead"),
                  o = new P("setApplicationRead");
                return this._snsM.req({
                  P: G.REPORT_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    latestTimeStamp: Kt(He() / 1e3, 0)
                  }
                }).then(function (e) {
                  o.end(), M.i("".concat(n, " ok")), t._unreadCount = 0;
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(n, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._maxLimited = 100, this._currentSeq = 0, this._unreadCount = 0, this._map.clear();
              }
            }]),
            Fa = e(function e(t, n) {
              p(this, e), this.userID = t, this.remark = "", this.groupList = [], this.source = "", this.addTime = 0, this.friendCustomField = [], this.timestamp = 0;
              var o = {},
                i = [];
              if (o.userID = t, !S(n)) for (var a, s = "", r = 0, c = n.length; r < c; r++) if (s = n[r].tag, a = n[r].value, -1 < s.indexOf("Tag_SNS_Custom")) this.friendCustomField.push({
                key: s,
                value: a
              });else if (-1 < s.indexOf("Tag_Profile_Custom")) i.push({
                key: s,
                value: a
              });else switch (s) {
                case f.NICK:
                  o.nick = a;
                  break;
                case f.GENDER:
                  o.gender = a;
                  break;
                case f.BIRTHDAY:
                  o.birthday = a;
                  break;
                case f.LOCATION:
                  o.location = a;
                  break;
                case f.SELFSIGNATURE:
                  o.selfSignature = a;
                  break;
                case f.ALLOWTYPE:
                  o.allowType = a;
                  break;
                case f.LANGUAGE:
                  o.language = a;
                  break;
                case f.AVATAR:
                  o.avatar = a;
                  break;
                case f.MESSAGESETTINGS:
                  o.messageSettings = a;
                  break;
                case f.ADMINFORBIDTYPE:
                  o.adminForbidType = a;
                  break;
                case f.LEVEL:
                  o.level = a;
                  break;
                case f.ROLE:
                  o.role = a;
                  break;
                case Je.REMARK:
                  this.remark = a;
                  break;
                case Je.ADDTIME:
                  this.addTime = a;
                  break;
                case Je.GROUP:
                  this.groupList = JSON.parse(JSON.stringify(a));
                  break;
                case Je.ADDSOURCE:
                  this.source = a;
                  break;
                case Je.ADDWORDING:
                  break;
                default:
                  M.l("snsProfileItem unknown tag->", n[r].tag);
              }
              this.profile = new bo(y(y({}, o), {}, {
                profileCustomField: i
              }));
            }, [{
              key: "validate",
              value: function value(e) {
                var t,
                  n = !0,
                  o = "";
                if (S(e)) return {
                  valid: !1,
                  tips: "empty options"
                };
                if (e.profileCustomField) for (var i = e.profileCustomField.length, a = null, s = 0; s < i; s++) {
                  if (a = e.profileCustomField[s], !C(a.key) || -1 === a.key.indexOf("Tag_Profile_Custom")) return {
                    valid: !1,
                    tips: "The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom"
                  };
                  if (!C(a.value)) return {
                    valid: !1,
                    tips: "The type of values of the custom profile key-value pairs (which is profileCustomField) must be String"
                  };
                }
                for (t in e) if (Object.prototype.hasOwnProperty.call(e, t)) {
                  if ("profileCustomField" === t) continue;
                  if (S(e[t]) && !C(e[t]) && !A(e[t])) {
                    o = "key:" + t + ", invalid value:" + e[t], n = !1;
                    continue;
                  }
                  switch (t) {
                    case "nick":
                      C(e[t]) || (n = !(o = "nick must be a string")), 500 < _t(e[t]) && (o = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(_t(e[t]), " bytes"), n = !1);
                      break;
                    case "gender":
                      ft(ze, e.gender) || (o = "key:gender, invalid value:" + e.gender, n = !1);
                      break;
                    case "birthday":
                      A(e.birthday) || (n = !(o = "birthday must be a number"));
                      break;
                    case "location":
                      C(e.location) || (n = !(o = "location must be a string"));
                      break;
                    case "selfSignature":
                      C(e.selfSignature) || (n = !(o = "selfSignature must be a string"));
                      break;
                    case "allowType":
                      ft(Ze, e.allowType) || (o = "key:allowType, invalid value:" + e.allowType, n = !1);
                      break;
                    case "language":
                      A(e.language) || (n = !(o = "language must be a number"));
                      break;
                    case "avatar":
                      C(e.avatar) || (n = !(o = "avatar must be a string"));
                      break;
                    case "messageSettings":
                      0 !== e.messageSettings && 1 !== e.messageSettings && (n = !(o = "messageSettings must be 0 or 1"));
                      break;
                    case "adminForbidType":
                      ft(Xe, e.adminForbidType) || (o = "key:adminForbidType, invalid value:" + e.adminForbidType, n = !1);
                      break;
                    case "level":
                      A(e.level) || (n = !(o = "level must be a number"));
                      break;
                    case "role":
                      A(e.role) || (n = !(o = "role must be a number"));
                      break;
                    default:
                      o = "unknown key:" + t + "  " + e[t], n = !1;
                  }
                }
                return {
                  valid: n,
                  tips: o
                };
              }
            }, {
              key: "update",
              value: function value(e) {
                var n = this,
                  o = "",
                  i = "",
                  a = [];
                this.friendCustomField.forEach(function (e) {
                  a.push(e.key);
                });
                for (var s = 0, t = e.length; s < t; s++) !function () {
                  if (o = e[s].tag, i = e[s].value, -1 < o.indexOf("Tag_SNS_Custom")) -1 < a.indexOf(o) ? n.friendCustomField.forEach(function (e) {
                    e.key === o && (e.value = i);
                  }) : n.friendCustomField.push({
                    key: o,
                    value: i
                  });else if (-1 < o.indexOf("Tag_Profile_Custom")) {
                    var t = !1;
                    n.profile.profileCustomField.forEach(function (e) {
                      e.key === o && (e.value = i, t = !0);
                    }), t || n.profile.profileCustomField.push({
                      key: o,
                      value: i
                    });
                  } else switch (o) {
                    case f.NICK:
                      n.profile.nick = i;
                      break;
                    case f.GENDER:
                      n.profile.gender = i;
                      break;
                    case f.BIRTHDAY:
                      n.profile.birthday = i;
                      break;
                    case f.LOCATION:
                      n.profile.location = i;
                      break;
                    case f.SELFSIGNATURE:
                      n.profile.selfSignature = i;
                      break;
                    case f.ALLOWTYPE:
                      n.profile.allowType = i;
                      break;
                    case f.LANGUAGE:
                      n.profile.language = i;
                      break;
                    case f.AVATAR:
                      n.profile.avatar = i;
                      break;
                    case f.MESSAGESETTINGS:
                      n.profile.messageSettings = i;
                      break;
                    case f.ADMINFORBIDTYPE:
                      n.profile.adminForbidType = i;
                      break;
                    case f.LEVEL:
                      n.profile.level = i;
                      break;
                    case f.ROLE:
                      n.profile.role = i;
                      break;
                    case Je.REMARK:
                      n.remark = i;
                      break;
                    case Je.ADDTIME:
                      n.addTime = i;
                      break;
                    case Je.GROUP:
                      n.groupList = JSON.parse(JSON.stringify(i));
                      break;
                    case Je.ADDSOURCE:
                      n.source = i;
                      break;
                    case Je.ADDWORDING:
                      break;
                    default:
                      M.d("snsProfileItem unkown tag->", e[s].tag);
                  }
                }();
                this.timestamp = Date.now(), a.length = 0;
              }
            }, {
              key: "updateProfile",
              value: function value(e) {
                this.profile = JSON.parse(JSON.stringify(e)), this.timestamp = Date.now();
              }
            }, {
              key: "addToGroupList",
              value: function value(e) {
                -1 === this.groupList.indexOf(e) && (this.groupList.push(e), this.count = this.groupList.length);
              }
            }, {
              key: "removeFromGroupList",
              value: function value(e) {
                e = this.groupList.indexOf(e);
                -1 < e && (this.groupList.splice(e, 1), this.count = this.groupList.length);
              }
            }]),
            qa = e(function e(t) {
              p(this, e), this._snsM = t, this._n = "FriendHandler", this._map = new Map(), this._startIdx = 0, this._standardSeq = 0, this._customSeq = 0, this._expirationTime = 18e4;
            }, [{
              key: "getLocalFriendList",
              value: function value() {
                return d(this._map.values());
              }
            }, {
              key: "getFriendRemark",
              value: function value(e) {
                return this._map.has(e) ? this._map.get(e).remark : "";
              }
            }, {
              key: "onFriendProfileModified",
              value: function value(e) {
                var o,
                  i = this,
                  e = e.dataList;
                S(e) || (o = this._snsM.get(11), e.forEach(function (e) {
                  var t,
                    n = e.userID,
                    e = e.profileList;
                  i.isMyFriend(n) && (M.l("".concat(i._n, ".onFriendProfileModified. friend account:").concat(n, ", profileList:").concat(JSON.stringify(e))), (t = i._map.get(n)).update(e), o.modifyMessageSentByPeer({
                    conversationID: "".concat(R.CONV_C2C).concat(n),
                    latestNick: t.profile.nick,
                    latestAvatar: t.profile.avatar
                  }));
                }), this._onFriendListUpdated());
              }
            }, {
              key: "onFriendAdded",
              value: function value(t) {
                var n = this;
                0 !== t.length && (M.l("".concat(this._n, ".onFriendAdded userIDList:").concat(t)), t.forEach(function (e) {
                  n._map.set(e, new Fa(e));
                }), this.getFriendProfile({
                  userIDList: t
                }).then(function (e) {
                  t.forEach(function (e) {
                    var t = n._map.get(e);
                    0 < t.groupList.length && n._snsM.updateWhenFriendAdded({
                      nameList: t.groupList,
                      userID: e
                    });
                  }), n._onFriendListUpdated();
                }));
              }
            }, {
              key: "onFriendDeleted",
              value: function value(e) {
                var n = this;
                0 !== e.length && (M.l("".concat(this._n, ".onFriendDeleted userIDList:").concat(e)), e.forEach(function (e) {
                  var t = n._map.get(e);
                  0 < t.groupList.length && n._snsM.updateWhenFriendDeleted({
                    nameList: t.groupList,
                    userID: e
                  }), n._map["delete"](e);
                }), this._onFriendListUpdated());
              }
            }, {
              key: "_onFriendListUpdated",
              value: function value() {
                this._snsM.emitOEvt(h.FRIEND_LIST_UPDATED), this._snsM.get(11).checkAndPatchRemark();
              }
            }, {
              key: "getFriendProfile",
              value: function value(e) {
                var t,
                  a = this,
                  n = "".concat(this._n, ".").concat("getFriendProfile"),
                  e = e.userIDList,
                  s = [],
                  r = [],
                  o = [];
                return e.forEach(function (e) {
                  var t;
                  a._map.has(e) ? (t = a._map.get(e), Date.now() - t.timestamp < a._expirationTime ? r.push(t) : o.push(e)) : s.push({
                    userID: e,
                    code: k.NOT_MY_FRIEND,
                    message: a._snsM.getErrMsg(k.NOT_MY_FRIEND)
                  });
                }), 0 === o.length ? (M.i("".concat(n, " newUserIDList is empty")), D({
                  friendList: r,
                  failureUserIDList: s
                })) : ((t = new P("getFriendProfile")).setMessage("userIDList:".concat(o)), M.i("".concat(n, " userIDList:").concat(o)), this._snsM.req({
                  P: G.GET_FD_PROFILE,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: o
                  }
                }).then(function (e) {
                  return t.end(), M.i("".concat(n, " ok")), e.data.resultList.forEach(function (e) {
                    var t,
                      n = e.to,
                      o = e.resultCode,
                      i = e.resultInfo,
                      e = e.tagValueList;
                    N(o) || 0 === o ? (a._map.has(n) ? (t = a._map.get(n)).update(e) : (t = new Fa(n, e), a._map.set(n, t)), r.push(t)) : s.push({
                      userID: n,
                      code: o,
                      message: i
                    });
                  }), T({
                    friendList: r,
                    failureUserIDList: s
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.w("".concat(n, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "isMyFriend",
              value: function value(e) {
                return this._map.has(e);
              }
            }, {
              key: "pagingGetFriendList",
              value: function value() {
                var s = this,
                  r = "".concat(this._n, ".").concat("getFriendList"),
                  c = new P("getFriendList"),
                  u = Date.now();
                this._snsM.req({
                  P: G.GET_FD_LIST,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    startIndex: this._startIdx,
                    standardSequence: this._standardSeq,
                    customSequence: this._customSeq
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.friendCount,
                    n = e.resultList,
                    o = e.nextStartIndex,
                    i = e.standardSequence,
                    a = e.customSequence,
                    e = e.completeFlag,
                    t = (s._startIdx = o, s._standardSeq = i, s._customSeq = a, "friendCount:".concat(t, " nextStartIndex:").concat(o, " standardSequence:").concat(i, " ") + "customSequence:".concat(a, " completeFlag:").concat(e, " cost:").concat(tn(u)));
                  c.setMessage(t).end(), M.i("".concat(r, " ok."), t), S(n) || n.forEach(function (e) {
                    var t = e.to,
                      e = e.tagValueList;
                    s._map.set(t, new Fa(t, e));
                  }), 0 === e ? s.pagingGetFriendList() : (s._snsM.emitOEvt(h.FRIEND_LIST_UPDATED), s._pagingGetFriendProfile());
                })["catch"](function (e) {
                  return c.setError(e).end(), M.w("".concat(r, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_pagingGetFriendProfile",
              value: function value() {
                var n = this,
                  e = d(this._map.keys()),
                  t = this._snsM.get(4),
                  o = e.length,
                  i = o <= 100 ? 1 : Math.ceil(o / 100);
                M.l("".concat(this._n, "._pagingGetFriendProfile friendCount:").concat(o, " pageCount:").concat(i));
                for (var a = 0; a < i; a++) t.getUserProfile({
                  userIDList: e.slice(100 * a, 100 * (a + 1))
                }).then(function (e) {
                  e.data.forEach(function (e) {
                    var t = n._map.get(e.userID);
                    t && t.updateProfile(e);
                  }), n._onFriendListUpdated();
                });
              }
            }, {
              key: "addFriend",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a,
                  s,
                  r,
                  c = this,
                  u = "".concat(this._n, ".").concat("addFriend");
                return e.wording && !1 === this._snsM.filterProfanity("wording", e) ? E({
                  code: k.PROFANITY_FOUND
                }) : (t = e.to, n = e.source, o = e.type, i = e.wording, a = e.remark, e = e.groupName, (s = o) && (s === R.SNS_ADD_TYPE_SINGLE || s === R.SNS_ADD_TYPE_BOTH) || (s = R.SNS_ADD_TYPE_BOTH), (r = new P("addFriend")).setMessage("to:".concat(t, " source:").concat(n, " type:").concat(s)), this._snsM.req({
                  P: G.ADD_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    addFriendItem: [{
                      to: t,
                      source: n,
                      wording: i,
                      remark: a,
                      groupName: e
                    }],
                    type: s
                  }
                }).then(function (e) {
                  var e = e.data.resultList,
                    e = (r.setMoreMessage("resultList:".concat(JSON.stringify(e))).end(), e[0]),
                    t = e.to,
                    n = e.resultCode,
                    e = e.resultInfo;
                  return M.i("".concat(u, " ok. to:").concat(t, " type:").concat(s, " code:").concat(n)), N(n) || 0 === n ? T({
                    userID: t,
                    code: 0
                  }) : 30539 === n ? T({
                    userID: t,
                    code: n,
                    message: c._snsM.getErrMsg(n)
                  }) : E({
                    userID: t,
                    code: n,
                    message: c._snsM.getErrMsg(n) || e
                  });
                })["catch"](function (e) {
                  return r.setError(e).end(), M.w("".concat(u, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "deleteFriend",
              value: function value(e) {
                var t,
                  n = this,
                  o = "".concat(this._n, ".").concat("deleteFriend"),
                  i = e.userIDList,
                  e = e.type,
                  a = (1e3 < i.length && (M.w("".concat(o, " ").concat(Qt(1e3))), i.length = 1e3), []),
                  s = [],
                  r = [];
                return i.forEach(function (e) {
                  n._map.has(e) ? r.push(e) : a.push({
                    userID: e,
                    code: k.NOT_MY_FRIEND,
                    message: n._snsM.getErrMsg(k.NOT_MY_FRIEND)
                  });
                }), 0 === r.length ? D({
                  successUserIDList: s,
                  failureUserIDList: a
                }) : ((i = e) && (i === R.SNS_DELETE_TYPE_SINGLE || i === R.SNS_DELETE_TYPE_BOTH) || (i = R.SNS_DELETE_TYPE_BOTH), (t = new P("deleteFriend")).setMessage("userIDList:".concat(r, " type:").concat(i)), this._snsM.req({
                  P: G.DEL_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: r,
                    type: i
                  }
                }).then(function (e) {
                  t.end(), M.i("".concat(o, " ok"));
                  e = e.data.resultList;
                  return S(e) || e.forEach(function (e) {
                    var t = e.to,
                      n = e.resultCode,
                      e = e.resultInfo;
                    N(n) || 0 === n ? s.push({
                      userID: t
                    }) : a.push({
                      userID: t,
                      code: n,
                      message: e
                    });
                  }), T({
                    successUserIDList: s,
                    failureUserIDList: a
                  });
                })["catch"](function (e) {
                  return t.setError(e).end(), M.w("".concat(o, " error:"), e), E(e);
                }));
              }
            }, {
              key: "updateFriend",
              value: function value(e) {
                var o,
                  i,
                  t,
                  a = this,
                  n = e.userID,
                  s = e.remark,
                  r = e.friendCustomField;
                return this._map.has(n) ? (o = "".concat(this._n, ".").concat("updateFriend"), (i = new P("updateFriend")).setMessage("userID:".concat(n, " remark:").concat(s, " friendCustomField:").concat(r)), t = [], N(s) || t.push({
                  tag: Je.REMARK,
                  value: s
                }), O(r) && 0 < r.length && r.forEach(function (e) {
                  t.push({
                    tag: e.key,
                    value: e.value
                  });
                }), this._snsM.req({
                  P: G.UPDATE_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    updateItem: [{
                      to: n,
                      snsItem: t
                    }]
                  }
                }).then(function (e) {
                  i.end(), M.i("".concat(o, " ok"));
                  var e = e.data.resultList[0],
                    t = e.to,
                    n = e.resultCode,
                    e = e.resultInfo;
                  return N(n) || 0 === n ? ((t = a._map.get(t)) && (N(s) || (t.remark = s), O(r) && 0 < r.length && Lt(t.friendCustomField, r), a._onFriendListUpdated()), T(t)) : E({
                    code: n,
                    message: e
                  });
                })["catch"](function (e) {
                  return i.setError(e).end(), M.w("".concat(o, " failed. error:"), e), E(e);
                })) : E({
                  code: k.NOT_MY_FRIEND
                });
              }
            }, {
              key: "checkFriend",
              value: function value(e) {
                var t = "".concat(this._n, ".").concat("checkFriend"),
                  n = e.userIDList,
                  o = e.type,
                  s = (o && (o === R.SNS_CHECK_TYPE_SINGLE || o === R.SNS_CHECK_TYPE_BOTH) || (o = R.SNS_CHECK_TYPE_BOTH), new P("checkFriend"));
                return s.setMessage("userIDList:".concat(n, " type:").concat(o)), this._snsM.req({
                  P: G.CHECK_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: n,
                    type: o
                  }
                }).then(function (e) {
                  s.end(), M.i("".concat(t, " ok. userIDList:").concat(n, " type:").concat(o));
                  var i = [],
                    a = [],
                    e = e.data.resultList;
                  return O(e) && e.forEach(function (e) {
                    var t = e.to,
                      n = e.relation,
                      o = e.resultCode,
                      e = e.resultInfo;
                    N(o) || 0 === o ? i.push({
                      userID: t,
                      code: 0,
                      relation: n
                    }) : a.push({
                      userID: t,
                      code: o,
                      message: e
                    });
                  }), T({
                    successUserIDList: i,
                    failureUserIDList: a
                  });
                })["catch"](function (e) {
                  return s.setError(e).end(), M.w("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "onAddedToFriendGroup",
              value: function value(e) {
                var t = this,
                  n = e.name,
                  e = e.userIDList;
                M.l("".concat(this._n, ".onAddedToFriendGroup groupName:").concat(n, " userIDList:").concat(e)), n && !S(e) && e.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).addToGroupList(n);
                });
              }
            }, {
              key: "onRemovedFromFriendGroup",
              value: function value(e) {
                var t = this,
                  n = e.name,
                  e = e.userIDList;
                M.l("".concat(this._n, ".onRemovedFromFriendGroup groupName:").concat(n, " userIDList:").concat(e)), n && !S(e) && e.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).removeFromGroupList(n);
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._map.clear(), this._startIdx = 0, this._standardSeq = 0, this._customSeq = 0;
              }
            }]),
            xa = e(function e(t) {
              p(this, e), S(t) || (this.name = t.name || "", this.userIDList = t.userIDList || [], this.count = this.userIDList.length || 0);
            }, [{
              key: "addToUserIDList",
              value: function value(e) {
                -1 === this.userIDList.indexOf(e) && (this.userIDList.push(e), this.count = this.userIDList.length);
              }
            }, {
              key: "removeFromUserIDList",
              value: function value(e) {
                e = this.userIDList.indexOf(e);
                -1 < e && (this.userIDList.splice(e, 1), this.count = this.userIDList.length);
              }
            }]),
            Va = e(function e(t) {
              p(this, e), this._snsM = t, this._n = "FriendGroupHandler", this._map = new Map();
            }, [{
              key: "getLocalGroupList",
              value: function value() {
                return d(this._map.values());
              }
            }, {
              key: "_onGroupListUpdated",
              value: function value() {
                var e = d(this._map.values());
                this._snsM.emitOEvt(h.FRIEND_GROUP_LIST_UPDATED, e);
              }
            }, {
              key: "getGroupList",
              value: function value() {
                var n = this,
                  t = "".concat(this._n, ".").concat("getGroupList"),
                  o = new P("getGroupList");
                return this._snsM.req({
                  P: G.GET_FD_GRP_LIST,
                  data: {
                    fromAccount: this._snsM.getMyUserID()
                  }
                }).then(function (e) {
                  o.end();
                  e = e.data.resultList;
                  S(e) ? M.i("".concat(t, " ok. count:0")) : (M.i("".concat(t, " ok. count:").concat(e.length)), n._map.clear(), e.forEach(function (e) {
                    var t = new xa(e);
                    n._map.set(e.name, t);
                  }), n._onGroupListUpdated());
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(t, " error:"), e), E(e);
                });
              }
            }, {
              key: "createGroup",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  s = "".concat(this._n, ".").concat("createGroup"),
                  r = e.name,
                  e = e.userIDList;
                return this._map.has(r) ? E({
                  code: k.FRIEND_GRP_EXISTED
                }) : (t = "name:".concat(r, " userIDList:").concat(e), (n = new P("createGroup")).setMessage(t), this._snsM.req({
                  P: G.CREATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    groupName: [r],
                    userIDList: O(e) ? e : void 0
                  }
                }).then(function (e) {
                  n.end(), M.l("".concat(s, " ok. ").concat(t));
                  var e = e.data.resultList,
                    i = [],
                    a = [],
                    e = (e && e.forEach(function (e) {
                      var t = e.to,
                        n = e.resultCode,
                        o = e.resultInfo;
                      N(n) || 0 === n ? i.push(t) : (t = {
                        userID: e.to,
                        code: n,
                        message: o
                      }, a.push(t));
                    }), new xa({
                      name: r,
                      userIDList: i
                    }));
                  return o._map.set(r, e), o._snsM.onAddedToFriendGroup({
                    name: r,
                    userIDList: i
                  }), o._onGroupListUpdated(), T({
                    friendGroup: e,
                    failureUserIDList: a
                  });
                })["catch"](function (e) {
                  return n.setError(e).end(), M.w("".concat(s, " failed. error:"), e), E(e);
                }));
              }
            }, {
              key: "deleteGroup",
              value: function value(e) {
                var n,
                  o,
                  i = this,
                  a = "".concat(this._n, ".").concat("deleteGroup"),
                  s = e.name;
                return this._map.has(s) ? (n = "name:".concat(s), (o = new P("deleteGroup")).setMessage(n), this._snsM.req({
                  P: G.DEL_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    nameList: [s]
                  }
                }).then(function (e) {
                  o.end(), M.l("".concat(a, " ok. ").concat(n));
                  var t = i._map.get(s);
                  return t && (i._snsM.onRemovedFromFriendGroup({
                    name: s,
                    userIDList: t.userIDList
                  }), i._map["delete"](s), t.userIDList.length = 0), i._onGroupListUpdated(), T(t);
                })["catch"](function (e) {
                  return o.setError(e).end(), M.w("".concat(a, " failed. error:"), e), E(e);
                })) : this._onGroupNotExist();
              }
            }, {
              key: "renameGroup",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".").concat("renameGroup"),
                  a = e.oldName,
                  s = e.newName;
                return this._map.has(a) ? (t = "oldName:".concat(a, " newName:").concat(s), (n = new P("renameGroup")).setMessage(t), this._snsM.req({
                  P: G.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: a,
                    newName: s
                  }
                }).then(function () {
                  var e;
                  return n.end(), M.l("".concat(i, " ok. ").concat(t)), o._map.has(a) ? ((e = o._map.get(a)).name = s, o._map["delete"](a), o._map.set(s, e), o._snsM.onRemovedFromFriendGroup({
                    name: a,
                    userIDList: e.userIDList
                  }), o._snsM.onAddedToFriendGroup({
                    name: s,
                    userIDList: e.userIDList
                  }), o._onGroupListUpdated(), T(e)) : T();
                })["catch"](function (e) {
                  return n.setError(e).end(), M.w("".concat(i, " failed. error:"), e), E(e);
                })) : this._onGroupNotExist();
              }
            }, {
              key: "addToGroup",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".").concat("addToGroup"),
                  a = e.name,
                  e = e.userIDList;
                return this._map.has(a) ? (t = "name:".concat(a, " userIDList:").concat(e), (n = new P("addToGroup")).setMessage(t), this._snsM.req({
                  P: G.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: a,
                    updateGroupItem: e.filter(function (e) {
                      return o._snsM.isMyFriend(e);
                    }).map(function (e) {
                      return {
                        to: e,
                        updateType: "Update_Type_Add"
                      };
                    })
                  }
                }).then(function (e) {
                  return n.end(), M.l("".concat(i, " ok. ").concat(t)), o._onGroupUpdated(a, e);
                })["catch"](function (e) {
                  return n.setError(e).end(), M.w("".concat(i, " failed. error:"), e), E(e);
                })) : this._onGroupNotExist();
              }
            }, {
              key: "removeFromGroup",
              value: function value(e) {
                var t,
                  n,
                  o = this,
                  i = "".concat(this._n, ".").concat("removeFromGroup"),
                  a = e.name,
                  e = e.userIDList;
                return this._map.has(a) ? (t = "name:".concat(a, " userIDList:").concat(e), (n = new P("removeFromGroup")).setMessage(t), this._snsM.req({
                  P: G.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: a,
                    updateGroupItem: e.filter(function (e) {
                      return o._snsM.isMyFriend(e);
                    }).map(function (e) {
                      return {
                        to: e,
                        updateType: "Update_Type_Delete"
                      };
                    })
                  }
                }).then(function (e) {
                  return n.end(), M.l("".concat(i, " ok. ").concat(t)), o._onGroupUpdated(a, e);
                })["catch"](function (e) {
                  return n.setError(e).end(), M.w("".concat(i, " failed. error:"), e), E(e);
                })) : this._onGroupNotExist();
              }
            }, {
              key: "_onGroupUpdated",
              value: function value(e, t) {
                var t = t.data.resultList,
                  a = this._map.get(e),
                  s = [],
                  r = [],
                  c = [];
                return O(t) && t.forEach(function (e) {
                  var t = e.to,
                    n = e.resultCode,
                    o = e.resultInfo,
                    i = e.type;
                  0 === n ? "Update_Type_Add" === i ? a && (a.addToUserIDList(t), r.push(t)) : "Update_Type_Delete" === i && a && (a.removeFromUserIDList(t), c.push(t)) : s.push({
                    to: e.to,
                    code: n,
                    message: o
                  });
                }), M.l("".concat(this._n, "._onGroupUpdated name:").concat(e, " userIDList:").concat(a.userIDList)), 0 < r.length && this._snsM.onAddedToFriendGroup({
                  name: e,
                  userIDList: r
                }), 0 < c.length && this._snsM.onRemovedFromFriendGroup({
                  name: e,
                  userIDList: c
                }), T({
                  friendGroup: a,
                  failureUserIDList: s
                });
              }
            }, {
              key: "updateWhenFriendAdded",
              value: function value(e) {
                var t = this,
                  n = e.nameList,
                  o = e.userID;
                M.l("".concat(this._n, ".updateWhenFriendAdded userID:").concat(o, " nameList:").concat(n)), S(n) || n.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).addToUserIDList(o);
                });
              }
            }, {
              key: "updateWhenFriendDeleted",
              value: function value(e) {
                var t = this,
                  n = e.nameList,
                  o = e.userID;
                M.l("".concat(this._n, ".updateWhenFriendDeleted userID:").concat(o, " nameList:").concat(n)), S(n) || n.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).removeFromUserIDList(o);
                });
              }
            }, {
              key: "_onGroupNotExist",
              value: function value(e) {
                return E({
                  code: k.FRIEND_GRP_NOT_EXIST
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._map.clear();
              }
            }]),
            Ba = (t(hs, c), e(hs, [{
              key: "onContextUpdated",
              value: function value(e) {
                this._friendHandler.pagingGetFriendList(), this._friendGroupHandler.getGroupList(), this._friendApplicationHandler.getApplicationList();
              }
            }, {
              key: "onRelationChainModified",
              value: function value(e) {
                var n,
                  o,
                  i,
                  a,
                  s,
                  r,
                  c = this,
                  e = e.dataList;
                S(e) || (n = [], o = [], i = [], s = !(a = []), r = "", e.forEach(function (e) {
                  var t;
                  3 !== e.pushType && 4 !== e.pushType || !e.from || (r = e.from), e.friendAddAccount && (n.push.apply(n, d(e.friendAddAccount)), a.push.apply(a, d(e.friendAddAccount))), e.friendDelAccount && o.push.apply(o, d(e.friendDelAccount)), e.friendApplicationAdded && i.push.apply(i, d(e.friendApplicationAdded)), e.friendApplicationDeletedUserIDList && a.push.apply(a, d(e.friendApplicationDeletedUserIDList)), e.reportTime && 7 === e.pushType && (s = !0), e.friendUpInfo && (t = {
                    dataList: []
                  }, e.friendUpInfo.forEach(function (e) {
                    t.dataList.push({
                      userID: e.friendAccount,
                      profileList: d(e.sns)
                    });
                  }), c.onFriendProfileModified(t));
                }), s && this._friendApplicationHandler.onApplicationRead(), this._friendApplicationHandler.onApplicationAdded(i, r), this._friendApplicationHandler.onApplicationDeleted(a), this._friendHandler.onFriendAdded(n), this._friendHandler.onFriendDeleted(o));
              }
            }, {
              key: "isMyFriend",
              value: function value(e) {
                return this._friendHandler.isMyFriend(e);
              }
            }, {
              key: "filterProfanity",
              value: function value(e, t) {
                var n,
                  o = this.get(29);
                return !o || (n = (o = o.filterText(t[e], "sns")).isAllowedToSend, o = o.modifiedText, !0 === n && (t[e] = o, !0));
              }
            }, {
              key: "onFriendProfileModified",
              value: function value(e) {
                this._friendHandler.onFriendProfileModified(e);
              }
            }, {
              key: "getLocalFriendList",
              value: function value() {
                var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                  t = this._friendHandler.getLocalFriendList();
                return e ? D(t) : t;
              }
            }, {
              key: "getFriendRemark",
              value: function value(e) {
                return this._friendHandler.getFriendRemark(e);
              }
            }, {
              key: "getFriendList",
              value: function value() {
                return this._friendHandler.pagingGetFriendList();
              }
            }, {
              key: "addFriend",
              value: function value(e) {
                return this._friendHandler.addFriend(e);
              }
            }, {
              key: "deleteFriend",
              value: function value(e) {
                return this._friendHandler.deleteFriend(e);
              }
            }, {
              key: "checkFriend",
              value: function value(e) {
                return this._friendHandler.checkFriend(e);
              }
            }, {
              key: "getFriendProfile",
              value: function value(e) {
                return this._friendHandler.getFriendProfile(e);
              }
            }, {
              key: "updateFriend",
              value: function value(e) {
                return this._friendHandler.updateFriend(e);
              }
            }, {
              key: "onAddedToFriendGroup",
              value: function value(e) {
                this._friendHandler.onAddedToFriendGroup(e);
              }
            }, {
              key: "onRemovedFromFriendGroup",
              value: function value(e) {
                this._friendHandler.onRemovedFromFriendGroup(e);
              }
            }, {
              key: "getLocalFriendApplicationList",
              value: function value() {
                var e = this._friendApplicationHandler.getLocalApplicationList();
                return D(e);
              }
            }, {
              key: "deleteFriendApplication",
              value: function value(e) {
                return this._friendApplicationHandler.deleteApplication(e);
              }
            }, {
              key: "refuseFriendApplication",
              value: function value(e) {
                return this._friendApplicationHandler.refuseApplication(e);
              }
            }, {
              key: "acceptFriendApplication",
              value: function value(e) {
                return this._friendApplicationHandler.acceptApplication(e);
              }
            }, {
              key: "setFriendApplicationRead",
              value: function value(e) {
                return this._friendApplicationHandler.setApplicationRead(e);
              }
            }, {
              key: "getLocalFriendGroupList",
              value: function value() {
                var e = this._friendGroupHandler.getLocalGroupList();
                return D(e);
              }
            }, {
              key: "createFriendGroup",
              value: function value(e) {
                return this._friendGroupHandler.createGroup(e);
              }
            }, {
              key: "deleteFriendGroup",
              value: function value(e) {
                return this._friendGroupHandler.deleteGroup(e);
              }
            }, {
              key: "addToFriendGroup",
              value: function value(e) {
                return this._friendGroupHandler.addToGroup(e);
              }
            }, {
              key: "removeFromFriendGroup",
              value: function value(e) {
                return this._friendGroupHandler.removeFromGroup(e);
              }
            }, {
              key: "renameFriendGroup",
              value: function value(e) {
                return this._friendGroupHandler.renameGroup(e);
              }
            }, {
              key: "updateWhenFriendAdded",
              value: function value(e) {
                this._friendGroupHandler.updateWhenFriendAdded(e);
              }
            }, {
              key: "updateWhenFriendDeleted",
              value: function value(e) {
                this._friendGroupHandler.updateWhenFriendDeleted(e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._friendHandler.reset(), this._friendGroupHandler.reset(), this._friendApplicationHandler.reset();
              }
            }])),
            Ha = (t(_s, c), e(_s, [{
              key: "isWorkerEnabled",
              value: function value() {
                return this._isWorkerEnabled && Ae;
              }
            }, {
              key: "startWorkerTimer",
              value: function value() {
                M.l("".concat(this._n, ".startWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("start");
              }
            }, {
              key: "stopWorkerTimer",
              value: function value() {
                M.l("".concat(this._n, ".stopWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("stop");
              }
            }, {
              key: "_init",
              value: function value() {
                var e, t;
                Ae && (e = URL.createObjectURL(new Blob(['let interval = -1;onmessage = function(event) {  if (event.data === "start") {    if (interval > 0) {      clearInterval(interval);    }    interval = setInterval(() => {      postMessage("");    }, 1000);    postMessage(interval);  } else if (event.data === "stop") {    clearInterval(interval);    interval = -1;  }};'], {
                  type: "application/javascript; charset=utf-8"
                })), this._workerTimer = new Worker(e), (t = this)._workerTimer.onmessage = function (e) {
                  e.data ? (t._timerID = e.data, M.l("".concat(t._n, "._init seed:").concat(t._timerID))) : t._m.onCheckTimer();
                });
              }
            }, {
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("enable_worker");
                M.l("".concat(this._n, "._onCloudConfig enableWorker:").concat(e)), N(e) || "1" === e ? !this._isWorkerEnabled && Ae && (this._isWorkerEnabled = !0, this.startWorkerTimer(), this._m.onWorkerTimerEnabled()) : this._isWorkerEnabled && Ae && (this._isWorkerEnabled = !1, this.stopWorkerTimer(), this._m.onWorkerTimerDisabled());
              }
            }, {
              key: "terminate",
              value: function value() {
                M.l("".concat(this._n, ".terminate")), this._workerTimer && (this._workerTimer.terminate(), this._workerTimer = null, this._timerID = -1);
              }
            }, {
              key: "getTimerID",
              value: function value() {
                return this._timerID;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }])),
            Ka = e(function e(t) {
              p(this, e), this._commercialConfigM = t, this._n = "PurchasedFeatureHandler", this._isCSPluginReported = !1, this._featureMap = new Map();
            }, [{
              key: "isValidPurchaseBits",
              value: function value(e) {
                return e && "string" == typeof e && 1 <= e.length && e.length <= 64 && /[01]{1,64}/.test(e);
              }
            }, {
              key: "parsePurchaseBits",
              value: function value(e) {
                if (this.isValidPurchaseBits(e)) {
                  this._featureMap.clear();
                  for (var t, n = e.length - 1, o = 0; 0 <= n; n--, o++) t = (o < 32 ? new $(0, Math.pow(2, o)) : new $(Math.pow(2, o - 32), 0)).toString(), "1" === e[n] ? this._featureMap.set(t, !0) : this._featureMap.set(t, !1);
                } else M.w("".concat(this._n, ".parsePurchaseBits invalid purchasebits:").concat(e));
              }
            }, {
              key: "hasPurchasedFeature",
              value: function value(e) {
                return !!this._featureMap.get(e);
              }
            }, {
              key: "isFeatureEnabled",
              value: function value(e) {
                for (var t = parseInt(e).toString(2), n = void 0, o = !0, i = t.length - 1, a = 0; 0 <= i; i--, a++) if ("1" === t.charAt(i) && (n = (a < 32 ? new $(0, Math.pow(2, a)) : new $(Math.pow(2, a - 32), 0)).toString(), !this._featureMap.get(n))) {
                  o = !1;
                  break;
                }
                return M.l("".concat(this._n, ".isFeatureEnabled decimalNumber:").concat(e, " key:").concat(n, " ret:").concat(o)), D({
                  enabled: o
                });
              }
            }, {
              key: "isFeatureEnabledForStat",
              value: function value(e) {
                for (var t = parseInt(e).toString(2), n = t.length - 1, o = 0; 0 <= n; n--, o++) if ("1" === t.charAt(n)) {
                  if (i = (o < 32 ? new $(0, Math.pow(2, o)) : new $(Math.pow(2, o - 32), 0)).toString(), !this._featureMap.get(i)) break;
                  var i,
                    a = "",
                    s = 0;
                  i === g.PLUGIN_TRANSLATE ? (a = "plugin_translate", s = 16) : i === g.PLUGIN_VOICE_TO_TEXT ? (a = "plugin_voice_to_text", s = 17) : i === g.PLUGIN_CS ? (a = "plugin_cs", s = 14) : i === g.PLUGIN_PUSH ? (a = "plugin_push", s = 13) : i === g.PLUGIN_BOT ? (a = "plugin_bot", s = 15) : i === g.MSG_REACTION && (a = "plugin_emoji_reaction", s = 18), "" !== a && (i = this._commercialConfigM.get(12).getUIPlatform(), new P(a).setCode(s).setUIPlatform(i).end(), M.l("".concat(this._n, ".isFeatureEnabledForStat ").concat(a, " code:").concat(s, " uiPlatform:").concat(i)));
                }
              }
            }, {
              key: "isCSPluginEnabled",
              value: function value() {
                var e;
                this._isCSPluginReported || (e = this._commercialConfigM.get(12).getUIPlatform(), new P("plugin_search").setCode(6).setUIPlatform(e).end(), this._isCSPluginReported = !0);
              }
            }, {
              key: "clear",
              value: function value() {
                this._featureMap.clear(), this._isCSPluginReported = !1;
              }
            }]),
            Wa = e(function e(t) {
              p(this, e), this._m = t, this._n = "CommercialConfigModule", this._expiredTime = 0, this._isFetching = !1, this._purchasedFeatureHandler = new Ka(this);
            }, [{
              key: "_canFetch",
              value: function value() {
                return this.get(12).isLoggedIn() ? !this._isFetching && Date.now() >= this._expiredTime : (this._expiredTime = Date.now() + 2e3, !1);
              }
            }, {
              key: "onCheckTimer",
              value: function value(e) {
                this._canFetch() && this.fetchConfig();
              }
            }, {
              key: "fetchConfig",
              value: function value() {
                var t,
                  e,
                  n = this,
                  o = this._canFetch(),
                  i = "".concat(this._n, ".fetchConfig");
                M.l("".concat(i, " canFetch:").concat(o)), o && (t = new P("fetchCommercialConfig"), o = this.get(12).getSDKAppID(), e = this.get(20), this._isFetching = !0, e.req({
                  P: G.FETCH_COMMERCIAL_CONFIG,
                  data: {
                    SDKAppID: o
                  }
                }).then(function (e) {
                  t.setMessage("purchaseBits:".concat(e.data.purchaseBits)).end(), M.l("".concat(i, " ok.")), n._parseConfig(e.data), n._isFetching = !1;
                })["catch"](function (e) {
                  t.setError(e).end(), n._isFetching = !1;
                }));
              }
            }, {
              key: "onPushedConfig",
              value: function value(e) {
                var t = "".concat(this._n, ".onPushedConfig data:").concat(JSON.stringify(e));
                M.l("".concat(t)), new P("pushedCommercialConfig").setMessage("purchaseBits:".concat(e.purchaseBits)).end(), this._parseConfig(e);
              }
            }, {
              key: "_parseConfig",
              value: function value(e) {
                var t = "".concat(this._n, "._parseConfig"),
                  n = e.errorCode,
                  o = e.errorMessage,
                  i = e.purchaseBits,
                  a = e.expiredTime;
                0 === n ? (this._purchasedFeatureHandler.parsePurchaseBits(i), this._expiredTime = Date.now() + 1e3 * a) : N(n) ? (M.l("".concat(t, " failed. Invalid message format:"), e), this._setExpiredTimeOnResponseError(36e5)) : (M.e("".concat(t, " errorCode:").concat(n, " errorMessage:").concat(o)), this._setExpiredTimeOnResponseError(12e4));
              }
            }, {
              key: "_setExpiredTimeOnResponseError",
              value: function value(e) {
                this._expiredTime = Date.now() + e;
              }
            }, {
              key: "canIUse",
              value: function value(e) {
                return this._purchasedFeatureHandler.hasPurchasedFeature(e);
              }
            }, {
              key: "isFeatureEnabled",
              value: function value(e) {
                return this._purchasedFeatureHandler.isFeatureEnabled(e);
              }
            }, {
              key: "isFeatureEnabledForStat",
              value: function value(e) {
                this._purchasedFeatureHandler.isFeatureEnabledForStat(e);
              }
            }, {
              key: "isCSPluginEnabled",
              value: function value() {
                this._purchasedFeatureHandler.isCSPluginEnabled();
              }
            }, {
              key: "get",
              value: function value(e) {
                return this._m.get(e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._expiredTime = 0, this._isFetching = !1, this._purchasedFeatureHandler.clear();
              }
            }]),
            Ya = (t(ps, c), e(ps, [{
              key: "registerPlugin",
              value: function value(e) {
                var t, n, o, i, a, s, r, c, u, l, d, p, _;
                fe ? (this._offlinePushPlugin = e["tim-offline-push-plugin"], t = (_ = e.offlinePushConfig || {}).huaweiBusinessID, n = _.xiaomiBusinessID, o = _.xiaomiAppID, i = _.xiaomiAppKey, a = _.meizuBusinessID, s = _.meizuAppID, r = _.meizuAppKey, c = _.vivoBusinessID, u = _.oppoBusinessID, l = _.oppoAppKey, d = _.oppoAppSecret, p = _.honorBusinessID, _ = _.iosBusinessID, this._androidPushConfig.huaweiPushBussinessId = t, this._androidPushConfig.xiaomiPushBussinessId = n, this._androidPushConfig.xiaomiPushAppId = o, this._androidPushConfig.xiaomiPushAppKey = i, this._androidPushConfig.meizuPushBussinessId = a, this._androidPushConfig.meizuPushAppId = s, this._androidPushConfig.meizuPushAppKey = r, this._androidPushConfig.vivoPushBussinessId = c, this._androidPushConfig.oppoPushBussinessId = u, this._androidPushConfig.oppoPushAppKey = l, this._androidPushConfig.oppoPushAppSecret = d, this._androidPushConfig.honorPushBussinessId = p, new P("registerPlugin").setMessage("tim-offline-push-plugin").setMoreMessage("isExist:".concat(!N(this._offlinePushPlugin))).end(!0), M.l("".concat(this._n, ".").concat("registerPlugin", " ok. offlinePushConfig:").concat(JSON.stringify(e.offlinePushConfig))), this._iosBusinessID = _, this._setAppShowListener()) : this.warn("OfflinePushInUniapp");
              }
            }, {
              key: "init",
              value: function value() {
                this._isWebUniapp = this.getUniAppPlatform(), this._getDeviceToken();
              }
            }, {
              key: "_getDeviceToken",
              value: function value() {
                var c,
                  u = this,
                  l = "".concat(this._n, ".").concat("_getDeviceToken");
                ct(this._offlinePushPlugin.getDeviceToken) ? (c = "androidPushConfig:".concat(JSON.stringify(this._androidPushConfig), ", iosBusinessID:").concat(this._iosBusinessID), M.l("".concat(l, " start. ").concat(c)), new P("_getDeviceToken").setMessage("".concat(c)).end(!0), this._offlinePushPlugin.getDeviceToken(this._androidPushConfig, function (e) {
                  var t,
                    n,
                    o,
                    i,
                    a = new P("getDeviceTokenRes"),
                    s = e.code,
                    r = e.msg;
                  0 === s ? (t = (i = e.data).deviceToken, n = i.deviceBrand, o = i.deviceType, i = i.bussinessId, u._deviceToken = t, u._businessID = i || u._iosBusinessID, c = "deviceToken:".concat(t, ", deviceBrand:").concat(n || o, ", businessID:").concat(u._businessID), M.l("".concat(l, " ok. ").concat(c)), a.setMessage(c).end(!0), u._setToken()) : (a.setMessage("code:".concat(s, ", msg:").concat(r)).end(!0), M.e("".concat(l, " failed. error:"), e));
                })) : M.e("".concat(l, " getDeviceToken is not a function"));
              }
            }, {
              key: "canIUseOfflinePush",
              value: function value() {
                return fe && !N(this._offlinePushPlugin);
              }
            }, {
              key: "_setAppShowListener",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".").concat("_setAppShowListener");
                N(this._offlinePushPlugin) ? M.e("".concat(n, " offlinePushPlugin is undefined")) : ct(this._offlinePushPlugin.setAppShowListener) ? (new P("_setAppShowListener").end(!0), M.l("".concat(n, " start")), this._offlinePushPlugin.setAppShowListener(function (e) {
                  e = (e || {}).appShow;
                  new P("setAppShowListenerRes").setMessage("appShow:".concat(e)).end(!0), M.l("".concat(n, " ok. appShow:").concat(e)), t._m.isReady() && (0 === e ? (t._getConvUnreadCount(), t._onBackground()) : 1 === e && t._onForeground());
                })) : M.e("".concat(n, " setAppShowListener is not a function"));
              }
            }, {
              key: "getDeviceBrand",
              value: function value() {
                var e;
                if (!N(this._offlinePushPlugin) && ct(this._offlinePushPlugin.getDeviceType)) return e = (this._offlinePushPlugin.getDeviceType() || {}).deviceType, M.l("".concat(this._n, ".getDeviceBrand ok. deviceType:").concat(e)), e;
              }
            }, {
              key: "_setToken",
              value: function value() {
                var t = "".concat(this._n, "._setToken"),
                  e = this.get(12),
                  n = 1,
                  o = "",
                  i = "",
                  a = (S(this._deviceToken) && (n = 0), this.getUniAppPlatform()),
                  s = this.getDeviceBrand(),
                  r = (a === te.IOS || a === te.IPAD || a === te.MAC ? i = this._deviceToken : a === te.ANDROID && (o = this._deviceToken), new P("offlinePushSetToken")),
                  a = "deviceToken:".concat(i || o, ", businessID:").concat(this._businessID, ", ") + "deviceBrand:".concat(s, ", isWebUniapp:").concat(this._isWebUniapp, ", pushMsg:").concat(n, ", platform:").concat(a);
                return r.setMessage("".concat(a)), M.l("".concat(t, " ").concat(a)), this.req({
                  P: G.SET_TOKEN,
                  data: {
                    tokenID: o,
                    pushMsg: n,
                    sdkAppID: e.getSDKAppID(),
                    businessID: parseInt(this._businessID),
                    deviceBrand: s,
                    deviceToken: i,
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function (e) {
                  return r.end(), M.l("".concat(t, " ok")), e;
                })["catch"](function (e) {
                  return r.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getConvUnreadCount",
              value: function value() {
                var t = this;
                this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this.get(11).getLocalConvList().forEach(function (e) {
                  e.type === R.CONV_C2C && (t._c2cUnreadCount += e.unreadCount), e.type === R.CONV_GROUP && (t._groupUnreadCount += e.unreadCount);
                });
              }
            }, {
              key: "_onBackground",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".").concat("_onBackground"),
                  o = new P("_onBackground");
                this.req({
                  P: G.STAT_BACKGROUND,
                  data: {
                    c2cUnreadCount: this._c2cUnreadCount,
                    groupUnreadCount: this._groupUnreadCount,
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function (e) {
                  return o.setMessage("c2cUnreadCount: ".concat(t._c2cUnreadCount, ", groupUnreadCount: ").concat(t._groupUnreadCount)).end(), M.l("".concat(n, " ok")), e;
                })["catch"](function (e) {
                  o.setError(e).end(), M.e("".concat(n, " failed. error:"), e);
                });
              }
            }, {
              key: "_onForeground",
              value: function value() {
                var t = "".concat(this._n, ".").concat("_onForeground"),
                  n = new P("_onForeground");
                this.req({
                  P: G.STAT_FOREGROUND,
                  data: {
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function (e) {
                  return n.end(), M.l("".concat(t, " ok")), e;
                })["catch"](function (e) {
                  n.setError(e).end(), M.e("".concat(t, " failed. error:"), e);
                });
              }
            }, {
              key: "getUniAppPlatform",
              value: function value() {
                var e = uni.getSystemInfoSync().platform,
                  t = this.getDeviceBrand();
                return "ios" === e ? te.IOS : "android" === e ? te.ANDROID : 1002 === t ? te.IPAD : 1001 === t ? te.MAC : void 0;
              }
            }, {
              key: "reset",
              value: function value() {
                this._deviceToken = "", this._businessID = 0, this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this._isWebUniapp = 0, M.l("".concat(this._n, ".reset"));
              }
            }])),
            ja = (t(ds, c), e(ds, [{
              key: "registerPlugin",
              value: function value(e) {
                var t, n, o;
                fe ? (t = "".concat(this._n, ".").concat("registerPlugin"), this._pushPlugin = e["tim-push"], this._getDeviceInfo(), n = (o = e.pushConfig || {}).androidConfig, o = o.iOSConfig, st(n) && (this._androidPushConfig = n[this._deviceInfo.packageName]), n = (o || {}).iOSBusinessID, this._iOSBusinessID = n, o = !N(this._pushPlugin), new P("registerPlugin").setMessage(this._pluginName).setMoreMessage("isExisted:".concat(o)).end(!0), M.l("".concat(t, " ok. pushConfig:").concat(JSON.stringify(e.pushConfig))), o ? (this._setAppShowListener(), this._setPushEventReportListener()) : M.e("".concat(t, " ").concat(this._pluginName, " is undefined"))) : this.warn("TIMPushInUniapp");
              }
            }, {
              key: "init",
              value: function value() {
                this._isWebUniapp = this.getUniAppPlatform(), this._reportEventCacheList(), this._getDeviceToken(), this.get(27).isFeatureEnabledForStat(Math.pow(2, 41));
              }
            }, {
              key: "_reportEventCacheList",
              value: function value() {
                var a = this,
                  s = "".concat(this._n, ".").concat("_reportEventCacheList");
                ct(this._pushPlugin.getPushEventCacheList) ? (new P("_reportEventCacheList").end(!0), this._pushPlugin.getPushEventCacheList(function (e) {
                  var t = e.code,
                    n = e.data.eventList,
                    o = new P("getPushEventCacheListRes");
                  if (o.setCode(t), 0 !== t) o.setMessage("res:".concat(JSON.stringify(e))).end(!0), M.e("".concat(s, " failed. error:").concat(JSON.stringify(e)));else {
                    t = n.length < 10 ? "eventList:".concat(JSON.stringify(n)) : "eventList.length:".concat(n.length);
                    M.l("".concat(s, " ok. ").concat(t)), o.setMessage(t).end(!0);
                    for (var i = y(y({}, e.data), {}, {
                      eventList: []
                    }); 0 < n.length;) i.eventList = n.splice(0, 40), a._pushReport(i);
                  }
                })) : M.e("".concat(this._pluginName, ".getPushEventCacheList is not a function"));
              }
            }, {
              key: "_getDeviceToken",
              value: function value() {
                var r,
                  c = this,
                  u = "".concat(this._n, ".").concat("_getDeviceToken");
                ct(this._pushPlugin.getDeviceToken) ? (r = "androidPushConfig:".concat(JSON.stringify(this._androidPushConfig), " iOSBusinessID:").concat(this._iOSBusinessID), M.l("".concat(u, " start. ").concat(r)), new P("_getDeviceToken").setMessage("".concat(r)).end(!0), this._pushPlugin.getDeviceToken(this._androidPushConfig, function (e) {
                  var t,
                    n,
                    o,
                    i = e.code,
                    a = e.msg,
                    s = new P("getDeviceTokenRes");
                  s.setCode(i), 0 === i ? (t = (i = e.data).deviceToken, n = i.deviceBrand, o = i.deviceType, i = i.bussinessId, c._deviceToken = t, c._businessID = i || c._iOSBusinessID, r = "deviceToken:".concat(t, " deviceBrand:").concat(n || o, " businessID:").concat(c._businessID), M.l("".concat(u, " ok. ").concat(r)), s.setMessage(r).end(!0), c._setToken()) : (s.setMessage(a).end(!0), M.e("".concat(u, " failed. error:").concat(JSON.stringify(e))));
                })) : M.e("".concat(this._pluginName, ".getDeviceToken is not a function"));
              }
            }, {
              key: "_getDeviceInfo",
              value: function value() {
                var e,
                  t,
                  n,
                  o,
                  i = "".concat(this._n, ".").concat("_getDeviceInfo");
                ct(this._pushPlugin.getDeviceInfo) ? (o = (e = this._pushPlugin.getDeviceInfo()).code, t = e.data, (n = new P("_getDeviceInfo")).setCode(o), 0 === o ? (this._deviceInfo = y(y({}, this._deviceInfo), t), this._deviceInfo.pushVersion || (this._deviceInfo.pushVersion = "1.0.1"), o = "deviceInfo:".concat(JSON.stringify(this._deviceInfo)), M.l("".concat(i, " ok. ").concat(o)), n.setMessage(o).end(!0)) : (n.setMessage("deviceInfoRes:".concat(JSON.stringify(e))).end(!0), M.e("".concat(i, " failed. error:").concat(JSON.stringify(e))))) : M.e("".concat(this._pluginName, ".getDeviceInfo is not a function"));
              }
            }, {
              key: "canIUseTIMPush",
              value: function value() {
                return fe && !N(this._pushPlugin);
              }
            }, {
              key: "_setAppShowListener",
              value: function value() {
                var t = this,
                  n = "".concat(this._n, ".").concat("_setAppShowListener");
                ct(this._pushPlugin.setAppShowListener) ? (new P("_setAppShowListener").end(!0), M.l("".concat(n, " start")), this._pushPlugin.setAppShowListener(function (e) {
                  e = (e || {}).appShow;
                  new P("setAppShowListenerRes").setMessage("appShow:".concat(e)).end(!0), M.l("".concat(n, " ok. appShow:").concat(e)), t._m.isReady() && (0 === e ? (t._getConvUnreadCount(), t._onBackground()) : 1 === e && t._onForeground());
                })) : M.e("".concat(this._pluginName, ".setAppShowListener is not a function"));
              }
            }, {
              key: "_setPushEventReportListener",
              value: function value() {
                var a = this,
                  s = "".concat(this._n, ".").concat("_setPushEventReportListener");
                ct(this._pushPlugin.setPushEventReportListener) ? (new P("_setPushEventReportListener").end(!0), this._pushPlugin.setPushEventReportListener(function (e) {
                  var t = e.code,
                    n = e.data,
                    o = n.eventList,
                    i = new P("setPushEventReportListenerRes");
                  i.setCode(t), 0 === t ? (t = "eventList:".concat(JSON.stringify(o)), M.l("".concat(s, " ok. ").concat(t)), i.setMessage(t).end(!0), a._m.isReady() && O(o) && 0 < o.length && a._pushReport(n)) : (i.setMessage("res:".concat(JSON.stringify(e))).end(!0), M.e("".concat(s, " failed. error:").concat(JSON.stringify(e))));
                })) : M.e("".concat(this._pluginName, ".setPushEventReportListener is not a function"));
              }
            }, {
              key: "getDeviceBrand",
              value: function value() {
                var e;
                if (!N(this._pushPlugin) && ct(this._pushPlugin.getDeviceType)) return e = (this._pushPlugin.getDeviceType() || {}).deviceType, M.l("".concat(this._n, ".getDeviceBrand ok. deviceType:").concat(e)), e;
              }
            }, {
              key: "_setToken",
              value: function value() {
                var t = "".concat(this._n, ".").concat("_setToken"),
                  e = this.get(12),
                  n = 1,
                  o = "",
                  i = "",
                  a = (S(this._deviceToken) && (n = 0), this.getUniAppPlatform()),
                  s = this.getDeviceBrand(),
                  a = (a === te.IOS || a === te.IPAD || a === te.MAC ? i = this._deviceToken : a === te.ANDROID && (o = this._deviceToken), y({
                    tokenID: o,
                    pushMsg: n,
                    sdkAppID: e.getSDKAppID(),
                    businessID: parseInt(this._businessID),
                    deviceBrand: s,
                    deviceToken: i,
                    isWebUniapp: this._isWebUniapp
                  }, this._deviceInfo)),
                  r = new P("_setToken"),
                  o = "data:".concat(JSON.stringify(a));
                r.setMessage("".concat(o)), M.l("".concat(t, " ").concat(o)), this.req({
                  P: G.SET_TOKEN,
                  data: a
                }).then(function () {
                  r.end(), M.w("".concat(t, " ok"));
                })["catch"](function (e) {
                  r.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_getConvUnreadCount",
              value: function value() {
                var t = this;
                this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this.get(11).getLocalConvList().forEach(function (e) {
                  e.type === R.CONV_C2C && (t._c2cUnreadCount += e.unreadCount), e.type === R.CONV_GROUP && (t._groupUnreadCount += e.unreadCount);
                });
              }
            }, {
              key: "_onBackground",
              value: function value() {
                var e = this,
                  t = "".concat(this._n, ".").concat("_onBackground"),
                  n = new P("_onBackground");
                this.req({
                  P: G.STAT_BACKGROUND,
                  data: {
                    c2cUnreadCount: this._c2cUnreadCount,
                    groupUnreadCount: this._groupUnreadCount,
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function () {
                  n.setMessage("c2cUnreadCount:".concat(e._c2cUnreadCount, " groupUnreadCount:").concat(e._groupUnreadCount)).end(), M.l("".concat(t, " ok"));
                })["catch"](function (e) {
                  n.setError(e).end(), M.e("".concat(t, " failed. error:"), e);
                });
              }
            }, {
              key: "_onForeground",
              value: function value() {
                var t = "".concat(this._n, ".").concat("_onForeground"),
                  n = new P("_onForeground");
                this.req({
                  P: G.STAT_FOREGROUND,
                  data: {
                    isWebUniapp: this._isWebUniapp
                  }
                }).then(function () {
                  n.end(), M.l("".concat(t, " ok"));
                })["catch"](function (e) {
                  n.setError(e).end(), M.e("".concat(t, " failed. error:"), e);
                });
              }
            }, {
              key: "_pushReport",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("_pushReport"),
                  o = new P("_pushReport");
                this.req({
                  P: G.PUSH_REPORT,
                  data: {
                    eventList: e.eventList
                  }
                }).then(function () {
                  o.end(), t._notifyReportSuccess(e);
                })["catch"](function (e) {
                  o.setError(e).end(), M.e("".concat(n, " failed. error:"), e);
                });
              }
            }, {
              key: "_notifyReportSuccess",
              value: function value(e) {
                !N(this._pushPlugin) && ct(this._pushPlugin.notifyReportSuccess) && (this._pushPlugin.notifyReportSuccess(e), M.l("".concat(this._n, "._notifyReportSuccess ok")));
              }
            }, {
              key: "getUniAppPlatform",
              value: function value() {
                var e = uni.getSystemInfoSync().platform,
                  t = this.getDeviceBrand();
                return "ios" === e ? te.IOS : "android" === e ? te.ANDROID : 1002 === t ? te.IPAD : 1001 === t ? te.MAC : void 0;
              }
            }, {
              key: "reset",
              value: function value() {
                this._deviceToken = "", this._businessID = 0, this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this._isWebUniapp = 0, M.l("".concat(this._n, ".reset"));
              }
            }])),
            Ja = (t(ls, c), e(ls, [{
              key: "init",
              value: function value() {
                var e = this.get(18).getPlugin("tim-profanity-filter-plugin");
                e && (this._plugin = new e({
                  logger: M,
                  isArray: O,
                  isMap: ot,
                  isDevMode: this.isDevMode()
                }), this._getLexicon());
              }
            }, {
              key: "onCheckTimer",
              value: function value() {
                this._plugin && this._canIUseLexicon && this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime && this._getLexicon();
              }
            }, {
              key: "filterMessage",
              value: function value(e, t) {
                var n = !0;
                if (this._plugin && this._canIUseLexicon && (!t || !t.messageControlInfo || !0 !== t.messageControlInfo.excludedFromContentModeration)) {
                  var t = e.type,
                    o = e.conversationType;
                  if (t === R.MSG_TEXT || t === R.MSG_CUSTOM) {
                    var i,
                      a = "".concat(this._n, ".filterMessage");
                    if (M.l("".concat(a)), t === R.MSG_TEXT) {
                      if (o === R.CONV_C2C ? i = "c2c_text_message" : o === R.CONV_GROUP && (i = "group_text_message"), !this._isConfigOn(i)) return n;
                      var s = this._plugin.filter(e.payload.text),
                        r = s.type,
                        s = s.modifiedText;
                      1 === r ? n = !1 : 2 === r && (e.payload.text = s);
                    } else if (t === R.MSG_CUSTOM) {
                      if (o === R.CONV_C2C ? i = "c2c_custom_message" : o === R.CONV_GROUP && (i = "group_custom_message"), !this._isConfigOn(i)) return n;
                      r = this._plugin.filter(e.payload.data), s = this._plugin.filter(e.payload.description), t = this._plugin.filter(e.payload.extension);
                      1 === r.type || 1 === s.type || 1 === t.type ? n = !1 : (2 === r.type && (e.payload.data = r.modifiedText), 2 === s.type && (e.payload.description = s.modifiedText), 2 === t.type && (e.payload.extension = t.modifiedText));
                    }
                    M.l("".concat(a, " done. isAllowedToSend:").concat(n));
                  }
                }
                return n;
              }
            }, {
              key: "filterText",
              value: function value(e, t) {
                var n = "".concat(this._n, ".filterText"),
                  o = {
                    isAllowedToSend: !0,
                    modifiedText: e
                  };
                return this._plugin && this._canIUseLexicon && this._isConfigOn(t) && (M.l("".concat(n)), e = (t = this._plugin.filter(e)).type, t = t.modifiedText, 1 === e ? o.isAllowedToSend = !1 : 2 === e && (o.modifiedText = t), M.l("".concat(n, " done. ret:"), o)), o;
              }
            }, {
              key: "_getLexicon",
              value: function value() {
                var l = this,
                  d = new P("profanityFilter"),
                  p = "".concat(this._n, "._getLexicon");
                this._isFetching = !0, this.req({
                  P: G.GET_PROFANITY_LIST,
                  data: {
                    startIndex: this._startIndex,
                    version: this._version
                  }
                }).then(function (e) {
                  var e = e.data,
                    t = e.errorInfo,
                    n = e.filterConfig,
                    o = e.lexicon,
                    i = e.strToken,
                    a = e.completeFlag,
                    s = e.nextStartIndex,
                    r = e.version,
                    e = e.expiredTime,
                    c = t.errorCode,
                    u = t.errorMessage;
                  return 0 !== c ? (l._isFetching = !1, M.w("".concat(p, " failed. error:"), t), void d.setCode(c).setMessage(u).end()) : (l._onFilterConfig(n), l._getToken(i), 1 === a ? (M.l("".concat(p, " done. version:").concat(r, " expiredTime:").concat(e)), l._version = r, l._canIUseLexicon = !0, l._isFetching = !1, l._expiredTime = Date.now() + 1e3 * e, void l._plugin.onLexiconCompleted(o)) : (l._startIndex = s, l._plugin.onLexiconSliced(o), void l._getLexicon()));
                })["catch"](function (e) {
                  d.setError(e).end(), l._isFetching = !1, M.l("".concat(p, " failed. error:"), e);
                });
              }
            }, {
              key: "_onFilterConfig",
              value: function value(t) {
                var n = this;
                S(t) || (this._filterConfigMap.clear(), Object.keys(t).forEach(function (e) {
                  n._filterConfigMap.set(e, t[e]);
                }), M.l("".concat(this._n, "._onFilterConfig. keys:").concat(Array.from(this._filterConfigMap.keys()), " values:").concat(Array.from(this._filterConfigMap.values()))));
              }
            }, {
              key: "_isConfigOn",
              value: function value(e) {
                return 1 === this._filterConfigMap.get(e);
              }
            }, {
              key: "_getToken",
              value: function value(e) {
                if (C(e)) {
                  var t = e.length,
                    n = "";
                  if (t % 2 == 0) for (var o = 0; o <= t - 1; o += 2) n = (n += e[o + 1]) + e[o];else {
                    for (var i = 0; i < t - 1; i += 2) n = (n += e[i + 1]) + e[i];
                    n += e[t - 1];
                  }
                  this._plugin.onToken(n);
                }
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._plugin && (this._plugin.reset(), this._plugin = null), this._filterConfigMap.clear(), this._startIndex = 0, this._version = 0, this._canIUseLexicon = !1, this._isFetching = !1, this._expiredTime = 0;
              }
            }])),
            za = e(function e(t) {
              p(this, e), this._m = t, this._n = "TransCmdModule", this._TRTCCommandList = ["tui_room_svr.*", "callkit_records_svr.*", "room_engine_srv.*", "room_engine_http_srv.*", "room_engine_mic.*", "live_engine_srv.*", "live_engine_http_srv.*", "live_engine_pk.*", "trtc_ai_service.*", "call_engine_srv.*"], this._TRTCCommandMap = new Map(), this._setTRTCCommandMap(), this._m.getIEmitInst().on(U.CLOUD_CONFIG, this._onCloudConfig, this);
            }, [{
              key: "_onCloudConfig",
              value: function value() {
                var t = this,
                  e = this._m.get(23).getCloudConfig("rtc_cmd");
                N(e) || ((e = JSON.parse(e)).forEach(function (e) {
                  t._TRTCCommandList.includes(e) || t._TRTCCommandList.push(e);
                }), this._setTRTCCommandMap());
              }
            }, {
              key: "_setTRTCCommandMap",
              value: function value() {
                for (var e, t = 0, n = this._TRTCCommandList.length; t < n; t++) e = this._TRTCCommandList[t].split(".")[0], this._TRTCCommandMap.set(e, 1);
              }
            }, {
              key: "onRoomCustomDataReceived",
              value: function value(e) {
                this._m.getOEmitInst().emit(h.ROOM_CUSTOM_DATA_RECEIVED, e);
              }
            }, {
              key: "sendTRTCCustomData",
              value: function value(e) {
                var t = e.serviceCommand,
                  e = e.data,
                  n = "".concat(a.NAME.TUIROOM_SVR, ".*");
                return N(t) || (n = t), this._isValidServiceCommand(n) ? this._trans({
                  servcmd: n,
                  data: e
                }) : E({
                  code: k.INVALID_TRTC_CMD
                });
              }
            }, {
              key: "_trans",
              value: function value(e) {
                M.d("".concat(this._n, "._trans. options:").concat(JSON.stringify(e)));
                var t = e.servcmd,
                  e = e.data;
                return this._m.get(20).trans({
                  servcmd: t,
                  data: C(e) ? JSON.parse(e) : e
                });
              }
            }, {
              key: "_isValidServiceCommand",
              value: function value(e) {
                return e.endsWith(".*") ? this._TRTCCommandList.includes(e) : (e = e.split(".")[0], this._TRTCCommandMap.has(e));
              }
            }, {
              key: "isTRTCCommand",
              value: function value(e) {
                e = e.split(".")[0];
                return this._TRTCCommandMap.has(e);
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }]),
            Xa = e(function e(t) {
              p(this, e), this._m = t, this._n = "ErrMsgModule", this.TIM_ERROR_ASSISTANCE = "tim_error_assistance", this.STORAGE_EXPIRES_TIME = 6048e5, this._map = new Map(), this._init();
            }, [{
              key: "_init",
              value: function value() {
                var e,
                  t = this._getStorageModule().getItem(this.TIM_ERROR_ASSISTANCE, !1);
                if (t) {
                  try {
                    e = JSON.parse(t);
                  } catch (e) {
                    this._getStorageModule().removeItem(this.TIM_ERROR_ASSISTANCE, !1), M.w("".concat(this._n, "._init error:"), e);
                  }
                  e && (this._needToUpdate(e) ? this._fetch() : this._fillMap(e.message));
                } else this._fetch();
              }
            }, {
              key: "_needToUpdate",
              value: function value(e) {
                var t = e.localSavedTime,
                  e = e.localSavedVersion,
                  t = t && new Date().getTime() - t >= this.STORAGE_EXPIRES_TIME,
                  e = !e || "3.5.3" !== e;
                return M.l("".concat(this._n, "._needToUpdate isTimeout:").concat(t, " isDifferentVersion:").concat(e)), t || e;
              }
            }, {
              key: "_fetch",
              value: function value() {
                var e, t, n, o, i, a;
                this._m.get(12).isPrivateNetWork() || (e = "https://web.sdk.qcloud.com/im/download/error-message/v3/0.0.7/tim-error-message.txt", t = "application/x-www-form-urlencoded;charset=UTF-8", n = "".concat(this._n, "._fetch ok in"), o = this, v ? I.request({
                  url: e,
                  method: "GET",
                  timeout: 3e3,
                  header: {
                    "content-type": t
                  },
                  dataType: "text",
                  success: function success(e) {
                    o._fillAndSave(e.data), M.l("".concat(n, " mini program"));
                  },
                  fail: function fail() {}
                }) : (i = new XMLHttpRequest(), a = setTimeout(function () {
                  i.abort();
                }, 3e3), i.onreadystatechange = function () {
                  4 === i.readyState && (a && clearTimeout(a), 200 !== i.status && 304 !== i.status || (M.l("".concat(n, " browser")), o._fillAndSave(i.responseText)));
                }, i.open("GET", e, !0), i.setRequestHeader("Content-type", t), i.send()));
              }
            }, {
              key: "_fillAndSave",
              value: function value(e) {
                this._fillMap(e), this._getStorageModule().setItem(this.TIM_ERROR_ASSISTANCE, JSON.stringify({
                  message: e,
                  localSavedTime: new Date().getTime(),
                  localSavedVersion: "3.5.3"
                }), !0, !1);
              }
            }, {
              key: "_getStorageModule",
              value: function value() {
                return this._m.get(13);
              }
            }, {
              key: "_fillMap",
              value: function value(e) {
                this._map.clear();
                for (var t, n, o = e.split(";\n"), i = o.length, a = new RegExp(/'/g), s = 0; s < i; s++) if (n = o[s].indexOf(":"), t = o[s].slice(0, n), n = o[s].slice(n + 1, o[s].length), !t.startsWith("//")) {
                  if (N(n)) continue;
                  this._map.set(t, n.replace(a, ""));
                }
              }
            }, {
              key: "get",
              value: function value(e) {
                var t = e.isIntl,
                  n = e.key,
                  o = e.replacement1,
                  e = e.replacement2,
                  t = "".concat(n, t ? "_en" : "_cn"),
                  n = (!this._map.has(t) && this._map.has(n) && (t = n), "");
                return this._map.has(t) && (n = this._map.get(t), N(o) || (n = n.replace("$replacement1", o)), N(e) || (n = n.replace("$replacement2", e))), n;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset"));
              }
            }]),
            Za = e(function e(t) {
              p(this, e), this._n = "RemoteSignalingHandler", this._sigM = t;
            }, [{
              key: "onNewMessageList",
              value: function value(e) {
                var n = this;
                e.forEach(function (e) {
                  var t = n.getPayloadData(e);
                  t && n._handleActionType(t, e);
                });
              }
            }, {
              key: "onMessageModified",
              value: function value(e) {
                var n = this;
                e.forEach(function (e) {
                  var t = n.getPayloadData(e);
                  t && n._onInvitationModified(t, e);
                });
              }
            }, {
              key: "getPayloadData",
              value: function value(t) {
                var n = "".concat(this._n, ".getPayloadData"),
                  t = t.payload.data;
                try {
                  return JSON.parse(t);
                } catch (e) {
                  return M.e("".concat(n, " JSON parse error. signalingData:").concat(t)), null;
                }
              }
            }, {
              key: "_handleActionType",
              value: function value(e, t) {
                switch (e.actionType) {
                  case _.ACTION_TYPE_INVITE:
                    this._onNewInvitationReceived(e, t);
                    break;
                  case _.ACTION_TYPE_REJECT_INVITE:
                    this._onInviteeRejected(e);
                    break;
                  case _.ACTION_TYPE_ACCEPT_INVITE:
                    this._onInviteeAccepted(e);
                    break;
                  case _.ACTION_TYPE_CANCEL_INVITE:
                    this._onInvitationCancelled(e);
                    break;
                  case _.ACTION_TYPE_INVITE_TIMEOUT:
                    this._onInvitationTimeout(e);
                }
              }
            }, {
              key: "_genBaseEmitData",
              value: function value(e) {
                return {
                  inviteID: e.inviteID,
                  inviter: e.inviter,
                  groupID: e.groupID,
                  data: e.data || ""
                };
              }
            }, {
              key: "_onNewInvitationReceived",
              value: function value(e, t) {
                var n = "".concat(this._n, "._onNewInvitationReceived"),
                  o = e.inviteID,
                  i = e.inviteeList,
                  a = e.groupID,
                  s = e.inviter,
                  r = this._sigM.getMyUserID(),
                  c = i.includes(r),
                  u = e.timeout,
                  l = (Fe().getTime() - 1e3 * t.time) / 1e3,
                  n = (0 < u && 0 < l && l < u && (u -= l), "".concat(n, " myselfIncluded:").concat(c, " groupID:").concat(a, " signalObj:").concat(JSON.stringify(e)));
                M.l("".concat(n, " timeout:").concat(u, "s delta:").concat(l, "s")), !(a && c || !a) || (n = this._sigM.getInviteInfo(o)) && n === e || (n || this._sigM.setInviteInfo(o, y(y({}, e), {}, {
                  message: t
                })), this._sigM.emitEvent(_.NEW_INVITATION_RECEIVED, y(y({}, this._genBaseEmitData(e)), {}, {
                  inviteeList: i
                })), s !== r && this._sigM.startTimer(y(y({}, e), {}, {
                  timeout: u
                })));
              }
            }, {
              key: "_onInviteeRejected",
              value: function value(e) {
                var t = "".concat(this._n, "._onInviteeRejected"),
                  n = e.inviteID,
                  o = e.inviter,
                  i = e.groupID,
                  a = this._sigM.hasInviteInfo(n);
                M.l("".concat(t, " inviteID:").concat(n, " hasInviteID:").concat(a, " inviter:").concat(o, " groupID:").concat(i)), a && (this._sigM.updateInviteInfo(e), this._sigM.emitEvent(_.INVITEE_REJECTED, y(y({}, this._genBaseEmitData(e)), {}, {
                  invitee: e.inviteeList[0]
                })));
              }
            }, {
              key: "_onInviteeAccepted",
              value: function value(e) {
                var t = "".concat(this._n, "._onInviteeAccepted"),
                  n = e.inviteID,
                  o = e.inviter,
                  i = e.groupID,
                  a = this._sigM.hasInviteInfo(n);
                M.l("".concat(t, " inviteID:").concat(n, " hasInviteID:").concat(a, " inviter:").concat(o, " groupID:").concat(i)), a && (this._sigM.updateInviteInfo(e), this._sigM.emitEvent(_.INVITEE_ACCEPTED, y(y({}, this._genBaseEmitData(e)), {}, {
                  invitee: e.inviteeList[0]
                })));
              }
            }, {
              key: "_onInvitationCancelled",
              value: function value(e) {
                var t = "".concat(this._n, "._onInvitationCancelled"),
                  n = e.inviteID,
                  o = e.inviter,
                  i = e.groupID,
                  a = this._sigM.hasInviteInfo(n);
                M.l("".concat(t, " inviteID:").concat(n, " hasInviteID:").concat(a, " inviter:").concat(o, " groupID:").concat(i)), a && (this._sigM.deleteInviteInfo(n), this._sigM.emitEvent(_.INVITATION_CANCELLED, this._genBaseEmitData(e)));
              }
            }, {
              key: "_onInvitationTimeout",
              value: function value(e) {
                var t = "".concat(this._n, "._onInvitationTimeout"),
                  n = e.inviteID,
                  o = e.inviter,
                  i = e.groupID,
                  a = e.inviteeList,
                  s = this._sigM.hasInviteInfo(n);
                M.l("".concat(t, " inviteID:").concat(n, " hasInviteID:").concat(s, " inviter:").concat(o, " groupID:").concat(i, "  data:").concat(e.data)), s && (this._sigM.updateInviteInfo(e), this._sigM.emitEvent(_.INVITATION_TIMEOUT, y(y({}, this._genBaseEmitData(e)), {}, {
                  inviteeList: a,
                  isSelfTimeout: !1
                })));
              }
            }, {
              key: "_onInvitationModified",
              value: function value(e, t) {
                var n = "".concat(this._n, "._onInvitationModified"),
                  o = e.inviteID,
                  i = e.data,
                  a = this._sigM.hasInviteInfo(o);
                M.l("".concat(n, " inviteID:").concat(o, " hasInviteID:").concat(a, " data:").concat(i)), a && (this._sigM.setInviteInfo(o, y(y({}, e), {}, {
                  message: t
                })), this._sigM.emitEvent(_.INVITATION_MODIFIED, {
                  inviteID: o,
                  data: i
                }));
              }
            }]),
            Qa = e(function e(t) {
              p(this, e), this._n = "LocalSignalingHandler", this._sigM = t;
            }, [{
              key: "generateInviteID",
              value: function value() {
                var e,
                  t = (t = Sa)((e = La)(32), 8) + "-" + t(e(16), 4) + "-" + t(16384 | e(12), 4) + "-" + t(32768 | e(14), 4) + "-" + t(e(48), 12);
                return M.l("".concat(this._n, ".generateInviteID inviteID:").concat(t)), t;
              }
            }, {
              key: "createInviteInfo",
              value: function value(e) {
                var t = this.generateInviteID(),
                  e = this.createInviteCustomData(y(y({}, e), {}, {
                    inviteID: t
                  })),
                  n = e.groupID,
                  o = e.inviteeList,
                  n = n || o[0];
                return {
                  customData: e,
                  message: this._sigM.createSignaling(e, n),
                  inviteID: t
                };
              }
            }, {
              key: "_genBaseCustomData",
              value: function value(e) {
                var t = e.data,
                  n = e.inviteID,
                  e = e.groupID;
                return {
                  businessID: 1,
                  timeout: 0,
                  data: void 0 === t ? "" : t,
                  inviteID: void 0 === n ? "" : n,
                  groupID: void 0 === e ? "" : e
                };
              }
            }, {
              key: "createInviteCustomData",
              value: function value(e) {
                var t = e.userID,
                  n = e.timeout,
                  n = void 0 === n ? 0 : n,
                  o = e.groupID,
                  o = void 0 === o ? "" : o,
                  i = this._sigM.getMyUserID(),
                  i = y(y({}, this._genBaseCustomData(e)), {}, {
                    actionType: _.ACTION_TYPE_INVITE,
                    inviter: i,
                    inviteeList: o ? e.inviteeList : [t],
                    timeout: n
                  });
                return M.l("".concat(this._n, ".createInviteCustomData customData:"), i), i;
              }
            }, {
              key: "createCancelCustomData",
              value: function value(e) {
                var t,
                  n = "".concat(this._n, ".createCancelCustomData"),
                  o = e.inviteID,
                  i = this._sigM.getMyUserID(),
                  o = this._sigM.getInviteInfo(o),
                  a = o.inviteeList,
                  s = o.groupID,
                  o = o.inviter;
                return o === i ? t = y(y({}, this._genBaseCustomData(e)), {}, {
                  actionType: _.ACTION_TYPE_CANCEL_INVITE,
                  groupID: s,
                  inviter: i,
                  inviteeList: a
                }) : M.e("".concat(n, " unmatched inviter:").concat(o, " and my userID:").concat(i)), M.l("".concat(n, " customData:"), t), t;
              }
            }, {
              key: "createAcceptCustomData",
              value: function value(e) {
                var t,
                  n = "".concat(this._n, ".createAcceptCustomData"),
                  o = e.inviteID,
                  i = this._sigM.getMyUserID(),
                  a = this._sigM.getInviteInfo(o),
                  s = a.inviter,
                  r = a.groupID;
                return a.inviteeList.includes(i) ? t = y(y({}, this._genBaseCustomData(e)), {}, {
                  actionType: _.ACTION_TYPE_ACCEPT_INVITE,
                  groupID: r,
                  inviter: s,
                  inviteeList: [i]
                }) : M.e("".concat(n, " userID:").concat(i, " not in inviteeList. inviteID:").concat(o, " groupID:").concat(r)), M.l("".concat(n, " customData:"), t), t;
              }
            }, {
              key: "createRejectCustomData",
              value: function value(e) {
                var t,
                  n = "".concat(this._n, ".createRejectCustomData"),
                  o = e.inviteID,
                  i = this._sigM.getMyUserID(),
                  a = this._sigM.getInviteInfo(o),
                  s = a.inviter,
                  r = a.groupID;
                return a.inviteeList.includes(i) ? t = y(y({}, this._genBaseCustomData(e)), {}, {
                  actionType: _.ACTION_TYPE_REJECT_INVITE,
                  groupID: r,
                  inviter: s,
                  inviteeList: [i]
                }) : M.e("".concat(n, " userID:").concat(i, " not in inviteeList. inviteID:").concat(o, " groupID:").concat(r)), M.l("".concat(n, " customData:"), t), t;
              }
            }, {
              key: "createTimeoutCustomData",
              value: function value(e) {
                var t = "".concat(this._n, ".createTimeoutCustomData"),
                  n = e.inviteeList,
                  o = e.inviter,
                  i = e.isInviter,
                  i = void 0 !== i && i,
                  a = this._sigM.getMyUserID(),
                  e = y(y({}, this._genBaseCustomData(e)), {}, {
                    actionType: _.ACTION_TYPE_INVITE_TIMEOUT,
                    inviter: o,
                    inviteeList: i ? n : [a]
                  });
                return M.l("".concat(t, " customData:"), e), e;
              }
            }]),
            $a = e(function e(t) {
              p(this, e), this._n = "HistorySignalingHandler", this._sigM = t, this.COUNT = 20, this.EXPIRED_TIME = 300, this._map = new Map(), this._relatedToMeMap = new Map();
            }, [{
              key: "setCloudConfig",
              value: function value() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 20,
                  t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 300;
                this.COUNT = e, this.EXPIRED_TIME = t, M.l("".concat(this._n, ".setCloudConfig count:").concat(e, ", time:").concat(t));
              }
            }, {
              key: "getHistorySignaling",
              value: function value() {
                var t = this,
                  e = this._sigM.get(11).getLocalConvList();
                S(e) || (this._getC2CSignalingList(), e = this._getValidGroupConvList(e), this._getGroupSignalingList(e).then(function (e) {
                  t._handleSignalingList(e);
                }));
              }
            }, {
              key: "_getC2CSignalingList",
              value: function value() {
                var e = this._sigM.get(6).getMessageListFromUnreadDB(),
                  e = this._sigM.filterMessageList(e);
                this._getRelatedToMeMap(e);
              }
            }, {
              key: "_getGroupSignalingList",
              value: function value(e) {
                var n = this,
                  e = this._createPromiseList(e);
                return 0 === e.length ? Promise.resolve(this._sortSignaling(this._relatedToMeMap)) : this._concurrentGetMessageList(e).then(function (e) {
                  var t = new Map();
                  return e.forEach(function (e) {
                    e = e.list, e = n._getRelatedToMeMap(e);
                    t = new Map([].concat(d(t), d(e)));
                  }), n._sortSignaling(t);
                });
              }
            }, {
              key: "_handleSignalingList",
              value: function value(e) {
                S(e) || this._sigM.onNewMessageList(e);
              }
            }, {
              key: "_getValidGroupConvList",
              value: function value(e) {
                for (var t = [], n = 0, o = e.length; n < o; n++) {
                  var i = e[n],
                    a = i.type,
                    s = i.unreadCount,
                    i = i.lastMessage,
                    a = a === R.CONV_GROUP,
                    i = this._isNotExpired(i);
                  a && s && i && t.push(e[n]);
                }
                return t;
              }
            }, {
              key: "_isNotExpired",
              value: function value(e) {
                return !(!e || !e.lastTime) && e.lastTime > xe() - this.EXPIRED_TIME;
              }
            }, {
              key: "_createPromiseList",
              value: function value(e) {
                for (var t = [], n = 0; n < e.length; n++) {
                  var o = e[n],
                    i = o.conversationID,
                    o = o.unreadCount,
                    o = o < this.COUNT ? o : this.COUNT,
                    o = (this._map.set(i, {
                      msgCount: o,
                      list: []
                    }), this._sigM.get(11).getMessageList({
                      conversationID: i
                    }));
                  t.push(o);
                }
                return t;
              }
            }, {
              key: "_concurrentGetMessageList",
              value: function value(e) {
                var i = this,
                  a = [];
                return Promise.all(e).then(function (e) {
                  for (var t = 0; t < e.length; t++) {
                    var n = e[t],
                      o = n.code,
                      n = n.data;
                    0 === o && 0 !== n.messageList.length && (i._handleMessageList(n.messageList), o = i._relayGetMessageList(n)) && a.push(o);
                  }
                  return 0 < a.length ? i._concurrentGetMessageList(a) : i._map;
                });
              }
            }, {
              key: "_relayGetMessageList",
              value: function value(e) {
                var t,
                  n = e.messageList,
                  o = e.nextReqMessageID,
                  e = e.isCompleted;
                return 0 === n.length || (n = n[0].conversationID, 0 === (t = this._map.get(n).msgCount)) || e ? null : this._sigM.get(11).getMessageList({
                  conversationID: n,
                  nextReqMessageID: o,
                  count: t
                });
              }
            }, {
              key: "_handleMessageList",
              value: function value(e) {
                var t = e.length,
                  n = e[0].conversationID,
                  o = this._map.get(n),
                  i = o.msgCount,
                  o = o.list;
                this._map.set(n, {
                  msgCount: 0 < i - t ? i - t : 0,
                  list: o.concat(this._sigM.filterMessageList(e))
                });
              }
            }, {
              key: "_getRelatedToMeMap",
              value: function value(e) {
                for (var t = 0; t < e.length; t++) {
                  var n = e[t];
                  this._saveRelatedToMe(n);
                }
                return this._relatedToMeMap;
              }
            }, {
              key: "_saveRelatedToMe",
              value: function value(e) {
                var t = this._sigM.getPayloadData(e) || {},
                  n = t.actionType,
                  t = t.inviteID,
                  o = void 0 === t ? "" : t;
                switch (void 0 === n ? "" : n) {
                  case _.ACTION_TYPE_INVITE:
                    this._setHistoryInvite(e);
                    break;
                  case _.ACTION_TYPE_REJECT_INVITE:
                  case _.ACTION_TYPE_ACCEPT_INVITE:
                    this._updateHistoryInvite(e);
                    break;
                  case _.ACTION_TYPE_CANCEL_INVITE:
                    this._delHistoryInvite(o);
                    break;
                  case _.ACTION_TYPE_INVITE_TIMEOUT:
                    this._updateHistoryInvite(e);
                }
              }
            }, {
              key: "_setHistoryInvite",
              value: function value(e) {
                var t = this._sigM.getPayloadData(e) || {},
                  n = t.inviteID,
                  n = void 0 === n ? "" : n,
                  o = t.inviteeList,
                  o = void 0 === o ? [] : o,
                  i = t.timeout,
                  i = void 0 === i ? 0 : i,
                  a = this._sigM.getMyUserID();
                o.includes(a) && (o = xe() - e.time, 0 < i && i < o && 0 !== i || this._relatedToMeMap.set(n, y(y({}, t), {}, {
                  messageList: [e]
                })));
              }
            }, {
              key: "_delHistoryInvite",
              value: function value(e) {
                this._relatedToMeMap.has(e) && this._relatedToMeMap["delete"](e);
              }
            }, {
              key: "_updateHistoryInvite",
              value: function value(e) {
                var t = this._sigM.getPayloadData(e) || {},
                  n = t.inviteID,
                  n = void 0 === n ? "" : n,
                  t = t.inviteeList,
                  o = void 0 === t ? [] : t;
                if (this._relatedToMeMap.has(n)) {
                  for (var t = this._relatedToMeMap.get(n), i = t.inviteeList, t = t.messageList, a = 0; a < o.length; a++) {
                    var s = o[a];
                    i.includes(s) && i.splice(i.indexOf(s), 1);
                  }
                  0 === i.length ? this._delHistoryInvite(n) : t.push(e);
                } else this._delHistoryInvite(n);
              }
            }, {
              key: "_sortSignaling",
              value: function value(e) {
                var t = [];
                return e.forEach(function (e) {
                  t = [].concat(d(t), d(e.messageList));
                }), t.sort(function (e, t) {
                  return e.time - t.time;
                });
              }
            }, {
              key: "reset",
              value: function value() {
                this._map.clear(), this._relatedToMeMap.clear();
              }
            }]),
            es = e(function e(t, n) {
              p(this, e), this.businessID = t.businessID || 1, this.inviteID = t.inviteID, this.groupID = t.groupID || "", this.inviter = t.inviter || "", this.inviteeList = t.inviteeList || [], this.data = t.data || "", this.actionType = t.actionType || _.ACTION_TYPE_INVITE, this.timeout = t.timeout || 0;
            }),
            ts = ["message"],
            ns = ["message"],
            os = (t(us, c), e(us, [{
              key: "onC2CUnreadHandleCompleted",
              value: function value() {
                this._isC2CUnreadHandleCompleted = !0, this._isCloudConfigCompleted && this._isConvSyncCompleted && !this._isSyncCompleted && this.onReady();
              }
            }, {
              key: "onConvSyncCompleted",
              value: function value() {
                this._isConvSyncCompleted = !0, this._isC2CUnreadHandleCompleted && this._isCloudConfigCompleted && !this._isSyncCompleted && this.onReady();
              }
            }, {
              key: "onCloudConfig",
              value: function value() {
                this._isCloudConfigCompleted = !0;
                var e = this.getCloudConfig("history_s_count"),
                  t = this.getCloudConfig("history_s_time");
                N(e) || (e = Number(e)), N(t) || (t = Number(t)), this._historySignalingHandler.setCloudConfig(e, t), this._isC2CUnreadHandleCompleted && this._isConvSyncCompleted && !this._isSyncCompleted && this.onReady();
              }
            }, {
              key: "_isListenerExisted",
              value: function value() {
                return -1 < this._m.getOEmitInst().eventNames().indexOf(_.NEW_INVITATION_RECEIVED);
              }
            }, {
              key: "onReady",
              value: function value() {
                this._isSyncCompleted = !0;
                var e = this._isListenerExisted();
                M.l("".concat(this._n, ".onReady. isListenerExisted: ").concat(e)), e && this._historySignalingHandler.getHistorySignaling();
              }
            }, {
              key: "onNewMessageList",
              value: function value(e) {
                e = this.filterMessageList(e);
                if (0 < e.length) return this._remoteSignalingHandler.onNewMessageList(e);
              }
            }, {
              key: "onMessageModified",
              value: function value(e) {
                e = this.filterMessageList(e);
                if (0 < e.length) return this._remoteSignalingHandler.onMessageModified(e);
              }
            }, {
              key: "hasInviteInfo",
              value: function value(e) {
                return this._inviteInfoMap.has(e);
              }
            }, {
              key: "getInviteInfo",
              value: function value(e) {
                return this._inviteInfoMap.get(e);
              }
            }, {
              key: "setInviteInfo",
              value: function value(e, t) {
                var n = t.message,
                  t = W(t, ts);
                M.l("".concat(this._n, ".setInviteInfo inviteID:").concat(e, " data:"), t), this._inviteInfoMap.set(e, y(y({}, t), {}, {
                  message: n
                }));
              }
            }, {
              key: "deleteInviteInfo",
              value: function value(e) {
                this.hasInviteInfo(e) && (M.l("".concat(this._n, ".deleteInviteInfo inviteID:").concat(e, ".")), this._inviteInfoMap["delete"](e));
              }
            }, {
              key: "updateInviteInfo",
              value: function value(e) {
                var t = "".concat(this._n, ".updateInviteInfo"),
                  n = e.inviteID,
                  o = e.inviter,
                  i = e.inviteeList,
                  e = e.groupID;
                M.l("".concat(t, " inviteID:").concat(n, " inviter:").concat(o, " groupID:").concat(e)), e && this.hasInviteInfo(n) && (o = i[0], (e = this.getInviteInfo(n).inviteeList).includes(o) && (e.splice(e.indexOf(o), 1), M.l("".concat(t, " remove ").concat(o, ". localInviteeList.length:").concat(e.length))), 0 !== e.length) || this.deleteInviteInfo(n);
              }
            }, {
              key: "canIUseSignaling",
              value: function value() {
                return this._canIUseSignaling;
              }
            }, {
              key: "emitEvent",
              value: function value(e, t) {
                this.emitOEvt(e, t);
              }
            }, {
              key: "addSignalingListener",
              value: function value(e, t, n) {
                this._canIUseSignaling || (this._canIUseSignaling = !0), this._m.getOEmitInst().on(e, t, n);
              }
            }, {
              key: "removeSignalingListener",
              value: function value(e, t, n) {
                this._m.getOEmitInst().off(e, t, n), this._isListenerExisted() || (this._canIUseSignaling = !1);
              }
            }, {
              key: "invite",
              value: function value(e) {
                var t = this,
                  n = "".concat(this._n, ".").concat("invite"),
                  o = this._localSignalingHandler.createInviteInfo(e),
                  i = o.message,
                  a = o.customData,
                  s = o.inviteID;
                return M.l("".concat(n, " options:").concat(JSON.stringify(e), " inviteID:").concat(s)), this.sendSignaling(i, e).then(function (e) {
                  return e && 0 === e.code ? (t.setInviteInfo(s, y(y({}, a), {}, {
                    message: i
                  })), t.startTimer(y(y({}, a), {}, {
                    inviteID: s
                  })), y(y({}, e), {}, {
                    inviteID: s
                  })) : e;
                })["catch"](function (e) {
                  return E(e);
                });
              }
            }, {
              key: "inviteSync",
              value: function value(e, t, n) {
                var o = this,
                  i = "".concat(this._n, ".").concat("inviteSync"),
                  a = this._localSignalingHandler.createInviteInfo(e),
                  s = a.message,
                  r = a.customData,
                  c = a.inviteID;
                return M.l("".concat(i, " options:").concat(JSON.stringify(e), " inviteID:").concat(c)), this.sendSignaling(s, e).then(function (e) {
                  if (e && 0 === e.code) return o.setInviteInfo(c, y(y({}, r), {}, {
                    message: s
                  })), o.startTimer(y(y({}, r), {}, {
                    inviteID: c
                  })), t && t({
                    inviteID: c
                  }), {
                    inviteID: c
                  };
                  n && n(0 === e.code, e.message || "");
                })["catch"](function (e) {
                  return n && n(e.code, e.message), E(e);
                }), c;
              }
            }, {
              key: "_handleImResponse",
              value: function value(e, t, n) {
                t && 0 === t.code && (this._isHandling = !1, n ? this.deleteInviteInfo(e.inviteID) : this.updateInviteInfo(e));
              }
            }, {
              key: "cancel",
              value: function value(t) {
                var n = this,
                  e = "".concat(this._n, ".").concat("cancel");
                if (M.l("".concat(e, " options:").concat(JSON.stringify(t))), !this.hasInviteInfo(t.inviteID) || this._isHandling) return E({
                  code: k.INVALID_CANCEL_MESSAGE
                });
                this._isHandling = !0;
                var o,
                  i = this._localSignalingHandler.createCancelCustomData(t);
                return i ? (e = i.groupID, o = i.inviteeList, e = e || o[0], o = this.createSignaling(i, e), this.sendSignaling(o, t).then(function (e) {
                  return n._handleImResponse(i, e, !0), 0 === e.code ? y(y({}, e), {}, {
                    inviteID: t.inviteID
                  }) : e;
                })["catch"](function (e) {
                  return E(e);
                })) : (this._isHandling = !1, E({
                  code: k.SIGNALING_NO_PERMISSION
                }));
              }
            }, {
              key: "accept",
              value: function value(t) {
                var n = this,
                  e = "".concat(this._n, ".").concat("accept");
                if (M.l("".concat(e, " options:").concat(JSON.stringify(t))), !this.hasInviteInfo(t.inviteID) || this._isHandling) return E({
                  code: k.SIGNALING_INVALID_INVITE_ID
                });
                this._isHandling = !0;
                var o = this._localSignalingHandler.createAcceptCustomData(t);
                return o ? (e = this.createSignaling(o), this.sendSignaling(e, t).then(function (e) {
                  return n._handleImResponse(o, e), 0 === e.code ? y(y({}, e), {}, {
                    inviteID: t.inviteID
                  }) : e;
                })["catch"](function (e) {
                  return E(e);
                })) : (this._isHandling = !1, E({
                  code: k.SIGNALING_NO_PERMISSION
                }));
              }
            }, {
              key: "reject",
              value: function value(t) {
                var n = this,
                  e = "".concat(this._n, ".").concat("reject");
                if (M.l("".concat(e, " options:").concat(JSON.stringify(t))), !this.hasInviteInfo(t.inviteID) || this._isHandling) return E({
                  code: k.SIGNALING_INVALID_INVITE_ID
                });
                this._isHandling = !0;
                var o = this._localSignalingHandler.createRejectCustomData(t);
                return o ? (e = this.createSignaling(o), this.sendSignaling(e, t).then(function (e) {
                  return n._handleImResponse(o, e, !0), 0 === e.code ? y(y({}, e), {}, {
                    inviteID: t.inviteID
                  }) : e;
                })["catch"](function (e) {
                  return E(e);
                })) : (this._isHandling = !1, E({
                  code: k.SIGNALING_NO_PERMISSION
                }));
              }
            }, {
              key: "getSignalingInfo",
              value: function value(e) {
                var t = "".concat(this._n, ".getSignalingInfo"),
                  n = e.ID,
                  o = e.from,
                  i = e.to,
                  a = this._filterSignaling(e),
                  s = null,
                  e = (a && (e = this.getPayloadData(e), s = new es(e)), a ? "actionType:".concat(s.actionType) : "");
                return M.l("".concat(t, " messageID:").concat(n, " from:").concat(o, " to:").concat(i, " ") + "".concat(e, " isSignaling:").concat(a)), s;
              }
            }, {
              key: "modifyInvitation",
              value: function value(e) {
                var t,
                  n,
                  o,
                  i,
                  a = this,
                  s = e.inviteID,
                  e = e.data;
                return this.hasInviteInfo(s) ? (t = this.getInviteInfo(s), n = t.message, o = W(t, ns), i = n.payload.data, o.data = e, n.payload.data = JSON.stringify(o), this.get(2).modifyRemoteMessage(n).then(function (e) {
                  return a.hasInviteInfo(s) && a.setInviteInfo(s, y(y({}, o), {}, {
                    message: n
                  })), e;
                })["catch"](function (e) {
                  return n.payload.data = i, E(e);
                })) : E({
                  code: k.SIGNALING_INVALID_INVITE_ID
                });
              }
            }, {
              key: "_genMsgCtrlInfo",
              value: function value() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                  t = e.data,
                  t = void 0 === t ? "" : t,
                  n = e.onlineUserOnly,
                  o = e.inviteID,
                  o = void 0 === o ? "" : o,
                  i = e.offlinePushInfo,
                  e = e.actionType,
                  a = {
                    _onlineOnlyFlag: !1
                  },
                  o = {
                    onlineUserOnly: (a = o && this.getInviteInfo(o) ? this.getInviteInfo(o).message : a)._onlineOnlyFlag || n || !1,
                    offlinePushInfo: i,
                    messageControlInfo: {
                      excludedFromContentModeration: !0,
                      excludedFromUnreadCount: !1,
                      excludedFromLastMessage: !1
                    }
                  };
                return e === _.ACTION_TYPE_INVITE_TIMEOUT ? (a = !!t.match(/excludeTimeoutSignalingFromHistoryMessage/), o.messageControlInfo.excludedFromUnreadCount = a, o.messageControlInfo.excludedFromLastMessage = a) : (n = !!t.match(/excludeFromHistoryMessage/), i = !!t.match(/excludeOriginalSignalingFromHistoryMessage/), o.messageControlInfo.excludedFromUnreadCount = n || i, o.messageControlInfo.excludedFromLastMessage = n || i), o;
              }
            }, {
              key: "sendSignaling",
              value: function value(e, t) {
                var n = this;
                return this.get(2).sendMessageInstance(e, this._genMsgCtrlInfo(t))["catch"](function (e) {
                  return n._isHandling = !1, E(e);
                });
              }
            }, {
              key: "filterMessageList",
              value: function value(e) {
                var t = this;
                return e.filter(function (e) {
                  return t._filterSignaling(e);
                });
              }
            }, {
              key: "getPayloadData",
              value: function value(e) {
                return this._remoteSignalingHandler.getPayloadData(e);
              }
            }, {
              key: "createSignaling",
              value: function value(e, t) {
                var n = e.groupID,
                  o = e.inviter,
                  t = {
                    to: t || n || o,
                    conversationType: n ? R.CONV_GROUP : R.CONV_C2C,
                    priority: R.MSG_PRIORITY_HIGH,
                    payload: {
                      data: JSON.stringify(e)
                    }
                  },
                  o = this.get(2).createCustomMessage(t);
                return M.l("".concat(this._n, ".createSignaling. message:"), o), o;
              }
            }, {
              key: "_filterSignaling",
              value: function value(e) {
                var t,
                  n,
                  o = !1;
                return e.type && e.type === R.MSG_CUSTOM && (t = e.cloudCustomData, e = void 0 === (e = e.payload.data) ? "" : e, t = (void 0 === t ? "" : t).match(/"type":"tsignaling"/), n = e.match(/inviteID/), e = e.match(/actionType/), o = t || n && e), !!o;
              }
            }, {
              key: "startTimer",
              value: function value(t) {
                var n,
                  o,
                  i,
                  a = this,
                  s = "".concat(this._n, ".startTimer"),
                  e = t.timeout,
                  r = t.inviteID,
                  c = t.inviter,
                  u = t.groupID,
                  l = c === this.getMyUserID();
                M.l("".concat(s, " timeout:").concat(e, " isInviter:").concat(l, " groupID:").concat(u)), e <= 0 || (n = l ? e + 5 : e, o = 1, i = setInterval(function () {
                  var e = a._hasLocalInviteInfo(t, l);
                  o < n && e ? ++o : (e && a._sendTimeoutNotice(r, l), M.l("".concat(s, " end.")), clearInterval(i));
                }, 1e3));
              }
            }, {
              key: "_hasLocalInviteInfo",
              value: function value(e, t) {
                var n,
                  o,
                  i = e.inviteID,
                  e = e.groupID;
                return !!this.hasInviteInfo(i) && (n = "".concat(this._n, "._hasLocalInviteInfo"), o = this.getInviteInfo(i).inviteeList, M.l("".concat(n, " inviteID:").concat(i, " inviteeList:").concat(o, " groupID:").concat(e)), !e || (t ? 0 < o.length : 0 < o.length && o.includes(this.getMyUserID())));
              }
            }, {
              key: "_getReceiver",
              value: function value(e, t) {
                var n = t.groupID,
                  o = t.inviteeList,
                  t = t.inviter;
                return e ? n || o[0] : n || t;
              }
            }, {
              key: "_sendTimeoutNotice",
              value: function value(i, a) {
                var s = this,
                  e = this.getInviteInfo(i),
                  t = this._getReceiver(a, e),
                  r = (M.l("".concat(this._n, "._sendTimeoutNotice inviteID:").concat(i, " to:").concat(t, " isInviter:").concat(a)), this._localSignalingHandler.createTimeoutCustomData(y(y({}, e), {}, {
                    isInviter: a
                  }))),
                  c = this.createSignaling(r, t);
                return this.sendSignaling(c, r).then(function (e) {
                  var t, n, o;
                  e && 0 === e.code && (e = r.data, t = r.groupID, n = r.inviteeList, o = r.inviter, s.emitEvent(_.INVITATION_TIMEOUT, {
                    data: e,
                    groupID: t,
                    inviteID: i,
                    inviteeList: n,
                    inviter: o,
                    isSelfTimeout: !0,
                    message: c
                  }), a ? s.deleteInviteInfo(i) : s.updateInviteInfo(r));
                });
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._inviteInfoMap.clear(), this._canIUseSignaling = !1, this._isHandling = !1, this._historySignalingHandler.reset(), this._isC2CUnreadHandleCompleted = !1, this._isConvSyncCompleted = !1, this._isSyncCompleted = !1, this._isCloudConfigCompleted = !1;
              }
            }])),
            is = ["followDiffList"],
            as = ["from"],
            ss = {
              NONE: 0,
              FOLLOWERS: 1,
              FOLLOWING: 2,
              MUTUAL: 3
            },
            rs = (t(cs, c), e(cs, [{
              key: "_onCloudConfig",
              value: function value() {
                var e = this.getCloudConfig("follow_req_count");
                N(e) || (e = Number(e), this.DEFAULT_COUNT = e > this.MAX_COUNT ? this.MAX_COUNT : e, this._clearFollowList());
              }
            }, {
              key: "clearCacheOnReconnected",
              value: function value() {
                this._clearFollowList();
              }
            }, {
              key: "onFollowNotify",
              value: function value(e) {
                var a = this,
                  e = e.dataList || [];
                M.l("".concat(this._n, ".onFollowNotify followChangeList:").concat(e.length)), e.forEach(function (e) {
                  var t = e.followDiffList,
                    t = void 0 === t ? [] : t,
                    e = W(e, is),
                    o = e.from,
                    i = W(e, as);
                  t.forEach(function (e) {
                    var t = e.isAdd,
                      e = e.followType,
                      e = void 0 === e ? 0 : e,
                      n = a._initFollowInfo();
                    1 === t ? (i.userID = o, n[e].userInfoList.push(i), n[e].isAdd = !0) : (n[e].userInfoList.push(o), n[e].isAdd = !1), a._emitEvent(n);
                  });
                });
              }
            }, {
              key: "_initFollowInfo",
              value: function value() {
                var t = {};
                return Object.values(ss).forEach(function (e) {
                  e !== ss.NONE && (t[e] = {
                    userInfoList: [],
                    isAdd: !1
                  });
                }), t;
              }
            }, {
              key: "_emitEvent",
              value: function value(n) {
                var o = this;
                Object.keys(n).forEach(function (e) {
                  var e = Number(e),
                    t = n[e];
                  0 < t.userInfoList.length && (e === ss.FOLLOWERS && (o._clearFollowList(ss.FOLLOWERS), o.emitOEvt(h.MY_FOLLOWERS_LIST_UPDATED, t)), e === ss.FOLLOWING && (o._clearFollowList(ss.FOLLOWING), o.emitOEvt(h.MY_FOLLOWING_LIST_UPDATED, t)), e === ss.MUTUAL) && (o._clearFollowList(ss.MUTUAL), o.emitOEvt(h.MUTUAL_FOLLOWERS_LIST_UPDATED, t));
                });
              }
            }, {
              key: "followUser",
              value: function value(e) {
                var t, n, o;
                return this.canIUse(g.FOLLOW) ? (t = "".concat(this._n, ".").concat("followUser"), n = "userIDList:".concat(e.length), (o = new P("followUser")).setMessage(n), M.l("".concat(t, " ").concat(n)), this.req({
                  P: G.FOLLOW,
                  data: {
                    fromAccount: this.getMyUserID(),
                    userIDList: e.map(function (e) {
                      return {
                        userID: e
                      };
                    })
                  }
                }).then(function (e) {
                  return o.end(), M.l("".concat(t, " ok.")), T(e.data.resultList);
                })["catch"](function (e) {
                  return o.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse("followUser");
              }
            }, {
              key: "unfollowUser",
              value: function value(e) {
                var t, n, o;
                return this.canIUse(g.FOLLOW) ? (t = "".concat(this._n, ".").concat("unfollowUser"), n = "userIDList:".concat(e.length), (o = new P("unfollowUser")).setMessage(n), M.l("".concat(t, " ").concat(n)), this.req({
                  P: G.UNFOLLOW,
                  data: {
                    fromAccount: this.getMyUserID(),
                    userIDList: e
                  }
                }).then(function (e) {
                  return o.end(), M.l("".concat(t, " ok.")), T(e.data.resultList);
                })["catch"](function (e) {
                  return o.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse("unfollowUser");
              }
            }, {
              key: "getMyFollowersList",
              value: function value() {
                var t = this,
                  n = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                  o = "getMyFollowersList";
                if (!this.canIUse(g.FOLLOW)) return this.noUse(o);
                var i = n || this.FIRST_PAGE_INDEX;
                if (this._myFollowersList.has(i)) {
                  var e = this._myFollowersList.get(i),
                    a = e.resultList,
                    s = e.nextCursor,
                    e = e.lastUpdateTime;
                  if (Date.now() - e < this.MAX_CATCH_TIME && 0 < a.length) return M.l("".concat(this._n, ".").concat(o, " nextCursor:").concat(n, " from local.")), D({
                    resultList: a,
                    nextCursor: s
                  });
                }
                return this._getFollowList(n, ss.FOLLOWERS).then(function (e) {
                  return t._myFollowersList.set(i, y(y({}, e), {}, {
                    lastUpdateTime: Date.now()
                  })), M.l("".concat(t._n, ".").concat(o, " nextCursor:").concat(n, " from remote.")), T(e);
                });
              }
            }, {
              key: "getMyFollowingList",
              value: function value() {
                var t = this,
                  n = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                  o = "getMyFollowingList";
                if (!this.canIUse(g.FOLLOW)) return this.noUse(o);
                var i = n || this.FIRST_PAGE_INDEX;
                if (this._myFollowingList.has(i)) {
                  var e = this._myFollowingList.get(i),
                    a = e.resultList,
                    s = e.nextCursor,
                    e = e.lastUpdateTime;
                  if (Date.now() - e < this.MAX_CATCH_TIME && 0 < a.length) return M.l("".concat(this._n, ".").concat(o, " nextCursor:").concat(n, " from local.")), D({
                    resultList: a,
                    nextCursor: s
                  });
                }
                return this._getFollowList(n, ss.FOLLOWING).then(function (e) {
                  return t._myFollowingList.set(i, y(y({}, e), {}, {
                    lastUpdateTime: Date.now()
                  })), M.l("".concat(t._n, ".").concat(o, " nextCursor:").concat(n, " from remote.")), T(e);
                });
              }
            }, {
              key: "getMutualFollowersList",
              value: function value() {
                var t = this,
                  n = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                  o = "getMutualFollowersList";
                if (!this.canIUse(g.FOLLOW)) return this.noUse(o);
                var i = n || this.FIRST_PAGE_INDEX;
                if (this._myMutualFollowersList.has(i)) {
                  var e = this._myMutualFollowersList.get(i),
                    a = e.resultList,
                    s = e.nextCursor,
                    e = e.lastUpdateTime;
                  if (Date.now() - e < this.MAX_CATCH_TIME && 0 < a.length) return M.l("".concat(this._n, ".").concat(o, " nextCursor:").concat(n, " from local.")), D({
                    resultList: a,
                    nextCursor: s
                  });
                }
                return this._getFollowList(n, ss.MUTUAL).then(function (e) {
                  return t._myMutualFollowersList.set(i, y(y({}, e), {}, {
                    lastUpdateTime: Date.now()
                  })), M.l("".concat(t._n, ".").concat(o, " nextCursor:").concat(n, " from remote.")), T(e);
                });
              }
            }, {
              key: "_getFollowList",
              value: function value(e, t) {
                var i = this,
                  n = new P("_getFollowList");
                return n.setMessage("nextCursor:".concat(e, " type:").concat(t)), this.req({
                  P: G.GET_FOLLOW,
                  data: {
                    fromAccount: this.getMyUserID(),
                    count: this.DEFAULT_COUNT,
                    nextCursor: e,
                    type: t
                  }
                }).then(function (e) {
                  n.end();
                  var e = e.data,
                    t = e.resultList,
                    t = void 0 === t ? [] : t,
                    e = e.nextCursor,
                    e = void 0 === e ? "" : e,
                    o = [];
                  return t.forEach(function (e) {
                    var t = e.userID,
                      n = e.followTime,
                      e = e.profileList;
                    o.push(y({
                      userID: t,
                      followTime: n
                    }, i._handleProfileItem(void 0 === e ? [] : e)));
                  }), {
                    resultList: o,
                    nextCursor: e
                  };
                })["catch"](function (e) {
                  return n.setError(e).end(), M.e("".concat(i._n, "._getFollowList failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_handleProfileItem",
              value: function value(e) {
                var t = {};
                return e.forEach(function (e) {
                  switch (e.tag) {
                    case f.NICK:
                      t.nick = e.value;
                      break;
                    case f.GENDER:
                      t.gender = e.value;
                      break;
                    case f.BIRTHDAY:
                      t.birthday = e.value;
                      break;
                    case f.LOCATION:
                      t.location = e.value;
                      break;
                    case f.SELFSIGNATURE:
                      t.selfSignature = e.value;
                      break;
                    case f.ALLOWTYPE:
                      t.allowType = e.value;
                      break;
                    case f.LANGUAGE:
                      t.language = e.value;
                      break;
                    case f.AVATAR:
                      t.avatar = e.value;
                      break;
                    case f.MESSAGESETTINGS:
                      t.messageSettings = e.value;
                      break;
                    case f.ADMINFORBIDTYPE:
                      t.adminForbidType = e.value;
                      break;
                    case f.LEVEL:
                      t.level = e.value;
                      break;
                    case f.ROLE:
                      t.role = e.value;
                      break;
                    default:
                      t[e.tag] = e.value;
                  }
                }), t;
              }
            }, {
              key: "getUserFollowInfo",
              value: function value(e) {
                var t, n, i;
                return this.canIUse(g.FOLLOW) ? (n = !1, N(e = e) && (e = [this.getMyUserID()], n = !0), t = "".concat(this._n, ".").concat("getUserFollowInfo"), n = "userIDList:".concat(e.length, " isGetMyFollowInfo:").concat(n), (i = new P("getUserFollowInfo")).setMessage(n), M.l("".concat(t, " ").concat(n)), this.req({
                  P: G.GET_FOLLOW_INFO,
                  data: {
                    fromAccount: this.getMyUserID(),
                    userIDList: e
                  }
                }).then(function (e) {
                  i.end(), M.l("".concat(t, " ok."));
                  var e = e.data.followInfoList,
                    o = [];
                  return (void 0 === e ? [] : e).forEach(function (e) {
                    var t = e.followersCount,
                      n = e.followingCount,
                      e = e.mutualFollowersCount;
                    o.push({
                      followersCount: t,
                      followingCount: n,
                      mutualFollowersCount: e
                    });
                  }), T(o);
                })["catch"](function (e) {
                  return i.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                })) : this.noUse("getUserFollowInfo");
              }
            }, {
              key: "checkFollowType",
              value: function value(e) {
                if (!this.canIUse(g.FOLLOW)) return this.noUse("checkFollowType");
                100 < e.length && (e = e.slice(0, 100), M.w("".concat(t, " ").concat(Qt(100))));
                var t = "".concat(this._n, ".").concat("checkFollowType"),
                  n = "userIDList length:".concat(e.length, " "),
                  o = new P("checkFollowType");
                return o.setMessage(n), M.l("".concat(t, " ").concat(n)), this.req({
                  P: G.CHECK_FOLLOW_TYPE,
                  data: {
                    fromAccount: this.getMyUserID(),
                    userIDList: e
                  }
                }).then(function (e) {
                  o.end(), M.l("".concat(t, " ok."));
                  var e = e.data.resultList,
                    n = [];
                  return (void 0 === e ? [] : e).forEach(function (e) {
                    var t = e.userID,
                      e = e.followType;
                    n.push({
                      userID: t,
                      followType: e
                    });
                  }), T(n);
                })["catch"](function (e) {
                  return o.setError(e).end(), M.e("".concat(t, " failed. error:"), e), E(e);
                });
              }
            }, {
              key: "_clearFollowList",
              value: function value(e) {
                N(e) ? (this._myFollowersList.clear(), this._myFollowingList.clear(), this._myMutualFollowersList.clear()) : e !== ss.FOLLOWERS ? e !== ss.FOLLOWING ? e === ss.MUTUAL && this._myMutualFollowersList.clear() : this._myFollowingList.clear() : this._myFollowersList.clear();
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._clearFollowList();
              }
            }])),
            ie = Ri(function (e, t) {
              var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
              t.assign = function (e) {
                for (var t, n, o = Array.prototype.slice.call(arguments, 1); o.length;) {
                  var i = o.shift();
                  if (i) {
                    if ("object" !== z(i)) throw new TypeError(i + "must be non-object");
                    for (var a in i) t = i, n = a, Object.prototype.hasOwnProperty.call(t, n) && (e[a] = i[a]);
                  }
                }
                return e;
              }, t.shrinkBuf = function (e, t) {
                return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e);
              };
              var o = {
                  arraySet: function arraySet(e, t, n, o, i) {
                    if (t.subarray && e.subarray) e.set(t.subarray(n, n + o), i);else for (var a = 0; a < o; a++) e[i + a] = t[n + a];
                  },
                  flattenChunks: function flattenChunks(e) {
                    for (var t, n, o, i = 0, a = 0, s = e.length; a < s; a++) i += e[a].length;
                    for (o = new Uint8Array(i), a = t = 0, s = e.length; a < s; a++) n = e[a], o.set(n, t), t += n.length;
                    return o;
                  }
                },
                i = {
                  arraySet: function arraySet(e, t, n, o, i) {
                    for (var a = 0; a < o; a++) e[i + a] = t[n + a];
                  },
                  flattenChunks: function flattenChunks(e) {
                    return [].concat.apply([], e);
                  }
                };
              t.setTyped = function (e) {
                e ? (t.Buf8 = Uint8Array, t.Buf16 = Uint16Array, t.Buf32 = Int32Array, t.assign(t, o)) : (t.Buf8 = Array, t.Buf16 = Array, t.Buf32 = Array, t.assign(t, i));
              }, t.setTyped(n);
            });
          function cs(e) {
            return p(this, cs), (e = i(this, cs, [e]))._n = "FollowModule", e._myFollowersList = new Map(), e._myFollowingList = new Map(), e._myMutualFollowersList = new Map(), e.MAX_CATCH_TIME = 6e5, e.FIRST_PAGE_INDEX = gt(), e.DEFAULT_COUNT = 500, e.MAX_COUNT = 1e3, e.getIEmitInst().on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function us(e) {
            p(this, us), (e = i(this, us, [e]))._n = "SignalingModule", e._inviteInfoMap = new Map(), e._canIUseSignaling = !1, e._isHandling = !1, e._remoteSignalingHandler = new Za(e), e._localSignalingHandler = new Qa(e), e._historySignalingHandler = new $a(e), e._isC2CUnreadHandleCompleted = !1, e._isConvSyncCompleted = !1, e._isSyncCompleted = !1, e._isCloudConfigCompleted = !1;
            var t = e.getIEmitInst();
            return t.on(U.C2C_UNREAD_HANDLE_COMPLETED, e.onC2CUnreadHandleCompleted, e), t.on(U.CONV_SYNC_COMPLETED, e.onConvSyncCompleted, e), t.on(U.CLOUD_CONFIG, e.onCloudConfig, e), e;
          }
          function ls(e) {
            return p(this, ls), (e = i(this, ls, [e]))._n = "ProfanityFilterModule", e._plugin = null, e._filterConfigMap = new Map(), e._startIndex = 0, e._version = 0, e._canIUseLexicon = !1, e._isFetching = !1, e._expiredTime = 0, e;
          }
          function ds(e) {
            var t;
            return p(this, ds), (t = i(this, ds, [e]))._m = e, t._n = "TIMPushModule", t._pluginName = "TIMPush", t._pushPlugin = void 0, t._androidPushConfig = {}, t._deviceToken = "", t._businessID = 0, t._iOSBusinessID = 0, t._c2cUnreadCount = 0, t._groupUnreadCount = 0, t._isWebUniapp = 0, t._deviceInfo = {
              notificationStatus: 0,
              deviceModel: "",
              systemVersion: "",
              pushVersion: "1.0.1",
              packageName: ""
            }, t;
          }
          function ps(e) {
            var t;
            return p(this, ps), (t = i(this, ps, [e]))._m = e, t._n = "OfflinePushModule", t._offlinePushPlugin = void 0, t._androidPushConfig = {
              huaweiPushBussinessId: "",
              xiaomiPushBussinessId: "",
              xiaomiPushAppId: "",
              xiaomiPushAppKey: "",
              meizuPushBussinessId: "",
              meizuPushAppId: "",
              meizuPushAppKey: "",
              vivoPushBussinessId: "",
              fcmPushBussinessId: "",
              oppoPushBussinessId: "",
              oppoPushAppKey: "",
              oppoPushAppSecret: "",
              honorPushBussinessId: ""
            }, t._deviceToken = "", t._businessID = 0, t._iosBusinessID = 0, t._c2cUnreadCount = 0, t._groupUnreadCount = 0, t._isWebUniapp = 0, t;
          }
          function _s(e) {
            return p(this, _s), (e = i(this, _s, [e]))._n = "WorkerTimerModule", e._isWorkerEnabled = !0, e._workerTimer = null, e._timerID = -1, e._init(), e.getIEmitInst().on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function hs(e) {
            return p(this, hs), (e = i(this, hs, [e]))._n = "SnsModule", e._friendHandler = new qa(e), e._friendApplicationHandler = new wa(e), e._friendGroupHandler = new Va(e), e.getIEmitInst().on(U.A2KEY_AND_TINYID_UPDATED, e.onContextUpdated, e), e;
          }
          function gs(e) {
            p(this, gs), (e = i(this, gs, [e]))._n = "QualityStatModule", e.TAG = "im-ssolog-quality-stat", e.reportIndex = 0, e.wholePeriod = !1, e._qualityItems = [Bn, Hn, Kn, Wn, Yn, jn, Jn, zn, Xn, Zn], e._messageSentItems = [Kn, Wn, Yn, jn, Jn], e._messageReceivedItems = [zn, Xn, Zn], e.REPORT_INTERVAL = 120, e.REPORT_SDKAPPID_BLACKLIST = [], e.REPORT_TINYID_WHITELIST = [], e._statInfoArr = [], e._avgRTT = new Na(), e._avgE2EDelay = new Oa(), e._rateMessageSent = new Ga(), e._rateMessageReceived = new Pa();
            var t = e.getIEmitInst();
            return t.on(U.A2KEY_AND_TINYID_UPDATED, e._onLoginSuccess, e), t.on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          function fs(e) {
            return p(this, fs), (e = i(this, fs, [e]))._n = "RecoverMsgModule", e.PULL_LIMIT_COUNT = 15, e;
          }
          function ms(e) {
            return p(this, ms), (e = i(this, ms, [e]))._n = "CloudControlModule", e._cloudConfig = new Map(), e._expiredTime = 0, e._version = 0, e._isFetching = !1, e;
          }
          function vs(e) {
            return p(this, vs), (e = i(this, vs, [e]))._n = "SessionModule", e._platform = e.getPlatform(), e._pHandler = new fa(e), e._msgDispatcher = new va(e), e._cmdFreqLimitMap = new Map(), e._cmdReqInfoMap = new Map(), e._serverOverloadInfoMap = new Map(), e._incrementalPullContactFlag = !0, e._init(), e.getIEmitInst().on(U.CLOUD_CONFIG, e._onCloudConfig, e), e;
          }
          ie.assign, ie.shrinkBuf, ie.setTyped, ie.Buf8, ie.Buf16, ie.Buf32;
          function Is(e, t, n, o) {
            for (var i = 65535 & e | 0, a = e >>> 16 & 65535 | 0, s = 0; 0 !== n;) {
              for (n -= s = 2e3 < n ? 2e3 : n; a = a + (i = i + t[o++] | 0) | 0, --s;);
              i %= 65521, a %= 65521;
            }
            return i | a << 16 | 0;
          }
          function Ms(e, t, n, o) {
            var i = Cs,
              a = o + n;
            e ^= -1;
            for (var s = o; s < a; s++) e = e >>> 8 ^ i[255 & (e ^ t[s])];
            return -1 ^ e;
          }
          function ys(e, t, n, o, i, a, s, r) {
            for (var c, u, l, d, p, _, h, g, f, m = r.bits, v = 0, I = 0, M = 0, y = 0, C = 0, T = 0, D = 0, E = 0, L = 0, S = 0, k = null, R = 0, A = new ie.Buf16(16), O = new ie.Buf16(16), N = null, G = 0, v = 0; v <= 15; v++) A[v] = 0;
            for (I = 0; I < o; I++) A[t[n + I]]++;
            for (C = m, y = 15; 1 <= y && 0 === A[y]; y--);
            if (y < C && (C = y), 0 === y) i[a++] = 20971520, i[a++] = 20971520, r.bits = 1;else {
              for (M = 1; M < y && 0 === A[M]; M++);
              for (C < M && (C = M), v = E = 1; v <= 15; v++) if ((E = (E << 1) - A[v]) < 0) return -1;
              if (0 < E && (0 === e || 1 !== y)) return -1;
              for (O[1] = 0, v = 1; v < 15; v++) O[v + 1] = O[v] + A[v];
              for (I = 0; I < o; I++) 0 !== t[n + I] && (s[O[t[n + I]]++] = I);
              if (_ = 0 === e ? (k = N = s, 19) : 1 === e ? (k = Ts, R -= 257, N = Ds, G -= 257, 256) : (k = Es, N = Ls, -1), v = M, p = a, D = I = S = 0, l = -1, d = (L = 1 << (T = C)) - 1, 1 === e && 852 < L || 2 === e && 592 < L) return 1;
              for (;;) {
                for (f = s[I] < _ ? (g = 0, s[I]) : s[I] > _ ? (g = N[G + s[I]], k[R + s[I]]) : (g = 96, 0), c = 1 << (h = v - D), M = u = 1 << T; i[p + (S >> D) + (u -= c)] = h << 24 | g << 16 | f | 0, 0 !== u;);
                for (c = 1 << v - 1; S & c;) c >>= 1;
                if (0 !== c ? S = (S & c - 1) + c : S = 0, I++, 0 == --A[v]) {
                  if (v === y) break;
                  v = t[n + s[I]];
                }
                if (C < v && (S & d) !== l) {
                  for (p += M, E = 1 << (T = v - (D = 0 === D ? C : D)); T + D < y && !((E -= A[T + D]) <= 0);) T++, E <<= 1;
                  if (L += 1 << T, 1 === e && 852 < L || 2 === e && 592 < L) return 1;
                  i[l = S & d] = C << 24 | T << 16 | p - a | 0;
                }
              }
              0 !== S && (i[p + S] = v - D << 24 | 64 << 16 | 0), r.bits = C;
            }
            return 0;
          }
          var Cs = function () {
              for (var e = [], t = 0; t < 256; t++) {
                for (var n = t, o = 0; o < 8; o++) n = 1 & n ? 3988292384 ^ n >>> 1 : n >>> 1;
                e[t] = n;
              }
              return e;
            }(),
            Ts = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
            Ds = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
            Es = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
            Ls = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          function Ss(e) {
            return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
          }
          function ks() {
            this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new ie.Buf16(320), this.work = new ie.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function Rs(e) {
            var t;
            return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = 1, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new ie.Buf32(852), t.distcode = t.distdyn = new ie.Buf32(592), t.sane = 1, t.back = -1, 0) : -2;
          }
          function As(e) {
            var t;
            return e && e.state ? ((t = e.state).wsize = 0, t.whave = 0, t.wnext = 0, Rs(e)) : -2;
          }
          function Os(e, t) {
            var n, o;
            return !e || !e.state || (o = e.state, t < 0 ? (n = 0, t = -t) : (n = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || 15 < t)) ? -2 : (null !== o.window && o.wbits !== t && (o.window = null), o.wrap = n, o.wbits = t, As(e));
          }
          function Ns(e, t) {
            var n;
            return e ? (n = new ks(), (e.state = n).window = null, 0 !== (n = Os(e, t)) && (e.state = null), n) : -2;
          }
          var Gs,
            Ps,
            Us = !0;
          function bs(e, t, n, o) {
            var i,
              e = e.state;
            return null === e.window && (e.wsize = 1 << e.wbits, e.wnext = 0, e.whave = 0, e.window = new ie.Buf8(e.wsize)), o >= e.wsize ? (ie.arraySet(e.window, t, n - e.wsize, e.wsize, 0), e.wnext = 0, e.whave = e.wsize) : ((i = e.wsize - e.wnext) > o && (i = o), ie.arraySet(e.window, t, n - o, i, e.wnext), (o -= i) ? (ie.arraySet(e.window, t, n - o, o, 0), e.wnext = o, e.whave = e.wsize) : (e.wnext += i, e.wnext === e.wsize && (e.wnext = 0), e.whave < e.wsize && (e.whave += i))), 0;
          }
          var ws = {
              inflateReset: As,
              inflateReset2: Os,
              inflateResetKeep: Rs,
              inflateInit: function inflateInit(e) {
                return Ns(e, 15);
              },
              inflateInit2: Ns,
              inflate: function inflate(e, b) {
                var t,
                  n,
                  w,
                  o,
                  i,
                  a,
                  s,
                  r,
                  c,
                  F,
                  u,
                  l,
                  q,
                  x,
                  d,
                  p,
                  _,
                  h,
                  V,
                  B,
                  g,
                  f,
                  m,
                  v,
                  I = 0,
                  M = new ie.Buf8(4),
                  H = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return -2;
                12 === (t = e.state).mode && (t.mode = 13), i = e.next_out, w = e.output, s = e.avail_out, o = e.next_in, n = e.input, a = e.avail_in, r = t.hold, c = t.bits, F = a, u = s, f = 0;
                e: for (;;) switch (t.mode) {
                  case 1:
                    if (0 === t.wrap) t.mode = 13;else {
                      for (; c < 16;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      if (2 & t.wrap && 35615 === r) M[t.check = 0] = 255 & r, M[1] = r >>> 8 & 255, t.check = Ms(t.check, M, 2, 0), c = r = 0, t.mode = 2;else if (t.flags = 0, t.head && (t.head.done = !1), !(1 & t.wrap) || (((255 & r) << 8) + (r >> 8)) % 31) e.msg = "incorrect header check", t.mode = 30;else if (8 != (15 & r)) e.msg = "unknown compression method", t.mode = 30;else {
                        if (c -= 4, g = 8 + (15 & (r >>>= 4)), 0 === t.wbits) t.wbits = g;else if (g > t.wbits) {
                          e.msg = "invalid window size", t.mode = 30;
                          break;
                        }
                        t.dmax = 1 << g, e.adler = t.check = 1, t.mode = 512 & r ? 10 : 12, c = r = 0;
                      }
                    }
                    break;
                  case 2:
                    for (; c < 16;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    if (t.flags = r, 8 != (255 & t.flags)) {
                      e.msg = "unknown compression method", t.mode = 30;
                      break;
                    }
                    if (57344 & t.flags) {
                      e.msg = "unknown header flags set", t.mode = 30;
                      break;
                    }
                    t.head && (t.head.text = r >> 8 & 1), 512 & t.flags && (M[0] = 255 & r, M[1] = r >>> 8 & 255, t.check = Ms(t.check, M, 2, 0)), c = r = 0, t.mode = 3;
                  case 3:
                    for (; c < 32;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    t.head && (t.head.time = r), 512 & t.flags && (M[0] = 255 & r, M[1] = r >>> 8 & 255, M[2] = r >>> 16 & 255, M[3] = r >>> 24 & 255, t.check = Ms(t.check, M, 4, 0)), c = r = 0, t.mode = 4;
                  case 4:
                    for (; c < 16;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    t.head && (t.head.xflags = 255 & r, t.head.os = r >> 8), 512 & t.flags && (M[0] = 255 & r, M[1] = r >>> 8 & 255, t.check = Ms(t.check, M, 2, 0)), c = r = 0, t.mode = 5;
                  case 5:
                    if (1024 & t.flags) {
                      for (; c < 16;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      t.length = r, t.head && (t.head.extra_len = r), 512 & t.flags && (M[0] = 255 & r, M[1] = r >>> 8 & 255, t.check = Ms(t.check, M, 2, 0)), c = r = 0;
                    } else t.head && (t.head.extra = null);
                    t.mode = 6;
                  case 6:
                    if (1024 & t.flags && ((l = (l = t.length) > a ? a : l) && (t.head && (g = t.head.extra_len - t.length, t.head.extra || (t.head.extra = new Array(t.head.extra_len)), ie.arraySet(t.head.extra, n, o, l, g)), 512 & t.flags && (t.check = Ms(t.check, n, l, o)), a -= l, o += l, t.length -= l), t.length)) break e;
                    t.length = 0, t.mode = 7;
                  case 7:
                    if (2048 & t.flags) {
                      if (0 === a) break e;
                      for (l = 0; g = n[o + l++], t.head && g && t.length < 65536 && (t.head.name += String.fromCharCode(g)), g && l < a;);
                      if (512 & t.flags && (t.check = Ms(t.check, n, l, o)), a -= l, o += l, g) break e;
                    } else t.head && (t.head.name = null);
                    t.length = 0, t.mode = 8;
                  case 8:
                    if (4096 & t.flags) {
                      if (0 === a) break e;
                      for (l = 0; g = n[o + l++], t.head && g && t.length < 65536 && (t.head.comment += String.fromCharCode(g)), g && l < a;);
                      if (512 & t.flags && (t.check = Ms(t.check, n, l, o)), a -= l, o += l, g) break e;
                    } else t.head && (t.head.comment = null);
                    t.mode = 9;
                  case 9:
                    if (512 & t.flags) {
                      for (; c < 16;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      if (r !== (65535 & t.check)) {
                        e.msg = "header crc mismatch", t.mode = 30;
                        break;
                      }
                      c = r = 0;
                    }
                    t.head && (t.head.hcrc = t.flags >> 9 & 1, t.head.done = !0), e.adler = t.check = 0, t.mode = 12;
                    break;
                  case 10:
                    for (; c < 32;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    e.adler = t.check = Ss(r), c = r = 0, t.mode = 11;
                  case 11:
                    if (0 === t.havedict) return e.next_out = i, e.avail_out = s, e.next_in = o, e.avail_in = a, t.hold = r, t.bits = c, 2;
                    e.adler = t.check = 1, t.mode = 12;
                  case 12:
                    if (5 === b || 6 === b) break e;
                  case 13:
                    if (t.last) r >>>= 7 & c, c -= 7 & c, t.mode = 27;else {
                      for (; c < 3;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      switch (t.last = 1 & r, --c, 3 & (r >>>= 1)) {
                        case 0:
                          t.mode = 14;
                          break;
                        case 1:
                          y = C = void 0;
                          var y,
                            C = t;
                          if (Us) {
                            for (Gs = new ie.Buf32(512), Ps = new ie.Buf32(32), y = 0; y < 144;) C.lens[y++] = 8;
                            for (; y < 256;) C.lens[y++] = 9;
                            for (; y < 280;) C.lens[y++] = 7;
                            for (; y < 288;) C.lens[y++] = 8;
                            for (ys(1, C.lens, 0, 288, Gs, 0, C.work, {
                              bits: 9
                            }), y = 0; y < 32;) C.lens[y++] = 5;
                            ys(2, C.lens, 0, 32, Ps, 0, C.work, {
                              bits: 5
                            }), Us = !1;
                          }
                          if (C.lencode = Gs, C.lenbits = 9, C.distcode = Ps, C.distbits = 5, t.mode = 20, 6 !== b) break;
                          r >>>= 2, c -= 2;
                          break e;
                        case 2:
                          t.mode = 17;
                          break;
                        case 3:
                          e.msg = "invalid block type", t.mode = 30;
                      }
                      r >>>= 2, c -= 2;
                    }
                    break;
                  case 14:
                    for (r >>>= 7 & c, c -= 7 & c; c < 32;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    if ((65535 & r) != (r >>> 16 ^ 65535)) {
                      e.msg = "invalid stored block lengths", t.mode = 30;
                      break;
                    }
                    if (t.length = 65535 & r, c = r = 0, t.mode = 15, 6 === b) break e;
                  case 15:
                    t.mode = 16;
                  case 16:
                    if (l = t.length) {
                      if (0 === (l = s < (l = a < l ? a : l) ? s : l)) break e;
                      ie.arraySet(w, n, o, l, i), a -= l, o += l, s -= l, i += l, t.length -= l;
                    } else t.mode = 12;
                    break;
                  case 17:
                    for (; c < 14;) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    if (t.nlen = 257 + (31 & r), r >>>= 5, c -= 5, t.ndist = 1 + (31 & r), r >>>= 5, c -= 5, t.ncode = 4 + (15 & r), r >>>= 4, c -= 4, 286 < t.nlen || 30 < t.ndist) {
                      e.msg = "too many length or distance symbols", t.mode = 30;
                      break;
                    }
                    t.have = 0, t.mode = 18;
                  case 18:
                    for (; t.have < t.ncode;) {
                      for (; c < 3;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      t.lens[H[t.have++]] = 7 & r, r >>>= 3, c -= 3;
                    }
                    for (; t.have < 19;) t.lens[H[t.have++]] = 0;
                    if (t.lencode = t.lendyn, t.lenbits = 7, m = {
                      bits: t.lenbits
                    }, f = ys(0, t.lens, 0, 19, t.lencode, 0, t.work, m), t.lenbits = m.bits, f) {
                      e.msg = "invalid code lengths set", t.mode = 30;
                      break;
                    }
                    t.have = 0, t.mode = 19;
                  case 19:
                    for (; t.have < t.nlen + t.ndist;) {
                      for (; p = (I = t.lencode[r & (1 << t.lenbits) - 1]) >>> 16 & 255, _ = 65535 & I, !((d = I >>> 24) <= c);) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      if (_ < 16) r >>>= d, c -= d, t.lens[t.have++] = _;else {
                        if (16 === _) {
                          for (v = d + 2; c < v;) {
                            if (0 === a) break e;
                            a--, r += n[o++] << c, c += 8;
                          }
                          if (r >>>= d, c -= d, 0 === t.have) {
                            e.msg = "invalid bit length repeat", t.mode = 30;
                            break;
                          }
                          g = t.lens[t.have - 1], l = 3 + (3 & r), r >>>= 2, c -= 2;
                        } else if (17 === _) {
                          for (v = d + 3; c < v;) {
                            if (0 === a) break e;
                            a--, r += n[o++] << c, c += 8;
                          }
                          g = 0, l = 3 + (7 & (r >>>= d)), r >>>= 3, c = c - d - 3;
                        } else {
                          for (v = d + 7; c < v;) {
                            if (0 === a) break e;
                            a--, r += n[o++] << c, c += 8;
                          }
                          g = 0, l = 11 + (127 & (r >>>= d)), r >>>= 7, c = c - d - 7;
                        }
                        if (t.have + l > t.nlen + t.ndist) {
                          e.msg = "invalid bit length repeat", t.mode = 30;
                          break;
                        }
                        for (; l--;) t.lens[t.have++] = g;
                      }
                    }
                    if (30 === t.mode) break;
                    if (0 === t.lens[256]) {
                      e.msg = "invalid code -- missing end-of-block", t.mode = 30;
                      break;
                    }
                    if (t.lenbits = 9, m = {
                      bits: t.lenbits
                    }, f = ys(1, t.lens, 0, t.nlen, t.lencode, 0, t.work, m), t.lenbits = m.bits, f) {
                      e.msg = "invalid literal/lengths set", t.mode = 30;
                      break;
                    }
                    if (t.distbits = 6, t.distcode = t.distdyn, m = {
                      bits: t.distbits
                    }, f = ys(2, t.lens, t.nlen, t.ndist, t.distcode, 0, t.work, m), t.distbits = m.bits, f) {
                      e.msg = "invalid distances set", t.mode = 30;
                      break;
                    }
                    if (t.mode = 20, 6 === b) break e;
                  case 20:
                    t.mode = 21;
                  case 21:
                    if (6 <= a && 258 <= s) {
                      e.next_out = i, e.avail_out = s, e.next_in = o, e.avail_in = a, t.hold = r, t.bits = c, G = W = k = S = L = E = D = T = oe = ne = te = ee = U = P = $ = Q = Z = X = z = J = j = N = Y = O = A = void 0;
                      var T,
                        D,
                        E,
                        L,
                        S,
                        k,
                        R = e,
                        K = u,
                        A = R.state,
                        O = R.next_in,
                        W = R.input,
                        Y = O + (R.avail_in - 5),
                        N = R.next_out,
                        G = R.output,
                        j = N - (K - R.avail_out),
                        J = N + (R.avail_out - 257),
                        z = A.dmax,
                        X = A.wsize,
                        Z = A.whave,
                        Q = A.wnext,
                        $ = A.window,
                        P = A.hold,
                        U = A.bits,
                        ee = A.lencode,
                        te = A.distcode,
                        ne = (1 << A.lenbits) - 1,
                        oe = (1 << A.distbits) - 1;
                      t: do {
                        for (U < 15 && (P += W[O++] << U, U += 8, P += W[O++] << U, U += 8), T = ee[P & ne];;) {
                          if (P >>>= D = T >>> 24, U -= D, 0 == (D = T >>> 16 & 255)) G[N++] = 65535 & T;else {
                            if (!(16 & D)) {
                              if (0 == (64 & D)) {
                                T = ee[(65535 & T) + (P & (1 << D) - 1)];
                                continue;
                              }
                              if (32 & D) {
                                A.mode = 12;
                                break t;
                              }
                              R.msg = "invalid literal/length code", A.mode = 30;
                              break t;
                            }
                            for (E = 65535 & T, (D &= 15) && (U < D && (P += W[O++] << U, U += 8), E += P & (1 << D) - 1, P >>>= D, U -= D), U < 15 && (P += W[O++] << U, U += 8, P += W[O++] << U, U += 8), T = te[P & oe];;) {
                              if (P >>>= D = T >>> 24, U -= D, !(16 & (D = T >>> 16 & 255))) {
                                if (0 == (64 & D)) {
                                  T = te[(65535 & T) + (P & (1 << D) - 1)];
                                  continue;
                                }
                                R.msg = "invalid distance code", A.mode = 30;
                                break t;
                              }
                              if (L = 65535 & T, U < (D &= 15) && (P += W[O++] << U, (U += 8) < D) && (P += W[O++] << U, U += 8), (L += P & (1 << D) - 1) > z) {
                                R.msg = "invalid distance too far back", A.mode = 30;
                                break t;
                              }
                              if (P >>>= D, U -= D, L > (D = N - j)) {
                                if ((D = L - D) > Z && A.sane) {
                                  R.msg = "invalid distance too far back", A.mode = 30;
                                  break t;
                                }
                                if (k = $, (S = 0) === Q) {
                                  if (S += X - D, D < E) {
                                    for (E -= D; G[N++] = $[S++], --D;);
                                    S = N - L, k = G;
                                  }
                                } else if (Q < D) {
                                  if (S += X + Q - D, (D -= Q) < E) {
                                    for (E -= D; G[N++] = $[S++], --D;);
                                    if (S = 0, Q < E) {
                                      for (E -= D = Q; G[N++] = $[S++], --D;);
                                      S = N - L, k = G;
                                    }
                                  }
                                } else if (S += Q - D, D < E) {
                                  for (E -= D; G[N++] = $[S++], --D;);
                                  S = N - L, k = G;
                                }
                                for (; 2 < E;) G[N++] = k[S++], G[N++] = k[S++], G[N++] = k[S++], E -= 3;
                                E && (G[N++] = k[S++], 1 < E) && (G[N++] = k[S++]);
                              } else {
                                for (S = N - L; G[N++] = G[S++], G[N++] = G[S++], G[N++] = G[S++], 2 < (E -= 3););
                                E && (G[N++] = G[S++], 1 < E) && (G[N++] = G[S++]);
                              }
                              break;
                            }
                          }
                          break;
                        }
                      } while (O < Y && N < J);
                      O -= E = U >> 3, P &= (1 << (U -= E << 3)) - 1, R.next_in = O, R.next_out = N, R.avail_in = O < Y ? Y - O + 5 : 5 - (O - Y), R.avail_out = N < J ? J - N + 257 : 257 - (N - J), A.hold = P, A.bits = U, i = e.next_out, w = e.output, s = e.avail_out, o = e.next_in, n = e.input, a = e.avail_in, r = t.hold, c = t.bits, 12 === t.mode && (t.back = -1);
                      break;
                    }
                    for (t.back = 0; p = (I = t.lencode[r & (1 << t.lenbits) - 1]) >>> 16 & 255, _ = 65535 & I, !((d = I >>> 24) <= c);) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    if (p && 0 == (240 & p)) {
                      for (h = d, V = p, B = _; p = (I = t.lencode[B + ((r & (1 << h + V) - 1) >> h)]) >>> 16 & 255, _ = 65535 & I, !(h + (d = I >>> 24) <= c);) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      r >>>= h, c -= h, t.back += h;
                    }
                    if (r >>>= d, c -= d, t.back += d, t.length = _, 0 === p) {
                      t.mode = 26;
                      break;
                    }
                    if (32 & p) {
                      t.back = -1, t.mode = 12;
                      break;
                    }
                    if (64 & p) {
                      e.msg = "invalid literal/length code", t.mode = 30;
                      break;
                    }
                    t.extra = 15 & p, t.mode = 22;
                  case 22:
                    if (t.extra) {
                      for (v = t.extra; c < v;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      t.length += r & (1 << t.extra) - 1, r >>>= t.extra, c -= t.extra, t.back += t.extra;
                    }
                    t.was = t.length, t.mode = 23;
                  case 23:
                    for (; p = (I = t.distcode[r & (1 << t.distbits) - 1]) >>> 16 & 255, _ = 65535 & I, !((d = I >>> 24) <= c);) {
                      if (0 === a) break e;
                      a--, r += n[o++] << c, c += 8;
                    }
                    if (0 == (240 & p)) {
                      for (h = d, V = p, B = _; p = (I = t.distcode[B + ((r & (1 << h + V) - 1) >> h)]) >>> 16 & 255, _ = 65535 & I, !(h + (d = I >>> 24) <= c);) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      r >>>= h, c -= h, t.back += h;
                    }
                    if (r >>>= d, c -= d, t.back += d, 64 & p) {
                      e.msg = "invalid distance code", t.mode = 30;
                      break;
                    }
                    t.offset = _, t.extra = 15 & p, t.mode = 24;
                  case 24:
                    if (t.extra) {
                      for (v = t.extra; c < v;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      t.offset += r & (1 << t.extra) - 1, r >>>= t.extra, c -= t.extra, t.back += t.extra;
                    }
                    if (t.offset > t.dmax) {
                      e.msg = "invalid distance too far back", t.mode = 30;
                      break;
                    }
                    t.mode = 25;
                  case 25:
                    if (0 === s) break e;
                    if (t.offset > (l = u - s)) {
                      if ((l = t.offset - l) > t.whave && t.sane) {
                        e.msg = "invalid distance too far back", t.mode = 30;
                        break;
                      }
                      q = l > t.wnext ? (l -= t.wnext, t.wsize - l) : t.wnext - l, l > t.length && (l = t.length), x = t.window;
                    } else x = w, q = i - t.offset, l = t.length;
                    for (s -= l = s < l ? s : l, t.length -= l; w[i++] = x[q++], --l;);
                    0 === t.length && (t.mode = 21);
                    break;
                  case 26:
                    if (0 === s) break e;
                    w[i++] = t.length, s--, t.mode = 21;
                    break;
                  case 27:
                    if (t.wrap) {
                      for (; c < 32;) {
                        if (0 === a) break e;
                        a--, r |= n[o++] << c, c += 8;
                      }
                      if (u -= s, e.total_out += u, t.total += u, u && (e.adler = t.check = (t.flags ? Ms : Is)(t.check, w, u, i - u)), u = s, (t.flags ? r : Ss(r)) !== t.check) {
                        e.msg = "incorrect data check", t.mode = 30;
                        break;
                      }
                      c = r = 0;
                    }
                    t.mode = 28;
                  case 28:
                    if (t.wrap && t.flags) {
                      for (; c < 32;) {
                        if (0 === a) break e;
                        a--, r += n[o++] << c, c += 8;
                      }
                      if (r !== (4294967295 & t.total)) {
                        e.msg = "incorrect length check", t.mode = 30;
                        break;
                      }
                      c = r = 0;
                    }
                    t.mode = 29;
                  case 29:
                    f = 1;
                    break e;
                  case 30:
                    f = -3;
                    break e;
                  case 31:
                    return -4;
                  default:
                    return -2;
                }
                return e.next_out = i, e.avail_out = s, e.next_in = o, e.avail_in = a, t.hold = r, t.bits = c, (t.wsize || u !== e.avail_out && t.mode < 30 && (t.mode < 27 || 4 !== b)) && bs(e, e.output, e.next_out, u - e.avail_out), F -= e.avail_in, u -= e.avail_out, e.total_in += F, e.total_out += u, t.total += u, t.wrap && u && (e.adler = t.check = (t.flags ? Ms : Is)(t.check, w, u, e.next_out - u)), e.data_type = t.bits + (t.last ? 64 : 0) + (12 === t.mode ? 128 : 0) + (20 === t.mode || 15 === t.mode ? 256 : 0), f = (0 == F && 0 === u || 4 === b) && 0 === f ? -5 : f;
              },
              inflateEnd: function inflateEnd(e) {
                var t;
                return e && e.state ? ((t = e.state).window && (t.window = null), e.state = null, 0) : -2;
              },
              inflateGetHeader: function inflateGetHeader(e, t) {
                return !e || !e.state || 0 == (2 & (e = e.state).wrap) ? -2 : ((e.head = t).done = !1, 0);
              },
              inflateSetDictionary: function inflateSetDictionary(e, t) {
                var n,
                  o = t.length;
                return !e || !e.state || 0 !== (n = e.state).wrap && 11 !== n.mode ? -2 : 11 === n.mode && Is(1, t, o, 0) !== n.check ? -3 : bs(e, t, o, o) ? (n.mode = 31, -4) : (n.havedict = 1, 0);
              },
              inflateInfo: "pako inflate (from Nodeca project)"
            },
            Fs = !0,
            qs = !0;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (e) {
            Fs = !1;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (e) {
            qs = !1;
          }
          for (var xs = new ie.Buf8(256), Vs = 0; Vs < 256; Vs++) xs[Vs] = 252 <= Vs ? 6 : 248 <= Vs ? 5 : 240 <= Vs ? 4 : 224 <= Vs ? 3 : 192 <= Vs ? 2 : 1;
          xs[254] = xs[254] = 1;
          function Bs(e, t) {
            for (var n, o, i = t || e.length, a = new Array(2 * i), s = 0, r = 0; r < i;) if ((n = e[r++]) < 128) a[s++] = n;else if (4 < (o = xs[n])) a[s++] = 65533, r += o - 1;else {
              for (n &= 2 === o ? 31 : 3 === o ? 15 : 7; 1 < o && r < i;) n = n << 6 | 63 & e[r++], o--;
              1 < o ? a[s++] = 65533 : n < 65536 ? a[s++] = n : (n -= 65536, a[s++] = 55296 | n >> 10 & 1023, a[s++] = 56320 | 1023 & n);
            }
            var c = a,
              u = s;
            if (u < 65534 && (c.subarray && qs || !c.subarray && Fs)) return String.fromCharCode.apply(null, ie.shrinkBuf(c, u));
            for (var l = "", d = 0; d < u; d++) l += String.fromCharCode(c[d]);
            return l;
          }
          function Hs() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          }
          function Ks() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
          }
          var Ws = {
              Z_NO_FLUSH: 0,
              Z_PARTIAL_FLUSH: 1,
              Z_SYNC_FLUSH: 2,
              Z_FULL_FLUSH: 3,
              Z_FINISH: 4,
              Z_BLOCK: 5,
              Z_TREES: 6,
              Z_OK: 0,
              Z_STREAM_END: 1,
              Z_NEED_DICT: 2,
              Z_ERRNO: -1,
              Z_STREAM_ERROR: -2,
              Z_DATA_ERROR: -3,
              Z_BUF_ERROR: -5,
              Z_NO_COMPRESSION: 0,
              Z_BEST_SPEED: 1,
              Z_BEST_COMPRESSION: 9,
              Z_DEFAULT_COMPRESSION: -1,
              Z_FILTERED: 1,
              Z_HUFFMAN_ONLY: 2,
              Z_RLE: 3,
              Z_FIXED: 4,
              Z_DEFAULT_STRATEGY: 0,
              Z_BINARY: 0,
              Z_TEXT: 1,
              Z_UNKNOWN: 2,
              Z_DEFLATED: 8
            },
            Ys = {
              2: "need dictionary",
              1: "stream end",
              0: "",
              "-1": "file error",
              "-2": "stream error",
              "-3": "data error",
              "-4": "insufficient memory",
              "-5": "buffer error",
              "-6": "incompatible version"
            },
            js = Object.prototype.toString;
          function Js(e) {
            if (!(this instanceof Js)) return new Js(e);
            this.options = ie.assign({
              chunkSize: 16384,
              windowBits: 0,
              to: ""
            }, e || {});
            var t = this.options,
              e = (t.raw && 0 <= t.windowBits && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits) && (t.windowBits = -15), !(0 <= t.windowBits && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), 15 < t.windowBits && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new Hs(), this.strm.avail_out = 0, ws.inflateInit2(this.strm, t.windowBits));
            if (e !== Ws.Z_OK) throw new Error(Ys[e]);
            if (this.header = new Ks(), ws.inflateGetHeader(this.strm, this.header), t.dictionary && ("string" == typeof t.dictionary ? t.dictionary = function (e) {
              for (var t, n, o, i, a = e.length, s = 0, r = 0; r < a; r++) 55296 == (64512 & (n = e.charCodeAt(r))) && r + 1 < a && 56320 == (64512 & (o = e.charCodeAt(r + 1))) && (n = 65536 + (n - 55296 << 10) + (o - 56320), r++), s += n < 128 ? 1 : n < 2048 ? 2 : n < 65536 ? 3 : 4;
              for (t = new ie.Buf8(s), r = i = 0; i < s; r++) 55296 == (64512 & (n = e.charCodeAt(r))) && r + 1 < a && 56320 == (64512 & (o = e.charCodeAt(r + 1))) && (n = 65536 + (n - 55296 << 10) + (o - 56320), r++), n < 128 ? t[i++] = n : (n < 2048 ? t[i++] = 192 | n >>> 6 : (n < 65536 ? t[i++] = 224 | n >>> 12 : (t[i++] = 240 | n >>> 18, t[i++] = 128 | n >>> 12 & 63), t[i++] = 128 | n >>> 6 & 63), t[i++] = 128 | 63 & n);
              return t;
            }(t.dictionary) : "[object ArrayBuffer]" === js.call(t.dictionary) && (t.dictionary = new Uint8Array(t.dictionary)), t.raw) && (e = ws.inflateSetDictionary(this.strm, t.dictionary)) !== Ws.Z_OK) throw new Error(Ys[e]);
          }
          function zs(e, t) {
            t = new Js(t);
            if (t.push(e, !0), t.err) throw t.msg || Ys[t.err];
            return t.result;
          }
          Js.prototype.push = function (e, t) {
            var n,
              o,
              i,
              a,
              s,
              r = this.strm,
              c = this.options.chunkSize,
              u = this.options.dictionary,
              l = !1;
            if (this.ended) return !1;
            o = t === ~~t ? t : !0 === t ? Ws.Z_FINISH : Ws.Z_NO_FLUSH, "string" == typeof e ? r.input = function (e) {
              for (var t = new ie.Buf8(e.length), n = 0, o = t.length; n < o; n++) t[n] = e.charCodeAt(n);
              return t;
            }(e) : "[object ArrayBuffer]" === js.call(e) ? r.input = new Uint8Array(e) : r.input = e, r.next_in = 0, r.avail_in = r.input.length;
            do {
              if (0 === r.avail_out && (r.output = new ie.Buf8(c), r.next_out = 0, r.avail_out = c), (n = (n = ws.inflate(r, Ws.Z_NO_FLUSH)) === Ws.Z_NEED_DICT && u ? ws.inflateSetDictionary(this.strm, u) : n) === Ws.Z_BUF_ERROR && !0 === l && (n = Ws.Z_OK, l = !1), n !== Ws.Z_STREAM_END && n !== Ws.Z_OK) return this.onEnd(n), !(this.ended = !0);
              !r.next_out || 0 !== r.avail_out && n !== Ws.Z_STREAM_END && (0 !== r.avail_in || o !== Ws.Z_FINISH && o !== Ws.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i = function (e, t) {
                for (var n = (t = (t = t || e.length) > e.length ? e.length : t) - 1; 0 <= n && 128 == (192 & e[n]);) n--;
                return !(n < 0 || 0 === n) && n + xs[e[n]] > t ? n : t;
              }(r.output, r.next_out), a = r.next_out - i, s = Bs(r.output, i), r.next_out = a, r.avail_out = c - a, a && ie.arraySet(r.output, r.output, i, a, 0), this.onData(s)) : this.onData(ie.shrinkBuf(r.output, r.next_out))), 0 === r.avail_in && 0 === r.avail_out && (l = !0);
            } while ((0 < r.avail_in || 0 === r.avail_out) && n !== Ws.Z_STREAM_END);
            return (o = n === Ws.Z_STREAM_END ? Ws.Z_FINISH : o) === Ws.Z_FINISH ? (n = ws.inflateEnd(this.strm), this.onEnd(n), this.ended = !0, n === Ws.Z_OK) : o !== Ws.Z_SYNC_FLUSH || (this.onEnd(Ws.Z_OK), !(r.avail_out = 0));
          }, Js.prototype.onData = function (e) {
            this.chunks.push(e);
          }, Js.prototype.onEnd = function (e) {
            e === Ws.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = ie.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
          };
          var wn = {},
            Xs = ((0, ie.assign)(wn, {
              Inflate: Js,
              inflate: zs,
              inflateRaw: function inflateRaw(e, t) {
                return (t = t || {}).raw = !0, zs(e, t);
              },
              ungzip: zs
            }, Ws), wn),
            Zs = e(function e(t) {
              p(this, e), this._m = t, this._n = "InflateModule", this._bLogForInflateOK = !1, this._bLogForInflateError = !1;
            }, [{
              key: "inflate",
              value: function value(e) {
                var t,
                  e = new Uint8Array(e).slice(4),
                  n = Date.now();
                try {
                  t = Xs.inflate(e, {
                    to: "string"
                  }), this._bLogForInflateOK || (this._bLogForInflateOK = !0, new P("inflateOK").end());
                } catch (e) {
                  return this._bLogForInflateError ? void 0 : (this._bLogForInflateError = !0, void new P("inflateError").setMessage(e).end());
                }
                var e = e.length + 4,
                  o = t.length;
                return M.d("inflate ok. zipped:".concat(e, " unzipped:").concat(o) + " compression ratio:".concat(Math.round(100 * (o - e) / o), "% cost:").concat(Date.now() - n)), t;
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._bLogForInflateOK = !1, this._bLogForInflateError = !1;
              }
            }]),
            Qs = "Message",
            $s = "User",
            er = "Group",
            tr = "GroupMember",
            nr = ["count"],
            or = ["conversationID", "timePosition", "timePeriod"],
            ir = ["miniBirthday", "maxBirthday"],
            ar = q(q(q(q({}, Qs, G.CS), $s, G.USER_CS), er, G.GRP_CS), tr, G.MBR_CS),
            sr = (t(dr, c), e(dr, [{
              key: "searchCloudMessages",
              value: function value(e) {
                return this.search(Qs, e);
              }
            }, {
              key: "searchCloudUsers",
              value: function value(e) {
                return this.search($s, e);
              }
            }, {
              key: "searchCloudGroups",
              value: function value(e) {
                return this.search(er, e);
              }
            }, {
              key: "searchCloudGroupMembers",
              value: function value(e) {
                return this.search(tr, e);
              }
            }, {
              key: "search",
              value: function value(i, a) {
                var s = this,
                  e = "searchCloud".concat(i, "s"),
                  r = "".concat(this._n, ".").concat(e);
                if (!a) return E({
                  code: k.OPTIONS_IS_EMPTY,
                  message: this.getErrMsg(k.OPTIONS_IS_EMPTY, e)
                });
                var t = a.keywordList,
                  n = rt(t),
                  o = a.count;
                if (a.count && (o = parseInt(o)), i === Qs && !n && !rt(a.senderUserIDList) && !rt(a.messageTypeList) || i !== Qs && !n) throw M.e("[".concat(e, '] Missing required params: "keywordList".')), new Error("Params validate failed.");
                var c = Date.now(),
                  u = new P(e),
                  l = "keywordList:".concat(t, " keywordListMatchType:").concat(a.keywordListMatchType, " cursor:").concat(a.cursor, " count:").concat(o);
                return M.l("".concat(r, " ").concat(l)), this.req({
                  P: ar[i],
                  data: this._genParams(i, a)
                }).then(function (e) {
                  var t = e.data,
                    n = t.code,
                    t = t.message;
                  if (0 !== n) return 60020 === (o = n) ? o = "SearchUnable" : i !== Qs && 27003 === n ? o = "SearchParamsError" : i !== Qs && 60018 === n && (o = "SearchOverLimit"), o = s.getErrMsg(o) || t, t = new L({
                    code: n,
                    message: o
                  }), u.setMessage(l).setError(t).end(), E(t);
                  s.get(27).isCSPluginEnabled();
                  var n = e.data,
                    o = n.cursor,
                    t = void 0 === o ? "" : o,
                    o = n.totalCount,
                    n = "totalCount:".concat(o, " cost:").concat(tn(c)),
                    n = (M.l("".concat(r, " ok. cursor:").concat(t, " ").concat(n)), u.setMessage("".concat(l, " ").concat(n)).end(), s._genRes(i, a, e.data));
                  return T({
                    searchResultList: n,
                    cursor: t,
                    totalCount: o
                  });
                })["catch"](function (e) {
                  return u.setMessage(l).setError(e).end(), E(e);
                });
              }
            }, {
              key: "_genParams",
              value: function value(e, t) {
                var n = t.count,
                  o = W(t, nr);
                return n && (o.count = parseInt(n)), e === Qs ? this._genMsgParams(o) : (n = t.keywordList, t = t.keywordListMatchType, o.keywords = n, o.keywordMatchType = "and" === t ? 1 : 0, e === $s ? this._genUserParams(o) : o);
              }
            }, {
              key: "_genMsgParams",
              value: function value(e) {
                var t = e.conversationID,
                  n = e.timePosition,
                  o = e.timePeriod,
                  e = W(e, or);
                return N(t) || (Gt(t) && (e.account = t.replace(R.CONV_C2C, "")), Pt(t) && (e.groupID = t.replace(R.CONV_GROUP, ""))), A(o) && 0 < o && (A(n) && 0 < n ? e.startTime = n - o : e.startTime = xe() - o), e.startTime && e.startTime < 0 && (e.startTime = void 0), A(n) && 0 < n && (e.endTime = n), e;
              }
            }, {
              key: "_genUserParams",
              value: function value(e) {
                var t = e.miniBirthday,
                  n = e.maxBirthday,
                  e = W(e, ir);
                return A(t) && (e.miniBirthday = parseInt(t), A(n) || (e.maxBirthday = 4294967295)), A(n) && (e.maxBirthday = parseInt(n)), e;
              }
            }, {
              key: "_genRes",
              value: function value(e, t, n) {
                switch (e) {
                  case Qs:
                    return this._genMsgRes(n.searchResult, !t.conversationID);
                  case $s:
                    return this._genUserRes(n.userList);
                  case er:
                    return this._genGrpRes(n.groupList);
                  case tr:
                    return this._genMemberRes(n.groupMemberList);
                  default:
                    return [];
                }
              }
            }, {
              key: "_genMsgRes",
              value: function value(e, a) {
                var s = this.get(11);
                return O(e) && 0 !== e.length ? e.map(function (e) {
                  var t = e.groupID,
                    n = e.userID,
                    o = e.messageCount,
                    e = e.messageList,
                    e = void 0 === e ? [] : e,
                    n = t ? "".concat(R.CONV_GROUP).concat(t) : "".concat(R.CONV_C2C).concat(n),
                    i = {
                      conversationID: n,
                      messageCount: o,
                      messageList: []
                    };
                  return a && 1 < o || 0 < (o = e.filter(function (e) {
                    return !!e;
                  })).length && (e = s.onRoamingMessage(o, n, !1), t && e.reverse(), i.messageList = e, i.messageCount = e.length), i;
                }) : [];
              }
            }, {
              key: "_genUserRes",
              value: function value(e) {
                var t = this.get(4)._profileHandler;
                if (!O(e)) return [];
                for (var n = [], o = 0, i = e.length; o < i; o++) {
                  var a = e[o],
                    s = a.userID,
                    a = a.profileItems;
                  "@TLS#NOT_FOUND" !== s && "" !== s && (s = t._update(s, t._getLatestProfileFromResponse(s, a)).latestProfile, n.push(s));
                }
                return n;
              }
            }, {
              key: "_genGrpRes",
              value: function value(e) {
                if (!O(e)) return [];
                for (var t = [], n = 0, o = e.length; n < o; n++) e[n] && e[n].groupID && t.push(new qo(e[n]));
                return t;
              }
            }, {
              key: "_genMemberRes",
              value: function value(e) {
                if (!O(e)) return [];
                for (var t, n, o, i, a, s, r = new Map(), c = 0, u = e.length; c < u; c++) e[c] && e[c].userID && e[c].groupID && (n = (t = e[c]).groupID, i = t.name, a = t.type, s = t.avatar, o = t.nick, i = {
                  groupID: n,
                  name: i,
                  type: a,
                  avatar: s
                }, a = {
                  userID: t.userID,
                  nick: o,
                  nameCard: t.nameCard
                }, r.has(n) ? ((s = r.get(n)).memberList.push(a), r.set(n, s)) : r.set(n, {
                  groupInfo: i,
                  memberList: [a]
                }));
                return d(r.values());
              }
            }])),
            rr = e(function e(t) {
              var n = this;
              p(this, e);
              var o,
                i = new P("sdkConstruct"),
                a = (this._n = "ModuleManager", this._isReady = !1, this._reason = k.USER_NOT_LOGGED_IN, this._startLoginTs = 0, this._map = new Map(), this._optionalModuleMap = new Map(), this._codeMsgForTUIMap = new Map(), this._iEmitter = null, this._oEmitter = null, this._checkCount = 0, this._checkTimer = -1, this._map.set(12, new pi(this, t)), this._map.set(37, new Zs(this)), this._map.set(15, new Si(this)), this._map.set(27, new Wa(this)), this._map.set(23, new Ra(this)), this._map.set(24, new Ha(this)), this._map.set(26, new Ua(this)), this._map.set(21, new _a(this)), this._map.set(20, new ka(this)), this._map.set(1, new hi(this)), this._map.set(2, new xi(this)), this._map.set(3, new Vi(this)), this._map.set(34, new Bi(this)), this._map.set(31, new Hi(this)), this._map.set(4, new di(this)), this._map.set(6, new So(this)), this._map.set(11, new Ko(this)), this._map.set(7, new oi(this)), this._map.set(10, new si(this)), this._map.set(13, new Ci(this)), this._map.set(32, new Xa(this)), this._map.set(14, new Di(this)), this._map.set(17, new Gi(this)), this._map.set(18, new Ki(this)), this._map.set(19, new Wi(this)), this._map.set(25, new Aa(this)), this._map.set(8, new Ba(this)), this._map.set(28, new Ya(this)), this._map.set(36, new ja(this)), this._map.set(29, new Ja(this)), this._map.set(30, new za(this)), this._map.set(33, new os(this)), this._map.set(35, new rs(this)), this._map.set(38, new sr(this)), this._eventThrottleMap = new Map(), this._eventThrottling = t.eventThrottling, this._map.get(12).isPartialUpdatedConvs() && (this._eventThrottling = !1), m(t.modules) ? (Object.keys(t.modules).forEach(function (e) {
                  o = t.modules[e], "group-module" === e ? n._map.set(7, new o(n)) : "relationship-module" === e ? n._map.set(8, new o(n)) : "signaling-module" === e ? n._map.set(33, new o(n)) : "follow-module" === e ? n._map.set(35, new o(n)) : "cloud-search-module" === e && n._map.set(38, new o(n)), n._optionalModuleMap.set(e, 1);
                }), this._map.get(12).setUsingChatCore(!0)) : this._map.has(7) || this._map.get(12).setUsingChatCore(!0), t.instanceID),
                s = t.SDKAppID,
                r = this._map.get(12).isIntl(),
                c = this._map.get(12).isUsingChatCore(),
                a = "instanceID:".concat(a, " SDKAppID:").concat(s, " isIntl:").concat(r, " isUsingChatCore:").concat(c, " host:").concat(qt()) + " isIOSWebView:".concat(Ge, " platform:").concat(ye, " canIUseInflate:").concat(this.canIUseInflate()) + " workerAvailable:".concat(Ae, " eventThrottling:").concat(this._eventThrottling, " UserAgent:").concat(Me);
              P.bindEventStatModule(this._map.get(14)), P.bindNetMonitorModule(this._map.get(15)), i.setMessage("".concat(a, " ").concat(function () {
                var t = "";
                if (v) try {
                  var e = I.getSystemInfoSync(),
                    n = e.model,
                    o = e.version,
                    i = e.system,
                    a = e.platform,
                    s = e.SDKVersion,
                    t = "model:".concat(n, " version:").concat(o, " system:").concat(i, " platform:").concat(a, " SDKVersion:").concat(s);
                } catch (e) {
                  t = "";
                }
                return t;
              }())).end(), M.i("SDK ".concat(a)), L.prototype._getErrMsg = this.getErrMsg.bind(this), this._readyList = void 0, this._ssoLogForReady = null, this._initReadyList();
            }, [{
              key: "_startTimer",
              value: function value() {
                var e = this._map.get(24),
                  t = e.isWorkerEnabled();
                M.l("".concat(this._n, ".startTimer isWorkerEnabled:").concat(t, " seed:").concat(this._checkTimer)), t ? e.startWorkerTimer() : this._startMainThreadTimer();
              }
            }, {
              key: "_startMainThreadTimer",
              value: function value() {
                this._checkTimer < 0 && (this._checkTimer = setInterval(this.onCheckTimer.bind(this), 1e3)), M.l("".concat(this._n, "._startMainThreadTimer seed:").concat(this._checkTimer));
              }
            }, {
              key: "stopTimer",
              value: function value() {
                var e = this._map.get(24),
                  t = e.isWorkerEnabled();
                M.l("".concat(this._n, ".stopTimer isWorkerEnabled:").concat(t, " seed:").concat(this._checkTimer)), t ? e.stopWorkerTimer() : this._stopMainThreadTimer();
              }
            }, {
              key: "_stopMainThreadTimer",
              value: function value() {
                M.l("".concat(this._n, "._stopMainThreadTimer")), 0 < this._checkTimer && (clearInterval(this._checkTimer), this._checkTimer = -1, this._checkCount = 0);
              }
            }, {
              key: "_stopMainThreadSocket",
              value: function value() {
                M.l("".concat(this._n, "._stopMainThreadSocket"));
                var e = this._map.get(21);
                e.setIsWorkerEnabled(!0), e.reConnect();
              }
            }, {
              key: "_startMainThreadSocket",
              value: function value() {
                M.l("".concat(this._n, "._startMainThreadSocket"));
                var e = this._map.get(21);
                e.setIsWorkerEnabled(!1), e.reConnect();
              }
            }, {
              key: "onWorkerTimerEnabled",
              value: function value() {
                M.l("".concat(this._n, ".onWorkerTimerEnabled, disable main thread timer and socket")), this._stopMainThreadTimer(), this._stopMainThreadSocket();
              }
            }, {
              key: "onWorkerTimerDisabled",
              value: function value() {
                M.l("".concat(this._n, ".onWorkerTimerDisabled, enable main thread timer and socket")), this._startMainThreadTimer(), this._startMainThreadSocket();
              }
            }, {
              key: "onCheckTimer",
              value: function value() {
                this._checkCount += 1;
                var e,
                  t = F(this._map);
                try {
                  for (t.s(); !(e = t.n()).done;) {
                    var n = j(e.value, 2)[1];
                    n.onCheckTimer && n.onCheckTimer(this._checkCount);
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
              }
            }, {
              key: "_initReadyList",
              value: function value() {
                var t = this;
                this._readyList = [this._map.get(1)], this._readyList.forEach(function (e) {
                  e.ready(function () {
                    return t._onModuleReady();
                  });
                });
              }
            }, {
              key: "_onModuleReady",
              value: function value() {
                var e,
                  t,
                  n = !0;
                this._readyList.forEach(function (e) {
                  e.isReady() || (n = !1);
                }), n && !this._isReady && (this._isReady = !0, this._oEmitter.emit(h.SDK_READY), e = Date.now() - this._startLoginTs, M.w("SDK is ready. cost ".concat(e, " ms")), this._startLoginTs = Date.now(), t = this._ssoLogForReady.getStartTs() + Be, this._ssoLogForReady.setMessage(e).start(t).end());
              }
            }, {
              key: "login",
              value: function value() {
                0 === this._startLoginTs && (qe(), this._startLoginTs = Date.now(), this._startTimer(), this._map.get(15).start(), this._ssoLogForReady = new P("sdkReady"), this._reason = k.LOGGING_IN);
              }
            }, {
              key: "onLoginFailed",
              value: function value() {
                this._startLoginTs = 0;
              }
            }, {
              key: "getOEmitInst",
              value: function value() {
                return null === this._oEmitter && (this._oEmitter = new Ai(), e = this._oEmitter, Vn = e, this._oEmitter._emit = this._oEmitter.emit, this._oEmitter.emit = function (e, t) {
                  var n,
                    o,
                    i = this;
                  this._canIUseSignaling() && (e === h.MESSAGE_RECEIVED && this.get(33).onNewMessageList(t), e === h.MESSAGE_MODIFIED) && this.get(33).onMessageModified(t), e === h.CONVERSATION_LIST_UPDATED || e === h.FRIEND_LIST_UPDATED || e === h.GROUP_LIST_UPDATED || e === h.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED ? !1 !== this._eventThrottling ? this._eventThrottleMap.has(e) ? (n = Date.now()) - (o = this._eventThrottleMap.get(e)).last <= 1e3 ? (-1 < o.timeoutID && clearTimeout(o.timeoutID), o.timeoutID = setTimeout(function () {
                    o.last = Date.now(), i._oEmitter._emit.apply(i._oEmitter, [e, {
                      name: e,
                      data: i._getEventData(e)
                    }]);
                  }, 1e3)) : (o.last = n, this._oEmitter._emit.apply(this._oEmitter, [e, {
                    name: e,
                    data: this._getEventData(e)
                  }])) : (this._eventThrottleMap.set(e, {
                    last: Date.now(),
                    timeoutID: -1
                  }), this._oEmitter._emit.apply(this._oEmitter, [e, {
                    name: e,
                    data: this._getEventData(e)
                  }])) : this._oEmitter._emit.apply(this._oEmitter, [e, {
                    name: e,
                    data: this._getEventData(e)
                  }]) : this._oEmitter._emit.apply(this._oEmitter, [e, {
                    name: e,
                    data: t
                  }]);
                }.bind(this)), this._oEmitter;
                var e;
              }
            }, {
              key: "_canIUseSignaling",
              value: function value() {
                var e = this.get(33);
                return !!e && e.canIUseSignaling();
              }
            }, {
              key: "_getEventData",
              value: function value(e) {
                return e === h.CONVERSATION_LIST_UPDATED ? this._map.get(12).isPartialUpdatedConvs() ? this._map.get(11).getPartialUpdatedConvs() : this._map.get(11).getLocalConvList() : e === h.FRIEND_LIST_UPDATED ? this._map.get(8).getLocalFriendList(!1) : e === h.GROUP_LIST_UPDATED ? this._map.get(7).getLocalGroupList() : e === h.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED ? this._map.get(11).getTotalUnreadCount() : e === h.CONVERSATION_ID_LIST_UPDATED ? this._map.get(11).getUpdatedConvIDList() : void 0;
              }
            }, {
              key: "getIEmitInst",
              value: function value() {
                return null === this._iEmitter && (this._iEmitter = new Ai(), this._iEmitter._emit = this._iEmitter.emit, this._iEmitter.emit = function (e, t) {
                  e = m(t) && t.data ? [e, {
                    name: e,
                    data: t.data
                  }] : [e, {
                    name: e,
                    data: t
                  }];
                  this._iEmitter._emit.apply(this._iEmitter, e);
                }.bind(this)), this._iEmitter;
              }
            }, {
              key: "hasModule",
              value: function value(e) {
                return this._map.has(e);
              }
            }, {
              key: "get",
              value: function value(e) {
                return this._map.get(e);
              }
            }, {
              key: "canIUseModule",
              value: function value(e) {
                return !this._map.get(12).isUsingChatCore() || this._optionalModuleMap.has(e);
              }
            }, {
              key: "canIUseInflate",
              value: function value() {
                return !!this._map.get(37);
              }
            }, {
              key: "isReady",
              value: function value() {
                return this._isReady;
              }
            }, {
              key: "isIntl",
              value: function value() {
                return this.get(12).isIntl();
              }
            }, {
              key: "getNotReadyReason",
              value: function value() {
                return this._reason;
              }
            }, {
              key: "setNotReadyReason",
              value: function value(e) {
                this._reason = e;
              }
            }, {
              key: "getErrMsg",
              value: function value(e, t, n) {
                return this._map.get(32).get({
                  key: e,
                  replacement1: t,
                  replacement2: n,
                  isIntl: this.isIntl()
                });
              }
            }, {
              key: "warn",
              value: function value(e, t, n) {
                e = this.getErrMsg(e, t, n);
                e && M.w(e);
              }
            }, {
              key: "onError",
              value: function value(e) {
                var t = "code:".concat(e.code, " message:").concat(e.message);
                M.w("Oops! ".concat(t)), new P("error").setMessage(t).setLevel("error").end(), this.getOEmitInst().emit(h.ERROR, e);
              }
            }, {
              key: "restartTimer",
              value: function value() {
                M.l("".concat(this._n, ".restartTimer")), this.stopTimer(), this._startTimer();
                var e = this.get(7);
                e && e.restartPolling();
              }
            }, {
              key: "getTimerID",
              value: function value() {
                var e = this._map.get(24);
                return e.isWorkerEnabled() ? e.getTimerID() : this._checkTimer;
              }
            }, {
              key: "getPollingTimerID",
              value: function value(e) {
                return this._map.get(7).getPollingTimerID(e);
              }
            }, {
              key: "statTUIKeyFeatures",
              value: function value(e) {
                var t = e.code,
                  e = e.msg,
                  e = void 0 === e ? "" : e,
                  n = t + e;
                this._codeMsgForTUIMap.has(n) || (this._codeMsgForTUIMap.set(n, 1), n = this.get(12).getUIPlatform(), new P("tui_key_features").setCode(t).setMessage(e).setUIPlatform(n).end());
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), qe();
                var e,
                  t = F(this._map);
                try {
                  for (t.s(); !(e = t.n()).done;) {
                    var n = j(e.value, 2)[1];
                    n.reset && n.reset();
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
                this._startLoginTs = 0, this._initReadyList(), this._isReady = !1, this.stopTimer(), this._oEmitter.emit(h.SDK_NOT_READY);
                var o,
                  i = F(this._eventThrottleMap);
                try {
                  for (i.s(); !(o = i.n()).done;) {
                    var a = j(o.value, 2)[1];
                    -1 < a.timeoutID && clearTimeout(a.timeoutID);
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                this._eventThrottleMap.clear(), this._codeMsgForTUIMap.clear();
              }
            }]),
            cr = e(function e(t) {
              p(this, e), this._funcMap = new Map(), this._m = t, this._n = "SafetyCallback", this._reportCount = 0;
            }, [{
              key: "defense",
              value: function value(e, t) {
                var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : void 0;
                if ("string" != typeof e) return null;
                if (0 === e.length) return null;
                if ("function" != typeof t) return null;
                if (this._funcMap.has(e) && this._funcMap.get(e).has(t)) return this._funcMap.get(e).get(t);
                this._funcMap.has(e) || this._funcMap.set(e, new Map());
                var o = null;
                return this._funcMap.get(e).has(t) ? o = this._funcMap.get(e).get(t) : (o = this._pack(e, t, n), this._funcMap.get(e).set(t, o)), o;
              }
            }, {
              key: "defenseOnce",
              value: function value(e, t) {
                return "function" != typeof t ? null : this._pack(e, t, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : void 0);
              }
            }, {
              key: "find",
              value: function value(e, t) {
                return "string" != typeof e || 0 === e.length || "function" != typeof t ? null : this._funcMap.has(e) && this._funcMap.get(e).has(t) ? this._funcMap.get(e).get(t) : (this._m.warn("ListenerFnNotFound", e), null);
              }
            }, {
              key: "delete",
              value: function value(e, t) {
                return "function" == typeof t && !!this._funcMap.has(e) && !!this._funcMap.get(e).has(t) && (this._funcMap.get(e)["delete"](t), 0 === this._funcMap.get(e).size && this._funcMap["delete"](e), !0);
              }
            }, {
              key: "_pack",
              value: function value(o, e, i) {
                var a = this;
                return function () {
                  try {
                    e.apply(i, Array.from(arguments));
                  } catch (e) {
                    var t = Object.values(h).indexOf(o),
                      n = "CallbackError";
                    -1 !== t && (t = Object.keys(h)[t], a._m.warn(n, t, e)), a._reportCount < 5 && (new P(n).setMessage("eventName:".concat(o)).setMoreMessage(e.message).end(), a._reportCount += 1);
                  }
                };
              }
            }, {
              key: "destroy",
              value: function value() {
                this._funcMap.clear();
              }
            }, {
              key: "reset",
              value: function value() {
                M.l("".concat(this._n, ".reset")), this._reportCount = 0;
              }
            }]),
            ur = e(function e(t) {
              p(this, e);
              t = {
                SDKAppID: t.SDKAppID,
                unlimitedAVChatRoom: t.unlimitedAVChatRoom || !1,
                scene: t.scene || "",
                oversea: t.oversea || !1,
                instanceID: Ft(),
                devMode: t.devMode || !1,
                testEnv: t.testEnv || !1,
                proxyServer: t.proxyServer || void 0,
                fileUploadProxy: t.fileUploadProxy || void 0,
                fileDownloadProxy: t.fileDownloadProxy || t.fileUploadProxy || void 0,
                eventThrottling: !1 !== t.eventThrottling,
                partialUpdatedConversations: !0 === t.partialUpdatedConversations,
                disableIndependentDomain: !0 === t.disableIndependentDomain,
                modules: t.modules || void 0
              };
              this._m = new rr(t), this._safetyCallbackFactory = new cr(this._m);
            }, [{
              key: "onError",
              value: function value(e) {
                this._m.onError(e);
              }
            }, {
              key: "login",
              value: function value(e) {
                return this._m.login(), this._get(1).login(e);
              }
            }, {
              key: "logout",
              value: function value() {
                var t = this;
                return this._get(1).logout().then(function (e) {
                  return t._safetyCallbackFactory.reset(), t._m.reset(), e;
                });
              }
            }, {
              key: "getLoginUser",
              value: function value() {
                return this._get(1).getLoginUser();
              }
            }, {
              key: "getServerTime",
              value: function value() {
                return He();
              }
            }, {
              key: "isReady",
              value: function value() {
                return this._m.isReady();
              }
            }, {
              key: "isIntl",
              value: function value() {
                return this._m.isIntl();
              }
            }, {
              key: "getNotReadyReason",
              value: function value() {
                return this._m.getNotReadyReason();
              }
            }, {
              key: "getErrMsg",
              value: function value(e, t, n) {
                return this._m.getErrMsg(e, t, n);
              }
            }, {
              key: "_get",
              value: function value(e) {
                return this._m.get(e);
              }
            }, {
              key: "destroy",
              value: function value() {
                var e = this,
                  t = this._get(12),
                  n = t.getSDKAppID();
                return M.w("destroy ".concat(n, " ").concat(t.getInstanceID())), this.logout()["finally"](function () {
                  e._safetyCallbackFactory.destroy(), e._m.stopTimer(), e._get(24).terminate(), e._get(21).dealloc(), e._m.getOEmitInst().emit(h.SDK_DESTROY, {
                    SDKAppID: n
                  });
                });
              }
            }, {
              key: "on",
              value: function value(e, t, n) {
                M.d("on", "eventName:".concat(e)), this._m.getOEmitInst().on(e, this._safetyCallbackFactory.defense(e, t, n), n);
              }
            }, {
              key: "once",
              value: function value(e, t, n) {
                M.d("once", "eventName:".concat(e)), this._m.getOEmitInst().once(e, this._safetyCallbackFactory.defenseOnce(e, t, n), n || this);
              }
            }, {
              key: "off",
              value: function value(e, t, n, o) {
                M.d("off", "eventName:".concat(e));
                var i = this._safetyCallbackFactory.find(e, t);
                null !== i && (this._m.getOEmitInst().off(e, i, n, o), this._safetyCallbackFactory["delete"](e, t));
              }
            }, {
              key: "registerPlugin",
              value: function value(e) {
                (N(e["tim-push"]) ? N(e["tim-offline-push-plugin"]) ? this._get(18) : this._get(28) : this._get(36)).registerPlugin(e);
              }
            }, {
              key: "setLogLevel",
              value: function value(e) {
                var t;
                e <= 0 && ((t = this.getErrMsg("TIM_ASCII_ART")) && console.log(t), (t = this.getErrMsg("API_REFER")) && (Zt() ? console.log("%c ".concat("IM SDK API ->", " %c"), "background:#ff9d00; padding:1px; border-radius:3px; color: #fff", "background:transparent", t) : console.log("IM SDK API ->", t)), (t = this.getErrMsg("DOCS_GUIDE")) && console.log(t), t = this.getErrMsg("IOS_WEBVIEW_WARNING"), Ge) && t && console.warn(t), M.setLevel(e);
              }
            }, {
              key: "createTextMessage",
              value: function value(e) {
                return this._get(2).createTextMessage(e);
              }
            }, {
              key: "createTextAtMessage",
              value: function value(e) {
                return this._get(2).createTextMessage(e);
              }
            }, {
              key: "createImageMessage",
              value: function value(e) {
                return this._get(2).createImageMessage(e);
              }
            }, {
              key: "createAudioMessage",
              value: function value(e) {
                return this._get(2).createAudioMessage(e);
              }
            }, {
              key: "createVideoMessage",
              value: function value(e) {
                return this._get(2).createVideoMessage(e);
              }
            }, {
              key: "createCustomMessage",
              value: function value(e) {
                return this._get(2).createCustomMessage(e);
              }
            }, {
              key: "createFaceMessage",
              value: function value(e) {
                return this._get(2).createFaceMessage(e);
              }
            }, {
              key: "createFileMessage",
              value: function value(e) {
                return this._get(2).createFileMessage(e);
              }
            }, {
              key: "createLocationMessage",
              value: function value(e) {
                return this._get(2).createLocationMessage(e);
              }
            }, {
              key: "createMergerMessage",
              value: function value(e) {
                return this._get(2).createMergerMessage(e);
              }
            }, {
              key: "downloadMergerMessage",
              value: function value(e) {
                return e.type !== R.MSG_MERGER ? E({
                  code: k.MSG_MERGER_TYPE_INVALID
                }) : S(e.payload.downloadKey) ? E({
                  code: k.MSG_MERGER_KEY_INVALID
                }) : this._get(2).downloadMergerMessage(e)["catch"](function (e) {
                  return E({
                    code: k.MSG_MERGER_DOWNLOAD_FAIL
                  });
                });
              }
            }, {
              key: "createForwardMessage",
              value: function value(e) {
                return this._get(2).createForwardMessage(e);
              }
            }, {
              key: "sendMessage",
              value: function value(e, t) {
                return e instanceof Do ? this._get(2).sendMessageInstance(e, t) : E({
                  code: k.MSG_INSTANCE_REQUIRED
                });
              }
            }, {
              key: "callExperimentalAPI",
              value: function value(e, t) {
                return "sendComboMessage" === e ? this._get(31).sendMessage(t) : "handleGroupInvitation" === e ? this._get(7).handleGroupInvitation(t) : "isCommercialAbilityEnabled" === e ? this._get(27).isFeatureEnabled(t) : "isFeatureEnabledForStat" === e ? this._get(27).isFeatureEnabledForStat(t) : "isIntl" === e ? this.isIntl() : "sendTRTCCustomData" === e || "sendRoomCustomData" === e ? this._get(30).sendTRTCCustomData(t) : "getTimerID" === e ? this._m.getTimerID() : "getPollingTimerID" === e ? this._m.getPollingTimerID(t) : "setApplicationID" === e ? (this._get(12).setApplicationID(t), void this._get(20).updateProtocolConfig()) : "getServerConfig" === e ? this._get(23).getServerConfig(t) : "canIUseModule" === e ? this._m.canIUseModule(t) : "startMessageLongPolling" === e ? this._get(7).startMessageLongPolling(t) : "stopMessageLongPolling" === e ? this._get(7).stopMessageLongPolling(t) : "disableMessagePullOnInvite" === e ? this._get(11).disableMsgPullOnInvite(t) : "clearLocalMessage" === e ? this._get(11).clearMemMsg(t, !1) : "setCustomLoginInfo" === e ? this._get(12).setCustomLoginInfo(t) : "statTUIKeyFeatures" === e ? this._m.statTUIKeyFeatures(t) : "getGroupReceiptsByUsers" === e ? this._get(7).getGroupReceiptsByUsers(t) : E({
                  code: k.INVALID_OPERATION
                });
              }
            }, {
              key: "revokeMessage",
              value: function value(e) {
                return this._get(2).revokeMessage(e);
              }
            }, {
              key: "resendMessage",
              value: function value(e, t) {
                return e instanceof Do ? this._get(2).resendMessage(e, t) : E({
                  code: k.MSG_INSTANCE_REQUIRED
                });
              }
            }, {
              key: "deleteMessage",
              value: function value(e) {
                return this._get(2).deleteMessage(e);
              }
            }, {
              key: "translateText",
              value: function value(e) {
                return this._get(2).translateText(e);
              }
            }, {
              key: "convertVoiceToText",
              value: function value(e) {
                return this._get(2).convertVoiceToText(e);
              }
            }, {
              key: "setMessageExtensions",
              value: function value(e, t) {
                return this._get(3).setMessageExtensions(e, t);
              }
            }, {
              key: "getMessageExtensions",
              value: function value(e) {
                return this._get(3).getMessageExtensions(e);
              }
            }, {
              key: "deleteMessageExtensions",
              value: function value(e, t) {
                return this._get(3).deleteMessageExtensions(e, t);
              }
            }, {
              key: "addMessageReaction",
              value: function value(e, t) {
                return this._get(34).addMessageReaction(e, t);
              }
            }, {
              key: "removeMessageReaction",
              value: function value(e, t) {
                return this._get(34).removeMessageReaction(e, t);
              }
            }, {
              key: "getMessageReactions",
              value: function value(e) {
                return this._get(34).getMessageReactions(e);
              }
            }, {
              key: "getAllUserListOfMessageReaction",
              value: function value(e) {
                return this._get(34).getAllUserListOfMessageReaction(e);
              }
            }, {
              key: "modifyMessage",
              value: function value(e) {
                return this._get(2).modifyRemoteMessage(e);
              }
            }, {
              key: "getMessageList",
              value: function value(e) {
                return this._get(11).getMessageList(e);
              }
            }, {
              key: "getMessageListHopping",
              value: function value(e) {
                return this._get(11).getMessageListHopping(e);
              }
            }, {
              key: "sendMessageReadReceipt",
              value: function value(e) {
                return this._get(11).sendReadReceipt(e);
              }
            }, {
              key: "getMessageReadReceiptList",
              value: function value(e) {
                return this._get(11).getReadReceiptList(e);
              }
            }, {
              key: "getGroupMessageReadMemberList",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getReadReceiptDetail(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "findMessage",
              value: function value(e) {
                return this._get(11).findMessage(e);
              }
            }, {
              key: "setMessageRead",
              value: function value(e) {
                return this._get(11).setMessageRead(e);
              }
            }, {
              key: "getConversationList",
              value: function value(e) {
                return this._get(11).getConvList(e);
              }
            }, {
              key: "getConversationProfile",
              value: function value(e) {
                return this._get(11).getConversationProfile(e);
              }
            }, {
              key: "deleteConversation",
              value: function value(e) {
                return this._get(11).deleteConversation(e);
              }
            }, {
              key: "setConversationDraft",
              value: function value(e) {
                return this._get(11).setConvDraft(e);
              }
            }, {
              key: "clearHistoryMessage",
              value: function value(e) {
                return this._get(11).clearHistoryMessage(e);
              }
            }, {
              key: "pinConversation",
              value: function value(e) {
                return this._get(11).pinConversation(e);
              }
            }, {
              key: "setAllMessageRead",
              value: function value(e) {
                return this._get(11).setAllMessageRead(e);
              }
            }, {
              key: "setMessageRemindType",
              value: function value(e) {
                return this._get(11).setMessageRemindType(e);
              }
            }, {
              key: "setAllReceiveMessageOpt",
              value: function value(e) {
                return this._get(11).setAllRcvMsgOpt(e);
              }
            }, {
              key: "getAllReceiveMessageOpt",
              value: function value() {
                return this._get(11).getAllRcvMsgOpt();
              }
            }, {
              key: "getTotalUnreadMessageCount",
              value: function value() {
                return this._get(11).getTotalUnreadCount();
              }
            }, {
              key: "setConversationCustomData",
              value: function value(e) {
                return this._get(11).setConvCustomData(e);
              }
            }, {
              key: "markConversation",
              value: function value(e) {
                return this._get(11).markConv(e);
              }
            }, {
              key: "getConversationGroupList",
              value: function value() {
                return this._get(11).getConvGroupList();
              }
            }, {
              key: "createConversationGroup",
              value: function value(e) {
                return this._get(11).createConvGroup(e);
              }
            }, {
              key: "deleteConversationGroup",
              value: function value(e) {
                return this._get(11).deleteConvGroup(e);
              }
            }, {
              key: "renameConversationGroup",
              value: function value(e) {
                return this._get(11).renameConvGroup(e);
              }
            }, {
              key: "addConversationsToGroup",
              value: function value(e) {
                return this._get(11).addConvsToGroup(e);
              }
            }, {
              key: "deleteConversationsFromGroup",
              value: function value(e) {
                return this._get(11).deleteConvsFromGroup(e);
              }
            }, {
              key: "searchCloudMessages",
              value: function value(e) {
                var t = this._get(38);
                return t ? t.searchCloudMessages(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "searchCloudUsers",
              value: function value(e) {
                var t = this._get(38);
                return t ? t.searchCloudUsers(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "searchCloudGroups",
              value: function value(e) {
                var t = this._get(38);
                return t ? t.searchCloudGroups(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "searchCloudGroupMembers",
              value: function value(e) {
                var t = this._get(38);
                return t ? t.searchCloudGroupMembers(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getMyProfile",
              value: function value() {
                return this._get(4).getMyProfile();
              }
            }, {
              key: "getUserProfile",
              value: function value(e) {
                return this._get(4).getUserProfile(e);
              }
            }, {
              key: "updateMyProfile",
              value: function value(e) {
                return this._get(4).updateMyProfile(e);
              }
            }, {
              key: "getBlacklist",
              value: function value() {
                return this._get(4).getLocalBlacklist();
              }
            }, {
              key: "addToBlacklist",
              value: function value(e) {
                return this._get(4).addBlacklist(e);
              }
            }, {
              key: "removeFromBlacklist",
              value: function value(e) {
                return this._get(4).deleteBlacklist(e);
              }
            }, {
              key: "setSelfStatus",
              value: function value(e) {
                return this._get(4).setSelfStatus(e);
              }
            }, {
              key: "getUserStatus",
              value: function value(e) {
                return this._get(4).getUserStatus(e);
              }
            }, {
              key: "subscribeUserStatus",
              value: function value(e) {
                return this._get(4).subscribeUserStatus(e);
              }
            }, {
              key: "unsubscribeUserStatus",
              value: function value(e) {
                return this._get(4).unsubscribeUserStatus(e);
              }
            }, {
              key: "getFriendList",
              value: function value() {
                var e = this._get(8);
                return e ? e.getLocalFriendList() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "addFriend",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.addFriend(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "deleteFriend",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.deleteFriend(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "checkFriend",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.checkFriend(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getFriendProfile",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.getFriendProfile(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "updateFriend",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.updateFriend(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getFriendApplicationList",
              value: function value() {
                var e = this._get(8);
                return e ? e.getLocalFriendApplicationList() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "acceptFriendApplication",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.acceptFriendApplication(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "refuseFriendApplication",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.refuseFriendApplication(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "deleteFriendApplication",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.deleteFriendApplication(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setFriendApplicationRead",
              value: function value() {
                var e = this._get(8);
                return e ? e.setFriendApplicationRead() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getFriendGroupList",
              value: function value() {
                var e = this._get(8);
                return e ? e.getLocalFriendGroupList() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "createFriendGroup",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.createFriendGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "deleteFriendGroup",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.deleteFriendGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "addToFriendGroup",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.addToFriendGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "removeFromFriendGroup",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.removeFromFriendGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "renameFriendGroup",
              value: function value(e) {
                var t = this._get(8);
                return t ? t.renameFriendGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "followUser",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.followUser(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "unfollowUser",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.unfollowUser(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getMyFollowersList",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.getMyFollowersList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getMyFollowingList",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.getMyFollowingList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getMutualFollowersList",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.getMutualFollowersList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getUserFollowInfo",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.getUserFollowInfo(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "checkFollowType",
              value: function value(e) {
                var t = this._get(35);
                return t ? t.checkFollowType(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupList",
              value: function value() {
                var e = this._get(7);
                return e ? e.getGroupList() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupProfile",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupProfile(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "createGroup",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.createGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "dismissGroup",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.dismissGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "updateGroupProfile",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.updateGroupProfile(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "joinGroup",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.joinGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "quitGroup",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.quitGroup(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "searchGroupByID",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.searchGroupByID(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupOnlineMemberCount",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupOnlineMemberCount(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "changeGroupOwner",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.changeGroupOwner(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupApplicationList",
              value: function value() {
                var e = this._get(7);
                return e ? e.getGroupApplicationList() : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "handleGroupApplication",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.handleGroupApplication(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "initGroupAttributes",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.initGroupAttributes(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupAttributes",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupAttributes(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "deleteGroupAttributes",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.deleteGroupAttributes(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupAttributes",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupAttributes(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupCounters",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupCounters(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "increaseGroupCounter",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.increaseGroupCounter(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "decreaseGroupCounter",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.decreaseGroupCounter(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupCounters",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupCounters(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupMemberList",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupMemberList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getGroupMemberProfile",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.getGroupMemberProfile(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "addGroupMember",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.addGroupMember(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "deleteGroupMember",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.deleteGroupMember(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupMemberMuteTime",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupMemberMuteTime(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupMemberRole",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupMemberRole(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupMemberNameCard",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupMemberNameCard(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "setGroupMemberCustomField",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.setGroupMemberCustomField(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "markGroupMemberList",
              value: function value(e) {
                var t = this._get(7);
                return t ? t.markGroupMemberList(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getJoinedCommunityList",
              value: function value() {
                return this._get(10).getJoinedCommunityList();
              }
            }, {
              key: "createTopicInCommunity",
              value: function value(e) {
                return this._get(10).createTopicInCommunity(e);
              }
            }, {
              key: "deleteTopicFromCommunity",
              value: function value(e) {
                return this._get(10).deleteTopicFromCommunity(e);
              }
            }, {
              key: "updateTopicProfile",
              value: function value(e) {
                return this._get(10).updateTopicProfile(e);
              }
            }, {
              key: "getTopicList",
              value: function value(e) {
                return this._get(10).getTopicList(e);
              }
            }, {
              key: "addSignalingListener",
              value: function value(e, t, n) {
                var o = this._get(33);
                o && o.addSignalingListener(e, this._safetyCallbackFactory.defense(e, t, n), n);
              }
            }, {
              key: "removeSignalingListener",
              value: function value(e, t, n) {
                var o,
                  i = this._safetyCallbackFactory.find(e, t);
                null !== i && (o = this._get(33)) && (o.removeSignalingListener(e, i, n), this._safetyCallbackFactory["delete"](e, t));
              }
            }, {
              key: "invite",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.invite(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "inviteSync",
              value: function value(e, t, n) {
                var o = this._get(33);
                return o ? o.inviteSync(e, t, n) : "";
              }
            }, {
              key: "inviteInGroup",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.invite(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "inviteInGroupSync",
              value: function value(e, t, n) {
                var o = this._get(33);
                return o ? o.inviteSync(e, t, n) : "";
              }
            }, {
              key: "cancel",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.cancel(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "accept",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.accept(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "reject",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.reject(e) : E({
                  code: k.NO_MODULE
                });
              }
            }, {
              key: "getSignalingInfo",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.getSignalingInfo(e) : null;
              }
            }, {
              key: "modifyInvitation",
              value: function value(e) {
                var t = this._get(33);
                return t ? t.modifyInvitation(e) : E({
                  code: k.NO_MODULE
                });
              }
            }]),
            lr = {
              login: 1,
              logout: 1,
              getLoginUser: 1,
              destroy: 1,
              on: 1,
              off: 1,
              ready: 1,
              setLogLevel: 1,
              joinGroup: 1,
              quitGroup: 1,
              registerPlugin: 1,
              getGroupOnlineMemberCount: 1,
              isReady: 1,
              addSignalingListener: 1,
              removeSignalingListener: 1,
              callExperimentalAPI: 1
            };
          function dr(e) {
            return p(this, dr), (e = i(this, dr, [e]))._n = "CSModule", e;
          }
          var pr = {},
            Fn = {};
          return Fn.create = function (e) {
            var t = "TencentCloudChat.create",
              n = 0,
              o = e.SDKAppID;
            if (A(o)) n = o;else if (n = parseInt(o), isNaN(o)) return M.e("".concat(t, " failed. Failed to parse the SDKAppID, please check the arguments")), null;
            if (n && pr[n]) return pr[n];
            M.l("".concat(t));
            var s,
              i,
              o = new ur(y(y({}, e), {}, {
                SDKAppID: n
              })),
              e = (o.on(h.SDK_DESTROY, function (e) {
                pr[e.data.SDKAppID] = null, delete pr[e.data.SDKAppID];
              }), s = o, i = Object.create(null), Object.keys(xn).forEach(function (a) {
                var t;
                s[a] && (t = new Q(), i[a] = function () {
                  var e = Array.from(arguments);
                  return t.use(function (e, t) {
                    i = a;
                    var n,
                      o,
                      i = !(!(n = s).isReady() && 1 !== lr[i]) || (o = {
                        code: o = n.getNotReadyReason(),
                        message: "".concat(n.getErrMsg(o), " | ").concat(i, " | ").concat(n.getErrMsg(k.SDK_IS_NOT_READY))
                      }, n.onError(o), o);
                    return !0 === i ? t() : E(i);
                  }).use(function (e, t) {
                    if (!0 === function (n, o, i) {
                      if (void 0 === o) return !0;
                      var a = !0;
                      if (m(o)) Object.keys(o).forEach(function (e) {
                        var t = 1 === n.length ? n[0][e] : void 0;
                        a = !!on(t, o[e], i, e) && a;
                      });else if (O(o)) for (var e = 0; e < o.length; e++) a = !!on(n[e], o[e], i, o[e].name) && a;
                      if (a) return a;
                      throw new Error("Params validate failed.");
                    }(e, qn[a], a)) return t();
                  }).use(function (e, t) {
                    return s[a].apply(s, e);
                  }), t.run(e);
                });
              }), i);
            return pr[n] = e, qn.hookGetAPITips(o.getErrMsg.bind(o)), M.l("".concat(t, " ok")), e;
          }, Fn.TYPES = R, Fn.EVENT = h, Fn.TSignaling = _, Fn.VERSION = "3.5.3", M.l("TencentCloudChat.VERSION:".concat(Fn.VERSION)), Fn;
        }); // #endregion ORIGINAL CODE
        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=.js", ['./index.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;
  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }
      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/rollupPluginModLoBabelHelpers.js", [], function (exports) {
  return {
    execute: function () {
      exports({
        applyDecoratedDescriptor: _applyDecoratedDescriptor,
        arrayLikeToArray: _arrayLikeToArray,
        assertThisInitialized: _assertThisInitialized,
        asyncToGenerator: _asyncToGenerator,
        createClass: _createClass,
        createForOfIteratorHelperLoose: _createForOfIteratorHelperLoose,
        extends: _extends,
        inheritsLoose: _inheritsLoose,
        initializerDefineProperty: _initializerDefineProperty,
        regeneratorRuntime: _regeneratorRuntime,
        setPrototypeOf: _setPrototypeOf,
        toPrimitive: _toPrimitive,
        toPropertyKey: _toPropertyKey,
        unsupportedIterableToArray: _unsupportedIterableToArray
      });
      function _regeneratorRuntime() {
        /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
        _regeneratorRuntime = exports('regeneratorRuntime', function () {
          return e;
        });
        var t,
          e = {},
          r = Object.prototype,
          n = r.hasOwnProperty,
          o = Object.defineProperty || function (t, e, r) {
            t[e] = r.value;
          },
          i = "function" == typeof Symbol ? Symbol : {},
          a = i.iterator || "@@iterator",
          c = i.asyncIterator || "@@asyncIterator",
          u = i.toStringTag || "@@toStringTag";
        function define(t, e, r) {
          return Object.defineProperty(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }), t[e];
        }
        try {
          define({}, "");
        } catch (t) {
          define = function (t, e, r) {
            return t[e] = r;
          };
        }
        function wrap(t, e, r, n) {
          var i = e && e.prototype instanceof Generator ? e : Generator,
            a = Object.create(i.prototype),
            c = new Context(n || []);
          return o(a, "_invoke", {
            value: makeInvokeMethod(t, r, c)
          }), a;
        }
        function tryCatch(t, e, r) {
          try {
            return {
              type: "normal",
              arg: t.call(e, r)
            };
          } catch (t) {
            return {
              type: "throw",
              arg: t
            };
          }
        }
        e.wrap = wrap;
        var h = "suspendedStart",
          l = "suspendedYield",
          f = "executing",
          s = "completed",
          y = {};
        function Generator() {}
        function GeneratorFunction() {}
        function GeneratorFunctionPrototype() {}
        var p = {};
        define(p, a, function () {
          return this;
        });
        var d = Object.getPrototypeOf,
          v = d && d(d(values([])));
        v && v !== r && n.call(v, a) && (p = v);
        var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
        function defineIteratorMethods(t) {
          ["next", "throw", "return"].forEach(function (e) {
            define(t, e, function (t) {
              return this._invoke(e, t);
            });
          });
        }
        function AsyncIterator(t, e) {
          function invoke(r, o, i, a) {
            var c = tryCatch(t[r], t, o);
            if ("throw" !== c.type) {
              var u = c.arg,
                h = u.value;
              return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
                invoke("next", t, i, a);
              }, function (t) {
                invoke("throw", t, i, a);
              }) : e.resolve(h).then(function (t) {
                u.value = t, i(u);
              }, function (t) {
                return invoke("throw", t, i, a);
              });
            }
            a(c.arg);
          }
          var r;
          o(this, "_invoke", {
            value: function (t, n) {
              function callInvokeWithMethodAndArg() {
                return new e(function (e, r) {
                  invoke(t, n, e, r);
                });
              }
              return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(e, r, n) {
          var o = h;
          return function (i, a) {
            if (o === f) throw new Error("Generator is already running");
            if (o === s) {
              if ("throw" === i) throw a;
              return {
                value: t,
                done: !0
              };
            }
            for (n.method = i, n.arg = a;;) {
              var c = n.delegate;
              if (c) {
                var u = maybeInvokeDelegate(c, n);
                if (u) {
                  if (u === y) continue;
                  return u;
                }
              }
              if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
                if (o === h) throw o = s, n.arg;
                n.dispatchException(n.arg);
              } else "return" === n.method && n.abrupt("return", n.arg);
              o = f;
              var p = tryCatch(e, r, n);
              if ("normal" === p.type) {
                if (o = n.done ? s : l, p.arg === y) continue;
                return {
                  value: p.arg,
                  done: n.done
                };
              }
              "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
            }
          };
        }
        function maybeInvokeDelegate(e, r) {
          var n = r.method,
            o = e.iterator[n];
          if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
          var i = tryCatch(o, e.iterator, r.arg);
          if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
          var a = i.arg;
          return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
        }
        function pushTryEntry(t) {
          var e = {
            tryLoc: t[0]
          };
          1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
        }
        function resetTryEntry(t) {
          var e = t.completion || {};
          e.type = "normal", delete e.arg, t.completion = e;
        }
        function Context(t) {
          this.tryEntries = [{
            tryLoc: "root"
          }], t.forEach(pushTryEntry, this), this.reset(!0);
        }
        function values(e) {
          if (e || "" === e) {
            var r = e[a];
            if (r) return r.call(e);
            if ("function" == typeof e.next) return e;
            if (!isNaN(e.length)) {
              var o = -1,
                i = function next() {
                  for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                  return next.value = t, next.done = !0, next;
                };
              return i.next = i;
            }
          }
          throw new TypeError(typeof e + " is not iterable");
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: !0
        }), o(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: !0
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
          var e = "function" == typeof t && t.constructor;
          return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
        }, e.mark = function (t) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
        }, e.awrap = function (t) {
          return {
            __await: t
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
          return this;
        }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
          void 0 === i && (i = Promise);
          var a = new AsyncIterator(wrap(t, r, n, o), i);
          return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
            return t.done ? t.value : a.next();
          });
        }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
          return this;
        }), define(g, "toString", function () {
          return "[object Generator]";
        }), e.keys = function (t) {
          var e = Object(t),
            r = [];
          for (var n in e) r.push(n);
          return r.reverse(), function next() {
            for (; r.length;) {
              var t = r.pop();
              if (t in e) return next.value = t, next.done = !1, next;
            }
            return next.done = !0, next;
          };
        }, e.values = values, Context.prototype = {
          constructor: Context,
          reset: function (e) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
          },
          stop: function () {
            this.done = !0;
            var t = this.tryEntries[0].completion;
            if ("throw" === t.type) throw t.arg;
            return this.rval;
          },
          dispatchException: function (e) {
            if (this.done) throw e;
            var r = this;
            function handle(n, o) {
              return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
            }
            for (var o = this.tryEntries.length - 1; o >= 0; --o) {
              var i = this.tryEntries[o],
                a = i.completion;
              if ("root" === i.tryLoc) return handle("end");
              if (i.tryLoc <= this.prev) {
                var c = n.call(i, "catchLoc"),
                  u = n.call(i, "finallyLoc");
                if (c && u) {
                  if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                  if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                } else if (c) {
                  if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                } else {
                  if (!u) throw new Error("try statement without catch or finally");
                  if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                }
              }
            }
          },
          abrupt: function (t, e) {
            for (var r = this.tryEntries.length - 1; r >= 0; --r) {
              var o = this.tryEntries[r];
              if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                var i = o;
                break;
              }
            }
            i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
            var a = i ? i.completion : {};
            return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
          },
          complete: function (t, e) {
            if ("throw" === t.type) throw t.arg;
            return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
          },
          finish: function (t) {
            for (var e = this.tryEntries.length - 1; e >= 0; --e) {
              var r = this.tryEntries[e];
              if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
            }
          },
          catch: function (t) {
            for (var e = this.tryEntries.length - 1; e >= 0; --e) {
              var r = this.tryEntries[e];
              if (r.tryLoc === t) {
                var n = r.completion;
                if ("throw" === n.type) {
                  var o = n.arg;
                  resetTryEntry(r);
                }
                return o;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function (e, r, n) {
            return this.delegate = {
              iterator: values(e),
              resultName: r,
              nextLoc: n
            }, "next" === this.method && (this.arg = t), y;
          }
        }, e;
      }
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function () {
          var self = this,
            args = arguments;
          return new Promise(function (resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
          });
        };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }
      function _extends() {
        _extends = exports('extends', Object.assign ? Object.assign.bind() : function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        });
        return _extends.apply(this, arguments);
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = exports('setPrototypeOf', Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        });
        return _setPrototypeOf(o, p);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (it) return (it = it.call(o)).next.bind(it);
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          return function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }
      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }
        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);
        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }
        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }
        return desc;
      }
    }
  };
});

} }; });